// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:39
type yySymType struct {
	yys                          int
	compstmt                     ast.Stmt
	stmts                        ast.Stmt
	stmt_var_or_lets             ast.Stmt
	stmt_var                     ast.Stmt
	stmt_lets                    ast.Stmt
	stmt_if                      ast.Stmt
	stmt_for                     ast.Stmt
	stmt_switch                  ast.Stmt
	stmt_switch_cases            ast.Stmt
	stmt_switch_case             ast.Stmt
	stmt_switch_default          ast.Stmt
	stmt_select                  ast.Stmt
	stmt_select_cases            ast.Stmt
	stmt_select_case             ast.Stmt
	stmt_select_default          ast.Stmt
	stmt                         ast.Stmt
	expr                         ast.Expr
	exprs                        []ast.Expr
	expr_idents                  []string
	func_expr_idents             []*ast.ParamExpr
	opt_func_return_expr_idents  []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1 []*ast.FuncReturnValuesExpr
	expr_map                     *ast.MapExpr
	type_data                    *ast.TypeStruct
	type_data_struct             *ast.TypeStruct
	slice_count                  int
	tok                          ast.Token
	expr_slice                   ast.Expr
	expr_ident                   ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const UNARY = 57403

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"'='",
	"'?'",
	"':'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"'!'",
	"'^'",
	"'&'",
	"'.'",
	"'['",
	"']'",
	"'|'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1103

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	61, 80,
	64, 80,
	77, 5,
	-2, 1,
	-1, 23,
	64, 81,
	-2, 28,
	-1, 27,
	61, 80,
	-2, 66,
	-1, 59,
	61, 80,
	64, 80,
	-2, 5,
	-1, 112,
	16, 67,
	64, 67,
	-2, 179,
	-1, 119,
	1, 89,
	8, 89,
	47, 89,
	48, 89,
	61, 89,
	63, 89,
	64, 89,
	73, 89,
	74, 89,
	76, 89,
	77, 89,
	83, 89,
	85, 89,
	-2, 84,
	-1, 121,
	1, 91,
	8, 91,
	47, 91,
	48, 91,
	61, 91,
	63, 91,
	64, 91,
	73, 91,
	74, 91,
	76, 91,
	77, 91,
	83, 91,
	85, 91,
	-2, 84,
	-1, 125,
	4, 168,
	51, 168,
	58, 168,
	59, 168,
	-2, 104,
	-1, 173,
	17, 0,
	18, 0,
	-2, 116,
	-1, 174,
	17, 0,
	18, 0,
	-2, 117,
	-1, 230,
	76, 159,
	81, 159,
	-2, 179,
	-1, 273,
	63, 5,
	-2, 80,
	-1, 284,
	74, 193,
	83, 193,
	-2, 185,
	-1, 305,
	74, 193,
	-2, 185,
	-1, 312,
	1, 83,
	8, 83,
	47, 83,
	48, 83,
	61, 83,
	63, 83,
	64, 83,
	74, 83,
	76, 83,
	77, 83,
	83, 83,
	85, 83,
	-2, 84,
	-1, 318,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	74, 21,
	77, 21,
	85, 21,
	-2, 135,
	-1, 320,
	1, 23,
	47, 23,
	48, 23,
	63, 23,
	74, 23,
	77, 23,
	85, 23,
	-2, 137,
	-1, 322,
	1, 25,
	47, 25,
	48, 25,
	63, 25,
	74, 25,
	77, 25,
	85, 25,
	-2, 135,
	-1, 324,
	1, 27,
	47, 27,
	48, 27,
	63, 27,
	74, 27,
	77, 27,
	85, 27,
	-2, 137,
	-1, 362,
	74, 191,
	83, 191,
	-2, 186,
	-1, 381,
	1, 20,
	47, 20,
	48, 20,
	63, 20,
	74, 20,
	77, 20,
	85, 20,
	-2, 134,
	-1, 382,
	1, 22,
	47, 22,
	48, 22,
	63, 22,
	74, 22,
	77, 22,
	85, 22,
	-2, 136,
	-1, 383,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	74, 24,
	77, 24,
	85, 24,
	-2, 134,
	-1, 384,
	1, 26,
	47, 26,
	48, 26,
	63, 26,
	74, 26,
	77, 26,
	85, 26,
	-2, 136,
}

const yyPrivate = 57344

const yyLast = 4201

var yyAct = [...]int16{
	63, 342, 355, 23, 237, 285, 209, 343, 9, 270,
	5, 271, 345, 344, 125, 64, 8, 305, 8, 30,
	273, 272, 69, 71, 8, 415, 284, 106, 109, 113,
	1, 363, 221, 116, 117, 118, 120, 122, 8, 215,
	422, 417, 7, 202, 215, 136, 8, 8, 215, 61,
	8, 215, 300, 365, 145, 119, 121, 215, 8, 303,
	23, 115, 142, 142, 299, 135, 218, 411, 152, 215,
	384, 297, 143, 161, 162, 163, 383, 165, 166, 167,
	168, 169, 170, 171, 172, 173, 174, 175, 176, 177,
	178, 179, 180, 181, 182, 183, 184, 361, 156, 185,
	186, 187, 188, 61, 190, 192, 193, 214, 298, 295,
	323, 201, 444, 215, 215, 215, 205, 129, 382, 144,
	381, 368, 358, 326, 443, 137, 211, 159, 157, 147,
	146, 90, 91, 92, 93, 94, 95, 124, 195, 224,
	226, 81, 141, 321, 140, 238, 139, 239, 240, 138,
	129, 491, 104, 279, 490, 245, 486, 485, 479, 129,
	478, 476, 126, 487, 133, 360, 151, 319, 474, 6,
	61, 132, 134, 154, 102, 60, 484, 57, 324, 100,
	75, 103, 130, 98, 244, 465, 246, 379, 357, 460,
	317, 62, 257, 291, 459, 135, 281, 133, 260, 151,
	234, 264, 458, 267, 132, 134, 133, 276, 123, 483,
	457, 322, 127, 132, 134, 130, 43, 253, 283, 449,
	151, 448, 127, 151, 130, 258, 436, 432, 135, 122,
	262, 430, 429, 155, 204, 320, 238, 135, 428, 61,
	302, 425, 421, 304, 311, 401, 151, 387, 121, 151,
	374, 333, 279, 325, 356, 330, 380, 327, 318, 469,
	131, 292, 235, 312, 280, 315, 337, 339, 313, 259,
	247, 243, 446, 151, 23, 445, 351, 196, 426, 348,
	189, 347, 350, 406, 127, 254, 220, 153, 114, 67,
	439, 151, 241, 371, 334, 198, 197, 150, 128, 475,
	151, 370, 441, 403, 213, 398, 349, 376, 372, 282,
	377, 316, 127, 66, 108, 223, 345, 344, 261, 273,
	272, 127, 470, 268, 10, 405, 367, 332, 242, 61,
	301, 288, 210, 278, 287, 248, 249, 250, 251, 277,
	290, 394, 212, 397, 198, 378, 399, 131, 131, 396,
	131, 164, 111, 149, 65, 4, 229, 131, 131, 59,
	131, 409, 386, 410, 46, 366, 388, 389, 127, 391,
	412, 148, 420, 127, 2, 407, 423, 269, 58, 20,
	402, 341, 19, 286, 127, 216, 217, 17, 219, 346,
	127, 16, 25, 24, 227, 232, 233, 3, 236, 354,
	0, 0, 0, 0, 243, 61, 0, 286, 0, 0,
	0, 427, 0, 0, 447, 0, 0, 0, 0, 310,
	452, 431, 0, 433, 434, 375, 0, 0, 0, 437,
	0, 0, 0, 196, 440, 131, 0, 442, 212, 127,
	0, 0, 0, 0, 0, 229, 131, 0, 0, 127,
	0, 0, 0, 0, 362, 238, 473, 456, 0, 472,
	0, 395, 0, 0, 0, 364, 461, 0, 0, 462,
	463, 0, 286, 289, 0, 362, 467, 468, 482, 0,
	0, 0, 0, 216, 296, 0, 414, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 131, 0, 131,
	480, 0, 0, 0, 0, 0, 196, 0, 196, 0,
	0, 127, 0, 0, 131, 488, 0, 0, 489, 0,
	131, 0, 0, 400, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 286, 450, 127, 359, 0, 0,
	0, 0, 454, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 369, 0, 0, 0, 0, 0, 373, 0,
	0, 0, 0, 196, 466, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 131, 131, 0, 131, 0, 0,
	0, 0, 131, 0, 131, 127, 0, 0, 0, 0,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 408, 0, 127, 0, 0, 0, 0, 0,
	413, 0, 416, 0, 0, 0, 0, 0, 131, 0,
	0, 0, 0, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 286, 0, 0, 0, 0, 0, 0, 105,
	84, 85, 87, 89, 99, 101, 0, 0, 131, 0,
	74, 0, 0, 0, 0, 90, 91, 92, 93, 94,
	95, 0, 451, 96, 97, 81, 82, 83, 0, 0,
	0, 0, 0, 131, 0, 0, 104, 131, 0, 0,
	0, 0, 0, 0, 0, 73, 464, 419, 86, 88,
	76, 77, 78, 79, 80, 0, 0, 0, 102, 418,
	0, 0, 0, 100, 75, 103, 0, 98, 0, 0,
	0, 477, 0, 0, 0, 481, 105, 84, 85, 87,
	89, 99, 101, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 90, 91, 92, 93, 94, 95, 0, 0,
	96, 97, 81, 82, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 0, 309, 86, 88, 76, 77, 78,
	79, 80, 0, 0, 0, 102, 308, 0, 0, 0,
	100, 75, 103, 0, 98, 105, 84, 85, 87, 89,
	99, 101, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 90, 91, 92, 93, 94, 95, 0, 0, 96,
	97, 81, 82, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 275, 0, 86, 88, 76, 77, 78, 79,
	80, 0, 0, 0, 102, 0, 0, 0, 0, 100,
	75, 103, 274, 98, 105, 84, 85, 87, 89, 99,
	101, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	90, 91, 92, 93, 94, 95, 0, 0, 96, 97,
	81, 82, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 256, 0, 86, 88, 76, 77, 78, 79, 80,
	0, 0, 0, 102, 0, 0, 0, 0, 100, 75,
	103, 255, 98, 105, 84, 85, 87, 89, 99, 101,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 90,
	91, 92, 93, 94, 95, 0, 0, 96, 97, 81,
	82, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 72, 73,
	0, 0, 86, 88, 76, 77, 78, 79, 80, 0,
	199, 0, 102, 0, 0, 0, 0, 100, 75, 103,
	0, 98, 105, 84, 85, 87, 89, 99, 101, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 90, 91,
	92, 93, 94, 95, 0, 0, 96, 97, 81, 82,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	0, 86, 88, 76, 77, 78, 79, 80, 0, 0,
	0, 102, 471, 0, 0, 0, 100, 75, 103, 0,
	98, 105, 84, 85, 87, 89, 99, 101, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 90, 91, 92,
	93, 94, 95, 0, 0, 96, 97, 81, 82, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 455, 0,
	86, 88, 76, 77, 78, 79, 80, 0, 0, 0,
	102, 0, 0, 0, 0, 100, 75, 103, 0, 98,
	105, 84, 85, 87, 89, 99, 101, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 90, 91, 92, 93,
	94, 95, 0, 0, 96, 97, 81, 82, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 0, 86,
	88, 76, 77, 78, 79, 80, 0, 0, 0, 102,
	453, 0, 0, 0, 100, 75, 103, 0, 98, 105,
	84, 85, 87, 89, 99, 101, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 90, 91, 92, 93, 94,
	95, 0, 0, 96, 97, 81, 82, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 438, 0, 86, 88,
	76, 77, 78, 79, 80, 0, 0, 0, 102, 0,
	0, 0, 0, 100, 75, 103, 0, 98, 105, 84,
	85, 87, 89, 99, 101, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 90, 91, 92, 93, 94, 95,
	0, 0, 96, 97, 81, 82, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 0, 86, 88, 76,
	77, 78, 79, 80, 0, 435, 0, 102, 0, 0,
	0, 0, 100, 75, 103, 0, 98, 105, 84, 85,
	87, 89, 99, 101, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 90, 91, 92, 93, 94, 95, 0,
	0, 96, 97, 81, 82, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 0, 0, 86, 88, 76, 77,
	78, 79, 80, 0, 0, 0, 102, 424, 0, 0,
	0, 100, 75, 103, 0, 98, 105, 84, 85, 87,
	89, 99, 101, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 90, 91, 92, 93, 94, 95, 0, 0,
	96, 97, 81, 82, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 0, 0, 86, 88, 76, 77, 78,
	79, 80, 0, 0, 0, 102, 0, 0, 0, 0,
	100, 75, 103, 404, 98, 105, 84, 85, 87, 89,
	99, 101, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 90, 91, 92, 93, 94, 95, 0, 0, 96,
	97, 81, 82, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 0, 0, 86, 88, 76, 77, 78, 79,
	80, 0, 392, 0, 102, 0, 0, 0, 0, 100,
	75, 103, 0, 98, 105, 84, 85, 87, 89, 99,
	101, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	90, 91, 92, 93, 94, 95, 0, 0, 96, 97,
	81, 82, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 0, 86, 88, 76, 77, 78, 79, 80,
	0, 390, 0, 102, 0, 0, 0, 0, 100, 75,
	103, 0, 98, 105, 84, 85, 87, 89, 99, 101,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 90,
	91, 92, 93, 94, 95, 0, 0, 96, 97, 81,
	82, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 0, 86, 88, 76, 77, 78, 79, 80, 0,
	0, 0, 102, 0, 0, 0, 0, 100, 75, 103,
	385, 98, 105, 84, 85, 87, 89, 99, 101, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 90, 91,
	92, 93, 94, 95, 0, 0, 96, 97, 81, 82,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	0, 86, 88, 76, 77, 78, 79, 80, 0, 0,
	0, 102, 0, 0, 0, 0, 100, 75, 103, 353,
	98, 45, 31, 37, 0, 0, 41, 13, 56, 14,
	26, 0, 27, 0, 0, 0, 0, 0, 0, 0,
	49, 38, 39, 40, 0, 15, 18, 0, 0, 0,
	0, 0, 0, 0, 0, 11, 12, 0, 0, 0,
	0, 0, 28, 29, 0, 0, 21, 22, 0, 50,
	53, 0, 47, 55, 54, 51, 0, 48, 0, 0,
	0, 0, 0, 0, 0, 32, 36, 0, 0, 0,
	52, 0, 44, 0, 0, 33, 34, 35, 0, 42,
	105, 84, 85, 87, 89, 99, 101, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 90, 91, 92, 93,
	94, 95, 0, 0, 96, 97, 81, 82, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 0, 0, 86,
	88, 76, 77, 78, 79, 80, 0, 0, 0, 102,
	0, 340, 0, 0, 100, 75, 103, 0, 98, 105,
	84, 85, 87, 89, 99, 101, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 90, 91, 92, 93, 94,
	95, 0, 0, 96, 97, 81, 82, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 0, 0, 86, 88,
	76, 77, 78, 79, 80, 0, 335, 0, 102, 0,
	0, 0, 0, 100, 75, 103, 0, 98, 105, 84,
	85, 87, 89, 99, 101, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 90, 91, 92, 93, 94, 95,
	0, 0, 96, 97, 81, 82, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 0, 86, 88, 76,
	77, 78, 79, 80, 0, 331, 0, 102, 0, 0,
	0, 0, 100, 75, 103, 0, 98, 105, 84, 85,
	87, 89, 99, 101, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 90, 91, 92, 93, 94, 95, 0,
	0, 96, 97, 81, 82, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 0, 0, 86, 88, 76, 77,
	78, 79, 80, 0, 0, 0, 102, 0, 0, 0,
	0, 100, 75, 103, 329, 98, 105, 84, 85, 87,
	89, 99, 101, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 90, 91, 92, 93, 94, 95, 0, 0,
	96, 97, 81, 82, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 0, 73, 0, 0, 86, 88, 76, 77, 78,
	79, 80, 0, 314, 0, 102, 0, 0, 0, 0,
	100, 75, 103, 0, 98, 105, 84, 85, 87, 89,
	99, 101, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 90, 91, 92, 93, 94, 95, 0, 0, 96,
	97, 81, 82, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 0, 0, 86, 88, 76, 77, 78, 79,
	80, 0, 0, 0, 102, 307, 0, 0, 0, 100,
	75, 103, 0, 98, 105, 84, 85, 87, 89, 99,
	101, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	90, 91, 92, 93, 94, 95, 0, 0, 96, 97,
	81, 82, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 306, 0, 86, 88, 76, 77, 78, 79, 80,
	0, 0, 0, 102, 0, 0, 0, 0, 100, 75,
	103, 0, 98, 105, 84, 85, 87, 89, 99, 101,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 90,
	91, 92, 93, 94, 95, 0, 0, 96, 97, 81,
	82, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 0, 86, 88, 76, 77, 78, 79, 80, 0,
	0, 0, 102, 294, 0, 0, 0, 100, 75, 103,
	0, 98, 105, 84, 85, 87, 89, 99, 101, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 90, 91,
	92, 93, 94, 95, 0, 0, 96, 97, 81, 82,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	0, 86, 88, 76, 77, 78, 79, 80, 0, 0,
	0, 102, 293, 0, 0, 0, 100, 75, 103, 0,
	98, 105, 84, 85, 87, 89, 99, 101, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 90, 91, 92,
	93, 94, 95, 0, 0, 96, 97, 81, 82, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 0,
	86, 88, 76, 77, 78, 79, 80, 0, 0, 0,
	102, 0, 265, 0, 0, 100, 75, 103, 0, 98,
	105, 84, 85, 87, 89, 99, 101, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 90, 91, 92, 93,
	94, 95, 0, 0, 96, 97, 81, 82, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 73, 252, 0, 86,
	88, 76, 77, 78, 79, 80, 0, 0, 0, 102,
	0, 0, 0, 0, 100, 75, 103, 0, 98, 105,
	84, 85, 87, 89, 99, 101, 0, 0, 0, 0,
	74, 0, 0, 0, 0, 90, 91, 92, 93, 94,
	95, 0, 0, 96, 97, 81, 82, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 73, 0, 0, 86, 88,
	76, 77, 78, 79, 80, 0, 0, 0, 102, 222,
	0, 0, 0, 100, 75, 103, 0, 98, 105, 84,
	85, 87, 89, 99, 101, 0, 0, 0, 0, 74,
	0, 0, 0, 0, 90, 91, 92, 93, 94, 95,
	0, 0, 96, 97, 81, 82, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 73, 0, 0, 86, 88, 76,
	77, 78, 79, 80, 0, 203, 0, 102, 0, 0,
	0, 0, 100, 75, 103, 0, 98, 105, 84, 85,
	87, 89, 99, 101, 0, 0, 0, 0, 74, 0,
	0, 0, 0, 90, 91, 92, 93, 94, 95, 0,
	0, 96, 97, 81, 82, 83, 0, 0, 0, 0,
	0, 0, 0, 0, 104, 0, 0, 0, 0, 0,
	0, 0, 0, 73, 0, 0, 86, 88, 76, 77,
	78, 79, 80, 0, 194, 0, 102, 0, 0, 0,
	0, 100, 75, 103, 0, 98, 105, 84, 85, 87,
	89, 99, 101, 0, 0, 0, 0, 74, 0, 0,
	0, 0, 90, 91, 92, 93, 94, 95, 0, 0,
	96, 97, 81, 82, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 0, 0, 0, 0, 0, 0,
	0, 72, 73, 0, 0, 86, 88, 76, 77, 78,
	79, 80, 0, 0, 0, 102, 0, 0, 0, 0,
	100, 75, 103, 0, 98, 105, 84, 85, 87, 89,
	99, 101, 0, 0, 0, 0, 74, 0, 0, 0,
	0, 90, 91, 92, 93, 94, 95, 0, 0, 96,
	97, 81, 82, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 0, 0, 0,
	0, 73, 0, 0, 86, 88, 76, 77, 78, 79,
	80, 0, 0, 0, 102, 0, 0, 0, 0, 100,
	75, 103, 0, 98, 105, 84, 85, 87, 89, 99,
	101, 0, 0, 0, 0, 74, 0, 0, 0, 0,
	90, 91, 92, 93, 94, 95, 0, 0, 96, 97,
	81, 82, 83, 0, 0, 0, 0, 0, 0, 0,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	73, 0, 0, 86, 88, 76, 77, 78, 79, 80,
	0, 0, 0, 102, 0, 0, 0, 0, 100, 208,
	103, 0, 98, 105, 84, 85, 87, 89, 99, 101,
	0, 0, 0, 0, 74, 0, 0, 0, 0, 90,
	91, 92, 93, 94, 95, 0, 0, 96, 97, 81,
	82, 83, 0, 0, 0, 0, 0, 0, 0, 0,
	104, 0, 0, 0, 0, 0, 0, 0, 0, 73,
	0, 0, 86, 88, 76, 77, 78, 79, 80, 0,
	0, 0, 102, 0, 0, 0, 0, 100, 207, 103,
	0, 98, 105, 84, 85, 87, 89, 99, 101, 0,
	0, 0, 0, 74, 0, 0, 0, 0, 90, 91,
	92, 93, 94, 95, 0, 0, 96, 97, 81, 82,
	83, 0, 0, 0, 0, 0, 0, 0, 0, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 73, 0,
	0, 86, 88, 76, 77, 78, 79, 80, 0, 0,
	0, 160, 0, 0, 0, 0, 100, 75, 103, 0,
	98, 105, 84, 85, 87, 89, 99, 101, 0, 0,
	0, 0, 74, 0, 0, 0, 0, 90, 91, 92,
	93, 94, 95, 0, 0, 96, 97, 81, 82, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 0, 0, 0, 0, 0, 73, 0, 0,
	86, 88, 76, 77, 78, 79, 80, 0, 0, 0,
	158, 0, 0, 0, 0, 100, 75, 103, 0, 98,
	105, 84, 85, 87, 89, 99, 101, 0, 0, 0,
	0, 74, 0, 0, 0, 0, 90, 91, 92, 93,
	94, 95, 0, 0, 96, 97, 81, 82, 83, 0,
	0, 0, 0, 0, 0, 0, 0, 104, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	88, 76, 77, 78, 79, 80, 0, 0, 0, 102,
	0, 0, 0, 0, 100, 75, 103, 0, 98, 105,
	84, 85, 87, 89, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 90, 91, 92, 93, 94,
	95, 0, 0, 96, 97, 81, 82, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 88,
	76, 77, 78, 79, 80, 0, 0, 0, 102, 0,
	0, 0, 0, 100, 75, 103, 0, 98, 105, 84,
	85, 87, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 91, 92, 93, 94, 95,
	0, 0, 96, 97, 81, 82, 83, 0, 0, 0,
	0, 0, 0, 0, 0, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 88, 76,
	77, 78, 79, 80, 87, 89, 0, 102, 0, 0,
	0, 0, 100, 75, 103, 0, 98, 90, 91, 92,
	93, 94, 95, 0, 0, 96, 97, 81, 82, 83,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 0,
	0, 0, 230, 31, 37, 0, 0, 41, 0, 0,
	86, 88, 76, 77, 78, 79, 80, 0, 0, 0,
	102, 49, 38, 39, 40, 100, 75, 103, 0, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	45, 31, 37, 0, 0, 41, 0, 0, 0, 133,
	50, 53, 0, 47, 55, 54, 231, 134, 48, 49,
	38, 39, 40, 0, 0, 0, 32, 228, 0, 0,
	0, 52, 0, 44, 225, 0, 33, 34, 35, 0,
	42, 45, 31, 37, 0, 0, 41, 0, 50, 53,
	0, 47, 55, 54, 51, 0, 48, 0, 0, 0,
	49, 38, 39, 40, 32, 36, 0, 0, 0, 52,
	0, 44, 0, 0, 33, 34, 35, 0, 42, 352,
	230, 31, 37, 0, 0, 41, 0, 0, 0, 50,
	53, 0, 47, 55, 54, 51, 0, 48, 0, 49,
	38, 39, 40, 0, 0, 32, 36, 0, 0, 0,
	52, 0, 44, 0, 0, 33, 34, 35, 0, 42,
	328, 0, 0, 0, 0, 0, 0, 133, 50, 53,
	0, 47, 55, 54, 231, 134, 48, 0, 0, 0,
	0, 112, 31, 37, 32, 228, 41, 0, 56, 52,
	0, 44, 0, 0, 33, 34, 35, 0, 42, 0,
	49, 38, 39, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 45,
	31, 37, 0, 0, 41, 0, 0, 0, 0, 50,
	53, 0, 47, 55, 54, 51, 0, 48, 49, 38,
	39, 40, 0, 0, 0, 32, 36, 0, 0, 0,
	107, 0, 44, 0, 110, 33, 34, 35, 0, 42,
	45, 31, 37, 0, 0, 41, 0, 50, 53, 0,
	47, 55, 54, 51, 0, 48, 0, 0, 0, 49,
	38, 39, 40, 32, 36, 0, 0, 0, 52, 0,
	44, 0, 266, 33, 34, 35, 0, 42, 0, 0,
	0, 45, 31, 37, 0, 0, 41, 0, 50, 53,
	0, 47, 55, 54, 51, 0, 48, 0, 0, 206,
	49, 38, 39, 40, 32, 36, 0, 0, 0, 52,
	0, 44, 0, 0, 33, 34, 35, 0, 42, 45,
	31, 37, 0, 0, 41, 0, 0, 0, 0, 50,
	53, 0, 47, 55, 54, 51, 0, 48, 49, 38,
	39, 40, 0, 0, 0, 32, 36, 0, 0, 0,
	52, 0, 44, 0, 200, 33, 34, 35, 0, 42,
	45, 31, 37, 0, 0, 41, 0, 50, 53, 0,
	47, 55, 54, 51, 0, 48, 0, 0, 191, 49,
	38, 39, 40, 32, 36, 0, 0, 0, 52, 0,
	44, 0, 0, 33, 34, 35, 0, 42, 45, 31,
	37, 0, 0, 41, 0, 0, 0, 0, 50, 53,
	0, 47, 55, 54, 51, 0, 48, 49, 38, 39,
	40, 0, 0, 0, 32, 36, 0, 0, 0, 52,
	0, 44, 0, 0, 33, 34, 35, 0, 42, 45,
	31, 37, 0, 0, 41, 0, 50, 53, 0, 47,
	55, 54, 51, 0, 48, 0, 0, 0, 49, 38,
	39, 40, 32, 36, 0, 0, 0, 393, 0, 44,
	0, 0, 33, 34, 35, 0, 42, 45, 31, 37,
	0, 0, 41, 0, 0, 0, 0, 50, 53, 0,
	47, 55, 54, 51, 0, 48, 49, 38, 39, 40,
	0, 0, 0, 32, 36, 0, 0, 0, 338, 0,
	44, 0, 0, 33, 34, 35, 0, 42, 45, 31,
	37, 0, 0, 41, 0, 50, 53, 0, 47, 55,
	54, 51, 0, 48, 0, 0, 0, 49, 38, 39,
	40, 32, 36, 0, 0, 0, 336, 0, 44, 0,
	0, 33, 34, 35, 0, 42, 70, 31, 37, 0,
	0, 41, 0, 0, 0, 0, 50, 53, 0, 47,
	55, 54, 51, 0, 48, 49, 38, 39, 40, 0,
	0, 0, 32, 36, 0, 0, 0, 263, 0, 44,
	0, 0, 33, 34, 35, 0, 42, 68, 31, 37,
	0, 0, 41, 0, 50, 53, 0, 47, 55, 54,
	51, 0, 48, 0, 0, 0, 49, 38, 39, 40,
	32, 36, 0, 0, 0, 52, 0, 44, 0, 0,
	33, 34, 35, 0, 42, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 53, 0, 47, 55,
	54, 51, 0, 48, 0, 90, 91, 92, 93, 94,
	95, 32, 36, 96, 97, 81, 52, 0, 44, 0,
	0, 33, 34, 35, 0, 42, 104, 0, 90, 91,
	92, 93, 94, 95, 0, 0, 0, 0, 81, 0,
	76, 77, 78, 79, 80, 0, 0, 0, 102, 104,
	0, 0, 0, 100, 75, 103, 0, 98, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 80, 0, 0,
	0, 102, 0, 0, 0, 0, 100, 75, 103, 0,
	98,
}

var yyPact = [...]int16{
	-67, -1000, 1757, -67, -1000, -61, -61, -1000, -1000, -1000,
	-1000, -1000, -1000, 3826, 3826, 350, 299, -1000, 216, -1000,
	-1000, 4063, 4022, 2790, -1000, -1000, 3826, 3627, 3826, 215,
	-21, -1000, 3826, 3826, 3826, 3826, 3826, -1000, -1000, -1000,
	-1000, 133, -69, 155, 3826, 50, -1000, 74, 71, 69,
	67, -10, -61, 3826, 55, 54, 349, 236, -1000, 1757,
	-61, -1000, 156, 2859, 2859, 214, 160, -67, 53, 3135,
	52, 3066, 3826, 3826, 3826, 347, 3826, 3826, 3826, 3826,
	3826, 3826, 3826, 3826, 3826, 3826, 3826, 3826, 3826, 3826,
	3826, 3826, 3826, 3826, 3826, 3826, -1000, -1000, 3826, 3826,
	3826, 3826, 3826, 3785, 3826, 3826, 2721, -67, 280, 917,
	3747, -34, 50, 2652, -61, 3706, 99, 99, 99, -21,
	2997, -21, 2928, 328, 51, -17, 3826, -61, 34, -1000,
	155, 155, -16, 155, 213, -51, 2583, 3826, 3826, 3448,
	155, 146, -61, 155, 3826, 2859, 3826, 3826, 231, -1000,
	3826, -61, -1000, -67, 3826, -67, 196, 3826, 3826, 3826,
	3826, 2859, 2514, 3204, -1000, 4116, 4116, 99, 99, 99,
	2859, 4093, 4093, 3395, 3395, 4093, 4093, 4093, 4093, 2859,
	2859, 2859, 2859, 2859, 2859, 2859, 3273, 2859, 3342, 209,
	848, 3826, 2859, 3342, -67, 195, -61, 3826, -61, -67,
	3984, 2445, 3665, -61, 272, 779, 3826, 335, 329, 188,
	246, 328, -1000, -38, -61, 327, -37, -37, 155, -37,
	-61, -17, -1000, 185, 2376, -1000, 2307, 33, 3566, 155,
	50, -11, 32, -12, 326, 3826, -24, -47, 2238, 2169,
	710, 3826, 156, 3826, 194, 2100, 191, 281, 182, 159,
	135, 102, 3826, 47, -1000, -1000, 3527, 2031, 181, -1000,
	1962, 323, 177, -67, 1893, 3943, 3905, 1824, 269, -27,
	-1000, -1000, 243, 1757, -1000, 3486, 1676, -1000, -1000, -61,
	113, 46, 155, 89, -61, -52, -61, 3826, -1000, -30,
	322, 45, -1000, -1000, -1000, -1000, 34, 155, -1000, -1000,
	3826, 229, -47, 155, 176, -61, 3826, -1000, -1000, 3826,
	156, 2859, -21, -1000, -67, -1000, 183, 44, -1000, 42,
	-1000, 0, -1000, -6, -1000, 2859, -1000, 1607, -1000, -1000,
	-1000, -67, -1000, -1000, 173, -67, -67, 1538, -67, 1469,
	3864, -35, -1000, -1000, 242, 3826, 171, -1000, -1000, -67,
	240, 1400, -1000, -1000, 321, 210, -37, 155, 113, -37,
	113, -9, -61, -1000, -38, 155, -39, 155, -1000, -42,
	633, 3826, 168, -33, -1000, 3826, 2859, 1331, 167, 205,
	-67, -1000, -1000, -1000, -1000, -1000, 164, -1000, 158, 157,
	-67, 153, -67, -67, 1262, 152, -1000, -1000, -67, 1193,
	227, -1000, -1000, -67, -1000, 239, -67, 48, -37, 202,
	199, 113, 147, -37, 145, -61, -37, 155, -1000, 3826,
	1124, -1000, -61, 1055, -1000, -1000, -67, 136, -1000, -1000,
	-1000, 128, -1000, 120, 115, -67, -1000, -1000, -67, -67,
	-1000, 155, 111, -1000, -61, -67, -67, 186, -1000, -1000,
	318, -33, 986, -1000, 3826, 3826, 94, 268, -1000, -1000,
	-1000, 87, -1000, -1000, -37, -1000, 155, 86, 84, -67,
	155, -1000, -47, 2859, 178, 103, -1000, -37, -1000, -1000,
	83, -37, 82, 90, -67, -1000, -1000, -67, 80, 77,
	-1000, -1000,
}

var yyPgo = [...]int16{
	0, 30, 397, 8, 324, 393, 392, 391, 387, 382,
	381, 7, 1, 379, 377, 11, 9, 177, 0, 314,
	6, 2, 375, 254, 365, 216, 4, 364, 19, 374,
	355, 119, 5, 169, 42,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 5, 6, 6, 7, 7, 7, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 13, 14,
	14, 14, 14, 14, 15, 15, 16, 9, 10, 10,
	10, 10, 10, 11, 11, 12, 19, 19, 19, 21,
	21, 21, 22, 22, 22, 20, 20, 20, 20, 20,
	17, 17, 17, 17, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 23,
	23, 23, 23, 23, 23, 23, 24, 24, 25, 25,
	26, 26, 26, 27, 27, 27, 27, 27, 27, 28,
	29, 29, 30, 30, 30, 31, 31, 33, 33, 34,
	32, 32, 32, 32,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 1, 1, 13, 12, 9, 8, 1, 1,
	6, 5, 6, 5, 6, 5, 6, 5, 1, 1,
	1, 4, 3, 3, 5, 7, 5, 4, 7, 5,
	6, 7, 7, 8, 7, 8, 8, 9, 6, 0,
	1, 1, 2, 2, 4, 4, 3, 7, 0, 1,
	1, 2, 2, 4, 4, 3, 0, 1, 4, 0,
	1, 3, 0, 1, 4, 0, 1, 3, 4, 6,
	0, 1, 4, 4, 1, 1, 2, 2, 2, 2,
	4, 2, 4, 1, 1, 1, 1, 5, 3, 3,
	8, 9, 9, 10, 2, 5, 7, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 3, 3, 3, 5, 4, 5, 4, 4, 4,
	1, 4, 3, 4, 4, 4, 4, 6, 8, 7,
	6, 10, 5, 3, 2, 4, 4, 6, 3, 1,
	3, 2, 2, 5, 2, 6, 2, 5, 2, 3,
	0, 3, 6, 6, 5, 5, 6, 5, 5, 1,
	0, 1, 2, 1, 1, 0, 1, 1, 2, 1,
	0, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -29, -2, -30, 77, -33, -34, 85, -3,
	-4, 38, 39, 10, 12, 28, -7, -8, 29, -9,
	-13, 49, 50, -18, -5, -6, 13, 15, 45, 46,
	-28, 5, 68, 78, 79, 80, 69, 6, 24, 25,
	26, 9, 82, -25, 75, 4, -27, 55, 60, 23,
	52, 58, 73, 53, 57, 56, 11, -17, -29, -30,
	-33, -34, -17, -18, -18, 4, 14, 73, 4, -18,
	4, -18, 61, 62, 27, 81, 67, 68, 69, 70,
	71, 42, 43, 44, 17, 18, 65, 19, 66, 20,
	32, 33, 34, 35, 36, 37, 40, 41, 84, 21,
	80, 22, 75, 82, 53, 16, -18, 73, -19, -18,
	77, -4, 4, -18, 73, 82, -18, -18, -18, -28,
	-18, -28, -18, 75, 4, 83, -31, -33, -23, 4,
	69, -25, 58, 51, 59, 82, -18, 75, 75, 75,
	75, 75, 73, 82, -31, -18, 75, 75, -19, 4,
	61, 64, -3, 73, 13, 73, -1, 75, 75, 75,
	75, -18, -18, -18, 4, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -17,
	-18, 63, -18, -18, 73, -1, -33, 16, 64, 73,
	77, -18, 77, 73, -31, -18, 63, 81, 81, -20,
	4, 75, -25, -17, 73, 81, -23, -23, 82, -23,
	73, 83, 76, -17, -18, 76, -18, -23, 69, -25,
	4, 58, -23, -23, 54, -31, -23, -26, -18, -18,
	-18, 61, -17, -31, -1, -18, -1, 74, -17, -17,
	-17, -17, 63, 8, 76, 83, 63, -18, -1, 74,
	-18, -31, -1, 73, -18, 77, 77, -18, -31, -14,
	-16, -15, 48, 47, 83, 63, -18, 4, 4, 64,
	76, 8, 63, -20, 64, -32, -33, -31, 4, -23,
	-31, 8, 76, 76, 76, 76, -23, 82, 76, 76,
	64, 4, -26, 83, -32, 64, 63, 76, 76, 64,
	-17, -18, -28, 74, 73, 74, 30, 8, 76, 8,
	76, 8, 76, 8, 76, -18, 76, -18, 83, 83,
	74, 73, 4, 74, -1, 73, 73, -18, 73, -18,
	77, -10, -12, -11, 48, 47, -31, -15, -16, 63,
	-3, -18, 83, 83, -31, -21, -23, 75, 76, -23,
	76, 8, -33, 83, -17, 83, -24, 4, 76, -23,
	-18, 64, -32, -23, 74, -31, -18, -18, -1, 4,
	73, 76, 76, 76, 76, 83, -1, 74, -1, -1,
	73, -1, 73, 73, -18, -31, -11, -12, 63, -18,
	-17, 74, -1, 63, 83, 4, 73, -22, -23, -21,
	-21, 76, -32, -23, -31, 64, -23, 83, 76, 64,
	-18, 74, 73, -18, 76, 74, 73, -1, 74, 74,
	74, -1, 74, -1, -1, 73, 74, -1, 63, 63,
	-1, 63, -1, 76, 64, 73, 73, -21, 74, 74,
	-31, -23, -18, 76, -31, 63, -1, 74, 74, 74,
	74, -1, -1, -1, -23, 74, -31, -1, -1, 73,
	4, 76, -26, -18, 74, 31, 74, -23, 74, 74,
	-1, -23, -32, 31, 73, 74, 74, 73, -1, -1,
	74, 74,
}

var yyDef = [...]int16{
	180, -2, -2, 180, 181, 184, 183, 187, 189, 3,
	6, 7, 8, 80, 0, 0, 12, 13, 0, 18,
	19, 0, 0, -2, 29, 30, 0, -2, 0, 0,
	84, 85, 0, 0, 0, 0, 0, 93, 94, 95,
	96, 0, 185, 0, 0, 179, 140, 0, 0, 0,
	0, 0, 185, 0, 0, 0, 66, 0, 2, -2,
	182, 188, 9, 81, 10, 0, 0, 180, 179, 0,
	179, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 128, 129, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 180, 0, 81,
	0, 0, -2, 0, 185, 0, 86, 87, 88, -2,
	0, -2, 0, 75, 0, -2, 80, 186, 0, 159,
	0, 0, 0, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 185, 0, 170, 154, 0, 0, 0, 67,
	80, 185, 4, 180, 0, 180, 0, 80, 80, 80,
	80, 32, 0, 98, 99, 108, 109, 110, 111, 112,
	113, 114, 115, -2, -2, 118, 119, 120, 121, 122,
	123, 124, 125, 126, 127, 130, 131, 132, 133, 0,
	0, 0, 153, 158, 180, 0, 183, 0, 185, 180,
	0, 0, 0, 185, 49, 0, 0, 0, 0, 0,
	76, 75, 169, 190, 185, 0, 161, 162, 0, 164,
	185, 168, 107, 0, 0, 142, 0, 0, 0, 0,
	-2, 0, 0, 0, 0, 170, 0, 190, 0, 0,
	0, 80, 33, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 137, 139, 0, 0, 0, 37,
	0, 0, 0, 180, 0, 0, 0, 0, 58, 185,
	50, 51, 0, -2, 138, 0, 0, 90, 92, 185,
	69, 0, 0, 0, -2, 0, 192, 80, 160, 0,
	0, 0, 135, 141, 143, 144, 162, 0, 145, 146,
	0, 0, 190, 0, 0, -2, 0, 155, 156, 0,
	31, 82, -2, 11, 180, 36, 0, 0, -2, 0,
	-2, 0, -2, 0, -2, 97, 136, 0, 177, 178,
	34, 180, 68, 39, 0, 180, 180, 0, 180, 0,
	0, 185, 59, 60, 0, 80, 0, 52, 53, 180,
	0, 0, 174, 175, 0, 0, 70, 72, 69, 77,
	69, 0, -2, 105, 190, 0, 185, 0, 134, 0,
	0, 0, 0, 0, 152, 0, 171, 0, 0, 0,
	180, -2, -2, -2, -2, 176, 0, 40, 0, 0,
	180, 0, 180, 180, 0, 0, 61, 62, 180, 81,
	0, 48, 56, 180, 173, 78, 180, 0, 73, 0,
	0, 69, 0, 163, 0, 185, 166, 0, 147, 0,
	0, 150, 185, 0, 157, 35, 180, 0, 38, 41,
	42, 0, 44, 0, 0, 180, 57, 65, 180, 180,
	54, 0, 0, 71, 185, 180, 180, 0, 106, 165,
	0, 163, 0, 149, 170, 0, 0, 17, 43, 45,
	46, 0, 63, 64, 79, 100, 0, 0, 0, 180,
	0, 148, 190, 172, 16, 0, 47, 74, 101, 102,
	0, 167, 0, 0, 180, 103, 151, 180, 0, 0,
	15, 14,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	85, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 71, 80, 3,
	75, 76, 69, 67, 64, 68, 81, 70, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 77,
	66, 61, 65, 62, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 82, 3, 83, 79, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 84, 74,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 72,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:94
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:98
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:104
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:113
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:129
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:133
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:137
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:142
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:147
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:152
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:157
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:162
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:166
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 14:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:170
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:175
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:180
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:185
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:198
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:203
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:208
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:213
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:218
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:223
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:228
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:233
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:238
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:245
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:249
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:255
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:262
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:266
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:283
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:288
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:293
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:303
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:308
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:319
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:324
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:329
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:334
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:344
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:349
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:354
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:359
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:366
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:373
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:377
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:381
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:385
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:390
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:401
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:406
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:413
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:419
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:428
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:432
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:436
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:440
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:446
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:457
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:462
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:469
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:474
		{
			yyVAL.expr_idents = []string{}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:478
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:482
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:490
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:494
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:498
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:502
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:506
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:510
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:518
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:522
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{{Name: yyDollar[1].tok.Lit}}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:526
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[3].type_data}}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:530
		{
			if len(yyDollar[1].func_expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.func_expr_idents = append(yyDollar[1].func_expr_idents, &ast.ParamExpr{Name: yyDollar[4].tok.Lit})
		}
	case 79:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:537
		{
			if len(yyDollar[1].func_expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.func_expr_idents = append(yyDollar[1].func_expr_idents, &ast.ParamExpr{Name: yyDollar[4].tok.Lit, TypeData: yyDollar[6].type_data})
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:545
		{
			yyVAL.exprs = nil
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:549
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:553
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:560
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:569
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:573
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:578
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:583
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:588
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:593
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:598
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:603
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:608
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:613
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:618
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:623
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:628
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:633
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:638
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:643
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 100:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:648
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 101:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:653
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 102:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:658
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 103:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:663
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:668
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:673
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 106:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:678
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:683
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:688
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:693
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:698
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:703
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:708
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:713
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:718
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:723
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:728
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:733
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:738
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:743
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:748
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:753
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:758
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:763
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:768
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:773
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:778
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:783
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:788
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:793
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:798
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:803
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:808
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:813
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:818
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:823
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 136:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:828
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:833
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:838
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:843
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:848
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:853
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:858
		{
			yyVAL.expr = &ast.DbgExpr{}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:863
		{
			yyVAL.expr = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:868
		{
			yyVAL.expr = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:873
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:883
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:888
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 148:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:893
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 149:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:898
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:903
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 151:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:909
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:915
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:920
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:925
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:930
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:935
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 157:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:940
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:945
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:953
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:957
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:966
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:975
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:985
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:989
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 165:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:998
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1004
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 167:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1008
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1018
		{
			yyVAL.slice_count = 1
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1022
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1029
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1033
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 172:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1037
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1047
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1051
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1055
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1059
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1063
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1067
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1073
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
