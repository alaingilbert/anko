// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:45
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             ast.Stmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	exprs                         []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"'?'",
	"':'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"'!'",
	"'^'",
	"'&'",
	"'.'",
	"'['",
	"']'",
	"'|'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1171

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	61, 87,
	62, 87,
	65, 87,
	78, 5,
	-2, 1,
	-1, 23,
	65, 88,
	-2, 28,
	-1, 28,
	61, 87,
	62, 87,
	-2, 68,
	-1, 60,
	61, 87,
	62, 87,
	65, 87,
	-2, 5,
	-1, 114,
	16, 69,
	65, 69,
	-2, 188,
	-1, 121,
	1, 96,
	8, 96,
	47, 96,
	48, 96,
	61, 96,
	62, 96,
	64, 96,
	65, 96,
	74, 96,
	75, 96,
	77, 96,
	78, 96,
	84, 96,
	86, 96,
	-2, 91,
	-1, 123,
	1, 98,
	8, 98,
	47, 98,
	48, 98,
	61, 98,
	62, 98,
	64, 98,
	65, 98,
	74, 98,
	75, 98,
	77, 98,
	78, 98,
	84, 98,
	86, 98,
	-2, 91,
	-1, 127,
	4, 177,
	51, 177,
	58, 177,
	59, 177,
	-2, 113,
	-1, 177,
	17, 0,
	18, 0,
	-2, 125,
	-1, 178,
	17, 0,
	18, 0,
	-2, 126,
	-1, 239,
	77, 168,
	82, 168,
	-2, 188,
	-1, 283,
	64, 5,
	-2, 87,
	-1, 295,
	75, 202,
	84, 202,
	-2, 194,
	-1, 316,
	75, 202,
	-2, 194,
	-1, 323,
	1, 90,
	8, 90,
	47, 90,
	48, 90,
	61, 90,
	62, 90,
	64, 90,
	65, 90,
	75, 90,
	77, 90,
	78, 90,
	84, 90,
	86, 90,
	-2, 91,
	-1, 329,
	1, 21,
	47, 21,
	48, 21,
	64, 21,
	75, 21,
	78, 21,
	86, 21,
	-2, 144,
	-1, 331,
	1, 23,
	47, 23,
	48, 23,
	64, 23,
	75, 23,
	78, 23,
	86, 23,
	-2, 146,
	-1, 333,
	1, 25,
	47, 25,
	48, 25,
	64, 25,
	75, 25,
	78, 25,
	86, 25,
	-2, 144,
	-1, 335,
	1, 27,
	47, 27,
	48, 27,
	64, 27,
	75, 27,
	78, 27,
	86, 27,
	-2, 146,
	-1, 373,
	75, 200,
	84, 200,
	-2, 195,
	-1, 392,
	1, 20,
	47, 20,
	48, 20,
	64, 20,
	75, 20,
	78, 20,
	86, 20,
	-2, 143,
	-1, 393,
	1, 22,
	47, 22,
	48, 22,
	64, 22,
	75, 22,
	78, 22,
	86, 22,
	-2, 145,
	-1, 394,
	1, 24,
	47, 24,
	48, 24,
	64, 24,
	75, 24,
	78, 24,
	86, 24,
	-2, 143,
	-1, 395,
	1, 26,
	47, 26,
	48, 26,
	64, 26,
	75, 26,
	78, 26,
	86, 26,
	-2, 145,
}

const yyPrivate = 57344

const yyLast = 4252

var yyAct = [...]int16{
	64, 219, 296, 23, 365, 7, 353, 354, 246, 9,
	216, 280, 62, 214, 281, 65, 213, 356, 355, 316,
	31, 429, 70, 72, 283, 282, 295, 146, 108, 111,
	115, 5, 8, 374, 118, 119, 120, 122, 124, 8,
	8, 127, 8, 8, 230, 144, 138, 8, 224, 224,
	431, 1, 117, 206, 308, 147, 8, 121, 123, 137,
	224, 23, 376, 8, 58, 436, 224, 62, 314, 227,
	155, 128, 395, 224, 164, 165, 166, 167, 63, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 131,
	311, 189, 190, 191, 192, 144, 194, 196, 197, 457,
	462, 420, 310, 205, 145, 224, 224, 224, 209, 334,
	159, 456, 223, 332, 92, 93, 94, 95, 96, 97,
	224, 309, 306, 394, 83, 62, 224, 224, 393, 392,
	379, 233, 235, 131, 208, 106, 135, 247, 371, 248,
	249, 337, 289, 134, 136, 330, 139, 220, 255, 126,
	162, 199, 80, 81, 82, 132, 160, 149, 104, 193,
	148, 367, 244, 102, 77, 105, 154, 100, 137, 328,
	154, 143, 253, 142, 141, 6, 131, 512, 335, 140,
	135, 61, 333, 222, 511, 509, 267, 134, 136, 44,
	506, 504, 270, 302, 232, 274, 62, 277, 254, 132,
	256, 286, 154, 263, 154, 503, 424, 251, 252, 496,
	494, 492, 137, 490, 331, 258, 259, 260, 261, 129,
	271, 125, 479, 135, 294, 278, 154, 293, 124, 129,
	134, 136, 475, 131, 133, 247, 501, 474, 329, 315,
	268, 298, 132, 313, 322, 272, 473, 301, 123, 368,
	154, 472, 464, 336, 463, 137, 450, 338, 446, 444,
	154, 443, 303, 442, 323, 439, 348, 350, 435, 412,
	390, 398, 264, 385, 23, 344, 362, 341, 326, 324,
	135, 359, 269, 361, 358, 200, 257, 134, 136, 507,
	157, 502, 129, 62, 498, 484, 482, 357, 460, 132,
	458, 440, 381, 201, 416, 321, 383, 229, 387, 370,
	156, 388, 137, 253, 116, 345, 68, 221, 453, 154,
	129, 250, 133, 133, 202, 133, 382, 291, 414, 409,
	129, 238, 133, 133, 386, 133, 360, 152, 153, 110,
	391, 154, 405, 356, 355, 491, 131, 410, 327, 408,
	407, 158, 202, 375, 283, 282, 10, 67, 372, 290,
	486, 218, 422, 419, 378, 343, 423, 389, 426, 62,
	406, 421, 312, 434, 299, 288, 287, 437, 129, 168,
	151, 66, 4, 129, 397, 113, 60, 47, 399, 400,
	2, 402, 377, 135, 59, 428, 243, 150, 297, 129,
	134, 136, 413, 417, 217, 129, 215, 279, 133, 20,
	352, 411, 132, 19, 17, 459, 16, 133, 25, 461,
	221, 26, 297, 24, 467, 137, 3, 238, 133, 0,
	0, 0, 0, 441, 0, 0, 0, 0, 0, 366,
	0, 0, 0, 445, 0, 447, 448, 465, 0, 200,
	0, 451, 0, 0, 469, 129, 454, 485, 455, 0,
	247, 489, 0, 0, 0, 0, 0, 129, 488, 0,
	0, 373, 0, 0, 0, 480, 0, 0, 0, 133,
	133, 500, 471, 0, 130, 0, 0, 0, 0, 297,
	0, 476, 373, 0, 477, 478, 0, 0, 133, 0,
	481, 0, 483, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 495, 200, 497, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	505, 0, 0, 0, 508, 0, 0, 0, 0, 510,
	0, 297, 0, 129, 0, 0, 0, 133, 133, 0,
	0, 133, 133, 0, 0, 0, 133, 0, 133, 0,
	0, 0, 225, 226, 0, 228, 0, 89, 91, 0,
	200, 236, 241, 242, 0, 245, 0, 0, 0, 0,
	92, 93, 94, 95, 96, 97, 0, 0, 98, 99,
	83, 84, 85, 0, 0, 129, 0, 0, 0, 0,
	133, 106, 129, 0, 133, 0, 0, 0, 0, 0,
	0, 133, 0, 0, 88, 90, 78, 79, 80, 81,
	82, 0, 0, 129, 104, 0, 0, 0, 0, 102,
	77, 105, 0, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 133, 0, 0, 0, 0, 0, 292, 0,
	0, 0, 0, 0, 297, 0, 0, 300, 0, 0,
	133, 0, 0, 0, 0, 0, 133, 225, 307, 0,
	0, 0, 0, 0, 0, 0, 107, 86, 87, 89,
	91, 101, 103, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 92, 93, 94, 95, 96, 97, 0, 0,
	98, 99, 83, 84, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	369, 73, 74, 75, 0, 0, 88, 90, 78, 79,
	80, 81, 82, 0, 203, 0, 104, 0, 380, 0,
	0, 102, 77, 105, 384, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 418, 0, 106,
	0, 0, 425, 0, 0, 0, 427, 0, 430, 75,
	0, 433, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 432, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 466, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 320, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 319, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	493, 0, 0, 76, 0, 0, 499, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	285, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	284, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	266, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	265, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 73, 74, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 487, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	470, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 468, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	452, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	449, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 438, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	415, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	403, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	401, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	396, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	364, 100, 46, 32, 38, 0, 0, 42, 13, 57,
	14, 27, 0, 28, 0, 0, 0, 0, 0, 0,
	0, 50, 39, 40, 41, 0, 15, 18, 0, 0,
	0, 0, 0, 0, 0, 0, 11, 12, 0, 0,
	0, 0, 0, 29, 30, 0, 0, 21, 22, 0,
	51, 54, 0, 48, 56, 55, 52, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 33, 37, 0,
	0, 0, 53, 0, 45, 0, 0, 34, 35, 36,
	0, 43, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 351, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	346, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	342, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	340, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	325, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 318, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	317, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 305, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 304, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 275, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	262, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 231, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	207, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	198, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 212, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 211, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 163, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 161, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 0, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 239, 32, 38, 0, 0, 42,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 50, 39, 40, 41, 102, 77, 105,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 46, 32, 38, 0, 0, 42, 0, 0,
	0, 135, 51, 54, 0, 48, 56, 55, 240, 136,
	49, 50, 39, 40, 41, 0, 0, 0, 0, 33,
	237, 0, 0, 0, 53, 0, 45, 234, 0, 34,
	35, 36, 0, 43, 46, 32, 38, 0, 0, 42,
	51, 54, 0, 48, 56, 55, 52, 0, 49, 0,
	0, 0, 0, 50, 39, 40, 41, 33, 37, 0,
	0, 0, 53, 0, 45, 0, 0, 34, 35, 36,
	0, 43, 363, 239, 32, 38, 0, 0, 42, 0,
	0, 0, 51, 54, 0, 48, 56, 55, 52, 0,
	49, 0, 50, 39, 40, 41, 0, 0, 0, 33,
	37, 0, 0, 0, 53, 0, 45, 0, 0, 34,
	35, 36, 0, 43, 339, 0, 0, 0, 0, 0,
	135, 51, 54, 0, 48, 56, 55, 240, 136, 49,
	0, 0, 0, 0, 0, 114, 32, 38, 33, 237,
	42, 0, 57, 53, 0, 45, 0, 0, 34, 35,
	36, 0, 43, 0, 50, 39, 40, 41, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 46, 32, 38, 0, 0, 42, 0,
	0, 0, 0, 51, 54, 0, 48, 56, 55, 52,
	0, 49, 50, 39, 40, 41, 0, 0, 0, 0,
	33, 37, 0, 0, 0, 109, 0, 45, 0, 112,
	34, 35, 36, 0, 43, 46, 32, 38, 0, 0,
	42, 51, 54, 0, 48, 56, 55, 52, 0, 49,
	0, 0, 0, 0, 50, 39, 40, 41, 33, 37,
	0, 0, 0, 53, 0, 45, 0, 276, 34, 35,
	36, 0, 43, 0, 0, 0, 0, 46, 32, 38,
	0, 0, 42, 51, 54, 0, 48, 56, 55, 52,
	0, 49, 0, 0, 0, 210, 50, 39, 40, 41,
	33, 37, 0, 0, 0, 53, 0, 45, 0, 0,
	34, 35, 36, 0, 43, 46, 32, 38, 0, 0,
	42, 0, 0, 0, 0, 51, 54, 0, 48, 56,
	55, 52, 0, 49, 50, 39, 40, 41, 0, 0,
	0, 0, 33, 37, 0, 0, 0, 53, 0, 45,
	0, 204, 34, 35, 36, 0, 43, 46, 32, 38,
	0, 0, 42, 51, 54, 0, 48, 56, 55, 52,
	0, 49, 0, 0, 0, 195, 50, 39, 40, 41,
	33, 37, 0, 0, 0, 53, 0, 45, 0, 0,
	34, 35, 36, 0, 43, 46, 32, 38, 0, 0,
	42, 0, 0, 0, 0, 51, 54, 0, 48, 56,
	55, 52, 0, 49, 50, 39, 40, 41, 0, 0,
	0, 0, 33, 37, 0, 0, 0, 53, 0, 45,
	0, 0, 34, 35, 36, 0, 43, 46, 32, 38,
	0, 0, 42, 51, 54, 0, 48, 56, 55, 52,
	0, 49, 0, 0, 0, 0, 50, 39, 40, 41,
	33, 37, 0, 0, 0, 404, 0, 45, 0, 0,
	34, 35, 36, 0, 43, 46, 32, 38, 0, 0,
	42, 0, 0, 0, 0, 51, 54, 0, 48, 56,
	55, 52, 0, 49, 50, 39, 40, 41, 0, 0,
	0, 0, 33, 37, 0, 0, 0, 349, 0, 45,
	0, 0, 34, 35, 36, 0, 43, 46, 32, 38,
	0, 0, 42, 51, 54, 0, 48, 56, 55, 52,
	0, 49, 0, 0, 0, 0, 50, 39, 40, 41,
	33, 37, 0, 0, 0, 347, 0, 45, 0, 0,
	34, 35, 36, 0, 43, 71, 32, 38, 0, 0,
	42, 0, 0, 0, 0, 51, 54, 0, 48, 56,
	55, 52, 0, 49, 50, 39, 40, 41, 0, 0,
	0, 0, 33, 37, 0, 0, 0, 273, 0, 45,
	0, 0, 34, 35, 36, 0, 43, 69, 32, 38,
	0, 0, 42, 51, 54, 0, 48, 56, 55, 52,
	0, 49, 0, 0, 0, 0, 50, 39, 40, 41,
	33, 37, 0, 0, 0, 53, 0, 45, 0, 0,
	34, 35, 36, 0, 43, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 54, 0, 48, 56,
	55, 52, 0, 49, 0, 0, 92, 93, 94, 95,
	96, 97, 33, 37, 98, 99, 83, 53, 0, 45,
	0, 0, 34, 35, 36, 0, 43, 106, 92, 93,
	94, 95, 96, 97, 0, 0, 0, 0, 83, 0,
	0, 0, 78, 79, 80, 81, 82, 0, 0, 106,
	104, 0, 0, 0, 0, 102, 77, 105, 0, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100,
}

var yyPact = [...]int16{
	-47, -1000, 1898, -47, -1000, -54, -54, -1000, -1000, -1000,
	-1000, -1000, -1000, 3873, 3873, 387, 353, -1000, 252, -1000,
	-1000, 4113, 4071, 1046, -1000, -1000, -1000, 3873, 3671, 3873,
	250, -31, -1000, 3873, 3873, 3873, 3873, 3873, -1000, -1000,
	-1000, -1000, 155, -43, 239, 3873, 80, -1000, 113, 108,
	107, 105, 31, -54, 3873, 94, 91, 386, 286, -1000,
	1898, -54, -1000, 149, 2946, 2946, 246, 287, -47, 90,
	3226, 84, 3156, 3873, 3873, 3873, 3873, 385, 3873, 3873,
	3873, 3873, 3873, 3873, 3873, 3873, 3873, 3873, 3873, 3873,
	3873, 3873, 3873, 3873, 3873, 3873, 3873, 3873, -1000, -1000,
	3873, 3873, 3873, 3873, 3873, 3831, 3873, 3873, 2876, -47,
	297, 680, 3793, -25, 80, 2806, -54, 3751, 4166, 4166,
	4166, -31, 3086, -31, 3016, 367, 81, -24, 3873, -54,
	48, -1000, 239, 239, -14, 239, 243, -40, 2736, 3873,
	3873, 3490, 239, 352, -54, 239, 3873, 2946, 3873, 3873,
	269, -1000, 3873, 3873, -54, -1000, -47, 3873, -47, 221,
	3873, 3873, 3873, 3873, 2946, 2946, 2666, 3296, -1000, 92,
	92, 4166, 4166, 4166, 2946, 4144, 4144, 568, 568, 4144,
	4144, 4144, 4144, 2946, 2946, 2946, 2946, 2946, 2946, 2946,
	3366, 2946, 3436, 205, 976, 3873, 2946, 3436, -47, 217,
	-54, 3873, -54, -47, 4033, 2596, 3709, -54, 317, 906,
	3873, 382, 381, 75, 361, 272, -1000, -1000, 239, -1000,
	367, -1000, -39, -54, 380, -33, -33, 239, -33, -54,
	-24, -1000, 195, 2526, -1000, 2456, 55, 3609, 239, 80,
	-29, 54, 35, 378, 3873, -16, -46, 2386, 2316, 836,
	3873, 149, 149, 3873, 214, 2246, 213, 328, 171, 147,
	115, 111, 3873, 74, -1000, -1000, 3570, 2176, 212, -1000,
	2106, 371, 210, -47, 2036, 3991, 3953, 1966, 306, -23,
	-1000, -1000, 282, 1898, -1000, 3528, 1816, -1000, -1000, 95,
	182, -54, -33, 71, 360, -54, -51, -54, 3873, -1000,
	-22, 370, 63, -1000, -1000, -1000, -1000, 48, 239, -1000,
	-1000, 3873, 271, -46, 239, 208, -54, 3873, -1000, -1000,
	3873, 149, 2946, -31, -1000, -47, -1000, 276, 62, -1000,
	61, -1000, 56, -1000, -5, -1000, 2946, -1000, 1746, -1000,
	-1000, -1000, -47, -1000, -1000, 206, -47, -47, 1676, -47,
	1606, 3911, -30, -1000, -1000, 275, 3873, 204, -1000, -1000,
	-47, 274, 1536, -1000, -1000, 240, -33, 239, 95, 34,
	367, 95, 139, -54, -1000, -39, 239, -44, 239, -1000,
	-34, 766, 3873, 203, -9, -1000, 3873, 2946, 1466, 200,
	237, -47, -1000, -1000, -1000, -1000, -1000, 198, -1000, 196,
	194, -47, 193, -47, -47, 1396, 191, -1000, -1000, -47,
	1326, 264, -1000, -1000, -47, -1000, -47, 44, -33, 236,
	95, -1000, -1000, 234, 95, 33, 189, -33, 187, -54,
	-33, 239, -1000, 3873, 1256, -1000, -54, 1186, -1000, -1000,
	-47, 186, -1000, -1000, -1000, 181, -1000, 172, 167, -47,
	-1000, -1000, -47, -47, -1000, 157, -1000, -54, -47, 232,
	-47, 231, 95, -1000, -1000, 366, -9, 1116, -1000, 3873,
	3873, 148, 324, -1000, -1000, -1000, 146, -1000, -1000, -1000,
	239, 145, -47, 144, -47, 230, 239, -1000, -46, 2946,
	215, 227, -1000, -33, -1000, 140, -1000, 126, -47, -33,
	125, 225, -47, -1000, -1000, 120, -1000, -47, 119, -1000,
	112, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 51, 436, 9, 366, 433, 431, 428, 426, 424,
	423, 420, 7, 6, 419, 417, 14, 11, 64, 0,
	349, 16, 416, 10, 1, 13, 414, 4, 413, 449,
	402, 199, 8, 397, 20, 400, 392, 27, 2, 185,
	5,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 5, 7, 7, 6, 6, 8, 8, 8,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 14, 15, 15, 15, 15, 15, 16, 17, 10,
	11, 11, 11, 11, 11, 12, 12, 13, 20, 20,
	20, 27, 27, 27, 28, 28, 28, 21, 21, 22,
	22, 23, 24, 25, 25, 26, 26, 18, 18, 18,
	18, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 29, 29,
	29, 29, 29, 29, 29, 30, 30, 31, 31, 32,
	32, 32, 33, 33, 33, 33, 33, 33, 34, 35,
	35, 36, 36, 36, 37, 37, 39, 39, 40, 38,
	38, 38, 38,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 1, 1, 13, 12, 9, 8, 1, 1,
	6, 5, 6, 5, 6, 5, 6, 5, 1, 1,
	1, 1, 4, 3, 3, 3, 3, 5, 7, 5,
	4, 7, 5, 6, 7, 7, 8, 7, 8, 8,
	9, 6, 0, 1, 1, 2, 2, 4, 3, 7,
	0, 1, 1, 2, 2, 4, 4, 3, 0, 1,
	4, 0, 1, 3, 0, 1, 4, 0, 1, 1,
	1, 1, 2, 1, 4, 1, 4, 0, 1, 4,
	4, 1, 1, 2, 2, 2, 2, 4, 2, 4,
	1, 1, 1, 1, 5, 3, 3, 8, 9, 10,
	9, 10, 11, 2, 5, 7, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	3, 3, 3, 5, 4, 5, 4, 4, 4, 1,
	4, 3, 4, 4, 4, 4, 6, 8, 7, 6,
	10, 5, 3, 2, 4, 4, 6, 3, 1, 3,
	2, 2, 5, 2, 6, 2, 5, 2, 3, 0,
	3, 6, 6, 5, 5, 6, 5, 5, 1, 0,
	1, 2, 1, 1, 0, 1, 1, 2, 1, 0,
	2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -35, -2, -36, 78, -39, -40, 86, -3,
	-4, 38, 39, 10, 12, 28, -8, -9, 29, -10,
	-14, 49, 50, -19, -5, -7, -6, 13, 15, 45,
	46, -34, 5, 69, 79, 80, 81, 70, 6, 24,
	25, 26, 9, 83, -31, 76, 4, -33, 55, 60,
	23, 52, 58, 74, 53, 57, 56, 11, -18, -35,
	-36, -39, -40, -18, -19, -19, 4, 14, 74, 4,
	-19, 4, -19, 61, 62, 63, 27, 82, 68, 69,
	70, 71, 72, 42, 43, 44, 17, 18, 66, 19,
	67, 20, 32, 33, 34, 35, 36, 37, 40, 41,
	85, 21, 81, 22, 76, 83, 53, 16, -19, 74,
	-20, -19, 78, -4, 4, -19, 74, 83, -19, -19,
	-19, -34, -19, -34, -19, 76, 4, 84, -37, -39,
	-29, 4, 70, -31, 58, 51, 59, 83, -19, 76,
	76, 76, 76, 76, 74, 83, -37, -19, 76, 76,
	-20, 4, 61, 62, 65, -3, 74, 13, 74, -1,
	76, 76, 76, 76, -19, -19, -19, -19, 4, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -18, -19, 64, -19, -19, 74, -1,
	-39, 16, 65, 74, 78, -19, 78, 74, -37, -19,
	64, 82, 82, -21, -25, -22, -23, -26, 4, -24,
	76, -31, -18, 74, 82, -29, -29, 83, -29, 74,
	84, 77, -18, -19, 77, -19, -29, 70, -31, 4,
	58, -29, -29, 54, -37, -29, -32, -19, -19, -19,
	62, -18, -18, -37, -1, -19, -1, 75, -18, -18,
	-18, -18, 64, 8, 77, 84, 64, -19, -1, 75,
	-19, -37, -1, 74, -19, 78, 78, -19, -37, -15,
	-17, -16, 48, 47, 84, 64, -19, 4, 4, 77,
	8, 65, -29, -21, -25, 65, -38, -39, -37, 4,
	-29, -37, 8, 77, 77, 77, 77, -29, 83, 77,
	77, 65, 4, -32, 84, -38, 65, 64, 77, 77,
	65, -18, -19, -34, 75, 74, 75, 30, 8, 77,
	8, 77, 8, 77, 8, 77, -19, 77, -19, 84,
	84, 75, 74, 4, 75, -1, 74, 74, -19, 74,
	-19, 78, -11, -13, -12, 48, 47, -37, -16, -17,
	64, -3, -19, 84, 84, -27, -29, 76, 77, -29,
	-37, 77, 8, -39, 84, -18, 84, -30, 4, 77,
	-29, -19, 65, -38, -29, 75, -37, -19, -19, -1,
	4, 74, 77, 77, 77, 77, 84, -1, 75, -1,
	-1, 74, -1, 74, 74, -19, -37, -12, -13, 64,
	-19, -18, 75, -1, 64, 84, 74, -28, -29, -27,
	77, -23, -24, -27, 77, -29, -38, -29, -37, 65,
	-29, 84, 77, 65, -19, 75, 74, -19, 77, 75,
	74, -1, 75, 75, 75, -1, 75, -1, -1, 74,
	75, -1, 64, 64, -1, -1, 77, 65, 74, -27,
	74, -27, 77, 75, 75, -37, -29, -19, 77, -37,
	64, -1, 75, 75, 75, 75, -1, -1, -1, 75,
	-37, -1, 74, -1, 74, -27, 4, 77, -32, -19,
	75, 31, 75, -29, 75, -1, 75, -1, 74, -29,
	-38, 31, 74, 75, 75, -1, 75, 74, -1, 75,
	-1, 75, 75,
}

var yyDef = [...]int16{
	189, -2, -2, 189, 190, 193, 192, 196, 198, 3,
	6, 7, 8, 87, 0, 0, 12, 13, 0, 18,
	19, 0, 0, -2, 29, 30, 31, 0, -2, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 100, 101,
	102, 103, 0, 194, 0, 0, 188, 149, 0, 0,
	0, 0, 0, 194, 0, 0, 0, 68, 0, 2,
	-2, 191, 197, 9, 88, 10, 0, 0, 189, 188,
	0, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 138,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 189,
	0, 88, 0, 0, -2, 0, 194, 0, 93, 94,
	95, -2, 0, -2, 0, 77, 0, -2, 87, 195,
	0, 168, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 194, 0, 179, 163, 0, 0,
	0, 69, 87, 87, 194, 4, 189, 0, 189, 0,
	87, 87, 87, 87, 33, 35, 0, 105, 106, 117,
	118, 119, 120, 121, 122, 123, 124, -2, -2, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 141, 142, 0, 0, 0, 162, 167, 189, 0,
	192, 0, 194, 189, 0, 0, 0, 194, 52, 0,
	0, 0, 0, 0, 79, 78, 83, 80, 81, 85,
	77, 178, 199, 194, 0, 170, 171, 0, 173, 194,
	177, 116, 0, 0, 151, 0, 0, 0, 0, -2,
	0, 0, 0, 0, 179, 0, 199, 0, 0, 0,
	87, 34, 36, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 148, 0, 0, 0, 40,
	0, 0, 0, 189, 0, 0, 0, 0, 60, 194,
	53, 54, 0, -2, 147, 0, 0, 97, 99, 71,
	0, 194, 82, 0, 79, -2, 0, 201, 87, 169,
	0, 0, 0, 144, 150, 152, 153, 171, 0, 154,
	155, 0, 0, 199, 0, 0, -2, 0, 164, 165,
	0, 32, 89, -2, 11, 189, 39, 0, 0, -2,
	0, -2, 0, -2, 0, -2, 104, 145, 0, 186,
	187, 37, 189, 70, 42, 0, 189, 189, 0, 189,
	0, 0, 194, 61, 62, 0, 87, 0, 55, 56,
	189, 0, 0, 183, 184, 0, 72, 74, 71, 0,
	0, 71, 0, -2, 114, 199, 0, 194, 0, 143,
	0, 0, 0, 0, 0, 161, 0, 180, 0, 0,
	0, 189, -2, -2, -2, -2, 185, 0, 43, 0,
	0, 189, 0, 189, 189, 0, 0, 63, 64, 189,
	88, 0, 51, 58, 189, 182, 189, 0, 75, 0,
	71, 84, 86, 0, 71, 0, 0, 172, 0, 194,
	175, 0, 156, 0, 0, 159, 194, 0, 166, 38,
	189, 0, 41, 44, 45, 0, 47, 0, 0, 189,
	59, 67, 189, 189, 57, 0, 73, 194, 189, 0,
	189, 0, 71, 115, 174, 0, 172, 0, 158, 179,
	0, 0, 17, 46, 48, 49, 0, 65, 66, 107,
	0, 0, 189, 0, 189, 0, 0, 157, 199, 181,
	16, 0, 50, 76, 108, 0, 110, 0, 189, 176,
	0, 0, 189, 109, 111, 0, 160, 189, 0, 112,
	0, 15, 14,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 72, 81, 3,
	76, 77, 70, 68, 65, 69, 82, 71, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 64, 78,
	67, 62, 66, 63, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 83, 3, 84, 80, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 85, 75,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	73,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:106
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:110
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:116
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:125
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:141
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:145
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:149
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:154
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:159
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:169
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:174
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:178
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 14:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:210
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:215
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:220
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:225
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:230
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:235
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:240
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:245
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:250
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:257
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:261
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:265
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:271
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:278
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:282
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:299
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:303
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:320
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:325
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:330
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:340
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:345
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:356
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:361
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:366
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:371
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:376
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:381
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:386
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:391
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:396
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:403
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:410
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:414
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:418
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:422
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:427
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:438
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:445
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:451
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:460
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:464
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:468
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:472
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:478
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:489
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:494
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:501
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:506
		{
			yyVAL.expr_idents = []string{}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:510
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:514
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:522
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:526
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:530
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:534
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:538
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:542
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:550
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:554
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:560
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:564
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:570
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:576
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:582
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:586
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:592
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:596
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:601
		{
			yyVAL.exprs = nil
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:605
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:609
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:616
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:625
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:629
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:634
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:639
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:644
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:649
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:654
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:659
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:664
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:669
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:674
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:679
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:684
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:689
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:694
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:699
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 107:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:704
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:709
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 109:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:714
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 110:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:720
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:725
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 112:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:730
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:736
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:741
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 115:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:746
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:751
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:756
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:761
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:766
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:771
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:776
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:781
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:786
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:791
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:796
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:801
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:806
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:811
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:816
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:821
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:826
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:831
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:836
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:841
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:846
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:851
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:856
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:861
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:866
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:871
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:876
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:881
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:886
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:891
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:896
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:901
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:906
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:911
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:916
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:921
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:926
		{
			yyVAL.expr = &ast.DbgExpr{}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:931
		{
			yyVAL.expr = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:936
		{
			yyVAL.expr = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:941
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:951
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 156:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:956
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 157:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:961
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 158:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:966
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:971
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 160:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:977
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:983
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:988
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:993
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:998
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1003
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1008
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1013
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1021
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1025
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1034
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1043
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1053
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1057
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1066
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1072
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1076
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1086
		{
			yyVAL.slice_count = 1
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1090
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1097
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1101
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1105
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 182:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1115
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1119
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1123
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1127
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1131
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1135
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1141
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
