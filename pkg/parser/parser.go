// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                      int
	compstmt                 ast.Stmt
	stmts                    *ast.StmtsStmt
	stmt_var_or_lets         ast.Stmt
	opt_stmt_var_or_lets     ast.Stmt
	stmt_var                 ast.Stmt
	stmt_lets                ast.Stmt
	stmt_typed_lets          ast.Stmt
	stmt_try                 ast.Stmt
	stmt_defer               ast.Stmt
	stmt_go                  ast.Stmt
	stmt_if                  ast.Stmt
	stmt_if_helper           ast.Stmt
	stmt_for                 ast.Stmt
	stmt_switch              ast.Stmt
	stmt_switch_cases        *ast.SwitchStmt
	stmt_switch_cases_helper *ast.SwitchStmt
	stmt_switch_case         ast.Stmt
	stmt_switch_default      ast.Stmt
	stmt_select              ast.Stmt
	stmt_select_body         *ast.SelectBodyStmt
	stmt_select_content      *ast.SelectBodyStmt
	stmt_select_cases        *ast.SelectBodyStmt
	stmt_select_cases_helper *ast.SelectBodyStmt
	stmt_select_case         ast.Stmt
	stmt_select_default      ast.Stmt
	stmt                     ast.Stmt
	stmt_module              ast.Stmt
	stmt_break               ast.Stmt
	stmt_return              ast.Stmt
	stmt_continue            ast.Stmt
	stmt_throw               ast.Stmt
	stmt_expr                *ast.ExprStmt
	expr                     ast.Expr
	opt_expr                 ast.Expr
	expr_dbg                 ast.Expr
	expr_literals            ast.Expr
	expr_literals_helper     ast.Expr
	expr_close               ast.Expr
	expr_delete              ast.Expr
	expr_in                  ast.Expr
	expr_opchan              ast.Expr
	expr_new                 ast.Expr
	expr_array               ast.Expr
	expr_paren               ast.Expr
	expr_nil_coalesce        ast.Expr
	expr_ternary             ast.Expr
	expr_len                 ast.Expr
	expr_unary               ast.Expr
	expr_binary              ast.Expr
	op_comparison            ast.Expr
	expr_assoc               ast.Expr
	expr_member_or_ident     ast.Expr
	expr_member              ast.Expr
	expr_call                *ast.CallExpr
	expr_call_helper         struct {
		Exprs  []ast.Expr
		VarArg bool
	}
	expr_anon_call                *ast.AnonCallExpr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	opt_exprs                     []ast.Expr
	comma_separated_exprs         []ast.Expr
	expr_idents                   []string
	expr_for_idents               []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_args                struct {
		Params   []*ast.ParamExpr
		VarArg   bool
		TypeData *ast.TypeStruct
	}
	func_expr_typed_idents       []*ast.ParamExpr
	opt_func_return_expr_idents  []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1 []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents2 []*ast.FuncReturnValuesExpr
	expr_map                     *ast.MapExpr
	expr_map_content             *ast.MapExpr
	expr_map_content_helper      *ast.MapExpr
	expr_map_key_value           []ast.Expr
	type_data                    *ast.TypeStruct
	type_data_struct             *ast.TypeStruct
	slice_count                  int
	tok                          ast.Token
	expr_item_or_slice           ast.Expr
	expr_slice_helper1           ast.Expr
	expr_ident                   *ast.IdentExpr
	opt_expr_ident               *ast.IdentExpr
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57405
	yyEofCode   = 57344
	ANDAND      = 57364
	ANDEQ       = 57378
	ARRAY       = 57349
	BREAK       = 57380
	CASE        = 57389
	CATCH       = 57372
	CHAN        = 57393
	CLOSE       = 57399
	CONTINUE    = 57381
	DBG         = 57402
	DEFAULT     = 57390
	DEFER       = 57392
	DELETE      = 57398
	DIVEQ       = 57377
	ELSE        = 57356
	EQEQ        = 57359
	FALSE       = 57367
	FINALLY     = 57373
	FOR         = 57357
	FUNC        = 57351
	GE          = 57361
	GO          = 57391
	IDENT       = 57346
	IF          = 57355
	IN          = 57358
	LE          = 57362
	LEN         = 57397
	MAKE        = 57394
	MAP         = 57400
	MINUSEQ     = 57375
	MINUSMINUS  = 57383
	MODULE      = 57370
	MULEQ       = 57376
	NEQ         = 57360
	NEW         = 57365
	NIL         = 57368
	NILCOALESCE = 57369
	NUMBER      = 57347
	OPCHAN      = 57395
	OREQ        = 57379
	OROR        = 57363
	PLUSEQ      = 57374
	PLUSPLUS    = 57382
	POW         = 57384
	RETURN      = 57352
	SELECT      = 57388
	SHIFTLEFT   = 57385
	SHIFTRIGHT  = 57386
	STRING      = 57348
	STRUCT      = 57401
	SWITCH      = 57387
	THROW       = 57354
	TRUE        = 57366
	TRY         = 57371
	TYPE        = 57396
	UNARY       = 57404
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57403
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -231
)

var (
	yyPrec = map[int]int{
		POW:         0,
		'=':         1,
		PLUSEQ:      1,
		MINUSEQ:     1,
		DIVEQ:       1,
		MULEQ:       1,
		ANDEQ:       1,
		OREQ:        1,
		':':         2,
		OPCHAN:      3,
		'?':         4,
		NILCOALESCE: 4,
		OROR:        5,
		ANDAND:      6,
		EQEQ:        7,
		NEQ:         7,
		'<':         7,
		LE:          7,
		'>':         7,
		GE:          7,
		'+':         8,
		'-':         9,
		'|':         9,
		'^':         9,
		'*':         10,
		'/':         10,
		'%':         10,
		SHIFTLEFT:   10,
		SHIFTRIGHT:  10,
		'&':         10,
		IN:          11,
		PLUSPLUS:    12,
		MINUSMINUS:  12,
		UNARY:       13,
	}

	yyXLAT = map[int]int{
		91:    0,   // '[' (264x)
		42:    1,   // '*' (261x)
		125:   2,   // '}' (252x)
		40:    3,   // '(' (250x)
		123:   4,   // '{' (240x)
		38:    5,   // '&' (239x)
		45:    6,   // '-' (239x)
		57395: 7,   // OPCHAN (239x)
		10:    8,   // '\n' (226x)
		57389: 9,   // CASE (185x)
		57390: 10,  // DEFAULT (185x)
		59:    11,  // ';' (175x)
		57344: 12,  // $end (162x)
		58:    13,  // ':' (156x)
		46:    14,  // '.' (155x)
		44:    15,  // ',' (151x)
		41:    16,  // ')' (146x)
		57346: 17,  // IDENT (145x)
		57358: 18,  // IN (133x)
		37:    19,  // '%' (131x)
		43:    20,  // '+' (131x)
		47:    21,  // '/' (131x)
		60:    22,  // '<' (131x)
		62:    23,  // '>' (131x)
		63:    24,  // '?' (131x)
		124:   25,  // '|' (131x)
		57364: 26,  // ANDAND (131x)
		57378: 27,  // ANDEQ (131x)
		57377: 28,  // DIVEQ (131x)
		57359: 29,  // EQEQ (131x)
		57361: 30,  // GE (131x)
		57362: 31,  // LE (131x)
		57400: 32,  // MAP (131x)
		57375: 33,  // MINUSEQ (131x)
		57383: 34,  // MINUSMINUS (131x)
		57376: 35,  // MULEQ (131x)
		57360: 36,  // NEQ (131x)
		57369: 37,  // NILCOALESCE (131x)
		57379: 38,  // OREQ (131x)
		57363: 39,  // OROR (131x)
		57374: 40,  // PLUSEQ (131x)
		57382: 41,  // PLUSPLUS (131x)
		57384: 42,  // POW (131x)
		57385: 43,  // SHIFTLEFT (131x)
		57386: 44,  // SHIFTRIGHT (131x)
		93:    45,  // ']' (129x)
		33:    46,  // '!' (108x)
		94:    47,  // '^' (108x)
		57399: 48,  // CLOSE (108x)
		57402: 49,  // DBG (108x)
		57398: 50,  // DELETE (108x)
		57367: 51,  // FALSE (108x)
		57351: 52,  // FUNC (108x)
		57397: 53,  // LEN (108x)
		57394: 54,  // MAKE (108x)
		57365: 55,  // NEW (108x)
		57368: 56,  // NIL (108x)
		57347: 57,  // NUMBER (108x)
		57348: 58,  // STRING (108x)
		57366: 59,  // TRUE (108x)
		61:    60,  // '=' (106x)
		57350: 61,  // VARARG (105x)
		57403: 62,  // WALRUS (103x)
		57463: 63,  // slice_count (94x)
		57421: 64,  // expr_ident (73x)
		57409: 65,  // expr (72x)
		57410: 66,  // expr_anon_call (72x)
		57411: 67,  // expr_array (72x)
		57412: 68,  // expr_assoc (72x)
		57413: 69,  // expr_binary (72x)
		57414: 70,  // expr_call (72x)
		57416: 71,  // expr_close (72x)
		57417: 72,  // expr_dbg (72x)
		57418: 73,  // expr_delete (72x)
		57420: 74,  // expr_func (72x)
		57423: 75,  // expr_in (72x)
		57424: 76,  // expr_item_or_slice (72x)
		57425: 77,  // expr_len (72x)
		57426: 78,  // expr_literals (72x)
		57427: 79,  // expr_literals_helper (72x)
		57428: 80,  // expr_make (72x)
		57429: 81,  // expr_map (72x)
		57433: 82,  // expr_member (72x)
		57434: 83,  // expr_member_or_ident (72x)
		57435: 84,  // expr_new (72x)
		57436: 85,  // expr_nil_coalesce (72x)
		57437: 86,  // expr_opchan (72x)
		57438: 87,  // expr_paren (72x)
		57440: 88,  // expr_ternary (72x)
		57441: 89,  // expr_unary (72x)
		57452: 90,  // op_comparison (72x)
		57415: 91,  // expr_call_helper (62x)
		57439: 92,  // expr_slice_helper1 (59x)
		57450: 93,  // newline (40x)
		57451: 94,  // newlines (36x)
		57355: 95,  // IF (32x)
		57353: 96,  // VAR (32x)
		57380: 97,  // BREAK (31x)
		57393: 98,  // CHAN (31x)
		57381: 99,  // CONTINUE (31x)
		57392: 100, // DEFER (31x)
		57357: 101, // FOR (31x)
		57391: 102, // GO (31x)
		57370: 103, // MODULE (31x)
		57352: 104, // RETURN (31x)
		57388: 105, // SELECT (31x)
		57401: 106, // STRUCT (31x)
		57387: 107, // SWITCH (31x)
		57354: 108, // THROW (31x)
		57371: 109, // TRY (31x)
		57496: 110, // type_data (22x)
		57462: 111, // opt_term (21x)
		57495: 112, // term (21x)
		57408: 113, // compstmt (20x)
		57460: 114, // opt_newlines (15x)
		57406: 115, // comma_opt_newlines (12x)
		57442: 116, // exprs (11x)
		57356: 117, // ELSE (4x)
		57430: 118, // expr_map_content (4x)
		57456: 119, // opt_exprs (4x)
		57474: 120, // stmt_lets (4x)
		57491: 121, // stmt_typed_lets (4x)
		57492: 122, // stmt_var (4x)
		57493: 123, // stmt_var_or_lets (4x)
		57465: 124, // stmt (3x)
		57466: 125, // stmt_break (3x)
		57467: 126, // stmt_continue (3x)
		57468: 127, // stmt_defer (3x)
		57469: 128, // stmt_expr (3x)
		57470: 129, // stmt_for (3x)
		57471: 130, // stmt_go (3x)
		57472: 131, // stmt_if (3x)
		57473: 132, // stmt_if_helper (3x)
		57475: 133, // stmt_module (3x)
		57476: 134, // stmt_return (3x)
		57477: 135, // stmt_select (3x)
		57484: 136, // stmt_switch (3x)
		57489: 137, // stmt_throw (3x)
		57490: 138, // stmt_try (3x)
		57407: 139, // comma_separated_exprs (2x)
		57432: 140, // expr_map_key_value (2x)
		57373: 141, // FINALLY (2x)
		57447: 142, // func_expr_typed_ident (2x)
		57449: 143, // func_expr_untyped_ident (2x)
		57453: 144, // opt_comma_opt_newlines (2x)
		57454: 145, // opt_expr (2x)
		57479: 146, // stmt_select_case (2x)
		57483: 147, // stmt_select_default (2x)
		57485: 148, // stmt_switch_case (2x)
		57488: 149, // stmt_switch_default (2x)
		57372: 150, // CATCH (1x)
		57419: 151, // expr_for_idents (1x)
		57422: 152, // expr_idents (1x)
		57431: 153, // expr_map_content_helper (1x)
		57443: 154, // func_expr_args (1x)
		57444: 155, // func_expr_idents (1x)
		57445: 156, // func_expr_idents_last_untyped (1x)
		57446: 157, // func_expr_idents_not_empty (1x)
		57448: 158, // func_expr_typed_idents (1x)
		57455: 159, // opt_expr_ident (1x)
		57457: 160, // opt_func_return_expr_idents (1x)
		57458: 161, // opt_func_return_expr_idents1 (1x)
		57459: 162, // opt_func_return_expr_idents2 (1x)
		57461: 163, // opt_stmt_var_or_lets (1x)
		57464: 164, // start (1x)
		57478: 165, // stmt_select_body (1x)
		57480: 166, // stmt_select_cases (1x)
		57481: 167, // stmt_select_cases_helper (1x)
		57482: 168, // stmt_select_content (1x)
		57486: 169, // stmt_switch_cases (1x)
		57487: 170, // stmt_switch_cases_helper (1x)
		57494: 171, // stmts (1x)
		57396: 172, // TYPE (1x)
		57497: 173, // type_data_struct (1x)
		57405: 174, // $default (0x)
		57349: 175, // ARRAY (0x)
		57345: 176, // error (0x)
		57404: 177, // UNARY (0x)
	}

	yySymNames = []string{
		"'['",
		"'*'",
		"'}'",
		"'('",
		"'{'",
		"'&'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"CASE",
		"DEFAULT",
		"';'",
		"$end",
		"':'",
		"'.'",
		"','",
		"')'",
		"IDENT",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MAP",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"']'",
		"'!'",
		"'^'",
		"CLOSE",
		"DBG",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"'='",
		"VARARG",
		"WALRUS",
		"slice_count",
		"expr_ident",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_dbg",
		"expr_delete",
		"expr_func",
		"expr_in",
		"expr_item_or_slice",
		"expr_len",
		"expr_literals",
		"expr_literals_helper",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_nil_coalesce",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"op_comparison",
		"expr_call_helper",
		"expr_slice_helper1",
		"newline",
		"newlines",
		"IF",
		"VAR",
		"BREAK",
		"CHAN",
		"CONTINUE",
		"DEFER",
		"FOR",
		"GO",
		"MODULE",
		"RETURN",
		"SELECT",
		"STRUCT",
		"SWITCH",
		"THROW",
		"TRY",
		"type_data",
		"opt_term",
		"term",
		"compstmt",
		"opt_newlines",
		"comma_opt_newlines",
		"exprs",
		"ELSE",
		"expr_map_content",
		"opt_exprs",
		"stmt_lets",
		"stmt_typed_lets",
		"stmt_var",
		"stmt_var_or_lets",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_if",
		"stmt_if_helper",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"comma_separated_exprs",
		"expr_map_key_value",
		"FINALLY",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"opt_comma_opt_newlines",
		"opt_expr",
		"stmt_select_case",
		"stmt_select_default",
		"stmt_switch_case",
		"stmt_switch_default",
		"CATCH",
		"expr_for_idents",
		"expr_idents",
		"expr_map_content_helper",
		"func_expr_args",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"opt_expr_ident",
		"opt_func_return_expr_idents",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"opt_stmt_var_or_lets",
		"start",
		"stmt_select_body",
		"stmt_select_cases",
		"stmt_select_cases_helper",
		"stmt_select_content",
		"stmt_switch_cases",
		"stmt_switch_cases_helper",
		"stmts",
		"TYPE",
		"type_data_struct",
		"$default",
		"ARRAY",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {164, 1},
		2:   {113, 1},
		3:   {113, 3},
		4:   {171, 1},
		5:   {171, 3},
		6:   {124, 1},
		7:   {124, 1},
		8:   {124, 1},
		9:   {124, 1},
		10:  {124, 1},
		11:  {124, 1},
		12:  {124, 1},
		13:  {124, 1},
		14:  {124, 1},
		15:  {124, 1},
		16:  {124, 1},
		17:  {124, 1},
		18:  {124, 1},
		19:  {124, 1},
		20:  {125, 1},
		21:  {126, 1},
		22:  {134, 2},
		23:  {137, 2},
		24:  {133, 5},
		25:  {128, 1},
		26:  {130, 2},
		27:  {130, 2},
		28:  {127, 2},
		29:  {127, 2},
		30:  {138, 13},
		31:  {138, 12},
		32:  {138, 9},
		33:  {138, 8},
		34:  {163, 0},
		35:  {163, 1},
		36:  {123, 1},
		37:  {123, 1},
		38:  {123, 1},
		39:  {122, 4},
		40:  {121, 3},
		41:  {120, 3},
		42:  {131, 1},
		43:  {132, 5},
		44:  {132, 7},
		45:  {132, 5},
		46:  {129, 4},
		47:  {129, 5},
		48:  {129, 7},
		49:  {129, 9},
		50:  {151, 1},
		51:  {151, 3},
		52:  {135, 4},
		53:  {168, 3},
		54:  {166, 0},
		55:  {166, 1},
		56:  {167, 1},
		57:  {167, 2},
		58:  {167, 2},
		59:  {165, 1},
		60:  {165, 1},
		61:  {146, 4},
		62:  {147, 3},
		63:  {136, 7},
		64:  {169, 0},
		65:  {169, 1},
		66:  {170, 1},
		67:  {170, 1},
		68:  {170, 2},
		69:  {170, 2},
		70:  {148, 4},
		71:  {148, 4},
		72:  {149, 3},
		73:  {160, 0},
		74:  {160, 1},
		75:  {160, 3},
		76:  {161, 0},
		77:  {161, 1},
		78:  {162, 1},
		79:  {162, 3},
		80:  {155, 0},
		81:  {155, 1},
		82:  {157, 1},
		83:  {157, 1},
		84:  {143, 1},
		85:  {142, 2},
		86:  {156, 1},
		87:  {156, 3},
		88:  {158, 1},
		89:  {158, 3},
		90:  {119, 0},
		91:  {119, 1},
		92:  {116, 1},
		93:  {116, 3},
		94:  {145, 0},
		95:  {145, 1},
		96:  {65, 1},
		97:  {65, 1},
		98:  {65, 1},
		99:  {65, 1},
		100: {65, 1},
		101: {65, 1},
		102: {65, 1},
		103: {65, 1},
		104: {65, 1},
		105: {65, 1},
		106: {65, 1},
		107: {65, 1},
		108: {65, 1},
		109: {65, 1},
		110: {65, 1},
		111: {65, 1},
		112: {65, 1},
		113: {65, 1},
		114: {65, 1},
		115: {65, 1},
		116: {65, 1},
		117: {72, 3},
		118: {72, 4},
		119: {72, 4},
		120: {77, 4},
		121: {87, 3},
		122: {67, 2},
		123: {67, 3},
		124: {67, 5},
		125: {139, 3},
		126: {85, 3},
		127: {88, 5},
		128: {84, 4},
		129: {86, 3},
		130: {86, 2},
		131: {75, 3},
		132: {73, 4},
		133: {73, 6},
		134: {71, 4},
		135: {78, 1},
		136: {79, 1},
		137: {79, 1},
		138: {79, 1},
		139: {79, 1},
		140: {79, 1},
		141: {83, 1},
		142: {83, 1},
		143: {64, 1},
		144: {82, 3},
		145: {159, 0},
		146: {159, 1},
		147: {70, 2},
		148: {66, 2},
		149: {91, 4},
		150: {91, 3},
		151: {89, 2},
		152: {89, 2},
		153: {89, 2},
		154: {89, 2},
		155: {89, 2},
		156: {69, 3},
		157: {69, 3},
		158: {69, 3},
		159: {69, 3},
		160: {69, 3},
		161: {69, 3},
		162: {69, 3},
		163: {69, 3},
		164: {69, 1},
		165: {69, 1},
		166: {69, 3},
		167: {69, 3},
		168: {69, 3},
		169: {69, 3},
		170: {68, 3},
		171: {68, 3},
		172: {68, 3},
		173: {68, 3},
		174: {68, 3},
		175: {68, 3},
		176: {68, 2},
		177: {68, 2},
		178: {90, 3},
		179: {90, 3},
		180: {90, 3},
		181: {90, 3},
		182: {90, 3},
		183: {90, 3},
		184: {74, 9},
		185: {154, 3},
		186: {154, 2},
		187: {154, 1},
		188: {80, 4},
		189: {80, 6},
		190: {80, 8},
		191: {80, 7},
		192: {110, 1},
		193: {110, 3},
		194: {110, 2},
		195: {110, 2},
		196: {110, 5},
		197: {110, 2},
		198: {110, 6},
		199: {173, 2},
		200: {173, 4},
		201: {63, 2},
		202: {63, 3},
		203: {81, 4},
		204: {81, 8},
		205: {81, 3},
		206: {118, 1},
		207: {118, 3},
		208: {153, 1},
		209: {153, 3},
		210: {140, 3},
		211: {76, 2},
		212: {92, 3},
		213: {92, 5},
		214: {92, 4},
		215: {92, 4},
		216: {152, 1},
		217: {152, 3},
		218: {111, 0},
		219: {111, 1},
		220: {112, 1},
		221: {112, 1},
		222: {112, 2},
		223: {114, 0},
		224: {114, 1},
		225: {94, 1},
		226: {94, 2},
		227: {93, 1},
		228: {115, 2},
		229: {144, 1},
		230: {144, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [451][]uint16{
		// 0
		{13, 13, 3: 13, 13, 13, 13, 13, 239, 11: 236, 13, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 233, 164: 232},
		{12: 231},
		{12: 230},
		{301, 320, 229, 300, 326, 319, 316, 304, 229, 229, 229, 12: 229, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 263, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 95: 273, 270, 258, 99: 259, 265, 274, 264, 262, 260, 275, 107: 276, 261, 266, 116: 271, 120: 269, 268, 267, 244, 243, 245, 246, 256, 257, 251, 255, 250, 272, 249, 247, 254, 253, 248, 252, 171: 242},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12: 12, 17: 12, 32: 12, 46: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 12, 12, 12, 99: 12, 12, 12, 12, 12, 12, 12, 107: 12, 12, 12},
		// 5
		{11, 11, 11, 11, 11, 11, 11, 11, 239, 11, 11, 12: 11, 17: 11, 32: 11, 46: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 93: 238, 241, 11, 11, 11, 99: 11, 11, 11, 11, 11, 11, 11, 107: 11, 11, 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 239, 10, 10, 12: 10, 17: 10, 32: 10, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 93: 240, 95: 10, 10, 10, 99: 10, 10, 10, 10, 10, 10, 10, 107: 10, 10, 10},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12: 6, 15: 6, 17: 6, 32: 6, 45: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 95: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12: 4, 15: 4, 17: 4, 32: 4, 45: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 95: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12: 5, 15: 5, 17: 5, 32: 5, 45: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 95: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		// 10
		{9, 9, 9, 9, 9, 9, 9, 9, 239, 9, 9, 12: 9, 17: 9, 32: 9, 46: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 93: 240, 95: 9, 9, 9, 99: 9, 9, 9, 9, 9, 9, 9, 107: 9, 9, 9},
		{2: 13, 8: 239, 13, 13, 236, 13, 93: 238, 237, 111: 679, 680},
		{2: 227, 8: 227, 227, 227, 227, 227},
		{2: 225, 8: 225, 225, 225, 225, 225, 225},
		{2: 224, 8: 224, 224, 224, 224, 224, 224},
		// 15
		{2: 223, 8: 223, 223, 223, 223, 223, 223},
		{2: 222, 8: 222, 222, 222, 222, 222, 222},
		{2: 221, 8: 221, 221, 221, 221, 221, 221},
		{2: 220, 8: 220, 220, 220, 220, 220, 220},
		{2: 219, 8: 219, 219, 219, 219, 219, 219},
		// 20
		{2: 218, 8: 218, 218, 218, 218, 218, 218},
		{2: 217, 8: 217, 217, 217, 217, 217, 217},
		{2: 216, 8: 216, 216, 216, 216, 216, 216},
		{2: 215, 8: 215, 215, 215, 215, 215, 215},
		{2: 214, 8: 214, 214, 214, 214, 214, 214},
		// 25
		{2: 213, 8: 213, 213, 213, 213, 213, 213},
		{2: 212, 8: 212, 212, 212, 212, 212, 212},
		{2: 211, 8: 211, 211, 211, 211, 211, 211},
		{2: 210, 8: 210, 210, 210, 210, 210, 210},
		{301, 320, 141, 300, 326, 319, 316, 304, 141, 141, 141, 141, 141, 141, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 410, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 116: 532, 119: 678},
		// 30
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 677, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{17: 673},
		{374, 348, 206, 345, 5: 356, 347, 341, 206, 206, 206, 206, 206, 206, 343, 139, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 60: 139, 62: 139, 91: 344, 373},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 509, 672, 283, 322, 285, 671, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 509, 670, 283, 322, 285, 669, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		// 35
		{4: 650},
		{2: 195, 8: 195, 195, 195, 195, 195, 195},
		{2: 194, 8: 194, 194, 194, 194, 194, 194},
		{2: 193, 8: 193, 193, 193, 193, 193, 193},
		{17: 645, 152: 644},
		// 40
		{15: 335, 60: 641, 62: 640, 115: 413},
		{2: 189, 8: 189, 189, 189, 189, 189, 189, 117: 631},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 627, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 601, 319, 316, 304, 11: 197, 17: 605, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 602, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 96: 270, 116: 271, 120: 269, 268, 267, 600, 151: 603, 163: 604},
		{4: 581},
		// 45
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 560, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 18: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 33: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 60: 135, 135, 135},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 18: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 33: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 60: 134, 134, 134},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 18: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 33: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 60: 133, 133, 133},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 18: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 33: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 60: 132, 132, 132},
		// 50
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 18: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 33: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 60: 131, 131, 131},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 18: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 33: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 60: 130, 130, 130},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 18: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 33: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 60: 129, 129, 129},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 18: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 33: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 60: 128, 128, 128},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 18: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 33: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 60: 127, 127, 127},
		// 55
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 18: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 33: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 60: 126, 126, 126},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 18: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 33: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 60: 125, 125, 125},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 18: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 33: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 60: 124, 124, 124},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 18: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 33: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 60: 123, 123, 123},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 18: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 33: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 60: 122, 122, 122},
		// 60
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 18: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 33: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 60: 121, 121, 121},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 18: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 33: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 60: 120, 120, 120},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 18: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 33: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 60: 119, 119, 119},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 18: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 33: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 60: 118, 118, 118},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 18: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 33: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 60: 117, 117, 117},
		// 65
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 18: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 33: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 60: 116, 116, 116},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 18: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 33: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 60: 115, 115, 115},
		{3: 545},
		{3: 542},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 540, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		// 70
		{8, 8, 3: 8, 8, 8, 8, 8, 239, 15: 8, 17: 8, 32: 8, 45: 537, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 238, 329, 114: 531, 139: 538},
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 528},
		{3: 525},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 524, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{3: 518},
		// 75
		{3: 515},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 18: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 33: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 60: 96, 96, 96},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 18: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 33: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 60: 95, 95, 95},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 18: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 33: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 60: 94, 94, 94},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 18: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 33: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 60: 93, 93, 93},
		// 80
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 18: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 33: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 60: 92, 92, 92},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 18: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 33: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 60: 91, 91, 91},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 18: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 33: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 60: 90, 90, 90},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 18: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 33: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 60: 89, 89, 89},
		{88, 88, 88, 345, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 18: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 33: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 60: 88, 88, 88, 91: 514},
		// 85
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 513, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 512, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 511, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 509, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 510, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 509, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 508, 291, 281, 294, 284, 280, 279, 321},
		// 90
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 18: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 33: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 60: 67, 67, 67},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 18: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 33: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 60: 66, 66, 66},
		{3: 86, 17: 477, 64: 478, 159: 479},
		{3: 463},
		{426, 4: 425},
		// 95
		{8, 8, 8, 8, 8, 8, 8, 8, 239, 17: 8, 32: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 238, 329, 114: 328, 118: 327},
		{2: 424},
		{301, 320, 25, 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 330, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 140: 332, 153: 331},
		{7, 7, 7, 7, 7, 7, 7, 7, 239, 7, 7, 15: 7, 17: 7, 32: 7, 45: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 93: 240, 98: 7, 106: 7},
		{374, 348, 3: 345, 5: 356, 347, 341, 13: 372, 343, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		// 100
		{2: 8, 8: 239, 15: 335, 93: 238, 329, 114: 336, 334, 144: 333},
		{2: 23, 8: 23, 15: 23},
		{2: 24},
		{301, 320, 2, 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 330, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 140: 338},
		{8, 8, 8, 8, 8, 8, 8, 8, 239, 17: 8, 32: 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 238, 329, 98: 8, 106: 8, 114: 337},
		// 105
		{2: 1, 45: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 17: 3, 32: 3, 45: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 98: 3, 106: 3},
		{2: 22, 8: 22, 15: 22},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 423, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 420, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		// 110
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 419, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 418, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{17: 417},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 18: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 33: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 60: 83, 83, 83},
		{301, 320, 3: 300, 326, 319, 316, 304, 16: 141, 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 410, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 116: 409, 119: 411},
		// 115
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 408, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 407, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 406, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 405, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 404, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		// 120
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 403, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 402, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 401, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 400, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 399, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		// 125
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 398, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 397, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 396, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 395, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 394, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		// 130
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 393, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 392, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 391, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 18: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 33: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 60: 55, 55, 55},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 18: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 33: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 60: 54, 54, 54},
		// 135
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 390, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 389, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 388, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 387, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 386, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		// 140
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 385, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 384, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 33: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60: 20, 20, 20},
		{301, 320, 3: 300, 326, 319, 316, 304, 13: 376, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 375, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{374, 348, 3: 345, 5: 356, 347, 341, 13: 380, 343, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 379, 91: 344, 373},
		// 145
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 377, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{374, 348, 3: 345, 5: 356, 347, 341, 14: 343, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 378, 91: 344, 373},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 18: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 33: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 60: 16, 16, 16},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 18: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 33: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 60: 19, 19, 19},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 45: 382, 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 381, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		// 150
		{374, 348, 3: 345, 5: 356, 347, 341, 14: 343, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 383, 91: 344, 373},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 33: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 60: 17, 17, 17},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 33: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 60: 18, 18, 18},
		{374, 348, 21, 345, 5: 356, 347, 341, 21, 14: 343, 21, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		{374, 348, 48, 345, 48, 356, 347, 48, 48, 48, 48, 48, 48, 48, 343, 48, 48, 18: 342, 350, 346, 349, 48, 48, 48, 354, 48, 48, 48, 48, 48, 48, 33: 48, 365, 48, 48, 48, 48, 48, 48, 364, 48, 352, 353, 48, 60: 48, 48, 48, 91: 344, 373},
		// 155
		{374, 348, 49, 345, 49, 356, 347, 49, 49, 49, 49, 49, 49, 49, 343, 49, 49, 18: 342, 350, 346, 349, 49, 49, 49, 354, 49, 49, 49, 49, 49, 49, 33: 49, 365, 49, 49, 49, 49, 49, 49, 364, 49, 352, 353, 49, 60: 49, 49, 49, 91: 344, 373},
		{374, 348, 50, 345, 50, 356, 347, 50, 50, 50, 50, 50, 50, 50, 343, 50, 50, 18: 342, 350, 346, 349, 50, 50, 50, 354, 50, 50, 50, 50, 50, 50, 33: 50, 365, 50, 50, 50, 50, 50, 50, 364, 50, 352, 353, 50, 60: 50, 50, 50, 91: 344, 373},
		{374, 348, 51, 345, 51, 356, 347, 51, 51, 51, 51, 51, 51, 51, 343, 51, 51, 18: 342, 350, 346, 349, 51, 51, 51, 354, 51, 51, 51, 51, 51, 51, 33: 51, 365, 51, 51, 51, 51, 51, 51, 364, 51, 352, 353, 51, 60: 51, 51, 51, 91: 344, 373},
		{374, 348, 52, 345, 52, 356, 347, 52, 52, 52, 52, 52, 52, 52, 343, 52, 52, 18: 342, 350, 346, 349, 52, 52, 52, 354, 52, 52, 52, 52, 52, 52, 33: 52, 365, 52, 52, 52, 52, 52, 52, 364, 52, 352, 353, 52, 60: 52, 52, 52, 91: 344, 373},
		{374, 348, 53, 345, 53, 356, 347, 53, 53, 53, 53, 53, 53, 53, 343, 53, 53, 18: 342, 350, 346, 349, 53, 53, 53, 354, 53, 53, 53, 53, 53, 53, 33: 53, 365, 53, 53, 53, 53, 53, 53, 364, 53, 352, 353, 53, 60: 53, 53, 53, 91: 344, 373},
		// 160
		{374, 348, 56, 345, 56, 356, 347, 341, 56, 56, 56, 56, 56, 56, 343, 56, 56, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 56, 352, 353, 56, 60: 56, 56, 56, 91: 344, 373},
		{374, 348, 57, 345, 57, 356, 347, 341, 57, 57, 57, 57, 57, 57, 343, 57, 57, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 57, 352, 353, 57, 60: 57, 57, 57, 91: 344, 373},
		{374, 348, 58, 345, 58, 356, 347, 341, 58, 58, 58, 58, 58, 58, 343, 58, 58, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 58, 352, 353, 58, 60: 58, 58, 58, 91: 344, 373},
		{374, 348, 59, 345, 59, 356, 347, 341, 59, 59, 59, 59, 59, 59, 343, 59, 59, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 59, 352, 353, 59, 60: 59, 59, 59, 91: 344, 373},
		{374, 348, 60, 345, 60, 356, 347, 341, 60, 60, 60, 60, 60, 60, 343, 60, 60, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 60, 352, 353, 60, 60: 60, 60, 60, 91: 344, 373},
		// 165
		{374, 348, 61, 345, 61, 356, 347, 341, 61, 61, 61, 61, 61, 61, 343, 61, 61, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 61, 352, 353, 61, 60: 61, 61, 61, 91: 344, 373},
		{374, 348, 62, 345, 62, 356, 347, 62, 62, 62, 62, 62, 62, 62, 343, 62, 62, 18: 342, 350, 346, 349, 370, 368, 62, 354, 62, 62, 62, 366, 369, 371, 33: 62, 365, 62, 367, 62, 62, 62, 62, 364, 62, 352, 353, 62, 60: 62, 62, 62, 91: 344, 373},
		{374, 63, 63, 345, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 343, 63, 63, 18: 342, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 33: 63, 365, 63, 63, 63, 63, 63, 63, 364, 63, 63, 63, 63, 60: 63, 63, 63, 91: 344, 373},
		{374, 348, 64, 345, 64, 356, 347, 64, 64, 64, 64, 64, 64, 64, 343, 64, 64, 18: 342, 350, 346, 349, 370, 368, 64, 354, 357, 64, 64, 366, 369, 371, 33: 64, 365, 64, 367, 64, 64, 64, 64, 364, 64, 352, 353, 64, 60: 64, 64, 64, 91: 344, 373},
		{374, 348, 65, 345, 65, 356, 65, 65, 65, 65, 65, 65, 65, 65, 343, 65, 65, 18: 342, 350, 65, 349, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 33: 65, 365, 65, 65, 65, 65, 65, 65, 364, 65, 352, 353, 65, 60: 65, 65, 65, 91: 344, 373},
		// 170
		{374, 68, 68, 345, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 343, 68, 68, 18: 342, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 33: 68, 365, 68, 68, 68, 68, 68, 68, 364, 68, 68, 68, 68, 60: 68, 68, 68, 91: 344, 373},
		{374, 69, 69, 345, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 343, 69, 69, 18: 342, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 33: 69, 365, 69, 69, 69, 69, 69, 69, 364, 69, 69, 69, 69, 60: 69, 69, 69, 91: 344, 373},
		{374, 348, 70, 345, 70, 356, 347, 341, 70, 70, 70, 70, 70, 70, 343, 70, 70, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 70, 352, 353, 70, 60: 70, 70, 70, 91: 344, 373},
		{374, 71, 71, 345, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 343, 71, 71, 18: 342, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 33: 71, 365, 71, 71, 71, 71, 71, 71, 364, 71, 71, 71, 71, 60: 71, 71, 71, 91: 344, 373},
		{374, 72, 72, 345, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 343, 72, 72, 18: 342, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 33: 72, 365, 72, 72, 72, 72, 72, 72, 364, 72, 72, 72, 72, 60: 72, 72, 72, 91: 344, 373},
		// 175
		{374, 73, 73, 345, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 343, 73, 73, 18: 342, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 33: 73, 365, 73, 73, 73, 73, 73, 73, 364, 73, 73, 73, 73, 60: 73, 73, 73, 91: 344, 373},
		{374, 348, 74, 345, 74, 356, 74, 74, 74, 74, 74, 74, 74, 74, 343, 74, 74, 18: 342, 350, 74, 349, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 33: 74, 365, 74, 74, 74, 74, 74, 74, 364, 74, 352, 353, 74, 60: 74, 74, 74, 91: 344, 373},
		{374, 348, 75, 345, 75, 356, 347, 75, 75, 75, 75, 75, 75, 75, 343, 75, 75, 18: 342, 350, 75, 349, 75, 75, 75, 354, 75, 75, 75, 75, 75, 75, 33: 75, 365, 75, 75, 75, 75, 75, 75, 364, 75, 352, 353, 75, 60: 75, 75, 75, 91: 344, 373},
		{15: 335, 140, 61: 414, 115: 413},
		{374, 348, 139, 345, 5: 356, 347, 341, 139, 139, 139, 139, 139, 139, 343, 139, 139, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 139, 61: 139, 91: 344, 373},
		// 180
		{16: 412},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 18: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 33: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 60: 81, 81, 81},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 416, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{16: 415},
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 18: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 33: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 60: 82, 82, 82},
		// 185
		{374, 348, 138, 345, 5: 356, 347, 341, 138, 138, 138, 138, 138, 138, 343, 138, 138, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 138, 60: 138, 138, 138, 91: 344, 373},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 18: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 33: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 60: 87, 87, 87},
		{374, 100, 100, 345, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 343, 100, 100, 18: 342, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 33: 100, 365, 100, 100, 100, 100, 100, 100, 364, 100, 100, 100, 100, 60: 100, 100, 100, 91: 344, 373},
		{374, 348, 102, 345, 102, 356, 347, 341, 102, 102, 102, 102, 102, 102, 343, 102, 102, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 102, 102, 366, 369, 371, 33: 102, 365, 102, 367, 339, 102, 355, 102, 364, 102, 352, 353, 102, 60: 102, 102, 102, 91: 344, 373},
		{374, 348, 3: 345, 5: 356, 347, 341, 13: 421, 343, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		// 190
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 422, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{374, 348, 104, 345, 104, 356, 347, 341, 104, 104, 104, 104, 104, 104, 343, 104, 104, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 104, 104, 366, 369, 371, 33: 104, 365, 104, 367, 339, 104, 355, 104, 364, 104, 352, 353, 104, 60: 104, 104, 104, 91: 344, 373},
		{374, 348, 105, 345, 105, 356, 347, 105, 105, 105, 105, 105, 105, 105, 343, 105, 105, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 105, 105, 366, 369, 371, 33: 105, 365, 105, 367, 339, 105, 355, 105, 364, 105, 352, 353, 105, 60: 105, 105, 105, 91: 344, 373},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 18: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 33: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 60: 26, 26, 26},
		{8, 8, 8, 8, 8, 8, 8, 8, 239, 17: 8, 32: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 238, 329, 114: 328, 118: 461},
		// 195
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 428},
		{2: 39, 4: 39, 8: 39, 14: 39, 39, 39, 45: 39},
		{14: 442, 45: 456},
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 455},
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 454},
		// 200
		{450},
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 449},
		{4: 437},
		{45: 435},
		{434, 30, 17: 30, 32: 30, 63: 436, 98: 30, 106: 30},
		// 205
		{29, 29, 17: 29, 32: 29, 98: 29, 106: 29},
		{8: 239, 17: 8, 93: 238, 329, 114: 438},
		{17: 440, 173: 439},
		{2: 8, 8: 239, 15: 335, 93: 238, 329, 114: 444, 445},
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 441},
		// 210
		{2: 32, 8: 32, 14: 442, 32},
		{17: 443},
		{2: 38, 4: 38, 8: 38, 14: 38, 38, 38, 45: 38},
		{2: 448},
		{17: 446},
		// 215
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 447},
		{2: 31, 8: 31, 14: 442, 31},
		{2: 33, 4: 33, 8: 33, 14: 33, 33, 33, 45: 33},
		{2: 34, 4: 34, 8: 34, 14: 442, 34, 34, 45: 34},
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 451},
		// 220
		{14: 442, 45: 452},
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 453},
		{2: 35, 4: 35, 8: 35, 14: 442, 35, 35, 45: 35},
		{2: 36, 4: 36, 8: 36, 14: 442, 36, 36, 45: 36},
		{2: 37, 4: 37, 8: 37, 14: 442, 37, 37, 45: 37},
		// 225
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 457},
		{4: 458, 14: 442},
		{8, 8, 8, 8, 8, 8, 8, 8, 239, 17: 8, 32: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 238, 329, 114: 328, 118: 459},
		{2: 460},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 18: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 33: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 60: 27, 27, 27},
		// 230
		{2: 462},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 18: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 33: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 60: 28, 28, 28},
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 464, 172: 465},
		{14: 442, 471, 470},
		{17: 466},
		// 235
		{15: 467},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 468, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{374, 348, 3: 345, 5: 356, 347, 341, 14: 343, 16: 469, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 18: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 33: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 60: 40, 40, 40},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 18: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 33: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 60: 43, 43, 43},
		// 240
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 472, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{374, 348, 3: 345, 5: 356, 347, 341, 14: 343, 474, 473, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 18: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 33: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 60: 42, 42, 42},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 475, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{374, 348, 3: 345, 5: 356, 347, 341, 14: 343, 16: 476, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		// 245
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 18: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 33: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 60: 41, 41, 41},
		{3: 88},
		{3: 85},
		{3: 480},
		{16: 151, 484, 142: 486, 485, 154: 487, 488, 482, 481, 483},
		// 250
		{15: 335, 150, 115: 505},
		{15: 149, 149, 61: 503},
		{15: 148, 148},
		{434, 429, 15: 147, 147, 427, 32: 431, 61: 147, 63: 430, 98: 432, 106: 433, 110: 502},
		{15: 145, 145, 61: 145},
		// 255
		{15: 143, 143},
		{16: 489},
		{16: 44},
		{434, 429, 3: 491, 158, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 490, 160: 492},
		{4: 157, 14: 442},
		// 260
		{434, 429, 16: 155, 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 498, 161: 496, 497},
		{4: 493},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 11: 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 494},
		{2: 495},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 18: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 33: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 60: 47, 47, 47},
		// 265
		{16: 501},
		{15: 335, 154, 115: 499},
		{14: 442, 153, 153},
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 500},
		{14: 442, 152, 152},
		// 270
		{4: 156},
		{14: 442, 146, 146},
		{434, 429, 16: 45, 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 504},
		{14: 442, 16: 46},
		{17: 484, 142: 507, 506},
		// 275
		{15: 144, 144, 61: 144},
		{15: 142, 142},
		{135, 135, 76, 135, 76, 135, 135, 135, 76, 76, 76, 76, 76, 76, 135, 76, 76, 18: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 33: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 76, 60: 76, 76, 76},
		{374, 348, 3: 345, 5: 356, 347, 341, 14: 343, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		{135, 135, 77, 135, 77, 135, 135, 135, 77, 77, 77, 77, 77, 77, 135, 77, 77, 18: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 33: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 77, 60: 77, 77, 77},
		// 280
		{374, 78, 78, 345, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 343, 78, 78, 18: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 33: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 60: 78, 78, 78, 91: 344, 373},
		{374, 79, 79, 345, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 343, 79, 79, 18: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 33: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 60: 79, 79, 79, 91: 344, 373},
		{374, 80, 80, 345, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 343, 80, 80, 18: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 33: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 60: 80, 80, 80, 91: 344, 373},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 18: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 33: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 60: 84, 84, 84},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 516, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		// 285
		{374, 348, 3: 345, 5: 356, 347, 341, 14: 343, 16: 517, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 18: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 33: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 60: 97, 97, 97},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 519, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{374, 348, 3: 345, 5: 356, 347, 341, 14: 343, 521, 520, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 18: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 33: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 60: 99, 99, 99},
		// 290
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 522, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{374, 348, 3: 345, 5: 356, 347, 341, 14: 343, 16: 523, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 18: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 33: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 60: 98, 98, 98},
		{374, 348, 101, 345, 101, 356, 347, 341, 101, 101, 101, 101, 101, 101, 343, 101, 101, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 101, 101, 366, 369, 371, 33: 101, 365, 101, 367, 339, 101, 355, 101, 364, 101, 352, 353, 101, 60: 101, 101, 101, 91: 344, 373},
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 526},
		// 295
		{14: 442, 16: 527},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 18: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 33: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 60: 103, 103, 103},
		{4: 529, 14: 442},
		{8, 8, 8, 8, 8, 8, 8, 8, 239, 15: 8, 17: 8, 32: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 238, 329, 114: 531, 139: 530},
		{2: 536},
		// 300
		{301, 320, 141, 300, 326, 319, 316, 304, 141, 15: 141, 17: 315, 32: 325, 45: 141, 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 410, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 116: 532, 119: 533},
		{2: 140, 8: 140, 140, 140, 140, 140, 140, 15: 335, 45: 140, 115: 413},
		{2: 8, 8: 239, 15: 335, 45: 8, 93: 238, 329, 114: 336, 535, 144: 534},
		{2: 106, 45: 106},
		{2: 2, 45: 2},
		// 305
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 18: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 33: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 60: 107, 107, 107},
		{434, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 30, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 30, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 60: 109, 109, 109, 436, 98: 30, 106: 30},
		{45: 539},
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 18: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 33: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 60: 108, 108, 108},
		{374, 348, 3: 345, 5: 356, 347, 341, 14: 343, 16: 541, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		// 310
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 18: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 33: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 60: 110, 110, 110},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 543, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{374, 348, 3: 345, 5: 356, 347, 341, 14: 343, 16: 544, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 18: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 33: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 60: 111, 111, 111},
		{301, 551, 3: 300, 326, 319, 316, 304, 16: 546, 550, 32: 552, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 549, 313, 547, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 98: 432, 106: 433, 110: 548},
		// 315
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 18: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 33: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 60: 114, 114, 114},
		{374, 348, 3: 345, 5: 356, 347, 341, 14: 343, 16: 559, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		{14: 442, 16: 558},
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 557},
		{88, 88, 3: 345, 5: 88, 88, 88, 14: 88, 16: 88, 18: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 33: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 91: 514},
		// 320
		{301, 551, 3: 300, 326, 319, 316, 304, 17: 550, 32: 552, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 549, 313, 509, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 508, 291, 281, 294, 284, 280, 279, 321, 98: 432, 106: 433, 110: 455},
		{553, 4: 425},
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 554},
		{14: 442, 45: 555},
		{434, 429, 17: 427, 32: 431, 63: 430, 98: 432, 106: 433, 110: 556},
		// 325
		{4: 458, 14: 442, 16: 35},
		{4: 529, 14: 442, 16: 36},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 18: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 33: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 60: 112, 112, 112},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 18: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 33: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 60: 113, 113, 113},
		{374, 348, 3: 345, 561, 356, 347, 341, 14: 343, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		// 330
		{2: 8, 8: 239, 8, 8, 93: 238, 329, 114: 562},
		{2: 167, 8: 167, 567, 568, 148: 566, 565, 169: 563, 564},
		{2: 8, 8: 239, 93: 238, 329, 114: 579},
		{2: 166, 8: 166, 567, 568, 148: 577, 578},
		{2: 165, 8: 165, 165, 165},
		// 335
		{2: 164, 8: 164, 164, 164},
		{301, 320, 3: 300, 326, 319, 316, 304, 13: 141, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 571, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 116: 532, 119: 572},
		{13: 569},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 13, 13, 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 570},
		{2: 159, 8: 159, 159, 159},
		// 340
		{374, 348, 3: 345, 5: 356, 347, 341, 13: 575, 343, 139, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		{13: 573},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 13, 13, 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 574},
		{2: 160, 8: 160, 160, 160},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 13, 13, 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 576},
		// 345
		{2: 161, 8: 161, 161, 161},
		{2: 163, 8: 163, 163, 163},
		{2: 162, 8: 162, 162, 162},
		{2: 580},
		{2: 168, 8: 168, 168, 168, 168, 168, 168},
		// 350
		{2: 8, 8: 239, 8, 8, 93: 238, 329, 114: 583, 168: 582},
		{2: 599},
		{2: 177, 8: 177, 589, 590, 146: 588, 587, 165: 586, 584, 585},
		{2: 8, 8: 239, 93: 238, 329, 114: 598},
		{2: 176, 8: 176, 589, 590, 146: 596, 597},
		// 355
		{2: 175, 8: 175, 175, 175},
		{2: 172, 8: 172, 172, 172},
		{2: 171, 8: 171, 171, 171},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 263, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 95: 273, 270, 258, 99: 259, 265, 274, 264, 262, 260, 275, 107: 276, 261, 266, 116: 271, 120: 269, 268, 267, 244, 593, 245, 246, 256, 257, 251, 255, 250, 272, 249, 247, 254, 253, 248, 252},
		{13: 591},
		// 360
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 13, 13, 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 592},
		{2: 169, 8: 169, 169, 169},
		{13: 594},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 13, 13, 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 595},
		{2: 170, 8: 170, 170, 170},
		// 365
		{2: 174, 8: 174, 174, 174},
		{2: 173, 8: 173, 173, 173},
		{2: 178},
		{2: 179, 8: 179, 179, 179, 179, 179, 179},
		{11: 196},
		// 370
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 11: 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 625, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 624, 328, 118: 327},
		{374, 348, 3: 345, 621, 356, 347, 341, 14: 343, 139, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 60: 139, 62: 139, 91: 344, 373},
		{18: 616},
		{11: 608},
		{88, 88, 3: 345, 88, 88, 88, 88, 14: 88, 606, 18: 181, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 33: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 60: 88, 62: 88, 91: 514},
		// 375
		{17: 607},
		{18: 180},
		{301, 320, 3: 300, 326, 319, 316, 304, 11: 137, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 610, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 145: 609},
		{11: 611},
		{374, 348, 3: 345, 136, 356, 347, 341, 11: 136, 14: 343, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		// 380
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 610, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 145: 612},
		{4: 613},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 11: 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 614},
		{2: 615},
		{2: 182, 8: 182, 182, 182, 182, 182, 182},
		// 385
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 617, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{374, 348, 3: 345, 618, 356, 347, 341, 14: 343, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 11: 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 619},
		{2: 620},
		{2: 183, 8: 183, 183, 183, 183, 183, 183},
		// 390
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 11: 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 622},
		{2: 623},
		{2: 184, 8: 184, 184, 184, 184, 184, 184},
		{2: 626},
		{10, 10, 10, 10, 10, 10, 10, 10, 239, 17: 10, 32: 10, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 93: 240, 95: 10, 10, 10, 99: 10, 10, 10, 10, 10, 10, 10, 107: 10, 10, 10},
		// 395
		{2: 185, 8: 185, 185, 185, 185, 185, 185},
		{374, 348, 3: 345, 628, 356, 347, 341, 14: 343, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 11: 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 629},
		{2: 630},
		{2: 188, 8: 188, 188, 188, 188, 188, 188, 117: 188},
		// 400
		{4: 633, 95: 632},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 636, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 11: 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 634},
		{2: 635},
		{2: 186, 8: 186, 186, 186, 186, 186, 186, 117: 186},
		// 405
		{374, 348, 3: 345, 637, 356, 347, 341, 14: 343, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 11: 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 638},
		{2: 639},
		{2: 187, 8: 187, 187, 187, 187, 187, 187, 117: 187},
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 410, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 116: 643},
		// 410
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 410, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 116: 642},
		{2: 190, 8: 190, 190, 190, 190, 190, 190, 15: 335, 115: 413},
		{2: 191, 8: 191, 191, 191, 191, 191, 191, 15: 335, 115: 413},
		{15: 335, 60: 646, 115: 647},
		{15: 15, 60: 15},
		// 415
		{301, 320, 3: 300, 326, 319, 316, 304, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 410, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 116: 649},
		{17: 648},
		{15: 14, 60: 14},
		{2: 192, 8: 192, 192, 192, 192, 192, 192, 15: 335, 115: 413},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 11: 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 651},
		// 420
		{2: 652},
		{150: 653},
		{4: 655, 17: 654},
		{4: 662},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 11: 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 656},
		// 425
		{2: 657},
		{2: 198, 8: 198, 198, 198, 198, 198, 198, 141: 658},
		{4: 659},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 11: 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 660},
		{2: 661},
		// 430
		{2: 200, 8: 200, 200, 200, 200, 200, 200},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 11: 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 663},
		{2: 664},
		{2: 199, 8: 199, 199, 199, 199, 199, 199, 141: 665},
		{4: 666},
		// 435
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 11: 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 667},
		{2: 668},
		{2: 201, 8: 201, 201, 201, 201, 201, 201},
		{126, 126, 203, 126, 5: 126, 126, 126, 203, 203, 203, 203, 203, 203, 126, 18: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 33: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		{125, 125, 202, 125, 5: 125, 125, 125, 202, 202, 202, 202, 202, 202, 125, 18: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 33: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		// 440
		{126, 126, 205, 126, 5: 126, 126, 126, 205, 205, 205, 205, 205, 205, 126, 18: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 33: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		{125, 125, 204, 125, 5: 125, 125, 125, 204, 204, 204, 204, 204, 204, 125, 18: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 33: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		{4: 674},
		{13, 13, 13, 13, 13, 13, 13, 13, 239, 11: 236, 17: 13, 32: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 238, 237, 13, 13, 13, 99: 13, 13, 13, 13, 13, 13, 13, 107: 13, 13, 13, 111: 234, 235, 675},
		{2: 676},
		// 445
		{2: 207, 8: 207, 207, 207, 207, 207, 207},
		{374, 348, 208, 345, 5: 356, 347, 341, 208, 208, 208, 208, 208, 208, 343, 18: 342, 350, 346, 349, 370, 368, 340, 354, 357, 362, 361, 366, 369, 371, 33: 359, 365, 360, 367, 339, 363, 355, 358, 364, 351, 352, 353, 91: 344, 373},
		{2: 209, 8: 209, 209, 209, 209, 209, 209},
		{2: 228, 8: 228, 228, 228, 12: 228},
		{301, 320, 12, 300, 326, 319, 316, 304, 12, 12, 12, 12: 12, 17: 315, 32: 325, 46: 317, 318, 306, 298, 305, 311, 323, 299, 324, 303, 312, 308, 309, 310, 63: 302, 313, 263, 287, 283, 322, 285, 286, 295, 290, 296, 282, 297, 288, 289, 278, 307, 292, 293, 314, 277, 291, 281, 294, 284, 280, 279, 321, 95: 273, 270, 258, 99: 259, 265, 274, 264, 262, 260, 275, 107: 276, 261, 266, 116: 271, 120: 269, 268, 267, 244, 681, 245, 246, 256, 257, 251, 255, 250, 272, 249, 247, 254, 253, 248, 252},
		// 450
		{2: 226, 8: 226, 226, 226, 226, 226},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 176

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			yyVAL.compstmt = nil
		}
	case 3:
		{
			yyVAL.compstmt = yyS[yypt-1].stmts
		}
	case 4:
		{
			yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		{
			yyS[yypt-2].stmts.Stmts = append(yyS[yypt-2].stmts.Stmts, yyS[yypt-0].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 6:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_var_or_lets
		}
	case 7:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_break
		}
	case 8:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_continue
		}
	case 9:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_return
		}
	case 10:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_throw
		}
	case 11:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_module
		}
	case 12:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 13:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_for
		}
	case 14:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_try
		}
	case 15:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_switch
		}
	case 16:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_select
		}
	case 17:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_go
		}
	case 18:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_defer
		}
	case 19:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_expr
		}
	case 20:
		{
			yyVAL.stmt_break = &ast.BreakStmt{}
			yyVAL.stmt_break.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 21:
		{
			yyVAL.stmt_continue = &ast.ContinueStmt{}
			yyVAL.stmt_continue.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 22:
		{
			yyVAL.stmt_return = &ast.ReturnStmt{Exprs: yyS[yypt-0].opt_exprs}
			yyVAL.stmt_return.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 23:
		{
			yyVAL.stmt_throw = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt_throw.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 24:
		{
			yyVAL.stmt_module = &ast.ModuleStmt{Name: yyS[yypt-3].tok.Lit, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_module.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 25:
		{
			yyVAL.stmt_expr = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt_expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 26:
		{
			yyS[yypt-0].expr_call.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr_call}
			yyVAL.stmt_go.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 27:
		{
			yyS[yypt-0].expr_anon_call.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr_anon_call}
			yyVAL.stmt_go.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 28:
		{
			yyS[yypt-0].expr_call.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: yyS[yypt-0].expr_call}
			yyVAL.stmt_defer.SetPosition(yyS[yypt-0].expr_call.Position())
		}
	case 29:
		{
			yyS[yypt-0].expr_anon_call.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: yyS[yypt-0].expr_anon_call}
			yyVAL.stmt_defer.SetPosition(yyS[yypt-0].expr_anon_call.Position())
		}
	case 30:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-10].compstmt, Var: yyS[yypt-7].tok.Lit, Catch: yyS[yypt-5].compstmt, Finally: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-12].tok.Position())
		}
	case 31:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-9].compstmt, Catch: yyS[yypt-5].compstmt, Finally: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-11].tok.Position())
		}
	case 32:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-6].compstmt, Var: yyS[yypt-3].tok.Lit, Catch: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 33:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-5].compstmt, Catch: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 34:
		{
			yyVAL.opt_stmt_var_or_lets = nil
		}
	case 35:
		{
			yyVAL.opt_stmt_var_or_lets = yyS[yypt-0].stmt_var_or_lets
		}
	case 36:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_var
		}
	case 37:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_typed_lets
		}
	case 38:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_lets
		}
	case 39:
		{
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				} else {
					yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				}
			} else {
				yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt_var.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 40:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
				if len(yyS[yypt-2].exprs) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].exprs) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt_typed_lets.SetPosition(yyS[yypt-2].exprs[0].Position())
		}
	case 41:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].exprs) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].exprs) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt_lets.SetPosition(yyS[yypt-2].exprs[0].Position())
		}
	case 42:
		{
			yyVAL.stmt_if = yyS[yypt-0].stmt_if_helper
			yyVAL.stmt_if.SetPosition(yyS[yypt-0].stmt_if_helper.Position())
		}
	case 43:
		{
			yyVAL.stmt_if_helper = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].compstmt, Else: nil}
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 44:
		{
			yyS[yypt-6].stmt_if_helper.(*ast.IfStmt).ElseIf = append(yyS[yypt-6].stmt_if_helper.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].compstmt})
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-6].stmt_if_helper.Position())
		}
	case 45:
		{
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-4].stmt_if_helper.Position())
			if yyVAL.stmt_if_helper.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if_helper.(*ast.IfStmt).Else = yyS[yypt-1].compstmt
			}
		}
	case 46:
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 47:
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 48:
		{
			yyVAL.stmt_for = &ast.ForStmt{Vars: yyS[yypt-5].expr_for_idents, Value: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 49:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-7].opt_stmt_var_or_lets, Expr2: yyS[yypt-5].opt_expr, Expr3: yyS[yypt-3].opt_expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 50:
		{
			yyVAL.expr_for_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 51:
		{
			yyVAL.expr_for_idents = []string{yyS[yypt-2].tok.Lit, yyS[yypt-0].tok.Lit}
		}
	case 52:
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt_select.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 53:
		{
			yyVAL.stmt_select_content = yyS[yypt-1].stmt_select_cases
		}
	case 54:
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 55:
		{
			yyVAL.stmt_select_cases = yyS[yypt-0].stmt_select_cases_helper
		}
	case 56:
		{
			yyVAL.stmt_select_cases_helper = yyS[yypt-0].stmt_select_body
		}
	case 57:
		{
			yyVAL.stmt_select_cases_helper.Cases = append(yyVAL.stmt_select_cases_helper.Cases, yyS[yypt-0].stmt_select_case)
		}
	case 58:
		{
			if yyVAL.stmt_select_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyVAL.stmt_select_cases_helper.Default = yyS[yypt-0].stmt_select_default
		}
	case 59:
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Default: yyS[yypt-0].stmt_select_default}
		}
	case 60:
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt_select_case}}
		}
	case 61:
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 62:
		{
			yyVAL.stmt_select_default = yyS[yypt-0].compstmt
		}
	case 63:
		{
			yyS[yypt-2].stmt_switch_cases.Expr = yyS[yypt-5].expr
			yyVAL.stmt_switch = yyS[yypt-2].stmt_switch_cases
			yyVAL.stmt_switch.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 64:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 65:
		{
			yyVAL.stmt_switch_cases = yyS[yypt-0].stmt_switch_cases_helper
		}
	case 66:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Default: yyS[yypt-0].stmt_switch_default}
		}
	case 67:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt_switch_case}}
		}
	case 68:
		{
			yyS[yypt-1].stmt_switch_cases_helper.Cases = append(yyS[yypt-1].stmt_switch_cases_helper.Cases, yyS[yypt-0].stmt_switch_case)
			yyVAL.stmt_switch_cases_helper = yyS[yypt-1].stmt_switch_cases_helper
		}
	case 69:
		{
			if yyS[yypt-1].stmt_switch_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyS[yypt-1].stmt_switch_cases_helper.Default = yyS[yypt-0].stmt_switch_default
		}
	case 70:
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyS[yypt-2].expr}, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 71:
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].opt_exprs, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 72:
		{
			yyVAL.stmt_switch_default = yyS[yypt-0].compstmt
		}
	case 73:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 74:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 75:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents1
		}
	case 76:
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 77:
		{
			yyVAL.opt_func_return_expr_idents1 = yyS[yypt-0].opt_func_return_expr_idents2
		}
	case 78:
		{
			yyVAL.opt_func_return_expr_idents2 = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 79:
		{
			yyVAL.opt_func_return_expr_idents2 = append(yyS[yypt-2].opt_func_return_expr_idents2, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 80:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 81:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents_not_empty
		}
	case 82:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_idents_last_untyped
		}
	case 83:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_typed_idents
		}
	case 84:
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 85:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-1].tok.Lit, TypeData: yyS[yypt-0].type_data}
		}
	case 86:
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyS[yypt-0].func_expr_untyped_ident}
		}
	case 87:
		{
			yyVAL.func_expr_idents_last_untyped = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_untyped_ident)
		}
	case 88:
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 89:
		{
			yyVAL.func_expr_typed_idents = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_typed_ident)
		}
	case 90:
		{
			yyVAL.opt_exprs = nil
		}
	case 91:
		{
			yyVAL.opt_exprs = yyS[yypt-0].exprs
		}
	case 92:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 93:
		{
			if len(yyS[yypt-2].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 94:
		{
			yyVAL.opt_expr = nil
		}
	case 95:
		{
			yyVAL.opt_expr = yyS[yypt-0].expr
		}
	case 96:
		{
			yyVAL.expr = yyS[yypt-0].expr_member_or_ident
		}
	case 97:
		{
			yyVAL.expr = yyS[yypt-0].expr_literals
		}
	case 98:
		{
			yyVAL.expr = yyS[yypt-0].expr_unary
		}
	case 99:
		{
			yyVAL.expr = yyS[yypt-0].expr_ternary
		}
	case 100:
		{
			yyVAL.expr = yyS[yypt-0].expr_nil_coalesce
		}
	case 101:
		{
			yyVAL.expr = yyS[yypt-0].expr_func
		}
	case 102:
		{
			yyVAL.expr = yyS[yypt-0].expr_array
		}
	case 103:
		{
			yyVAL.expr = yyS[yypt-0].expr_paren
		}
	case 104:
		{
			yyVAL.expr = yyS[yypt-0].expr_binary
		}
	case 105:
		{
			yyVAL.expr = yyS[yypt-0].expr_call
		}
	case 106:
		{
			yyVAL.expr = yyS[yypt-0].expr_anon_call
		}
	case 107:
		{
			yyVAL.expr = yyS[yypt-0].expr_item_or_slice
		}
	case 108:
		{
			yyVAL.expr = yyS[yypt-0].expr_len
		}
	case 109:
		{
			yyVAL.expr = yyS[yypt-0].expr_dbg
		}
	case 110:
		{
			yyVAL.expr = yyS[yypt-0].expr_new
		}
	case 111:
		{
			yyVAL.expr = yyS[yypt-0].expr_make
		}
	case 112:
		{
			yyVAL.expr = yyS[yypt-0].expr_map
		}
	case 113:
		{
			yyVAL.expr = yyS[yypt-0].expr_opchan
		}
	case 114:
		{
			yyVAL.expr = yyS[yypt-0].expr_close
		}
	case 115:
		{
			yyVAL.expr = yyS[yypt-0].expr_delete
		}
	case 116:
		{
			yyVAL.expr = yyS[yypt-0].expr_in
		}
	case 117:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 118:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 119:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 120:
		{
			yyVAL.expr_len = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr_len.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 121:
		{
			yyVAL.expr_paren = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_paren.SetPosition(l.pos)
			}
		}
	case 122:
		{
			yyVAL.expr_array = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 123:
		{
			yyVAL.expr_array = &ast.ArrayExpr{Exprs: yyS[yypt-1].comma_separated_exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 124:
		{
			yyVAL.expr_array = &ast.ArrayExpr{Exprs: yyS[yypt-1].comma_separated_exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-3].type_data, Dimensions: yyS[yypt-4].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 125:
		{
			yyVAL.comma_separated_exprs = yyS[yypt-1].opt_exprs
		}
	case 126:
		{
			yyVAL.expr_nil_coalesce = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_nil_coalesce.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 127:
		{
			yyVAL.expr_ternary = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_ternary.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 128:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr_new = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr_new = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr_new.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 129:
		{
			yyVAL.expr_opchan = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_opchan.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 130:
		{
			yyVAL.expr_opchan = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr_opchan.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 131:
		{
			yyVAL.expr_in = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr_in.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 132:
		{
			yyVAL.expr_delete = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr_delete.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 133:
		{
			yyVAL.expr_delete = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr_delete.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 134:
		{
			yyVAL.expr_close = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr_close.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 135:
		{
			yyVAL.expr_literals = yyS[yypt-0].expr_literals_helper
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].expr_literals_helper.Position())
		}
	case 136:
		{
			yyVAL.expr_literals_helper = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 137:
		{
			yyVAL.expr_literals_helper = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 138:
		{
			yyVAL.expr_literals_helper = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 139:
		{
			yyVAL.expr_literals_helper = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 140:
		{
			yyVAL.expr_literals_helper = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 141:
		{
			yyVAL.expr_member_or_ident = yyS[yypt-0].expr_ident
		}
	case 142:
		{
			yyVAL.expr_member_or_ident = yyS[yypt-0].expr_member
		}
	case 143:
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 144:
		{
			yyVAL.expr_member = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr_member.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 145:
		{
			yyVAL.opt_expr_ident = nil
		}
	case 146:
		{
			yyVAL.opt_expr_ident = yyS[yypt-0].expr_ident
		}
	case 147:
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyS[yypt-1].tok.Lit, SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}
			yyVAL.expr_call.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 148:
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyS[yypt-1].expr, SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}
			yyVAL.expr_anon_call.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 149:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-2].exprs, VarArg: true}
		}
	case 150:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-1].opt_exprs}
		}
	case 151:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 152:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 153:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 154:
		{
			if el, ok := yyS[yypt-0].expr_member_or_ident.(*ast.IdentExpr); ok {
				yyVAL.expr_unary = &ast.AddrExpr{Expr: el}
			} else if el, ok := yyS[yypt-0].expr_member_or_ident.(*ast.MemberExpr); ok {
				yyVAL.expr_unary = el
			}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_member_or_ident.Position())
		}
	case 155:
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyS[yypt-0].expr_member_or_ident}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_member_or_ident.Position())
		}
	case 156:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "+", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 157:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "-", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 158:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "*", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 159:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "/", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 160:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "%", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 161:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "**", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 162:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 163:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">>", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 164:
		{
			yyVAL.expr_binary = yyS[yypt-0].op_comparison
		}
	case 165:
		{
			yyVAL.expr_binary = yyS[yypt-0].expr_assoc
		}
	case 166:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "|", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 167:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "||", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 168:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 169:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 170:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "+=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 171:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "-=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 172:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "*=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 173:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "/=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 174:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "&=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 175:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "|=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 176:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "++"}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 177:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "--"}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 178:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 179:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "!=", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 180:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 181:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">=", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 182:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 183:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<=", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 184:
		{
			f := &ast.FuncExpr{Params: yyS[yypt-5].func_expr_args.Params, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: yyS[yypt-5].func_expr_args.VarArg}
			if yyS[yypt-5].func_expr_args.TypeData != nil {
				f.Params[len(f.Params)-1].TypeData = yyS[yypt-5].func_expr_args.TypeData
			}
			if yyS[yypt-7].opt_expr_ident != nil {
				f.Name = yyS[yypt-7].opt_expr_ident.Lit
			}
			yyVAL.expr_func = f
			yyVAL.expr_func.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 185:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-2].func_expr_idents_last_untyped, VarArg: true, TypeData: yyS[yypt-0].type_data}
		}
	case 186:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-1].func_expr_idents_last_untyped, VarArg: true, TypeData: nil}
		}
	case 187:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-0].func_expr_idents, VarArg: false, TypeData: nil}
		}
	case 188:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr_make.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 189:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 190:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 191:
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 192:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 193:
		{
			if yyS[yypt-2].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyS[yypt-2].type_data.Env = append(yyS[yypt-2].type_data.Env, yyS[yypt-2].type_data.Name)
				yyS[yypt-2].type_data.Name = yyS[yypt-0].tok.Lit
			}
		}
	case 194:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 195:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 196:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 197:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 198:
		{
			yyVAL.type_data = yyS[yypt-2].type_data_struct
		}
	case 199:
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].type_data}}
		}
	case 200:
		{
			if yyS[yypt-3].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyS[yypt-1].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyS[yypt-0].type_data)
		}
	case 201:
		{
			yyVAL.slice_count = 1
		}
	case 202:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 203:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 204:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-5].type_data, SubType: yyS[yypt-3].type_data}
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 205:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-1].expr_map_content.Position())
		}
	case 206:
		{
			yyVAL.expr_map_content = &ast.MapExpr{}
		}
	case 207:
		{
			yyVAL.expr_map_content = yyS[yypt-1].expr_map_content_helper
		}
	case 208:
		{
			yyVAL.expr_map_content_helper = &ast.MapExpr{Keys: []ast.Expr{yyS[yypt-0].expr_map_key_value[0]}, Values: []ast.Expr{yyS[yypt-0].expr_map_key_value[1]}}
		}
	case 209:
		{
			yyVAL.expr_map_content_helper.Keys = append(yyVAL.expr_map_content_helper.Keys, yyS[yypt-0].expr_map_key_value[0])
			yyVAL.expr_map_content_helper.Values = append(yyVAL.expr_map_content_helper.Values, yyS[yypt-0].expr_map_key_value[1])
		}
	case 210:
		{
			yyVAL.expr_map_key_value = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 211:
		{
			if el, ok := yyS[yypt-0].expr_slice_helper1.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-1].expr
			} else if el, ok := yyS[yypt-0].expr_slice_helper1.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-1].expr
			}
			yyVAL.expr_item_or_slice = yyS[yypt-0].expr_slice_helper1
			yyVAL.expr_item_or_slice.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 212:
		{
			yyVAL.expr_slice_helper1 = &ast.ItemExpr{Index: yyS[yypt-1].expr}
		}
	case 213:
		{
			yyVAL.expr_slice_helper1 = &ast.SliceExpr{Begin: yyS[yypt-3].expr, End: yyS[yypt-1].expr}
		}
	case 214:
		{
			yyVAL.expr_slice_helper1 = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: nil}
		}
	case 215:
		{
			yyVAL.expr_slice_helper1 = &ast.SliceExpr{Begin: nil, End: yyS[yypt-1].expr}
		}
	case 216:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 217:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].tok.Lit)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
