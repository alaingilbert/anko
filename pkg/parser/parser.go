// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         *ast.StmtsStmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_if_helper                ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             *ast.SwitchStmt
	stmt_switch_cases_helper      *ast.SwitchStmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_body              *ast.SelectBodyStmt
	stmt_select_content           *ast.SelectBodyStmt
	stmt_select_cases             *ast.SelectBodyStmt
	stmt_select_cases_helper      *ast.SelectBodyStmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	stmt_module                   ast.Stmt
	stmt_break                    ast.Stmt
	stmt_return                   ast.Stmt
	stmt_continue                 ast.Stmt
	stmt_throw                    ast.Stmt
	stmt_expr                     *ast.ExprStmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_literals                 ast.Expr
	expr_close                    ast.Expr
	expr_delete                   ast.Expr
	expr_in                       ast.Expr
	expr_opchan                   ast.Expr
	expr_new                      ast.Expr
	expr_array                    ast.Expr
	expr_paren                    ast.Expr
	expr_nil_coalesce             ast.Expr
	expr_ternary                  ast.Expr
	expr_len                      ast.Expr
	expr_unary                    ast.Expr
	expr_binary                   ast.Expr
	op_comparison                 ast.Expr
	expr_assoc                    ast.Expr
	expr_member_or_ident          ast.Expr
	expr_member                   ast.Expr
	expr_call                     *ast.CallExpr
	expr_anon_call                *ast.AnonCallExpr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	opt_exprs                     []ast.Expr
	expr_idents                   []string
	expr_for_idents               []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents2  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	expr_map_content              *ast.MapExpr
	expr_map_content_helper       *ast.MapExpr
	expr_map_key_value            []ast.Expr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_item_or_slice            ast.Expr
	expr_slice_helper1            ast.Expr
	expr_ident                    ast.Expr
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57405
	yyEofCode   = 57344
	ANDAND      = 57364
	ANDEQ       = 57378
	ARRAY       = 57349
	BREAK       = 57380
	CASE        = 57389
	CATCH       = 57372
	CHAN        = 57393
	CLOSE       = 57399
	CONTINUE    = 57381
	DBG         = 57402
	DEFAULT     = 57390
	DEFER       = 57392
	DELETE      = 57398
	DIVEQ       = 57377
	ELSE        = 57356
	EQEQ        = 57359
	FALSE       = 57367
	FINALLY     = 57373
	FOR         = 57357
	FUNC        = 57351
	GE          = 57361
	GO          = 57391
	IDENT       = 57346
	IF          = 57355
	IN          = 57358
	LE          = 57362
	LEN         = 57397
	MAKE        = 57394
	MAP         = 57400
	MINUSEQ     = 57375
	MINUSMINUS  = 57383
	MODULE      = 57370
	MULEQ       = 57376
	NEQ         = 57360
	NEW         = 57365
	NIL         = 57368
	NILCOALESCE = 57369
	NUMBER      = 57347
	OPCHAN      = 57395
	OREQ        = 57379
	OROR        = 57363
	PLUSEQ      = 57374
	PLUSPLUS    = 57382
	POW         = 57384
	RETURN      = 57352
	SELECT      = 57388
	SHIFTLEFT   = 57385
	SHIFTRIGHT  = 57386
	STRING      = 57348
	STRUCT      = 57401
	SWITCH      = 57387
	THROW       = 57354
	TRUE        = 57366
	TRY         = 57371
	TYPE        = 57396
	UNARY       = 57404
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57403
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -235
)

var (
	yyPrec = map[int]int{
		'=':         0,
		PLUSEQ:      0,
		MINUSEQ:     0,
		MULEQ:       0,
		DIVEQ:       0,
		ANDEQ:       0,
		OREQ:        0,
		':':         1,
		OPCHAN:      2,
		'?':         3,
		NILCOALESCE: 3,
		OROR:        4,
		ANDAND:      5,
		EQEQ:        6,
		NEQ:         6,
		'<':         6,
		LE:          6,
		'>':         6,
		GE:          6,
		'+':         7,
		'-':         7,
		'|':         7,
		'^':         7,
		'*':         8,
		'/':         8,
		'%':         8,
		SHIFTLEFT:   8,
		SHIFTRIGHT:  8,
		'&':         8,
		IN:          9,
		PLUSPLUS:    10,
		MINUSMINUS:  10,
		UNARY:       11,
	}

	yyXLAT = map[int]int{
		91:    0,   // '[' (300x)
		42:    1,   // '*' (297x)
		125:   2,   // '}' (289x)
		40:    3,   // '(' (283x)
		123:   4,   // '{' (276x)
		38:    5,   // '&' (269x)
		45:    6,   // '-' (269x)
		57395: 7,   // OPCHAN (269x)
		10:    8,   // '\n' (254x)
		59:    9,   // ';' (201x)
		57389: 10,  // CASE (199x)
		57390: 11,  // DEFAULT (199x)
		57344: 12,  // $end (176x)
		58:    13,  // ':' (170x)
		57346: 14,  // IDENT (170x)
		46:    15,  // '.' (168x)
		44:    16,  // ',' (162x)
		41:    17,  // ')' (161x)
		57400: 18,  // MAP (155x)
		57358: 19,  // IN (145x)
		37:    20,  // '%' (143x)
		43:    21,  // '+' (143x)
		47:    22,  // '/' (143x)
		60:    23,  // '<' (143x)
		62:    24,  // '>' (143x)
		63:    25,  // '?' (143x)
		124:   26,  // '|' (143x)
		57364: 27,  // ANDAND (143x)
		57378: 28,  // ANDEQ (143x)
		57377: 29,  // DIVEQ (143x)
		57359: 30,  // EQEQ (143x)
		57361: 31,  // GE (143x)
		57362: 32,  // LE (143x)
		57375: 33,  // MINUSEQ (143x)
		57383: 34,  // MINUSMINUS (143x)
		57376: 35,  // MULEQ (143x)
		57360: 36,  // NEQ (143x)
		57369: 37,  // NILCOALESCE (143x)
		57379: 38,  // OREQ (143x)
		57363: 39,  // OROR (143x)
		57374: 40,  // PLUSEQ (143x)
		57382: 41,  // PLUSPLUS (143x)
		57384: 42,  // POW (143x)
		57385: 43,  // SHIFTLEFT (143x)
		57386: 44,  // SHIFTRIGHT (143x)
		93:    45,  // ']' (135x)
		33:    46,  // '!' (126x)
		94:    47,  // '^' (126x)
		57399: 48,  // CLOSE (126x)
		57402: 49,  // DBG (126x)
		57398: 50,  // DELETE (126x)
		57367: 51,  // FALSE (126x)
		57351: 52,  // FUNC (126x)
		57397: 53,  // LEN (126x)
		57394: 54,  // MAKE (126x)
		57365: 55,  // NEW (126x)
		57368: 56,  // NIL (126x)
		57347: 57,  // NUMBER (126x)
		57348: 58,  // STRING (126x)
		57366: 59,  // TRUE (126x)
		57350: 60,  // VARARG (114x)
		61:    61,  // '=' (113x)
		57403: 62,  // WALRUS (110x)
		57456: 63,  // slice_count (106x)
		57408: 64,  // expr (78x)
		57409: 65,  // expr_anon_call (78x)
		57410: 66,  // expr_array (78x)
		57411: 67,  // expr_assoc (78x)
		57412: 68,  // expr_binary (78x)
		57413: 69,  // expr_call (78x)
		57414: 70,  // expr_close (78x)
		57415: 71,  // expr_dbg (78x)
		57416: 72,  // expr_delete (78x)
		57418: 73,  // expr_func (78x)
		57419: 74,  // expr_ident (78x)
		57421: 75,  // expr_in (78x)
		57422: 76,  // expr_item_or_slice (78x)
		57423: 77,  // expr_len (78x)
		57424: 78,  // expr_literals (78x)
		57425: 79,  // expr_make (78x)
		57426: 80,  // expr_map (78x)
		57430: 81,  // expr_member (78x)
		57431: 82,  // expr_member_or_ident (78x)
		57432: 83,  // expr_new (78x)
		57433: 84,  // expr_nil_coalesce (78x)
		57434: 85,  // expr_opchan (78x)
		57435: 86,  // expr_paren (78x)
		57437: 87,  // expr_ternary (78x)
		57438: 88,  // expr_unary (78x)
		57448: 89,  // op_comparison (78x)
		57436: 90,  // expr_slice_helper1 (67x)
		57446: 91,  // newline (53x)
		57447: 92,  // newlines (49x)
		57355: 93,  // IF (44x)
		57353: 94,  // VAR (44x)
		57380: 95,  // BREAK (43x)
		57381: 96,  // CONTINUE (43x)
		57392: 97,  // DEFER (43x)
		57357: 98,  // FOR (43x)
		57391: 99,  // GO (43x)
		57370: 100, // MODULE (43x)
		57352: 101, // RETURN (43x)
		57388: 102, // SELECT (43x)
		57387: 103, // SWITCH (43x)
		57354: 104, // THROW (43x)
		57371: 105, // TRY (43x)
		57393: 106, // CHAN (37x)
		57401: 107, // STRUCT (37x)
		57455: 108, // opt_term (33x)
		57488: 109, // term (33x)
		57407: 110, // compstmt (32x)
		57489: 111, // type_data (28x)
		57454: 112, // opt_newlines (20x)
		57406: 113, // comma_opt_newlines (14x)
		57439: 114, // exprs (13x)
		57427: 115, // expr_map_content (8x)
		57450: 116, // opt_exprs (6x)
		57451: 117, // opt_func_return_expr_idents (6x)
		57356: 118, // ELSE (4x)
		57467: 119, // stmt_lets (4x)
		57484: 120, // stmt_typed_lets (4x)
		57485: 121, // stmt_var (4x)
		57486: 122, // stmt_var_or_lets (4x)
		57443: 123, // func_expr_typed_ident (3x)
		57445: 124, // func_expr_untyped_ident (3x)
		57449: 125, // opt_comma_opt_newlines (3x)
		57458: 126, // stmt (3x)
		57459: 127, // stmt_break (3x)
		57460: 128, // stmt_continue (3x)
		57461: 129, // stmt_defer (3x)
		57462: 130, // stmt_expr (3x)
		57463: 131, // stmt_for (3x)
		57464: 132, // stmt_go (3x)
		57465: 133, // stmt_if (3x)
		57466: 134, // stmt_if_helper (3x)
		57468: 135, // stmt_module (3x)
		57469: 136, // stmt_return (3x)
		57470: 137, // stmt_select (3x)
		57477: 138, // stmt_switch (3x)
		57482: 139, // stmt_throw (3x)
		57483: 140, // stmt_try (3x)
		57429: 141, // expr_map_key_value (2x)
		57373: 142, // FINALLY (2x)
		57440: 143, // func_expr_idents (2x)
		57441: 144, // func_expr_idents_last_untyped (2x)
		57442: 145, // func_expr_idents_not_empty (2x)
		57444: 146, // func_expr_typed_idents (2x)
		57472: 147, // stmt_select_case (2x)
		57476: 148, // stmt_select_default (2x)
		57478: 149, // stmt_switch_case (2x)
		57481: 150, // stmt_switch_default (2x)
		57372: 151, // CATCH (1x)
		57417: 152, // expr_for_idents (1x)
		57420: 153, // expr_idents (1x)
		57428: 154, // expr_map_content_helper (1x)
		57452: 155, // opt_func_return_expr_idents1 (1x)
		57453: 156, // opt_func_return_expr_idents2 (1x)
		57457: 157, // start (1x)
		57471: 158, // stmt_select_body (1x)
		57473: 159, // stmt_select_cases (1x)
		57474: 160, // stmt_select_cases_helper (1x)
		57475: 161, // stmt_select_content (1x)
		57479: 162, // stmt_switch_cases (1x)
		57480: 163, // stmt_switch_cases_helper (1x)
		57487: 164, // stmts (1x)
		57396: 165, // TYPE (1x)
		57490: 166, // type_data_struct (1x)
		57405: 167, // $default (0x)
		57349: 168, // ARRAY (0x)
		57345: 169, // error (0x)
		57404: 170, // UNARY (0x)
	}

	yySymNames = []string{
		"'['",
		"'*'",
		"'}'",
		"'('",
		"'{'",
		"'&'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"';'",
		"CASE",
		"DEFAULT",
		"$end",
		"':'",
		"IDENT",
		"'.'",
		"','",
		"')'",
		"MAP",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"']'",
		"'!'",
		"'^'",
		"CLOSE",
		"DBG",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"VARARG",
		"'='",
		"WALRUS",
		"slice_count",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_dbg",
		"expr_delete",
		"expr_func",
		"expr_ident",
		"expr_in",
		"expr_item_or_slice",
		"expr_len",
		"expr_literals",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_nil_coalesce",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"op_comparison",
		"expr_slice_helper1",
		"newline",
		"newlines",
		"IF",
		"VAR",
		"BREAK",
		"CONTINUE",
		"DEFER",
		"FOR",
		"GO",
		"MODULE",
		"RETURN",
		"SELECT",
		"SWITCH",
		"THROW",
		"TRY",
		"CHAN",
		"STRUCT",
		"opt_term",
		"term",
		"compstmt",
		"type_data",
		"opt_newlines",
		"comma_opt_newlines",
		"exprs",
		"expr_map_content",
		"opt_exprs",
		"opt_func_return_expr_idents",
		"ELSE",
		"stmt_lets",
		"stmt_typed_lets",
		"stmt_var",
		"stmt_var_or_lets",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"opt_comma_opt_newlines",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_if",
		"stmt_if_helper",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"expr_map_key_value",
		"FINALLY",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"stmt_select_case",
		"stmt_select_default",
		"stmt_switch_case",
		"stmt_switch_default",
		"CATCH",
		"expr_for_idents",
		"expr_idents",
		"expr_map_content_helper",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"start",
		"stmt_select_body",
		"stmt_select_cases",
		"stmt_select_cases_helper",
		"stmt_select_content",
		"stmt_switch_cases",
		"stmt_switch_cases_helper",
		"stmts",
		"TYPE",
		"type_data_struct",
		"$default",
		"ARRAY",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {157, 1},
		2:   {110, 1},
		3:   {110, 3},
		4:   {164, 1},
		5:   {164, 3},
		6:   {126, 1},
		7:   {126, 1},
		8:   {126, 1},
		9:   {126, 1},
		10:  {126, 1},
		11:  {126, 1},
		12:  {126, 1},
		13:  {126, 1},
		14:  {126, 1},
		15:  {126, 1},
		16:  {126, 1},
		17:  {126, 1},
		18:  {126, 1},
		19:  {126, 1},
		20:  {127, 1},
		21:  {128, 1},
		22:  {136, 2},
		23:  {139, 2},
		24:  {135, 5},
		25:  {130, 1},
		26:  {132, 2},
		27:  {132, 2},
		28:  {129, 2},
		29:  {129, 2},
		30:  {140, 13},
		31:  {140, 12},
		32:  {140, 9},
		33:  {140, 8},
		34:  {122, 1},
		35:  {122, 1},
		36:  {122, 1},
		37:  {121, 4},
		38:  {120, 3},
		39:  {119, 3},
		40:  {133, 1},
		41:  {134, 5},
		42:  {134, 7},
		43:  {134, 5},
		44:  {131, 4},
		45:  {131, 7},
		46:  {131, 5},
		47:  {131, 6},
		48:  {131, 7},
		49:  {131, 7},
		50:  {131, 8},
		51:  {131, 7},
		52:  {131, 8},
		53:  {131, 8},
		54:  {131, 9},
		55:  {137, 4},
		56:  {161, 3},
		57:  {159, 0},
		58:  {159, 1},
		59:  {160, 1},
		60:  {160, 2},
		61:  {160, 2},
		62:  {158, 1},
		63:  {158, 1},
		64:  {147, 4},
		65:  {148, 3},
		66:  {138, 7},
		67:  {162, 0},
		68:  {162, 1},
		69:  {163, 1},
		70:  {163, 1},
		71:  {163, 2},
		72:  {163, 2},
		73:  {149, 4},
		74:  {149, 4},
		75:  {150, 3},
		76:  {117, 0},
		77:  {117, 1},
		78:  {117, 3},
		79:  {155, 0},
		80:  {155, 1},
		81:  {156, 1},
		82:  {156, 3},
		83:  {143, 0},
		84:  {143, 1},
		85:  {145, 1},
		86:  {145, 1},
		87:  {124, 1},
		88:  {123, 2},
		89:  {144, 1},
		90:  {144, 3},
		91:  {146, 1},
		92:  {146, 3},
		93:  {116, 0},
		94:  {116, 1},
		95:  {114, 1},
		96:  {114, 3},
		97:  {114, 3},
		98:  {64, 1},
		99:  {64, 1},
		100: {64, 1},
		101: {64, 1},
		102: {64, 1},
		103: {64, 1},
		104: {64, 1},
		105: {64, 1},
		106: {64, 1},
		107: {64, 1},
		108: {64, 1},
		109: {64, 1},
		110: {64, 1},
		111: {64, 1},
		112: {64, 1},
		113: {64, 1},
		114: {64, 1},
		115: {64, 1},
		116: {64, 1},
		117: {64, 1},
		118: {64, 1},
		119: {71, 3},
		120: {71, 4},
		121: {71, 4},
		122: {77, 4},
		123: {86, 3},
		124: {66, 2},
		125: {66, 5},
		126: {66, 7},
		127: {84, 3},
		128: {87, 5},
		129: {83, 4},
		130: {85, 3},
		131: {85, 2},
		132: {75, 3},
		133: {72, 4},
		134: {72, 6},
		135: {70, 4},
		136: {78, 1},
		137: {78, 1},
		138: {78, 1},
		139: {78, 1},
		140: {78, 1},
		141: {82, 1},
		142: {82, 1},
		143: {81, 3},
		144: {69, 5},
		145: {69, 4},
		146: {65, 5},
		147: {65, 4},
		148: {88, 2},
		149: {88, 2},
		150: {88, 2},
		151: {88, 2},
		152: {88, 2},
		153: {88, 2},
		154: {68, 3},
		155: {68, 3},
		156: {68, 3},
		157: {68, 3},
		158: {68, 3},
		159: {68, 3},
		160: {68, 3},
		161: {68, 3},
		162: {68, 1},
		163: {68, 1},
		164: {68, 3},
		165: {68, 3},
		166: {68, 3},
		167: {68, 3},
		168: {67, 3},
		169: {67, 3},
		170: {67, 3},
		171: {67, 3},
		172: {67, 3},
		173: {67, 3},
		174: {67, 2},
		175: {67, 2},
		176: {89, 3},
		177: {89, 3},
		178: {89, 3},
		179: {89, 3},
		180: {89, 3},
		181: {89, 3},
		182: {73, 8},
		183: {73, 9},
		184: {73, 10},
		185: {73, 9},
		186: {73, 10},
		187: {73, 11},
		188: {79, 4},
		189: {79, 6},
		190: {79, 8},
		191: {79, 7},
		192: {111, 1},
		193: {111, 3},
		194: {111, 2},
		195: {111, 2},
		196: {111, 5},
		197: {111, 2},
		198: {111, 6},
		199: {166, 2},
		200: {166, 4},
		201: {63, 2},
		202: {63, 3},
		203: {80, 4},
		204: {80, 8},
		205: {80, 3},
		206: {115, 1},
		207: {115, 3},
		208: {154, 1},
		209: {154, 3},
		210: {141, 3},
		211: {76, 2},
		212: {76, 2},
		213: {90, 3},
		214: {90, 5},
		215: {90, 4},
		216: {90, 4},
		217: {152, 1},
		218: {152, 3},
		219: {153, 1},
		220: {153, 3},
		221: {74, 1},
		222: {108, 0},
		223: {108, 1},
		224: {109, 1},
		225: {109, 1},
		226: {109, 2},
		227: {112, 0},
		228: {112, 1},
		229: {92, 1},
		230: {92, 2},
		231: {91, 1},
		232: {113, 2},
		233: {125, 1},
		234: {125, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [512][]uint16{
		// 0
		{13, 13, 3: 13, 13, 13, 13, 13, 243, 240, 12: 13, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 237, 157: 236},
		{12: 235},
		{12: 234},
		{305, 323, 233, 304, 329, 322, 319, 308, 233, 10: 233, 233, 233, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 267, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 93: 277, 274, 262, 263, 269, 278, 268, 266, 264, 279, 280, 265, 270, 114: 275, 119: 273, 272, 271, 248, 126: 247, 249, 250, 260, 261, 255, 259, 254, 276, 253, 251, 258, 257, 252, 256, 164: 246},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 10: 12, 12, 12, 14: 12, 18: 12, 46: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		// 5
		{11, 11, 11, 11, 11, 11, 11, 11, 243, 10: 11, 11, 11, 14: 11, 18: 11, 46: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 91: 242, 245, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 243, 10: 10, 10, 10, 14: 10, 18: 10, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 91: 244, 93: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 10: 6, 6, 6, 14: 6, 16: 6, 18: 6, 45: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 93: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 10: 4, 4, 4, 14: 4, 16: 4, 18: 4, 45: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 93: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 10: 5, 5, 5, 14: 5, 16: 5, 18: 5, 45: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 93: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		// 10
		{9, 9, 9, 9, 9, 9, 9, 9, 243, 10: 9, 9, 9, 14: 9, 18: 9, 46: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 91: 244, 93: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{2: 13, 8: 243, 240, 13, 13, 13, 91: 242, 241, 108: 744, 745},
		{2: 231, 8: 231, 231, 231, 231, 231},
		{2: 229, 8: 229, 229, 229, 229, 229, 229},
		{2: 228, 8: 228, 228, 228, 228, 228, 228},
		// 15
		{2: 227, 8: 227, 227, 227, 227, 227, 227},
		{2: 226, 8: 226, 226, 226, 226, 226, 226},
		{2: 225, 8: 225, 225, 225, 225, 225, 225},
		{2: 224, 8: 224, 224, 224, 224, 224, 224},
		{2: 223, 8: 223, 223, 223, 223, 223, 223},
		// 20
		{2: 222, 8: 222, 222, 222, 222, 222, 222},
		{2: 221, 8: 221, 221, 221, 221, 221, 221},
		{2: 220, 8: 220, 220, 220, 220, 220, 220},
		{2: 219, 8: 219, 219, 219, 219, 219, 219},
		{2: 218, 8: 218, 218, 218, 218, 218, 218},
		// 25
		{2: 217, 8: 217, 217, 217, 217, 217, 217},
		{2: 216, 8: 216, 216, 216, 216, 216, 216},
		{2: 215, 8: 215, 215, 215, 215, 215, 215},
		{2: 214, 8: 214, 214, 214, 214, 214, 214},
		{305, 323, 142, 304, 329, 322, 319, 308, 142, 142, 142, 142, 142, 142, 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 412, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 114: 568, 116: 743},
		// 30
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 742, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{14: 738},
		{376, 350, 210, 347, 5: 358, 349, 344, 210, 210, 210, 210, 210, 210, 15: 346, 140, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 61: 140, 140, 90: 375},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 540, 737, 287, 325, 289, 736, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 540, 735, 287, 325, 289, 734, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		// 35
		{4: 715},
		{2: 201, 8: 201, 201, 201, 201, 201, 201},
		{2: 200, 8: 200, 200, 200, 200, 200, 200},
		{2: 199, 8: 199, 199, 199, 199, 199, 199},
		{14: 710, 153: 709},
		// 40
		{16: 338, 61: 706, 705, 113: 415},
		{2: 195, 8: 195, 195, 195, 195, 195, 195, 118: 696},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 692, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 638, 322, 319, 308, 9: 641, 14: 643, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 640, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 94: 274, 114: 275, 119: 273, 272, 271, 642, 152: 639},
		{4: 619},
		// 45
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 598, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 15: 137, 137, 137, 19: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 60: 137, 137, 137},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 15: 136, 136, 136, 19: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 60: 136, 136, 136},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 15: 135, 135, 135, 19: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 60: 135, 135, 135},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 15: 134, 134, 134, 19: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 60: 134, 134, 134},
		// 50
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 15: 133, 133, 133, 19: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 60: 133, 133, 133},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 15: 132, 132, 132, 19: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 60: 132, 132, 132},
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 15: 131, 131, 131, 19: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 60: 131, 131, 131},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 15: 130, 130, 130, 19: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 60: 130, 130, 130},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 15: 129, 129, 129, 19: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 60: 129, 129, 129},
		// 55
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 15: 128, 128, 128, 19: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 60: 128, 128, 128},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 15: 127, 127, 127, 19: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 60: 127, 127, 127},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 15: 126, 126, 126, 19: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 60: 126, 126, 126},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 15: 125, 125, 125, 19: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 60: 125, 125, 125},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 15: 124, 124, 124, 19: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 60: 124, 124, 124},
		// 60
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 15: 123, 123, 123, 19: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 60: 123, 123, 123},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 15: 122, 122, 122, 19: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 60: 122, 122, 122},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 15: 121, 121, 121, 19: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 60: 121, 121, 121},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 15: 120, 120, 120, 19: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 60: 120, 120, 120},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 15: 119, 119, 119, 19: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 60: 119, 119, 119},
		// 65
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 15: 118, 118, 118, 19: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 60: 118, 118, 118},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 15: 117, 117, 117, 19: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 60: 117, 117, 117},
		{3: 583},
		{3: 580},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 578, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		// 70
		{8, 8, 3: 8, 8, 8, 8, 8, 243, 14: 8, 16: 8, 18: 8, 45: 573, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 91: 242, 332, 112: 574},
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 565},
		{3: 562},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 561, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{3: 555},
		// 75
		{3: 552},
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 15: 99, 99, 99, 19: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 60: 99, 99, 99},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 15: 98, 98, 98, 19: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 60: 98, 98, 98},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 15: 97, 97, 97, 19: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 60: 97, 97, 97},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 15: 96, 96, 96, 19: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 60: 96, 96, 96},
		// 80
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 15: 95, 95, 95, 19: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 60: 95, 95, 95},
		{376, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 15: 94, 94, 94, 19: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 60: 94, 94, 94, 90: 420},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 15: 93, 93, 93, 19: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 60: 93, 93, 93},
		{14, 14, 14, 546, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15: 14, 14, 14, 19: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 60: 14, 14, 14},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 545, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		// 85
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 544, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 543, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 540, 291, 287, 325, 289, 290, 299, 294, 300, 286, 541, 301, 292, 293, 282, 296, 297, 542, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 540, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 539, 295, 285, 298, 288, 284, 283, 324},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 15: 73, 73, 73, 19: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 60: 73, 73, 73},
		// 90
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 15: 72, 72, 72, 19: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 60: 72, 72, 72},
		{3: 481, 14: 482},
		{3: 467},
		{430, 4: 429},
		{8, 8, 8, 8, 8, 8, 8, 8, 243, 14: 8, 18: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 91: 242, 332, 112: 331, 115: 330},
		// 95
		{2: 428},
		{305, 323, 29, 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 333, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 141: 335, 154: 334},
		{7, 7, 7, 7, 7, 7, 7, 7, 243, 10: 7, 7, 14: 7, 16: 7, 18: 7, 45: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 91: 244, 106: 7, 7},
		{376, 350, 3: 347, 5: 358, 349, 344, 13: 374, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{2: 8, 8: 243, 16: 338, 91: 242, 332, 112: 339, 337, 125: 336},
		// 100
		{2: 27, 8: 27, 16: 27},
		{2: 28},
		{305, 323, 2, 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 333, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 141: 341},
		{8, 8, 8, 8, 8, 8, 8, 8, 243, 14: 8, 18: 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 91: 242, 332, 106: 8, 8, 112: 340},
		{2: 1, 45: 1},
		// 105
		{3, 3, 3, 3, 3, 3, 3, 3, 14: 3, 18: 3, 45: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 106: 3, 3},
		{2: 26, 8: 26, 16: 26},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 427, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 424, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 423, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		// 110
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 422, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{14: 421},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 17: 142, 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 412, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 114: 411, 116: 413},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 410, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 409, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		// 115
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 408, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 407, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 406, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 405, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 404, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		// 120
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 403, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 402, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 401, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 400, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 399, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		// 125
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 398, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 397, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 396, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 395, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 394, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		// 130
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 393, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 15: 61, 61, 61, 19: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 60: 61, 61, 61},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 15: 60, 60, 60, 19: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60: 60, 60, 60},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 392, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 391, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		// 135
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 390, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 389, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 388, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 387, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 386, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		// 140
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 15: 23, 23, 23, 19: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 60: 23, 23, 23},
		{305, 323, 3: 304, 329, 322, 319, 308, 13: 378, 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 377, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{376, 350, 3: 347, 5: 358, 349, 344, 13: 382, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 381, 90: 375},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 379, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{376, 350, 3: 347, 5: 358, 349, 344, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 380, 90: 375},
		// 145
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 15: 19, 19, 19, 19: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 60: 19, 19, 19},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 15: 22, 22, 22, 19: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 60: 22, 22, 22},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 45: 384, 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 383, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{376, 350, 3: 347, 5: 358, 349, 344, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 385, 90: 375},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15: 20, 20, 20, 19: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60: 20, 20, 20},
		// 150
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 15: 21, 21, 21, 19: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 60: 21, 21, 21},
		{376, 350, 25, 347, 5: 358, 349, 344, 25, 15: 346, 25, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{376, 350, 54, 347, 54, 358, 349, 54, 54, 54, 54, 54, 54, 54, 15: 346, 54, 54, 19: 345, 352, 348, 351, 54, 54, 54, 356, 54, 54, 54, 54, 54, 54, 54, 367, 54, 54, 54, 54, 54, 54, 366, 353, 354, 355, 54, 60: 54, 54, 54, 90: 375},
		{376, 350, 55, 347, 55, 358, 349, 55, 55, 55, 55, 55, 55, 55, 15: 346, 55, 55, 19: 345, 352, 348, 351, 55, 55, 55, 356, 55, 55, 55, 55, 55, 55, 55, 367, 55, 55, 55, 55, 55, 55, 366, 353, 354, 355, 55, 60: 55, 55, 55, 90: 375},
		{376, 350, 56, 347, 56, 358, 349, 56, 56, 56, 56, 56, 56, 56, 15: 346, 56, 56, 19: 345, 352, 348, 351, 56, 56, 56, 356, 56, 56, 56, 56, 56, 56, 56, 367, 56, 56, 56, 56, 56, 56, 366, 353, 354, 355, 56, 60: 56, 56, 56, 90: 375},
		// 155
		{376, 350, 57, 347, 57, 358, 349, 57, 57, 57, 57, 57, 57, 57, 15: 346, 57, 57, 19: 345, 352, 348, 351, 57, 57, 57, 356, 57, 57, 57, 57, 57, 57, 57, 367, 57, 57, 57, 57, 57, 57, 366, 353, 354, 355, 57, 60: 57, 57, 57, 90: 375},
		{376, 350, 58, 347, 58, 358, 349, 58, 58, 58, 58, 58, 58, 58, 15: 346, 58, 58, 19: 345, 352, 348, 351, 58, 58, 58, 356, 58, 58, 58, 58, 58, 58, 58, 367, 58, 58, 58, 58, 58, 58, 366, 353, 354, 355, 58, 60: 58, 58, 58, 90: 375},
		{376, 350, 59, 347, 59, 358, 349, 59, 59, 59, 59, 59, 59, 59, 15: 346, 59, 59, 19: 345, 352, 348, 351, 59, 59, 59, 356, 59, 59, 59, 59, 59, 59, 59, 367, 59, 59, 59, 59, 59, 59, 366, 353, 354, 355, 59, 60: 59, 59, 59, 90: 375},
		{376, 350, 62, 347, 62, 358, 349, 344, 62, 62, 62, 62, 62, 62, 15: 346, 62, 62, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 62, 60: 62, 62, 62, 90: 375},
		{376, 350, 63, 347, 63, 358, 349, 344, 63, 63, 63, 63, 63, 63, 15: 346, 63, 63, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 63, 60: 63, 63, 63, 90: 375},
		// 160
		{376, 350, 64, 347, 64, 358, 349, 344, 64, 64, 64, 64, 64, 64, 15: 346, 64, 64, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 64, 60: 64, 64, 64, 90: 375},
		{376, 350, 65, 347, 65, 358, 349, 344, 65, 65, 65, 65, 65, 65, 15: 346, 65, 65, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 65, 60: 65, 65, 65, 90: 375},
		{376, 350, 66, 347, 66, 358, 349, 344, 66, 66, 66, 66, 66, 66, 15: 346, 66, 66, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 66, 60: 66, 66, 66, 90: 375},
		{376, 350, 67, 347, 67, 358, 349, 344, 67, 67, 67, 67, 67, 67, 15: 346, 67, 67, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 67, 60: 67, 67, 67, 90: 375},
		{376, 350, 68, 347, 68, 358, 349, 68, 68, 68, 68, 68, 68, 68, 15: 346, 68, 68, 19: 345, 352, 348, 351, 372, 370, 68, 356, 68, 68, 68, 368, 371, 373, 68, 367, 68, 369, 68, 68, 68, 68, 366, 353, 354, 355, 68, 60: 68, 68, 68, 90: 375},
		// 165
		{376, 69, 69, 347, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 15: 346, 69, 69, 19: 345, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 367, 69, 69, 69, 69, 69, 69, 366, 353, 69, 69, 69, 60: 69, 69, 69, 90: 375},
		{376, 350, 70, 347, 70, 358, 349, 70, 70, 70, 70, 70, 70, 70, 15: 346, 70, 70, 19: 345, 352, 348, 351, 372, 370, 70, 356, 359, 70, 70, 368, 371, 373, 70, 367, 70, 369, 70, 70, 70, 70, 366, 353, 354, 355, 70, 60: 70, 70, 70, 90: 375},
		{376, 350, 71, 347, 71, 358, 71, 71, 71, 71, 71, 71, 71, 71, 15: 346, 71, 71, 19: 345, 352, 71, 351, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 367, 71, 71, 71, 71, 71, 71, 366, 353, 354, 355, 71, 60: 71, 71, 71, 90: 375},
		{376, 74, 74, 347, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 15: 346, 74, 74, 19: 345, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 367, 74, 74, 74, 74, 74, 74, 366, 353, 74, 74, 74, 60: 74, 74, 74, 90: 375},
		{376, 75, 75, 347, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 15: 346, 75, 75, 19: 345, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 367, 75, 75, 75, 75, 75, 75, 366, 353, 75, 75, 75, 60: 75, 75, 75, 90: 375},
		// 170
		{376, 350, 76, 347, 76, 358, 349, 344, 76, 76, 76, 76, 76, 76, 15: 346, 76, 76, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 76, 60: 76, 76, 76, 90: 375},
		{376, 77, 77, 347, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 15: 346, 77, 77, 19: 345, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 367, 77, 77, 77, 77, 77, 77, 366, 353, 77, 77, 77, 60: 77, 77, 77, 90: 375},
		{376, 78, 78, 347, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 15: 346, 78, 78, 19: 345, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 367, 78, 78, 78, 78, 78, 78, 366, 353, 78, 78, 78, 60: 78, 78, 78, 90: 375},
		{376, 79, 79, 347, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 15: 346, 79, 79, 19: 345, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 367, 79, 79, 79, 79, 79, 79, 366, 353, 79, 79, 79, 60: 79, 79, 79, 90: 375},
		{376, 350, 80, 347, 80, 358, 80, 80, 80, 80, 80, 80, 80, 80, 15: 346, 80, 80, 19: 345, 352, 80, 351, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 367, 80, 80, 80, 80, 80, 80, 366, 353, 354, 355, 80, 60: 80, 80, 80, 90: 375},
		// 175
		{376, 350, 81, 347, 81, 358, 81, 81, 81, 81, 81, 81, 81, 81, 15: 346, 81, 81, 19: 345, 352, 81, 351, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 367, 81, 81, 81, 81, 81, 81, 366, 353, 354, 355, 81, 60: 81, 81, 81, 90: 375},
		{16: 338, 141, 60: 416, 113: 415},
		{376, 350, 140, 347, 5: 358, 349, 344, 140, 140, 140, 140, 140, 140, 15: 346, 140, 140, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 140, 60: 140, 90: 375},
		{17: 414},
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 15: 88, 88, 88, 19: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 60: 88, 88, 88},
		// 180
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 418, 291, 287, 325, 289, 290, 299, 294, 300, 286, 419, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{17: 417},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 15: 89, 89, 89, 19: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 60: 89, 89, 89},
		{376, 350, 139, 347, 5: 358, 349, 344, 139, 139, 139, 139, 139, 139, 15: 346, 139, 139, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 139, 60: 139, 139, 139, 90: 375},
		{376, 94, 138, 94, 5: 94, 94, 94, 138, 138, 138, 138, 138, 138, 15: 94, 138, 138, 19: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 138, 60: 138, 138, 138, 90: 420},
		// 185
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 15: 24, 24, 24, 19: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 60: 24, 24, 24},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 15: 92, 92, 92, 19: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 60: 92, 92, 92},
		{376, 103, 103, 347, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 15: 346, 103, 103, 19: 345, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 367, 103, 103, 103, 103, 103, 103, 366, 353, 103, 103, 103, 60: 103, 103, 103, 90: 375},
		{376, 350, 105, 347, 105, 358, 349, 344, 105, 105, 105, 105, 105, 105, 15: 346, 105, 105, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 105, 105, 368, 371, 373, 105, 367, 105, 369, 342, 105, 357, 105, 366, 353, 354, 355, 105, 60: 105, 105, 105, 90: 375},
		{376, 350, 3: 347, 5: 358, 349, 344, 13: 425, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		// 190
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 426, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{376, 350, 107, 347, 107, 358, 349, 344, 107, 107, 107, 107, 107, 107, 15: 346, 107, 107, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 107, 107, 368, 371, 373, 107, 367, 107, 369, 342, 107, 357, 107, 366, 353, 354, 355, 107, 60: 107, 107, 107, 90: 375},
		{376, 350, 108, 347, 108, 358, 349, 108, 108, 108, 108, 108, 108, 108, 15: 346, 108, 108, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 108, 108, 368, 371, 373, 108, 367, 108, 369, 342, 108, 357, 108, 366, 353, 354, 355, 108, 60: 108, 108, 108, 90: 375},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 15: 30, 30, 30, 19: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 60: 30, 30, 30},
		{8, 8, 8, 8, 8, 8, 8, 8, 243, 14: 8, 18: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 91: 242, 332, 112: 331, 115: 465},
		// 195
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 432},
		{2: 43, 4: 43, 8: 43, 15: 43, 43, 43, 45: 43},
		{15: 446, 45: 460},
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 459},
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 458},
		// 200
		{454},
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 453},
		{4: 441},
		{45: 439},
		{438, 34, 14: 34, 18: 34, 63: 440, 106: 34, 34},
		// 205
		{33, 33, 14: 33, 18: 33, 106: 33, 33},
		{8: 243, 14: 8, 91: 242, 332, 112: 442},
		{14: 444, 166: 443},
		{2: 8, 8: 243, 16: 338, 91: 242, 332, 112: 448, 449},
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 445},
		// 210
		{2: 36, 8: 36, 15: 446, 36},
		{14: 447},
		{2: 42, 4: 42, 8: 42, 15: 42, 42, 42, 45: 42},
		{2: 452},
		{14: 450},
		// 215
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 451},
		{2: 35, 8: 35, 15: 446, 35},
		{2: 37, 4: 37, 8: 37, 15: 37, 37, 37, 45: 37},
		{2: 38, 4: 38, 8: 38, 15: 446, 38, 38, 45: 38},
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 455},
		// 220
		{15: 446, 45: 456},
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 457},
		{2: 39, 4: 39, 8: 39, 15: 446, 39, 39, 45: 39},
		{2: 40, 4: 40, 8: 40, 15: 446, 40, 40, 45: 40},
		{2: 41, 4: 41, 8: 41, 15: 446, 41, 41, 45: 41},
		// 225
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 461},
		{4: 462, 15: 446},
		{8, 8, 8, 8, 8, 8, 8, 8, 243, 14: 8, 18: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 91: 242, 332, 112: 331, 115: 463},
		{2: 464},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 15: 31, 31, 31, 19: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 60: 31, 31, 31},
		// 230
		{2: 466},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 15: 32, 32, 32, 19: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60: 32, 32, 32},
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 468, 165: 469},
		{15: 446, 475, 474},
		{14: 470},
		// 235
		{16: 471},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 472, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{376, 350, 3: 347, 5: 358, 349, 344, 15: 346, 17: 473, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 15: 44, 44, 44, 19: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 60: 44, 44, 44},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 15: 47, 47, 47, 19: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 60: 47, 47, 47},
		// 240
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 476, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{376, 350, 3: 347, 5: 358, 349, 344, 15: 346, 478, 477, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 15: 46, 46, 46, 19: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 60: 46, 46, 46},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 479, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{376, 350, 3: 347, 5: 358, 349, 344, 15: 346, 17: 480, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		// 245
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 15: 45, 45, 45, 19: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 60: 45, 45, 45},
		{14: 487, 17: 152, 123: 489, 488, 143: 521, 520, 484, 486},
		{3: 483},
		{14: 487, 17: 152, 123: 489, 488, 143: 490, 485, 484, 486},
		{16: 338, 151, 113: 517},
		// 250
		{16: 150, 150, 60: 505},
		{16: 149, 149},
		{438, 433, 14: 431, 16: 148, 148, 435, 60: 148, 63: 434, 106: 436, 437, 111: 504},
		{16: 146, 146, 60: 146},
		{16: 144, 144},
		// 255
		{17: 491},
		{438, 433, 3: 493, 159, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 492, 117: 494},
		{4: 158, 15: 446},
		{438, 433, 14: 431, 17: 156, 435, 63: 434, 106: 436, 437, 111: 500, 155: 498, 499},
		{4: 495},
		// 260
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 496},
		{2: 497},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 15: 50, 50, 50, 19: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 60: 50, 50, 50},
		{17: 503},
		{16: 338, 155, 113: 501},
		// 265
		{15: 446, 154, 154},
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 502},
		{15: 446, 153, 153},
		{4: 157},
		{15: 446, 147, 147},
		// 270
		{438, 433, 14: 431, 17: 506, 435, 63: 434, 106: 436, 437, 111: 507},
		{438, 433, 3: 493, 159, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 492, 117: 513},
		{15: 446, 17: 508},
		{438, 433, 3: 493, 159, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 492, 117: 509},
		{4: 510},
		// 275
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 511},
		{2: 512},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 15: 48, 48, 48, 19: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 60: 48, 48, 48},
		{4: 514},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 515},
		// 280
		{2: 516},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 15: 49, 49, 49, 19: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 60: 49, 49, 49},
		{14: 487, 123: 519, 518},
		{16: 145, 145, 60: 145},
		{16: 143, 143},
		// 285
		{16: 150, 150, 60: 527},
		{17: 522},
		{438, 433, 3: 493, 159, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 492, 117: 523},
		{4: 524},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 525},
		// 290
		{2: 526},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 15: 53, 53, 53, 19: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 60: 53, 53, 53},
		{438, 433, 14: 431, 17: 528, 435, 63: 434, 106: 436, 437, 111: 529},
		{438, 433, 3: 493, 159, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 492, 117: 535},
		{15: 446, 17: 530},
		// 295
		{438, 433, 3: 493, 159, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 492, 117: 531},
		{4: 532},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 533},
		{2: 534},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 15: 51, 51, 51, 19: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 60: 51, 51, 51},
		// 300
		{4: 536},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 537},
		{2: 538},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 15: 52, 52, 52, 19: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 60: 52, 52, 52},
		{137, 137, 82, 137, 82, 137, 137, 137, 82, 82, 82, 82, 82, 82, 15: 137, 82, 82, 19: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 82, 60: 82, 82, 82},
		// 305
		{376, 350, 3: 347, 5: 358, 349, 344, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{376, 94, 84, 94, 84, 94, 94, 94, 84, 84, 84, 84, 84, 84, 15: 94, 84, 84, 19: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 84, 60: 84, 84, 84, 90: 420},
		{93, 93, 83, 93, 83, 93, 93, 93, 83, 83, 83, 83, 83, 83, 15: 93, 83, 83, 19: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 83, 60: 83, 83, 83},
		{376, 85, 85, 347, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 15: 346, 85, 85, 19: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 353, 85, 85, 85, 60: 85, 85, 85, 90: 375},
		{376, 86, 86, 347, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 15: 346, 86, 86, 19: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 353, 86, 86, 86, 60: 86, 86, 86, 90: 375},
		// 310
		{376, 87, 87, 347, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 15: 346, 87, 87, 19: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 353, 87, 87, 87, 60: 87, 87, 87, 90: 375},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 17: 142, 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 412, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 114: 547, 116: 548},
		{16: 338, 141, 60: 550, 113: 415},
		{17: 549},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 15: 90, 90, 90, 19: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 60: 90, 90, 90},
		// 315
		{17: 551},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 15: 91, 91, 91, 19: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 60: 91, 91, 91},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 553, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{376, 350, 3: 347, 5: 358, 349, 344, 15: 346, 17: 554, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 15: 100, 100, 100, 19: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 60: 100, 100, 100},
		// 320
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 556, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{376, 350, 3: 347, 5: 358, 349, 344, 15: 346, 558, 557, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 15: 102, 102, 102, 19: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 60: 102, 102, 102},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 559, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{376, 350, 3: 347, 5: 358, 349, 344, 15: 346, 17: 560, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		// 325
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 15: 101, 101, 101, 19: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 60: 101, 101, 101},
		{376, 350, 104, 347, 104, 358, 349, 344, 104, 104, 104, 104, 104, 104, 15: 346, 104, 104, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 104, 104, 368, 371, 373, 104, 367, 104, 369, 342, 104, 357, 104, 366, 353, 354, 355, 104, 60: 104, 104, 104, 90: 375},
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 563},
		{15: 446, 17: 564},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 15: 106, 106, 106, 19: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 60: 106, 106, 106},
		// 330
		{4: 566, 15: 446},
		{8, 8, 8, 8, 8, 8, 8, 8, 243, 14: 8, 16: 8, 18: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 91: 242, 332, 112: 567},
		{305, 323, 142, 304, 329, 322, 319, 308, 142, 14: 318, 16: 142, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 412, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 114: 568, 116: 569},
		{2: 141, 8: 141, 141, 141, 141, 141, 141, 16: 338, 45: 141, 113: 415},
		{2: 8, 8: 243, 16: 338, 91: 242, 332, 112: 339, 571, 125: 570},
		// 335
		{2: 572},
		{2: 2, 45: 2},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 15: 109, 109, 109, 19: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 60: 109, 109, 109},
		{438, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 34, 111, 111, 111, 34, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 60: 111, 111, 111, 440, 106: 34, 34},
		{305, 323, 3: 304, 329, 322, 319, 308, 142, 14: 318, 16: 142, 18: 328, 45: 142, 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 412, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 114: 568, 116: 575},
		// 340
		{8: 243, 16: 338, 45: 8, 91: 242, 332, 112: 339, 571, 125: 576},
		{45: 577},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 15: 110, 110, 110, 19: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 60: 110, 110, 110},
		{376, 350, 3: 347, 5: 358, 349, 344, 15: 346, 17: 579, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 15: 112, 112, 112, 19: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 60: 112, 112, 112},
		// 345
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 581, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{376, 350, 3: 347, 5: 358, 349, 344, 15: 346, 17: 582, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 15: 113, 113, 113, 19: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 60: 113, 113, 113},
		{305, 589, 3: 304, 329, 322, 319, 308, 14: 588, 17: 584, 590, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 587, 585, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 106: 436, 437, 111: 586},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 15: 116, 116, 116, 19: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 60: 116, 116, 116},
		// 350
		{376, 350, 3: 347, 5: 358, 349, 344, 15: 346, 17: 597, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{15: 446, 17: 596},
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 595},
		{14, 14, 3: 546, 5: 14, 14, 14, 15: 43, 17: 43, 19: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{305, 589, 3: 304, 329, 322, 319, 308, 14: 588, 18: 590, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 587, 540, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 539, 295, 285, 298, 288, 284, 283, 324, 106: 436, 437, 111: 459},
		// 355
		{591, 4: 429},
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 592},
		{15: 446, 45: 593},
		{438, 433, 14: 431, 18: 435, 63: 434, 106: 436, 437, 111: 594},
		{4: 462, 15: 446, 17: 39},
		// 360
		{4: 566, 15: 446, 17: 40},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 15: 114, 114, 114, 19: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 60: 114, 114, 114},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 15: 115, 115, 115, 19: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 60: 115, 115, 115},
		{376, 350, 3: 347, 599, 358, 349, 344, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{2: 8, 8: 243, 10: 8, 8, 91: 242, 332, 112: 600},
		// 365
		{2: 168, 8: 168, 10: 605, 606, 149: 604, 603, 162: 601, 602},
		{2: 8, 8: 243, 91: 242, 332, 112: 617},
		{2: 167, 8: 167, 10: 605, 606, 149: 615, 616},
		{2: 166, 8: 166, 10: 166, 166},
		{2: 165, 8: 165, 10: 165, 165},
		// 370
		{305, 323, 3: 304, 329, 322, 319, 308, 13: 142, 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 609, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 114: 568, 116: 610},
		{13: 607},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 13, 13, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 608},
		{2: 160, 8: 160, 10: 160, 160},
		{376, 350, 3: 347, 5: 358, 349, 344, 13: 613, 15: 346, 140, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		// 375
		{13: 611},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 13, 13, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 612},
		{2: 161, 8: 161, 10: 161, 161},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 13, 13, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 614},
		{2: 162, 8: 162, 10: 162, 162},
		// 380
		{2: 164, 8: 164, 10: 164, 164},
		{2: 163, 8: 163, 10: 163, 163},
		{2: 618},
		{2: 169, 8: 169, 169, 169, 169, 169, 169},
		{2: 8, 8: 243, 10: 8, 8, 91: 242, 332, 112: 621, 161: 620},
		// 385
		{2: 637},
		{2: 178, 8: 178, 10: 627, 628, 147: 626, 625, 158: 624, 622, 623},
		{2: 8, 8: 243, 91: 242, 332, 112: 636},
		{2: 177, 8: 177, 10: 627, 628, 147: 634, 635},
		{2: 176, 8: 176, 10: 176, 176},
		// 390
		{2: 173, 8: 173, 10: 173, 173},
		{2: 172, 8: 172, 10: 172, 172},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 267, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 93: 277, 274, 262, 263, 269, 278, 268, 266, 264, 279, 280, 265, 270, 114: 275, 119: 273, 272, 271, 248, 126: 631, 249, 250, 260, 261, 255, 259, 254, 276, 253, 251, 258, 257, 252, 256},
		{13: 629},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 13, 13, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 630},
		// 395
		{2: 170, 8: 170, 10: 170, 170},
		{13: 632},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 13, 13, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 633},
		{2: 171, 8: 171, 10: 171, 171},
		{2: 175, 8: 175, 10: 175, 175},
		// 400
		{2: 174, 8: 174, 10: 174, 174},
		{2: 179},
		{2: 180, 8: 180, 180, 180, 180, 180, 180},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 656, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 690, 112: 331, 115: 330},
		{19: 685},
		// 405
		{376, 350, 3: 347, 682, 358, 349, 344, 15: 346, 140, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 61: 140, 140, 90: 375},
		{305, 323, 3: 304, 329, 322, 319, 308, 9: 665, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 666, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{9: 646},
		{14, 14, 3: 546, 14, 14, 14, 14, 15: 14, 644, 19: 18, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 61: 14, 14},
		{14: 645},
		// 410
		{19: 17},
		{305, 323, 3: 304, 329, 322, 319, 308, 9: 647, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 648, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{305, 323, 3: 304, 658, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 659, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{376, 350, 3: 347, 5: 358, 349, 344, 9: 649, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{305, 323, 3: 304, 650, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 651, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		// 415
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 656, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 655, 112: 331, 115: 330},
		{376, 350, 3: 347, 652, 358, 349, 344, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 653},
		{2: 654},
		{2: 181, 8: 181, 181, 181, 181, 181, 181},
		// 420
		{2: 657},
		{10, 10, 10, 10, 10, 10, 10, 10, 243, 14: 10, 18: 10, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 91: 244, 93: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{2: 182, 8: 182, 182, 182, 182, 182, 182},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 656, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 663, 112: 331, 115: 330},
		{376, 350, 3: 347, 660, 358, 349, 344, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		// 425
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 661},
		{2: 662},
		{2: 183, 8: 183, 183, 183, 183, 183, 183},
		{2: 664},
		{2: 184, 8: 184, 184, 184, 184, 184, 184},
		// 430
		{305, 323, 3: 304, 675, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 676, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{376, 350, 3: 347, 5: 358, 349, 344, 9: 667, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{305, 323, 3: 304, 668, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 669, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 656, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 673, 112: 331, 115: 330},
		{376, 350, 3: 347, 670, 358, 349, 344, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		// 435
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 671},
		{2: 672},
		{2: 185, 8: 185, 185, 185, 185, 185, 185},
		{2: 674},
		{2: 186, 8: 186, 186, 186, 186, 186, 186},
		// 440
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 656, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 680, 112: 331, 115: 330},
		{376, 350, 3: 347, 677, 358, 349, 344, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 678},
		{2: 679},
		{2: 187, 8: 187, 187, 187, 187, 187, 187},
		// 445
		{2: 681},
		{2: 188, 8: 188, 188, 188, 188, 188, 188},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 683},
		{2: 684},
		{2: 189, 8: 189, 189, 189, 189, 189, 189},
		// 450
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 686, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{376, 350, 3: 347, 687, 358, 349, 344, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 688},
		{2: 689},
		{2: 190, 8: 190, 190, 190, 190, 190, 190},
		// 455
		{2: 691},
		{2: 191, 8: 191, 191, 191, 191, 191, 191},
		{376, 350, 3: 347, 693, 358, 349, 344, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 694},
		{2: 695},
		// 460
		{2: 194, 8: 194, 194, 194, 194, 194, 194, 118: 194},
		{4: 698, 93: 697},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 701, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 699},
		{2: 700},
		// 465
		{2: 192, 8: 192, 192, 192, 192, 192, 192, 118: 192},
		{376, 350, 3: 347, 702, 358, 349, 344, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 703},
		{2: 704},
		{2: 193, 8: 193, 193, 193, 193, 193, 193, 118: 193},
		// 470
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 412, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 114: 708},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 412, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 114: 707},
		{2: 196, 8: 196, 196, 196, 196, 196, 196, 16: 338, 113: 415},
		{2: 197, 8: 197, 197, 197, 197, 197, 197, 16: 338, 113: 415},
		{16: 338, 61: 711, 113: 712},
		// 475
		{16: 16, 61: 16},
		{305, 323, 3: 304, 329, 322, 319, 308, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 412, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 114: 714},
		{14: 713},
		{16: 15, 61: 15},
		{2: 198, 8: 198, 198, 198, 198, 198, 198, 16: 338, 113: 415},
		// 480
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 716},
		{2: 717},
		{151: 718},
		{4: 720, 14: 719},
		{4: 727},
		// 485
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 721},
		{2: 722},
		{2: 202, 8: 202, 202, 202, 202, 202, 202, 142: 723},
		{4: 724},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 725},
		// 490
		{2: 726},
		{2: 204, 8: 204, 204, 204, 204, 204, 204},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 728},
		{2: 729},
		{2: 203, 8: 203, 203, 203, 203, 203, 203, 142: 730},
		// 495
		{4: 731},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 732},
		{2: 733},
		{2: 205, 8: 205, 205, 205, 205, 205, 205},
		{128, 128, 207, 128, 5: 128, 128, 128, 207, 207, 207, 207, 207, 207, 15: 128, 19: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		// 500
		{127, 127, 206, 127, 5: 127, 127, 127, 206, 206, 206, 206, 206, 206, 15: 127, 19: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		{128, 128, 209, 128, 5: 128, 128, 128, 209, 209, 209, 209, 209, 209, 15: 128, 19: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		{127, 127, 208, 127, 5: 127, 127, 127, 208, 208, 208, 208, 208, 208, 15: 127, 19: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		{4: 739},
		{13, 13, 13, 13, 13, 13, 13, 13, 243, 240, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 91: 242, 241, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 108: 238, 239, 740},
		// 505
		{2: 741},
		{2: 211, 8: 211, 211, 211, 211, 211, 211},
		{376, 350, 212, 347, 5: 358, 349, 344, 212, 212, 212, 212, 212, 212, 15: 346, 19: 345, 352, 348, 351, 372, 370, 343, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 342, 365, 357, 360, 366, 353, 354, 355, 90: 375},
		{2: 213, 8: 213, 213, 213, 213, 213, 213},
		{2: 232, 8: 232, 10: 232, 232, 232},
		// 510
		{305, 323, 12, 304, 329, 322, 319, 308, 12, 10: 12, 12, 12, 14: 318, 18: 328, 46: 320, 321, 310, 302, 309, 314, 326, 303, 327, 307, 315, 311, 312, 313, 63: 306, 267, 291, 287, 325, 289, 290, 299, 294, 300, 286, 316, 301, 292, 293, 282, 296, 297, 317, 281, 295, 285, 298, 288, 284, 283, 324, 93: 277, 274, 262, 263, 269, 278, 268, 266, 264, 279, 280, 265, 270, 114: 275, 119: 273, 272, 271, 248, 126: 746, 249, 250, 260, 261, 255, 259, 254, 276, 253, 251, 258, 257, 252, 256},
		{2: 230, 8: 230, 230, 230, 230, 230},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 169

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			yyVAL.compstmt = nil
		}
	case 3:
		{
			yyVAL.compstmt = yyS[yypt-1].stmts
		}
	case 4:
		{
			yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		{
			yyS[yypt-2].stmts.Stmts = append(yyS[yypt-2].stmts.Stmts, yyS[yypt-0].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 6:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_var_or_lets
		}
	case 7:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_break
		}
	case 8:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_continue
		}
	case 9:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_return
		}
	case 10:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_throw
		}
	case 11:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_module
		}
	case 12:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 13:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_for
		}
	case 14:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_try
		}
	case 15:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_switch
		}
	case 16:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_select
		}
	case 17:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_go
		}
	case 18:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_defer
		}
	case 19:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_expr
		}
	case 20:
		{
			yyVAL.stmt_break = &ast.BreakStmt{}
			yyVAL.stmt_break.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 21:
		{
			yyVAL.stmt_continue = &ast.ContinueStmt{}
			yyVAL.stmt_continue.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 22:
		{
			yyVAL.stmt_return = &ast.ReturnStmt{Exprs: yyS[yypt-0].opt_exprs}
			yyVAL.stmt_return.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 23:
		{
			yyVAL.stmt_throw = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt_throw.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 24:
		{
			yyVAL.stmt_module = &ast.ModuleStmt{Name: yyS[yypt-3].tok.Lit, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_module.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 25:
		{
			yyVAL.stmt_expr = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt_expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 26:
		{
			callExpr := yyS[yypt-0].expr_call
			callExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: callExpr}
			yyVAL.stmt_go.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 27:
		{
			anonCallExpr := yyS[yypt-0].expr_anon_call
			anonCallExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: anonCallExpr}
			yyVAL.stmt_go.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 28:
		{
			callExpr := yyS[yypt-0].expr_call
			callExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: callExpr}
			yyVAL.stmt_defer.SetPosition(yyS[yypt-0].expr_call.Position())
		}
	case 29:
		{
			anonCallExpr := yyS[yypt-0].expr_anon_call
			anonCallExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: anonCallExpr}
			yyVAL.stmt_defer.SetPosition(yyS[yypt-0].expr_anon_call.Position())
		}
	case 30:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-10].compstmt, Var: yyS[yypt-7].tok.Lit, Catch: yyS[yypt-5].compstmt, Finally: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-12].tok.Position())
		}
	case 31:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-9].compstmt, Catch: yyS[yypt-5].compstmt, Finally: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-11].tok.Position())
		}
	case 32:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-6].compstmt, Var: yyS[yypt-3].tok.Lit, Catch: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 33:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-5].compstmt, Catch: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 34:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_var
		}
	case 35:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_typed_lets
		}
	case 36:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_lets
		}
	case 37:
		{
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				} else {
					yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				}
			} else {
				yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt_var.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 38:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
				if len(yyS[yypt-2].exprs) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].exprs) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt_typed_lets.SetPosition(yyS[yypt-2].exprs[0].Position())
		}
	case 39:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].exprs) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].exprs) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt_lets.SetPosition(yyS[yypt-2].exprs[0].Position())
		}
	case 40:
		{
			yyVAL.stmt_if = yyS[yypt-0].stmt_if_helper
			yyVAL.stmt_if.SetPosition(yyS[yypt-0].stmt_if_helper.Position())
		}
	case 41:
		{
			yyVAL.stmt_if_helper = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].compstmt, Else: nil}
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 42:
		{
			yyS[yypt-6].stmt_if_helper.(*ast.IfStmt).ElseIf = append(yyS[yypt-6].stmt_if_helper.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].compstmt})
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-6].stmt_if_helper.Position())
		}
	case 43:
		{
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-4].stmt_if_helper.Position())
			if yyVAL.stmt_if_helper.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if_helper.(*ast.IfStmt).Else = yyS[yypt-1].compstmt
			}
		}
	case 44:
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 45:
		{
			yyVAL.stmt_for = &ast.ForStmt{Vars: yyS[yypt-5].expr_for_idents, Value: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 46:
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 47:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 48:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 49:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyS[yypt-4].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 50:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 51:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-5].stmt_var_or_lets, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 52:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-6].stmt_var_or_lets, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 53:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-6].stmt_var_or_lets, Expr2: yyS[yypt-4].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 54:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-7].stmt_var_or_lets, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 55:
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt_select.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 56:
		{
			yyVAL.stmt_select_content = yyS[yypt-1].stmt_select_cases
		}
	case 57:
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 58:
		{
			yyVAL.stmt_select_cases = yyS[yypt-0].stmt_select_cases_helper
		}
	case 59:
		{
			yyVAL.stmt_select_cases_helper = yyS[yypt-0].stmt_select_body
		}
	case 60:
		{
			yyVAL.stmt_select_cases_helper.Cases = append(yyVAL.stmt_select_cases_helper.Cases, yyS[yypt-0].stmt_select_case)
		}
	case 61:
		{
			if yyVAL.stmt_select_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyVAL.stmt_select_cases_helper.Default = yyS[yypt-0].stmt_select_default
		}
	case 62:
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Default: yyS[yypt-0].stmt_select_default}
		}
	case 63:
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt_select_case}}
		}
	case 64:
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 65:
		{
			yyVAL.stmt_select_default = yyS[yypt-0].compstmt
		}
	case 66:
		{
			yyS[yypt-2].stmt_switch_cases.Expr = yyS[yypt-5].expr
			yyVAL.stmt_switch = yyS[yypt-2].stmt_switch_cases
			yyVAL.stmt_switch.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 67:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 68:
		{
			yyVAL.stmt_switch_cases = yyS[yypt-0].stmt_switch_cases_helper
		}
	case 69:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Default: yyS[yypt-0].stmt_switch_default}
		}
	case 70:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt_switch_case}}
		}
	case 71:
		{
			yyS[yypt-1].stmt_switch_cases_helper.Cases = append(yyS[yypt-1].stmt_switch_cases_helper.Cases, yyS[yypt-0].stmt_switch_case)
			yyVAL.stmt_switch_cases_helper = yyS[yypt-1].stmt_switch_cases_helper
		}
	case 72:
		{
			if yyS[yypt-1].stmt_switch_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyS[yypt-1].stmt_switch_cases_helper.Default = yyS[yypt-0].stmt_switch_default
		}
	case 73:
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyS[yypt-2].expr}, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 74:
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].opt_exprs, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 75:
		{
			yyVAL.stmt_switch_default = yyS[yypt-0].compstmt
		}
	case 76:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 77:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 78:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents1
		}
	case 79:
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 80:
		{
			yyVAL.opt_func_return_expr_idents1 = yyS[yypt-0].opt_func_return_expr_idents2
		}
	case 81:
		{
			yyVAL.opt_func_return_expr_idents2 = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 82:
		{
			yyVAL.opt_func_return_expr_idents2 = append(yyS[yypt-2].opt_func_return_expr_idents2, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 83:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 84:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents_not_empty
		}
	case 85:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_idents_last_untyped
		}
	case 86:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_typed_idents
		}
	case 87:
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 88:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-1].tok.Lit, TypeData: yyS[yypt-0].type_data}
		}
	case 89:
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyS[yypt-0].func_expr_untyped_ident}
		}
	case 90:
		{
			yyVAL.func_expr_idents_last_untyped = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_untyped_ident)
		}
	case 91:
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 92:
		{
			yyVAL.func_expr_typed_idents = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_typed_ident)
		}
	case 93:
		{
			yyVAL.opt_exprs = nil
		}
	case 94:
		{
			yyVAL.opt_exprs = yyS[yypt-0].exprs
		}
	case 95:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 96:
		{
			if len(yyS[yypt-2].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 97:
		{
			if len(yyS[yypt-2].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr_ident)
		}
	case 98:
		{
			yyVAL.expr = yyS[yypt-0].expr_member_or_ident
		}
	case 99:
		{
			yyVAL.expr = yyS[yypt-0].expr_literals
		}
	case 100:
		{
			yyVAL.expr = yyS[yypt-0].expr_unary
		}
	case 101:
		{
			yyVAL.expr = yyS[yypt-0].expr_ternary
		}
	case 102:
		{
			yyVAL.expr = yyS[yypt-0].expr_nil_coalesce
		}
	case 103:
		{
			yyVAL.expr = yyS[yypt-0].expr_func
		}
	case 104:
		{
			yyVAL.expr = yyS[yypt-0].expr_array
		}
	case 105:
		{
			yyVAL.expr = yyS[yypt-0].expr_paren
		}
	case 106:
		{
			yyVAL.expr = yyS[yypt-0].expr_binary
		}
	case 107:
		{
			yyVAL.expr = yyS[yypt-0].expr_call
		}
	case 108:
		{
			yyVAL.expr = yyS[yypt-0].expr_anon_call
		}
	case 109:
		{
			yyVAL.expr = yyS[yypt-0].expr_item_or_slice
		}
	case 110:
		{
			yyVAL.expr = yyS[yypt-0].expr_len
		}
	case 111:
		{
			yyVAL.expr = yyS[yypt-0].expr_dbg
		}
	case 112:
		{
			yyVAL.expr = yyS[yypt-0].expr_new
		}
	case 113:
		{
			yyVAL.expr = yyS[yypt-0].expr_make
		}
	case 114:
		{
			yyVAL.expr = yyS[yypt-0].expr_map
		}
	case 115:
		{
			yyVAL.expr = yyS[yypt-0].expr_opchan
		}
	case 116:
		{
			yyVAL.expr = yyS[yypt-0].expr_close
		}
	case 117:
		{
			yyVAL.expr = yyS[yypt-0].expr_delete
		}
	case 118:
		{
			yyVAL.expr = yyS[yypt-0].expr_in
		}
	case 119:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 120:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 121:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 122:
		{
			yyVAL.expr_len = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr_len.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 123:
		{
			yyVAL.expr_paren = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_paren.SetPosition(l.pos)
			}
		}
	case 124:
		{
			yyVAL.expr_array = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 125:
		{
			yyVAL.expr_array = &ast.ArrayExpr{Exprs: yyS[yypt-2].opt_exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 126:
		{
			yyVAL.expr_array = &ast.ArrayExpr{Exprs: yyS[yypt-2].opt_exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-5].type_data, Dimensions: yyS[yypt-6].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 127:
		{
			yyVAL.expr_nil_coalesce = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_nil_coalesce.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 128:
		{
			yyVAL.expr_ternary = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_ternary.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 129:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr_new = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr_new = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr_new.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 130:
		{
			yyVAL.expr_opchan = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_opchan.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 131:
		{
			yyVAL.expr_opchan = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr_opchan.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 132:
		{
			yyVAL.expr_in = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr_in.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 133:
		{
			yyVAL.expr_delete = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr_delete.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 134:
		{
			yyVAL.expr_delete = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr_delete.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 135:
		{
			yyVAL.expr_close = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr_close.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 136:
		{
			yyVAL.expr_literals = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 137:
		{
			yyVAL.expr_literals = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 138:
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 139:
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 140:
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 141:
		{
			yyVAL.expr_member_or_ident = yyS[yypt-0].expr_ident
		}
	case 142:
		{
			yyVAL.expr_member_or_ident = yyS[yypt-0].expr_member
		}
	case 143:
		{
			yyVAL.expr_member = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr_member.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 144:
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyS[yypt-4].tok.Lit, SubExprs: yyS[yypt-2].exprs, VarArg: true}
			yyVAL.expr_call.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 145:
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyS[yypt-3].tok.Lit, SubExprs: yyS[yypt-1].opt_exprs}
			yyVAL.expr_call.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 146:
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyS[yypt-4].expr, SubExprs: yyS[yypt-2].exprs, VarArg: true}
			yyVAL.expr_anon_call.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 147:
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].opt_exprs}
			yyVAL.expr_anon_call.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 148:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 149:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 150:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 151:
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: yyS[yypt-0].expr_ident}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_ident.Position())
		}
	case 152:
		{
			yyVAL.expr_unary = yyS[yypt-0].expr_member
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_member.Position())
		}
	case 153:
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyS[yypt-0].expr_member_or_ident}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_member_or_ident.Position())
		}
	case 154:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "+", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 155:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "-", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 156:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "*", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 157:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "/", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 158:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "%", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 159:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "**", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 160:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 161:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">>", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 162:
		{
			yyVAL.expr_binary = yyS[yypt-0].op_comparison
		}
	case 163:
		{
			yyVAL.expr_binary = yyS[yypt-0].expr_assoc
		}
	case 164:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "|", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 165:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "||", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 166:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 167:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 168:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "+=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 169:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "-=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 170:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "*=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 171:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "/=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 172:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "&=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 173:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "|=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 174:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "++"}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 175:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "--"}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 176:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 177:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "!=", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 178:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 179:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">=", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 180:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 181:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<=", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 182:
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-5].func_expr_idents, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt}
			yyVAL.expr_func.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 183:
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-6].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 184:
		{
			yyS[yypt-7].func_expr_idents_last_untyped[len(yyS[yypt-7].func_expr_idents_last_untyped)-1].TypeData = yyS[yypt-5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-7].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 185:
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-7].tok.Lit, Params: yyS[yypt-5].func_expr_idents, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt}
			yyVAL.expr_func.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 186:
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-8].tok.Lit, Params: yyS[yypt-6].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 187:
		{
			yyS[yypt-7].func_expr_idents_last_untyped[len(yyS[yypt-7].func_expr_idents_last_untyped)-1].TypeData = yyS[yypt-5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-9].tok.Lit, Params: yyS[yypt-7].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-10].tok.Position())
		}
	case 188:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr_make.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 189:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 190:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 191:
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 192:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 193:
		{
			if yyS[yypt-2].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyS[yypt-2].type_data.Env = append(yyS[yypt-2].type_data.Env, yyS[yypt-2].type_data.Name)
				yyS[yypt-2].type_data.Name = yyS[yypt-0].tok.Lit
			}
		}
	case 194:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 195:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 196:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 197:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 198:
		{
			yyVAL.type_data = yyS[yypt-2].type_data_struct
		}
	case 199:
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].type_data}}
		}
	case 200:
		{
			if yyS[yypt-3].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyS[yypt-1].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyS[yypt-0].type_data)
		}
	case 201:
		{
			yyVAL.slice_count = 1
		}
	case 202:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 203:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 204:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-5].type_data, SubType: yyS[yypt-3].type_data}
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 205:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-1].expr_map_content.Position())
		}
	case 206:
		{
			yyVAL.expr_map_content = &ast.MapExpr{}
		}
	case 207:
		{
			yyVAL.expr_map_content = yyS[yypt-1].expr_map_content_helper
		}
	case 208:
		{
			yyVAL.expr_map_content_helper = &ast.MapExpr{Keys: []ast.Expr{yyS[yypt-0].expr_map_key_value[0]}, Values: []ast.Expr{yyS[yypt-0].expr_map_key_value[1]}}
		}
	case 209:
		{
			if yyS[yypt-2].expr_map_content_helper.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map_content_helper.Keys = append(yyVAL.expr_map_content_helper.Keys, yyS[yypt-0].expr_map_key_value[0])
			yyVAL.expr_map_content_helper.Values = append(yyVAL.expr_map_content_helper.Values, yyS[yypt-0].expr_map_key_value[1])
		}
	case 210:
		{
			yyVAL.expr_map_key_value = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 211:
		{
			if el, ok := yyS[yypt-0].expr_slice_helper1.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-1].expr_ident
			} else if el, ok := yyS[yypt-0].expr_slice_helper1.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-1].expr_ident
			}
			yyVAL.expr_item_or_slice = yyS[yypt-0].expr_slice_helper1
			yyVAL.expr_item_or_slice.SetPosition(yyS[yypt-1].expr_ident.Position())
		}
	case 212:
		{
			if el, ok := yyS[yypt-0].expr_slice_helper1.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-1].expr
			} else if el, ok := yyS[yypt-0].expr_slice_helper1.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-1].expr
			}
			yyVAL.expr_item_or_slice = yyS[yypt-0].expr_slice_helper1
			yyVAL.expr_item_or_slice.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 213:
		{
			yyVAL.expr_slice_helper1 = &ast.ItemExpr{Index: yyS[yypt-1].expr}
		}
	case 214:
		{
			yyVAL.expr_slice_helper1 = &ast.SliceExpr{Begin: yyS[yypt-3].expr, End: yyS[yypt-1].expr}
		}
	case 215:
		{
			yyVAL.expr_slice_helper1 = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: nil}
		}
	case 216:
		{
			yyVAL.expr_slice_helper1 = &ast.SliceExpr{Begin: nil, End: yyS[yypt-1].expr}
		}
	case 217:
		{
			yyVAL.expr_for_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 218:
		{
			yyVAL.expr_for_idents = []string{yyS[yypt-2].tok.Lit, yyS[yypt-0].tok.Lit}
		}
	case 219:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 220:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].tok.Lit)
		}
	case 221:
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyS[yypt-0].tok.Position())
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
