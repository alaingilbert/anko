// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:35
type yySymType struct {
	yys                 int
	compstmt            []ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default []ast.Stmt
	stmt_select         ast.Stmt
	stmt_select_cases   ast.Stmt
	stmt_select_case    ast.Stmt
	stmt_select_default []ast.Stmt
	stmts               []ast.Stmt
	stmt                ast.Stmt
	expr                ast.Expr
	exprs               []ast.Expr
	map_expr            map[ast.Expr]ast.Expr
	expr_idents         []string
	expr_type           string
	tok                 ast.Token
	array_count         ast.ArrayCount
	expr_slice          ast.Expr
	expr_ident          ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const UNARY = 57400

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"'='",
	"'?'",
	"':'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'^'",
	"'&'",
	"'|'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:902

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	58, 69,
	61, 69,
	74, 5,
	-2, 1,
	-1, 23,
	61, 70,
	-2, 28,
	-1, 27,
	58, 69,
	-2, 64,
	-1, 56,
	58, 69,
	61, 69,
	-2, 5,
	-1, 108,
	16, 65,
	61, 65,
	-2, 149,
	-1, 115,
	1, 84,
	8, 84,
	47, 84,
	48, 84,
	58, 84,
	60, 84,
	61, 84,
	70, 84,
	71, 84,
	73, 84,
	74, 84,
	76, 84,
	82, 84,
	-2, 79,
	-1, 117,
	1, 86,
	8, 86,
	47, 86,
	48, 86,
	58, 86,
	60, 86,
	61, 86,
	70, 86,
	71, 86,
	73, 86,
	74, 86,
	76, 86,
	82, 86,
	-2, 79,
	-1, 159,
	17, 0,
	18, 0,
	-2, 110,
	-1, 160,
	17, 0,
	18, 0,
	-2, 111,
	-1, 235,
	60, 5,
	-2, 69,
	-1, 244,
	76, 163,
	-2, 155,
	-1, 247,
	71, 163,
	-2, 155,
	-1, 265,
	1, 72,
	8, 72,
	47, 72,
	48, 72,
	58, 72,
	60, 72,
	61, 72,
	71, 72,
	73, 72,
	74, 72,
	76, 72,
	82, 72,
	-2, 79,
	-1, 271,
	1, 21,
	47, 21,
	48, 21,
	60, 21,
	71, 21,
	74, 21,
	82, 21,
	-2, 129,
	-1, 273,
	1, 23,
	47, 23,
	48, 23,
	60, 23,
	71, 23,
	74, 23,
	82, 23,
	-2, 131,
	-1, 275,
	1, 25,
	47, 25,
	48, 25,
	60, 25,
	71, 25,
	74, 25,
	82, 25,
	-2, 129,
	-1, 277,
	1, 27,
	47, 27,
	48, 27,
	60, 27,
	71, 27,
	74, 27,
	82, 27,
	-2, 131,
	-1, 305,
	71, 161,
	76, 161,
	-2, 156,
	-1, 322,
	1, 20,
	47, 20,
	48, 20,
	60, 20,
	71, 20,
	74, 20,
	82, 20,
	-2, 128,
	-1, 323,
	1, 22,
	47, 22,
	48, 22,
	60, 22,
	71, 22,
	74, 22,
	82, 22,
	-2, 130,
	-1, 324,
	1, 24,
	47, 24,
	48, 24,
	60, 24,
	71, 24,
	74, 24,
	82, 24,
	-2, 128,
	-1, 325,
	1, 26,
	47, 26,
	48, 26,
	60, 26,
	71, 26,
	74, 26,
	82, 26,
	-2, 130,
}

const yyPrivate = 57344

const yyLast = 3283

var yyAct = [...]int16{
	60, 289, 290, 23, 9, 7, 232, 54, 245, 123,
	6, 233, 58, 30, 199, 61, 57, 247, 5, 244,
	105, 59, 66, 68, 292, 291, 8, 103, 107, 109,
	235, 234, 8, 112, 113, 114, 116, 118, 8, 1,
	8, 314, 306, 254, 259, 124, 316, 253, 313, 115,
	117, 129, 121, 122, 122, 200, 111, 23, 315, 8,
	312, 136, 253, 58, 253, 8, 183, 342, 325, 304,
	145, 146, 148, 149, 132, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
	166, 167, 168, 169, 170, 324, 323, 171, 172, 173,
	174, 276, 176, 177, 140, 274, 201, 272, 175, 203,
	270, 250, 187, 322, 310, 180, 242, 302, 222, 282,
	186, 122, 182, 120, 195, 192, 256, 198, 58, 193,
	204, 205, 206, 197, 303, 125, 143, 141, 131, 211,
	191, 130, 208, 128, 179, 209, 122, 127, 220, 214,
	215, 216, 217, 126, 135, 388, 387, 380, 135, 379,
	135, 377, 373, 135, 135, 372, 277, 368, 320, 182,
	275, 135, 273, 135, 138, 271, 251, 210, 358, 212,
	353, 241, 226, 223, 228, 351, 58, 348, 335, 238,
	384, 119, 227, 122, 308, 230, 122, 287, 283, 268,
	266, 225, 213, 248, 246, 246, 383, 361, 349, 341,
	264, 340, 301, 243, 137, 263, 255, 257, 224, 278,
	110, 64, 281, 265, 229, 88, 89, 90, 91, 92,
	93, 139, 356, 135, 321, 79, 23, 298, 295, 181,
	297, 293, 122, 294, 207, 134, 101, 182, 135, 317,
	309, 337, 58, 382, 209, 305, 332, 307, 305, 76,
	77, 78, 296, 318, 378, 100, 292, 291, 70, 269,
	73, 235, 234, 98, 96, 10, 63, 311, 285, 258,
	200, 133, 240, 239, 182, 150, 62, 328, 4, 46,
	331, 330, 56, 333, 202, 194, 231, 2, 329, 122,
	334, 55, 20, 106, 288, 19, 17, 319, 343, 16,
	25, 58, 24, 3, 344, 0, 0, 345, 346, 0,
	0, 0, 0, 0, 327, 88, 89, 90, 91, 92,
	93, 0, 0, 0, 0, 79, 336, 0, 0, 0,
	0, 339, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 350, 0, 375, 0, 100, 376, 0, 70, 0,
	73, 0, 354, 98, 96, 0, 0, 357, 0, 0,
	359, 360, 0, 0, 0, 0, 0, 0, 0, 367,
	0, 0, 369, 0, 0, 370, 371, 0, 0, 0,
	0, 374, 0, 0, 0, 0, 0, 0, 0, 102,
	82, 83, 85, 87, 97, 99, 0, 0, 0, 0,
	72, 0, 0, 385, 386, 88, 89, 90, 91, 92,
	93, 0, 0, 94, 95, 79, 80, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 71, 0, 365, 84, 86, 74, 75, 76,
	77, 78, 0, 0, 0, 100, 364, 0, 70, 0,
	73, 0, 0, 98, 96, 102, 82, 83, 85, 87,
	97, 99, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 88, 89, 90, 91, 92, 93, 0, 0, 94,
	95, 79, 80, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 71, 0,
	262, 84, 86, 74, 75, 76, 77, 78, 0, 0,
	0, 100, 261, 0, 70, 0, 73, 0, 0, 98,
	96, 102, 82, 83, 85, 87, 97, 99, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 88, 89, 90,
	91, 92, 93, 0, 0, 94, 95, 79, 80, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 71, 236, 0, 84, 86, 74,
	75, 76, 77, 78, 0, 0, 0, 100, 0, 0,
	70, 237, 73, 0, 0, 98, 96, 102, 82, 83,
	85, 87, 97, 99, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 88, 89, 90, 91, 92, 93, 0,
	0, 94, 95, 79, 80, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	71, 218, 0, 84, 86, 74, 75, 76, 77, 78,
	0, 0, 0, 100, 0, 0, 70, 219, 73, 0,
	0, 98, 96, 102, 82, 83, 85, 87, 97, 99,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 88,
	89, 90, 91, 92, 93, 0, 0, 94, 95, 79,
	80, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 69, 71, 0, 0, 84,
	86, 74, 75, 76, 77, 78, 0, 184, 0, 100,
	0, 0, 70, 0, 73, 0, 0, 98, 96, 102,
	82, 83, 85, 87, 97, 99, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 88, 89, 90, 91, 92,
	93, 0, 0, 94, 95, 79, 80, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 71, 0, 0, 84, 86, 74, 75, 76,
	77, 78, 0, 0, 0, 100, 381, 0, 70, 0,
	73, 0, 0, 98, 96, 102, 82, 83, 85, 87,
	97, 99, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 88, 89, 90, 91, 92, 93, 0, 0, 94,
	95, 79, 80, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 71, 0,
	0, 84, 86, 74, 75, 76, 77, 78, 0, 0,
	0, 100, 366, 0, 70, 0, 73, 0, 0, 98,
	96, 102, 82, 83, 85, 87, 97, 99, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 88, 89, 90,
	91, 92, 93, 0, 0, 94, 95, 79, 80, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 71, 0, 0, 84, 86, 74,
	75, 76, 77, 78, 0, 0, 0, 100, 363, 0,
	70, 0, 73, 0, 0, 98, 96, 102, 82, 83,
	85, 87, 97, 99, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 88, 89, 90, 91, 92, 93, 0,
	0, 94, 95, 79, 80, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	71, 362, 0, 84, 86, 74, 75, 76, 77, 78,
	0, 0, 0, 100, 0, 0, 70, 0, 73, 0,
	0, 98, 96, 102, 82, 83, 85, 87, 97, 99,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 88,
	89, 90, 91, 92, 93, 0, 0, 94, 95, 79,
	80, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 71, 355, 0, 84,
	86, 74, 75, 76, 77, 78, 0, 0, 0, 100,
	0, 0, 70, 0, 73, 0, 0, 98, 96, 102,
	82, 83, 85, 87, 97, 99, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 88, 89, 90, 91, 92,
	93, 0, 0, 94, 95, 79, 80, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 71, 0, 0, 84, 86, 74, 75, 76,
	77, 78, 0, 352, 0, 100, 0, 0, 70, 0,
	73, 0, 0, 98, 96, 102, 82, 83, 85, 87,
	97, 99, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 88, 89, 90, 91, 92, 93, 0, 0, 94,
	95, 79, 80, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 71, 0,
	0, 84, 86, 74, 75, 76, 77, 78, 0, 0,
	0, 100, 347, 0, 70, 0, 73, 0, 0, 98,
	96, 102, 82, 83, 85, 87, 97, 99, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 88, 89, 90,
	91, 92, 93, 0, 0, 94, 95, 79, 80, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 71, 0, 0, 84, 86, 74,
	75, 76, 77, 78, 0, 0, 0, 100, 0, 0,
	70, 338, 73, 0, 0, 98, 96, 102, 82, 83,
	85, 87, 97, 99, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 88, 89, 90, 91, 92, 93, 0,
	0, 94, 95, 79, 80, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	71, 0, 0, 84, 86, 74, 75, 76, 77, 78,
	0, 0, 0, 100, 0, 0, 70, 326, 73, 0,
	0, 98, 96, 102, 82, 83, 85, 87, 97, 99,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 88,
	89, 90, 91, 92, 93, 0, 0, 94, 95, 79,
	80, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 71, 0, 0, 84,
	86, 74, 75, 76, 77, 78, 0, 0, 0, 100,
	0, 0, 70, 300, 73, 0, 0, 98, 96, 102,
	82, 83, 85, 87, 97, 99, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 88, 89, 90, 91, 92,
	93, 0, 0, 94, 95, 79, 80, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 71, 0, 0, 84, 86, 74, 75, 76,
	77, 78, 0, 0, 0, 100, 0, 286, 70, 0,
	73, 0, 0, 98, 96, 102, 82, 83, 85, 87,
	97, 99, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 88, 89, 90, 91, 92, 93, 0, 0, 94,
	95, 79, 80, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 71, 0,
	0, 84, 86, 74, 75, 76, 77, 78, 0, 284,
	0, 100, 0, 0, 70, 0, 73, 0, 0, 98,
	96, 102, 82, 83, 85, 87, 97, 99, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 88, 89, 90,
	91, 92, 93, 0, 0, 94, 95, 79, 80, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 71, 0, 0, 84, 86, 74,
	75, 76, 77, 78, 0, 0, 0, 100, 0, 0,
	70, 280, 73, 0, 0, 98, 96, 102, 82, 83,
	85, 87, 97, 99, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 88, 89, 90, 91, 92, 93, 0,
	0, 94, 95, 79, 80, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	71, 0, 0, 84, 86, 74, 75, 76, 77, 78,
	0, 267, 0, 100, 0, 0, 70, 0, 73, 0,
	0, 98, 96, 102, 82, 83, 85, 87, 97, 99,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 88,
	89, 90, 91, 92, 93, 0, 0, 94, 95, 79,
	80, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 71, 0, 0, 84,
	86, 74, 75, 76, 77, 78, 0, 0, 0, 100,
	260, 0, 70, 0, 73, 0, 0, 98, 96, 102,
	82, 83, 85, 87, 97, 99, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 88, 89, 90, 91, 92,
	93, 0, 0, 94, 95, 79, 80, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 71, 0, 0, 84, 86, 74, 75, 76,
	77, 78, 0, 0, 0, 100, 252, 0, 70, 0,
	73, 0, 0, 98, 96, 102, 82, 83, 85, 87,
	97, 99, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 88, 89, 90, 91, 92, 93, 0, 0, 94,
	95, 79, 80, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 0, 71, 249,
	0, 84, 86, 74, 75, 76, 77, 78, 0, 0,
	0, 100, 0, 0, 70, 0, 73, 0, 0, 98,
	96, 102, 82, 83, 85, 87, 97, 99, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 88, 89, 90,
	91, 92, 93, 0, 0, 94, 95, 79, 80, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 71, 221, 0, 84, 86, 74,
	75, 76, 77, 78, 0, 0, 0, 100, 0, 0,
	70, 0, 73, 0, 0, 98, 96, 102, 82, 83,
	85, 87, 97, 99, 0, 0, 0, 0, 72, 0,
	0, 0, 0, 88, 89, 90, 91, 92, 93, 0,
	0, 94, 95, 79, 80, 81, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 0, 0, 0, 0, 0,
	71, 0, 0, 84, 86, 74, 75, 76, 77, 78,
	0, 0, 0, 100, 196, 0, 70, 0, 73, 0,
	0, 98, 96, 102, 82, 83, 85, 87, 97, 99,
	0, 0, 0, 0, 72, 0, 0, 0, 0, 88,
	89, 90, 91, 92, 93, 0, 0, 94, 95, 79,
	80, 81, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 0, 0, 0, 0, 0, 71, 0, 0, 84,
	86, 74, 75, 76, 77, 78, 0, 185, 0, 100,
	0, 0, 70, 0, 73, 0, 0, 98, 96, 102,
	82, 83, 85, 87, 97, 99, 0, 0, 0, 0,
	72, 0, 0, 0, 0, 88, 89, 90, 91, 92,
	93, 0, 0, 94, 95, 79, 80, 81, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 0, 0, 0,
	0, 0, 71, 0, 0, 84, 86, 74, 75, 76,
	77, 78, 0, 178, 0, 100, 0, 0, 70, 0,
	73, 0, 0, 98, 96, 102, 82, 83, 85, 87,
	97, 99, 0, 0, 0, 0, 72, 0, 0, 0,
	0, 88, 89, 90, 91, 92, 93, 0, 0, 94,
	95, 79, 80, 81, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 0, 0, 0, 0, 69, 71, 0,
	0, 84, 86, 74, 75, 76, 77, 78, 0, 0,
	0, 100, 0, 0, 70, 0, 73, 0, 0, 98,
	96, 102, 82, 83, 85, 87, 97, 99, 0, 0,
	0, 0, 72, 0, 0, 0, 0, 88, 89, 90,
	91, 92, 93, 0, 0, 94, 95, 79, 80, 81,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 0,
	0, 0, 0, 0, 71, 0, 0, 84, 86, 74,
	75, 76, 77, 78, 0, 0, 0, 100, 0, 0,
	70, 0, 73, 0, 0, 98, 96, 45, 31, 37,
	0, 0, 41, 13, 53, 14, 26, 0, 27, 0,
	0, 0, 0, 0, 0, 0, 48, 38, 39, 40,
	0, 15, 18, 0, 0, 0, 0, 0, 0, 0,
	0, 11, 12, 0, 0, 0, 0, 0, 28, 29,
	0, 0, 21, 22, 0, 49, 50, 0, 47, 52,
	51, 0, 0, 0, 0, 0, 0, 0, 32, 36,
	0, 0, 0, 43, 0, 44, 0, 0, 42, 0,
	0, 33, 34, 35, 102, 82, 83, 85, 87, 97,
	99, 0, 0, 0, 0, 72, 0, 0, 0, 0,
	88, 89, 90, 91, 92, 93, 0, 0, 94, 95,
	79, 80, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 71, 0, 0,
	84, 86, 74, 75, 76, 77, 78, 0, 0, 0,
	100, 0, 0, 70, 0, 190, 0, 0, 98, 96,
	102, 82, 83, 85, 87, 97, 99, 0, 0, 0,
	0, 72, 0, 0, 0, 0, 88, 89, 90, 91,
	92, 93, 0, 0, 94, 95, 79, 80, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 71, 0, 0, 84, 86, 74, 75,
	76, 77, 78, 0, 0, 0, 100, 0, 0, 70,
	0, 189, 0, 0, 98, 96, 102, 82, 83, 85,
	87, 97, 99, 0, 0, 0, 0, 72, 0, 0,
	0, 0, 88, 89, 90, 91, 92, 93, 0, 0,
	94, 95, 79, 80, 81, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 0, 71,
	0, 0, 84, 86, 74, 75, 76, 77, 78, 0,
	0, 0, 144, 0, 0, 70, 0, 73, 0, 0,
	98, 96, 102, 82, 83, 85, 87, 97, 99, 0,
	0, 0, 0, 72, 0, 0, 0, 0, 88, 89,
	90, 91, 92, 93, 0, 0, 94, 95, 79, 80,
	81, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 0, 71, 0, 0, 84, 86,
	74, 75, 76, 77, 78, 0, 0, 0, 142, 0,
	0, 70, 0, 73, 0, 0, 98, 96, 102, 82,
	83, 85, 87, 97, 99, 0, 0, 0, 0, 72,
	0, 0, 0, 0, 88, 89, 90, 91, 92, 93,
	0, 0, 94, 95, 79, 80, 81, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 86, 74, 75, 76, 77,
	78, 0, 0, 0, 100, 0, 0, 70, 0, 73,
	0, 0, 98, 96, 102, 82, 83, 85, 87, 0,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 89, 90, 91, 92, 93, 0, 0, 94, 95,
	79, 80, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 86, 74, 75, 76, 77, 78, 0, 0, 0,
	100, 0, 0, 70, 0, 73, 0, 0, 98, 96,
	102, 82, 83, 85, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 89, 90, 91,
	92, 93, 0, 0, 94, 95, 79, 80, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 86, 74, 75,
	76, 77, 78, 85, 87, 0, 100, 0, 0, 70,
	0, 73, 0, 0, 98, 96, 88, 89, 90, 91,
	92, 93, 0, 0, 94, 95, 79, 80, 81, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 86, 74, 75,
	76, 77, 78, 45, 31, 37, 100, 0, 41, 70,
	0, 73, 0, 0, 98, 96, 0, 0, 0, 0,
	0, 0, 48, 38, 39, 40, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 31,
	37, 0, 0, 41, 0, 0, 0, 0, 0, 0,
	0, 49, 50, 0, 47, 52, 51, 48, 38, 39,
	40, 0, 0, 0, 32, 36, 0, 0, 0, 43,
	0, 44, 0, 0, 42, 299, 0, 33, 34, 35,
	0, 0, 0, 0, 0, 0, 49, 50, 0, 47,
	52, 51, 0, 0, 0, 0, 45, 31, 37, 32,
	36, 41, 0, 0, 43, 0, 44, 0, 0, 42,
	279, 0, 33, 34, 35, 48, 38, 39, 40, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 31, 37, 0, 0, 41,
	0, 0, 0, 0, 49, 50, 0, 47, 52, 51,
	0, 0, 188, 48, 38, 39, 40, 32, 36, 0,
	0, 0, 43, 0, 44, 0, 0, 42, 0, 0,
	33, 34, 35, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 49, 50, 0, 47, 52, 51, 0, 0,
	147, 0, 108, 31, 37, 32, 36, 41, 0, 53,
	43, 0, 44, 0, 0, 42, 0, 0, 33, 34,
	35, 48, 38, 39, 40, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 31, 37,
	0, 0, 41, 0, 0, 0, 0, 0, 0, 0,
	49, 50, 0, 47, 52, 51, 48, 38, 39, 40,
	0, 0, 0, 32, 36, 0, 0, 0, 104, 0,
	44, 0, 0, 42, 0, 0, 33, 34, 35, 0,
	0, 0, 0, 0, 0, 49, 50, 0, 47, 52,
	51, 0, 0, 0, 0, 0, 0, 0, 32, 36,
	0, 0, 0, 43, 0, 44, 0, 0, 42, 0,
	0, 33, 34, 35, 88, 89, 90, 91, 92, 93,
	0, 0, 94, 95, 79, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 74, 75, 76, 77,
	78, 67, 31, 37, 100, 0, 41, 70, 0, 73,
	0, 0, 98, 96, 0, 0, 0, 0, 0, 0,
	48, 38, 39, 40, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 31, 37, 0,
	0, 41, 0, 0, 0, 0, 0, 0, 0, 49,
	50, 0, 47, 52, 51, 48, 38, 39, 40, 0,
	0, 0, 32, 36, 0, 0, 0, 43, 0, 44,
	0, 0, 42, 0, 0, 33, 34, 35, 0, 0,
	0, 0, 0, 0, 49, 50, 0, 47, 52, 51,
	0, 0, 0, 0, 0, 0, 0, 32, 36, 0,
	0, 0, 43, 0, 44, 0, 0, 42, 0, 0,
	33, 34, 35,
}

var yyPact = [...]int16{
	-56, -1000, 2253, -56, -1000, -50, -50, -1000, -1000, -1000,
	-1000, -1000, -1000, 3053, 3053, 282, 262, -1000, 151, -1000,
	-1000, 3202, 3167, 2109, -1000, -1000, 3053, 3018, 3053, 150,
	-19, -1000, 3053, 3053, 3053, 3053, 3053, -1000, -1000, -1000,
	-1000, 119, -50, -50, 3053, 63, -1000, 81, 75, 71,
	3053, 69, 66, 277, 187, -1000, 2253, -50, -1000, 112,
	2175, 2175, 144, 161, -56, 65, 2516, 64, 2450, 3053,
	2960, 3053, 3053, 281, 3053, 3053, 3053, 3053, 3053, 3053,
	3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053, 3053,
	3053, 3053, 3053, 3053, -1000, -1000, 3053, 3053, 3053, 3053,
	3053, 3053, 3053, 2043, -56, 223, -8, 657, 63, 1977,
	-50, 2922, 293, 293, 293, -19, 2384, -19, 2318, 277,
	53, 3053, -50, 3053, 1911, 3053, 3053, 276, 55, 2175,
	3053, 3053, 186, -1000, 3053, -50, -1000, -56, 3053, -56,
	131, 3053, 3053, 3053, 3053, 2175, 591, 3053, 1845, 2582,
	-1000, 193, 193, 293, 293, 293, 2175, 3102, 3102, 2764,
	2764, 3102, 3102, 3102, 3102, 2175, 2175, 2175, 2175, 2175,
	2175, 2175, 2648, 2175, 2714, 110, 2175, 2714, -56, 130,
	-50, 3053, -50, 3053, -56, -50, 224, 525, 3053, 279,
	278, 108, 277, -42, -44, 1779, -1000, 103, 1713, -30,
	-1000, 276, 51, 275, -32, 1647, 459, 3053, 112, 3053,
	129, 1581, 128, 239, 102, 99, 97, 93, 2864, -1000,
	1515, 3053, 46, -1000, 127, -1000, 1449, 274, 1383, 126,
	219, -17, -1000, -1000, 202, 2253, 2829, -1000, 1317, -1000,
	-1000, 142, 44, 61, -50, -34, -50, -50, 123, 3053,
	41, -1000, -1000, 273, -1000, -13, -35, -15, 188, -1000,
	-1000, -1000, 3053, 112, 2175, -19, -1000, -56, -1000, 164,
	40, -1000, 23, -1000, 22, -1000, -5, -1000, 1251, -1000,
	-1000, 2175, -1000, -1000, -56, -1000, 3053, -1000, -23, -1000,
	-1000, 196, 3053, 117, -1000, -1000, -56, 191, 1185, -1000,
	-1000, -56, 141, 139, -6, -50, -1000, 3053, -1000, 2175,
	-1000, -1000, -1000, 3053, -1000, -1000, 3053, 3053, 1119, 116,
	138, -56, -1000, -1000, -1000, -1000, -1000, 114, 1053, 109,
	-1000, -1000, -56, 987, 172, -1000, -1000, -56, -1000, 107,
	-56, -56, 137, 921, 855, 393, 789, -1000, -1000, -56,
	96, -1000, -56, -1000, -1000, -56, -56, -1000, -1000, 94,
	91, -56, 3053, -1000, -1000, 3053, -1000, 90, 233, 88,
	-1000, -1000, -1000, -1000, 86, 2175, 723, 222, 136, -1000,
	-1000, -1000, 120, -56, -56, 85, 84, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 39, 313, 4, 275, 312, 310, 309, 306, 305,
	304, 2, 1, 302, 296, 11, 6, 0, 7, 295,
	20, 14, 294, 289, 13, 297, 288, 9, 8, 10,
	5,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 5, 6, 6, 7, 7, 7, 8, 8, 8,
	8, 13, 14, 14, 14, 14, 14, 15, 16, 9,
	10, 10, 10, 10, 10, 11, 11, 12, 22, 22,
	22, 19, 19, 19, 20, 20, 20, 21, 21, 18,
	18, 18, 18, 23, 23, 23, 23, 23, 23, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 24,
	25, 25, 26, 26, 26, 27, 27, 29, 29, 30,
	28, 28, 28, 28,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 1, 1, 13, 12, 9, 8, 1, 1,
	6, 5, 6, 5, 6, 5, 6, 5, 1, 1,
	1, 4, 3, 3, 5, 7, 5, 4, 7, 9,
	5, 6, 0, 1, 1, 2, 2, 4, 3, 7,
	0, 1, 1, 2, 2, 4, 4, 3, 0, 2,
	3, 0, 3, 6, 0, 1, 4, 1, 3, 0,
	1, 4, 4, 6, 5, 5, 6, 5, 5, 1,
	1, 2, 2, 2, 2, 4, 2, 4, 1, 1,
	1, 1, 5, 3, 3, 7, 8, 8, 9, 5,
	5, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 3, 3, 3, 5, 4,
	5, 4, 4, 4, 1, 4, 4, 5, 7, 5,
	7, 9, 7, 3, 2, 4, 4, 6, 3, 1,
	0, 1, 2, 1, 1, 0, 1, 1, 2, 1,
	0, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -25, -2, -26, 74, -29, -30, 82, -3,
	-4, 38, 39, 10, 12, 28, -7, -8, 29, -9,
	-13, 49, 50, -17, -5, -6, 13, 15, 45, 46,
	-24, 5, 65, 78, 79, 80, 66, 6, 24, 25,
	26, 9, 75, 70, 72, 4, -23, 55, 23, 52,
	53, 57, 56, 11, -18, -25, -26, -29, -30, -18,
	-17, -17, 4, 14, 70, 4, -17, 4, -17, 58,
	75, 59, 27, 77, 64, 65, 66, 67, 68, 42,
	43, 44, 17, 18, 62, 19, 63, 20, 32, 33,
	34, 35, 36, 37, 40, 41, 81, 21, 80, 22,
	72, 53, 16, -17, 70, -20, -4, -17, 4, -17,
	70, 75, -17, -17, -17, -24, -17, -24, -17, 72,
	4, -27, -29, -27, -17, 72, 72, 72, 72, -17,
	72, 72, -20, 4, 58, 61, -3, 70, 13, 70,
	-1, 72, 72, 72, 72, -17, -17, 60, -17, -17,
	4, -17, -17, -17, -17, -17, -17, -17, -17, -17,
	-17, -17, -17, -17, -17, -17, -17, -17, -17, -17,
	-17, -17, -17, -17, -17, -18, -17, -17, 70, -1,
	-29, 16, 61, 74, 70, 70, -27, -17, 60, 77,
	77, -20, 72, -18, -19, -17, 73, -18, -17, -21,
	4, 51, -22, 54, 75, -17, -17, 58, -18, -27,
	-1, -17, -1, 71, -18, -18, -18, -18, 60, 76,
	-17, 60, 8, 73, -1, 71, -17, -27, -17, -1,
	-27, -14, -16, -15, 48, 47, 60, 76, -17, 4,
	4, 73, 8, -20, 61, -28, -29, 61, -28, 60,
	8, 73, 73, 77, 73, -21, 75, -21, 4, 76,
	73, 73, 61, -18, -17, -24, 71, 70, 71, 30,
	8, 73, 8, 73, 8, 73, 8, 73, -17, 76,
	76, -17, 73, 71, 70, 4, 74, 71, -10, -12,
	-11, 48, 47, -27, -15, -16, 60, -3, -17, 76,
	76, 70, 73, 73, 8, -29, 76, -27, 71, -17,
	73, 4, 73, 61, 76, 73, 61, 61, -17, -1,
	4, 70, 73, 73, 73, 73, 76, -1, -17, -27,
	-11, -12, 60, -17, -18, 71, -1, 60, 76, -1,
	70, 70, 73, -17, -17, -17, -17, 73, 71, 70,
	-1, 71, 70, 71, -1, 60, 60, -1, 71, -1,
	-1, 70, 60, 73, 73, 61, 73, -1, 71, -1,
	-1, -1, 71, 71, -1, -17, -17, 71, 31, 71,
	71, 73, 31, 70, 70, -1, -1, 71, 71,
}

var yyDef = [...]int16{
	150, -2, -2, 150, 151, 154, 153, 157, 159, 3,
	6, 7, 8, 69, 0, 0, 12, 13, 0, 18,
	19, 0, 0, -2, 29, 30, 0, -2, 0, 0,
	79, 80, 0, 0, 0, 0, 0, 88, 89, 90,
	91, 0, 155, 155, 0, 149, 134, 0, 0, 0,
	0, 0, 0, 64, 0, 2, -2, 152, 158, 9,
	70, 10, 0, 0, 150, 149, 0, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 122, 123, 0, 0, 0, 0,
	69, 0, 0, 0, 150, 0, 0, 70, -2, 0,
	155, 0, 81, 82, 83, -2, 0, -2, 0, 64,
	0, 69, 156, 61, 0, 69, 0, 0, 58, 144,
	0, 0, 0, 65, 69, 155, 4, 150, 0, 150,
	0, 69, 69, 69, 69, 32, 0, 0, 0, 93,
	94, 102, 103, 104, 105, 106, 107, 108, 109, -2,
	-2, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 124, 125, 126, 127, 0, 143, 148, 150, 0,
	153, 0, 155, 0, 150, 155, 42, 0, 0, 0,
	0, 0, 64, 160, 160, 0, 101, 0, 0, 0,
	67, 0, 0, 0, 0, 0, 0, 69, 33, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 0, 0, 131, 0, 37, 0, 0, 0, 0,
	50, 155, 43, 44, 0, -2, 0, 132, 0, 85,
	87, 0, 0, 0, -2, 0, 162, -2, 0, 0,
	0, 129, 135, 0, 136, 0, 0, 0, 0, 59,
	145, 146, 0, 31, 71, -2, 11, 150, 36, 0,
	0, -2, 0, -2, 0, -2, 0, -2, 0, 77,
	78, 92, 130, 34, 150, 66, 0, 40, 155, 51,
	52, 0, 69, 0, 45, 46, 150, 0, 0, 74,
	75, 150, 0, 0, 0, -2, 99, 0, 100, 62,
	128, 68, 137, 0, 60, 139, 0, 0, 0, 0,
	0, 150, -2, -2, -2, -2, 76, 0, 0, 0,
	53, 54, 150, 70, 0, 41, 48, 150, 73, 0,
	150, 150, 0, 0, 0, 0, 0, 147, 35, 150,
	0, 38, 150, 49, 57, 150, 150, 47, 95, 0,
	0, 150, 0, 138, 140, 0, 142, 0, 17, 0,
	55, 56, 96, 97, 0, 63, 0, 16, 0, 39,
	98, 141, 0, 150, 150, 0, 0, 15, 14,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	82, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 3, 3, 68, 80, 3,
	72, 73, 66, 64, 61, 65, 77, 67, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 60, 74,
	63, 58, 62, 59, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 75, 3, 76, 79, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 70, 81, 71,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 69,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:86
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:90
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:96
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = []ast.Stmt{yyDollar[2].stmt}
			} else {
				yyVAL.stmts = []ast.Stmt{}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmts = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:107
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[3].stmt)
				if l, ok := yylex.(*Lexer); ok {
					l.stmts = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:118
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:122
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:126
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:131
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:136
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:141
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:146
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:151
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:156
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 14:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:160
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:165
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:170
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:175
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:180
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:184
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:188
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:193
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:198
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:203
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:208
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:213
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:218
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:223
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:228
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:235
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:239
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:245
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:252
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:256
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:273
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:278
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:283
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:293
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmts: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:298
		{
			yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmts: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:303
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmts: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:308
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:314
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:321
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:325
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:329
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:333
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:338
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:349
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:356
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:362
		{
			yyVAL.stmt_switch = &ast.SwitchStmt{Expr: yyDollar[2].expr, Body: yyDollar[5].stmt_switch_cases}
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:369
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:373
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:377
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:381
		{
			body := yyVAL.stmt_switch_cases.(*ast.SwitchBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_switch_case)
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:386
		{
			body := yyVAL.stmt_switch_cases.(*ast.SwitchBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_switch_default
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:397
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:402
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:409
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:414
		{
			yyVAL.array_count = ast.ArrayCount{Count: 0}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:418
		{
			yyVAL.array_count = ast.ArrayCount{Count: 1}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:422
		{
			yyVAL.array_count.Count = yyVAL.array_count.Count + 1
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:427
		{
			yyVAL.map_expr = make(map[ast.Expr]ast.Expr)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:431
		{
			mapExpr := make(map[ast.Expr]ast.Expr)
			mapExpr[yyDollar[1].expr] = yyDollar[3].expr
			yyVAL.map_expr = mapExpr
		}
	case 63:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:437
		{
			if len(yyDollar[1].map_expr) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyDollar[1].map_expr[yyDollar[4].expr] = yyDollar[6].expr
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:445
		{
			yyVAL.expr_idents = []string{}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:449
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:453
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:462
		{
			yyVAL.expr_type = yyDollar[1].tok.Lit
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:466
		{
			yyVAL.expr_type = yyVAL.expr_type + "." + yyDollar[3].tok.Lit
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:471
		{
			yyVAL.exprs = nil
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:475
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:479
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:486
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 73:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:495
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:499
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:503
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 76:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:507
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 77:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:511
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:515
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:521
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:525
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:530
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:535
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:540
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:545
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:550
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:555
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:560
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:565
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:570
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:575
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:580
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 92:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:585
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:590
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:595
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:600
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmts: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:605
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmts: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 97:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:610
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmts: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:615
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmts: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:620
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:625
		{
			yyVAL.expr = &ast.MapExpr{MapExpr: yyDollar[3].map_expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:630
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:635
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:640
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:645
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:650
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:655
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:660
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:665
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:670
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:675
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:680
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:685
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:690
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:695
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:700
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:705
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:710
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:715
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:720
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:725
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:730
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:735
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:740
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:745
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:750
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:755
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:760
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:765
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:770
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:775
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:780
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:785
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:790
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:795
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 135:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:800
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:805
		{
			yyVAL.expr = &ast.NewExpr{Type: yyDollar[3].expr_type}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:810
		{
			yyVAL.expr = &ast.MakeChanExpr{Type: yyDollar[4].expr_type, SizeExpr: nil}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 138:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:815
		{
			yyVAL.expr = &ast.MakeChanExpr{Type: yyDollar[4].expr_type, SizeExpr: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:820
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 140:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:825
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type, LenExpr: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 141:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:830
		{
			yyVAL.expr = &ast.MakeExpr{Dimensions: yyDollar[3].array_count.Count, Type: yyDollar[4].expr_type, LenExpr: yyDollar[6].expr, CapExpr: yyDollar[8].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 142:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:835
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:840
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:845
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:850
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:855
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 147:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:860
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:865
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:872
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
