// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:39
type yySymType struct {
	yys                          int
	compstmt                     ast.Stmt
	stmts                        ast.Stmt
	stmt_var_or_lets             ast.Stmt
	stmt_var                     ast.Stmt
	stmt_lets                    ast.Stmt
	stmt_if                      ast.Stmt
	stmt_for                     ast.Stmt
	stmt_switch                  ast.Stmt
	stmt_switch_cases            ast.Stmt
	stmt_switch_case             ast.Stmt
	stmt_switch_default          ast.Stmt
	stmt_select                  ast.Stmt
	stmt_select_cases            ast.Stmt
	stmt_select_case             ast.Stmt
	stmt_select_default          ast.Stmt
	stmt                         ast.Stmt
	expr                         ast.Expr
	exprs                        []ast.Expr
	expr_idents                  []string
	func_expr_idents             []*ast.ParamExpr
	opt_func_return_expr_idents  []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1 []*ast.FuncReturnValuesExpr
	expr_map                     *ast.MapExpr
	type_data                    *ast.TypeStruct
	type_data_struct             *ast.TypeStruct
	slice_count                  int
	tok                          ast.Token
	expr_slice                   ast.Expr
	expr_ident                   ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const UNARY = 57402

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"'='",
	"'?'",
	"':'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"'!'",
	"'^'",
	"'&'",
	"'.'",
	"'['",
	"']'",
	"'|'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1081

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	60, 79,
	63, 79,
	76, 5,
	-2, 1,
	-1, 23,
	63, 80,
	-2, 28,
	-1, 27,
	60, 79,
	-2, 66,
	-1, 58,
	60, 79,
	63, 79,
	-2, 5,
	-1, 111,
	16, 67,
	63, 67,
	-2, 175,
	-1, 118,
	1, 88,
	8, 88,
	47, 88,
	48, 88,
	60, 88,
	62, 88,
	63, 88,
	72, 88,
	73, 88,
	75, 88,
	76, 88,
	82, 88,
	84, 88,
	-2, 83,
	-1, 120,
	1, 90,
	8, 90,
	47, 90,
	48, 90,
	60, 90,
	62, 90,
	63, 90,
	72, 90,
	73, 90,
	75, 90,
	76, 90,
	82, 90,
	84, 90,
	-2, 83,
	-1, 124,
	4, 164,
	51, 164,
	58, 164,
	59, 164,
	-2, 103,
	-1, 171,
	17, 0,
	18, 0,
	-2, 115,
	-1, 172,
	17, 0,
	18, 0,
	-2, 116,
	-1, 264,
	62, 5,
	-2, 79,
	-1, 275,
	73, 189,
	82, 189,
	-2, 181,
	-1, 292,
	73, 189,
	-2, 181,
	-1, 299,
	1, 82,
	8, 82,
	47, 82,
	48, 82,
	60, 82,
	62, 82,
	63, 82,
	73, 82,
	75, 82,
	76, 82,
	82, 82,
	84, 82,
	-2, 83,
	-1, 305,
	1, 21,
	47, 21,
	48, 21,
	62, 21,
	73, 21,
	76, 21,
	84, 21,
	-2, 134,
	-1, 307,
	1, 23,
	47, 23,
	48, 23,
	62, 23,
	73, 23,
	76, 23,
	84, 23,
	-2, 136,
	-1, 309,
	1, 25,
	47, 25,
	48, 25,
	62, 25,
	73, 25,
	76, 25,
	84, 25,
	-2, 134,
	-1, 311,
	1, 27,
	47, 27,
	48, 27,
	62, 27,
	73, 27,
	76, 27,
	84, 27,
	-2, 136,
	-1, 348,
	73, 187,
	82, 187,
	-2, 182,
	-1, 366,
	1, 20,
	47, 20,
	48, 20,
	62, 20,
	73, 20,
	76, 20,
	84, 20,
	-2, 133,
	-1, 367,
	1, 22,
	47, 22,
	48, 22,
	62, 22,
	73, 22,
	76, 22,
	84, 22,
	-2, 135,
	-1, 368,
	1, 24,
	47, 24,
	48, 24,
	62, 24,
	73, 24,
	76, 24,
	84, 24,
	-2, 133,
	-1, 369,
	1, 26,
	47, 26,
	48, 26,
	62, 26,
	73, 26,
	76, 26,
	84, 26,
	-2, 135,
}

const yyPrivate = 57344

const yyLast = 3989

var yyAct = [...]int16{
	62, 342, 329, 23, 228, 9, 30, 261, 330, 276,
	262, 207, 332, 331, 8, 63, 5, 43, 264, 263,
	292, 349, 68, 70, 8, 399, 275, 105, 108, 112,
	1, 219, 405, 115, 116, 117, 119, 121, 127, 287,
	213, 8, 118, 120, 213, 135, 8, 8, 124, 8,
	8, 286, 213, 143, 351, 8, 213, 200, 7, 23,
	140, 130, 128, 114, 150, 60, 213, 395, 290, 141,
	285, 134, 159, 160, 161, 213, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 216, 154, 183, 184,
	185, 186, 369, 188, 190, 191, 212, 449, 347, 132,
	199, 368, 225, 367, 213, 203, 131, 133, 60, 448,
	366, 354, 6, 344, 310, 313, 129, 123, 59, 392,
	209, 136, 471, 157, 128, 155, 145, 193, 222, 134,
	308, 144, 210, 229, 139, 230, 231, 130, 130, 306,
	130, 304, 138, 236, 137, 282, 130, 130, 272, 130,
	475, 474, 470, 270, 469, 126, 462, 461, 214, 215,
	459, 217, 457, 467, 126, 346, 447, 223, 224, 149,
	227, 132, 235, 442, 237, 60, 441, 244, 131, 133,
	248, 311, 440, 439, 432, 149, 251, 122, 129, 255,
	431, 258, 419, 152, 149, 267, 149, 309, 415, 413,
	149, 134, 412, 270, 364, 411, 307, 408, 305, 404,
	452, 274, 283, 249, 386, 271, 372, 229, 253, 194,
	359, 289, 320, 317, 130, 298, 126, 210, 291, 302,
	300, 299, 149, 250, 312, 238, 429, 428, 314, 409,
	391, 195, 218, 60, 245, 280, 151, 324, 326, 113,
	66, 232, 153, 126, 196, 23, 148, 338, 335, 149,
	337, 334, 126, 422, 149, 142, 149, 356, 343, 424,
	388, 383, 365, 336, 273, 321, 107, 466, 355, 332,
	331, 130, 264, 263, 361, 458, 303, 362, 196, 357,
	65, 453, 10, 390, 353, 319, 288, 279, 130, 208,
	269, 268, 345, 162, 147, 64, 4, 2, 125, 126,
	58, 57, 46, 352, 126, 426, 260, 20, 379, 358,
	110, 382, 363, 384, 277, 126, 60, 381, 328, 19,
	17, 126, 146, 16, 25, 24, 393, 3, 394, 371,
	0, 277, 0, 373, 374, 0, 376, 403, 0, 56,
	396, 406, 0, 0, 0, 0, 0, 387, 0, 130,
	0, 130, 0, 61, 0, 0, 0, 194, 0, 0,
	0, 0, 0, 126, 0, 0, 0, 0, 0, 202,
	397, 0, 400, 126, 0, 0, 410, 430, 348, 0,
	0, 0, 0, 434, 0, 0, 414, 60, 416, 417,
	130, 0, 277, 0, 420, 348, 226, 0, 0, 423,
	0, 0, 425, 0, 0, 234, 0, 0, 0, 0,
	0, 427, 0, 0, 0, 0, 0, 229, 456, 0,
	438, 455, 130, 0, 0, 0, 194, 0, 194, 443,
	0, 126, 444, 445, 0, 0, 0, 0, 0, 450,
	451, 187, 0, 446, 0, 465, 0, 0, 0, 0,
	0, 130, 252, 277, 0, 126, 0, 259, 130, 0,
	0, 0, 0, 463, 0, 211, 0, 0, 278, 0,
	0, 0, 464, 0, 281, 0, 221, 0, 472, 468,
	0, 194, 473, 0, 0, 0, 0, 0, 233, 0,
	0, 0, 0, 0, 0, 239, 240, 241, 242, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 126, 0,
	0, 0, 0, 0, 0, 0, 333, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 341, 0, 0, 0,
	0, 234, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 360, 0,
	0, 0, 126, 0, 0, 0, 0, 0, 277, 0,
	0, 0, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 297, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 380, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 398, 402,
	85, 87, 75, 76, 77, 78, 79, 0, 350, 0,
	101, 401, 0, 0, 0, 99, 74, 102, 0, 97,
	0, 0, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 433, 95, 96, 80, 81,
	82, 436, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 385, 0, 0, 0, 0, 72, 0, 296,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 295, 0, 0, 0, 99, 74, 102, 0, 97,
	0, 0, 0, 0, 0, 460, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 266, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 265, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	247, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 0, 0, 0, 0, 99, 74, 102,
	246, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 71, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 197, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 0, 0, 101, 454,
	0, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 437, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 0, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 435, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	421, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 0, 0, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 418, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 0, 0, 101, 407,
	0, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 0, 0, 0,
	0, 99, 74, 102, 389, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 377, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	375, 0, 101, 0, 0, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 370, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 0, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 340, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 0, 327, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 322, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	318, 0, 101, 0, 0, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 316, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 301, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 294, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 293, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 284, 0, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 0, 256, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 243, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 0, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 220, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 201, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	192, 0, 101, 0, 0, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 71, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 0, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 0, 97, 45, 31,
	37, 0, 0, 41, 13, 55, 14, 26, 0, 27,
	0, 0, 0, 0, 0, 0, 0, 48, 38, 39,
	40, 0, 15, 18, 0, 0, 0, 0, 0, 0,
	0, 0, 11, 12, 0, 0, 0, 0, 0, 28,
	29, 0, 0, 21, 22, 0, 49, 52, 0, 47,
	54, 53, 50, 0, 0, 0, 0, 0, 0, 0,
	0, 32, 36, 0, 0, 0, 51, 0, 44, 0,
	0, 33, 34, 35, 0, 42, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 0, 0, 0, 0, 99,
	206, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 0, 0, 0, 0, 99, 205, 102,
	0, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	158, 0, 0, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 0, 0, 156, 0,
	0, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 0, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 0, 100, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 86,
	88, 0, 101, 0, 0, 0, 0, 99, 74, 102,
	0, 97, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 45, 31, 37, 0,
	0, 41, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 48, 38, 39, 40, 99,
	74, 102, 0, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 31, 37, 0, 0, 41, 0, 0,
	0, 0, 0, 0, 49, 52, 0, 47, 54, 53,
	50, 48, 38, 39, 40, 0, 0, 0, 0, 32,
	36, 0, 0, 0, 51, 0, 44, 0, 0, 33,
	34, 35, 0, 42, 339, 0, 0, 0, 0, 0,
	49, 52, 0, 47, 54, 53, 50, 0, 0, 0,
	0, 0, 111, 31, 37, 32, 36, 41, 0, 55,
	51, 0, 44, 0, 0, 33, 34, 35, 0, 42,
	315, 48, 38, 39, 40, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 31,
	37, 0, 0, 41, 0, 0, 0, 0, 0, 0,
	49, 52, 0, 47, 54, 53, 50, 48, 38, 39,
	40, 0, 0, 0, 0, 32, 36, 0, 0, 0,
	106, 0, 44, 0, 109, 33, 34, 35, 0, 42,
	0, 0, 0, 0, 0, 0, 49, 52, 0, 47,
	54, 53, 50, 0, 0, 0, 0, 0, 45, 31,
	37, 32, 36, 41, 0, 0, 51, 0, 44, 0,
	257, 33, 34, 35, 0, 42, 0, 48, 38, 39,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 31,
	37, 0, 0, 41, 0, 0, 49, 52, 0, 47,
	54, 53, 50, 0, 0, 0, 204, 48, 38, 39,
	40, 32, 36, 0, 0, 0, 51, 0, 44, 0,
	0, 33, 34, 35, 0, 42, 45, 31, 37, 0,
	0, 41, 0, 0, 0, 0, 49, 52, 0, 47,
	54, 53, 50, 0, 0, 48, 38, 39, 40, 0,
	0, 32, 36, 0, 0, 0, 51, 0, 44, 0,
	198, 33, 34, 35, 0, 42, 45, 31, 37, 0,
	0, 41, 0, 0, 49, 52, 0, 47, 54, 53,
	50, 0, 0, 0, 189, 48, 38, 39, 40, 32,
	36, 0, 0, 0, 51, 0, 44, 0, 0, 33,
	34, 35, 0, 42, 45, 31, 37, 0, 0, 41,
	0, 0, 0, 0, 49, 52, 0, 47, 54, 53,
	50, 0, 0, 48, 38, 39, 40, 0, 0, 32,
	36, 0, 0, 0, 51, 0, 44, 0, 0, 33,
	34, 35, 0, 42, 45, 31, 37, 0, 0, 41,
	0, 0, 49, 52, 0, 47, 54, 53, 50, 0,
	0, 0, 0, 48, 38, 39, 40, 32, 36, 0,
	0, 0, 378, 0, 44, 0, 0, 33, 34, 35,
	0, 42, 45, 31, 37, 0, 0, 41, 0, 0,
	0, 0, 49, 52, 0, 47, 54, 53, 50, 0,
	0, 48, 38, 39, 40, 0, 0, 32, 36, 0,
	0, 0, 325, 0, 44, 0, 0, 33, 34, 35,
	0, 42, 45, 31, 37, 0, 0, 41, 0, 0,
	49, 52, 0, 47, 54, 53, 50, 0, 0, 0,
	0, 48, 38, 39, 40, 32, 36, 0, 0, 0,
	323, 0, 44, 0, 0, 33, 34, 35, 0, 42,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	49, 52, 0, 47, 54, 53, 50, 0, 0, 89,
	90, 91, 92, 93, 94, 32, 36, 95, 96, 80,
	254, 0, 44, 0, 0, 33, 34, 35, 0, 42,
	103, 0, 0, 69, 31, 37, 0, 0, 41, 0,
	0, 0, 0, 75, 76, 77, 78, 79, 0, 0,
	0, 101, 48, 38, 39, 40, 99, 74, 102, 0,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 67,
	31, 37, 0, 0, 41, 0, 0, 0, 0, 0,
	0, 49, 52, 0, 47, 54, 53, 50, 48, 38,
	39, 40, 0, 0, 0, 0, 32, 36, 0, 0,
	0, 51, 0, 44, 0, 0, 33, 34, 35, 0,
	42, 0, 0, 0, 0, 0, 0, 49, 52, 0,
	47, 54, 53, 50, 89, 90, 91, 92, 93, 94,
	0, 0, 32, 36, 80, 0, 0, 51, 0, 44,
	0, 0, 33, 34, 35, 103, 42, 89, 90, 91,
	92, 93, 94, 0, 0, 0, 0, 80, 0, 0,
	77, 78, 79, 0, 0, 0, 101, 0, 103, 0,
	0, 99, 74, 102, 0, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	0, 0, 0, 0, 99, 74, 102, 0, 97,
}

var yyPact = [...]int16{
	-60, -1000, 2694, -60, -1000, -70, -70, -1000, -1000, -1000,
	-1000, -1000, -1000, 3582, 3582, 311, 286, -1000, 188, -1000,
	-1000, 3855, 3819, 2546, -1000, -1000, 3582, 3368, 3582, 187,
	-18, -1000, 3582, 3582, 3582, 3582, 3582, -1000, -1000, -1000,
	-1000, 123, -34, 130, 3582, 57, -1000, 80, 78, 70,
	-12, -70, 3582, 67, 62, 310, 206, -1000, 2694, -70,
	-1000, 213, 2614, 2614, 184, 190, -60, 61, 2964, 59,
	2896, 3582, 3582, 3582, 309, 3582, 3582, 3582, 3582, 3582,
	3582, 3582, 3582, 3582, 3582, 3582, 3582, 3582, 3582, 3582,
	3582, 3582, 3582, 3582, 3582, -1000, -1000, 3582, 3582, 3582,
	3582, 3582, 3542, 3582, 3582, 2478, -60, 235, 846, 3504,
	-19, 57, 2410, -70, 3464, 3905, 3905, 3905, -18, 2828,
	-18, 2760, 305, 56, -10, 3582, -70, 34, -1000, 130,
	130, 15, 130, 180, -51, 2342, 3582, 3582, 130, 58,
	-70, 130, 3582, 2614, 3582, 3582, 201, -1000, 3582, -70,
	-1000, -60, 3582, -60, 172, 3582, 3582, 3582, 3582, 2614,
	2274, 3032, -1000, 3882, 3882, 3905, 3905, 3905, 2614, 3767,
	3767, 3220, 3220, 3767, 3767, 3767, 3767, 2614, 2614, 2614,
	2614, 2614, 2614, 2614, 3100, 2614, 3168, 179, 778, 3582,
	2614, 3168, -60, 170, -70, 3582, -70, -60, 3738, 2206,
	3404, -70, 245, 710, 3582, 307, 306, 150, 222, 305,
	-1000, -37, -70, 303, -36, -36, 130, -36, -70, -10,
	-1000, 147, 2138, -5, -24, 302, 3582, -14, -43, 2070,
	2002, 636, 3582, 213, 3582, 167, 1934, 166, 266, 143,
	141, 132, 116, 3582, 50, -1000, -1000, 3308, 1866, 160,
	-1000, 1798, 301, 159, -60, 1730, 3698, 3660, 1662, 242,
	-29, -1000, -1000, 221, 2694, -1000, 3272, 1594, -1000, -1000,
	-70, 216, 48, 130, 100, -70, -61, -70, 3582, -1000,
	-28, 300, 46, -1000, -1000, -1000, -1000, 3582, 214, -43,
	130, 157, -70, 3582, -1000, -1000, 3582, 213, 2614, -18,
	-1000, -60, -1000, 210, 45, -1000, 38, -1000, 36, -1000,
	27, -1000, 2614, -1000, 1526, -1000, -1000, -1000, -60, -1000,
	-1000, 153, -60, -60, 1458, -60, 1390, 3620, -35, -1000,
	-1000, 219, 3582, 151, -1000, -1000, -60, 218, 1322, -1000,
	-1000, 299, 178, 55, 216, -36, 216, -8, -70, -1000,
	-37, 130, -38, 130, -1000, 566, 3582, 146, -40, -1000,
	3582, 2614, 1254, 144, 177, -60, -1000, -1000, -1000, -1000,
	-1000, 142, -1000, 139, 136, -60, 135, -60, -60, 1186,
	129, -1000, -1000, -60, 1118, 211, -1000, -1000, -60, -1000,
	217, -60, 130, 175, 174, 216, 127, -36, 121, -70,
	-36, -1000, 3582, 1050, -1000, -70, 982, -1000, -1000, -60,
	120, -1000, -1000, -1000, 119, -1000, 113, 110, -60, -1000,
	-1000, -60, -60, -1000, 130, 103, 44, -36, -60, -60,
	148, -1000, -1000, 297, 914, -1000, 3582, 3582, 99, 264,
	-1000, -1000, -1000, 97, -1000, -1000, -36, -1000, -1000, -70,
	94, 93, -60, 130, -1000, -43, 2614, 256, 101, -1000,
	130, -1000, -1000, 91, -36, 89, 60, -60, -36, -1000,
	-1000, -60, 88, 87, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 30, 347, 5, 302, 345, 344, 343, 340, 339,
	338, 8, 2, 327, 326, 10, 7, 359, 0, 286,
	11, 1, 325, 38, 323, 17, 4, 322, 6, 317,
	316, 275, 9, 122, 58,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 5, 6, 6, 7, 7, 7, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 13, 14,
	14, 14, 14, 14, 15, 15, 16, 9, 10, 10,
	10, 10, 10, 11, 11, 12, 19, 19, 19, 21,
	21, 22, 22, 22, 20, 20, 20, 20, 20, 17,
	17, 17, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 23, 23, 23, 23, 23,
	23, 23, 24, 24, 25, 25, 26, 26, 26, 27,
	27, 27, 27, 27, 27, 28, 29, 29, 30, 30,
	30, 31, 31, 33, 33, 34, 32, 32, 32, 32,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 1, 1, 13, 12, 9, 8, 1, 1,
	6, 5, 6, 5, 6, 5, 6, 5, 1, 1,
	1, 4, 3, 3, 5, 7, 5, 4, 7, 5,
	6, 7, 7, 8, 7, 8, 8, 9, 6, 0,
	1, 1, 2, 2, 4, 4, 3, 7, 0, 1,
	1, 2, 2, 4, 4, 3, 0, 1, 4, 0,
	4, 0, 1, 4, 0, 1, 3, 4, 6, 0,
	1, 4, 4, 1, 1, 2, 2, 2, 2, 4,
	2, 4, 1, 1, 1, 1, 5, 3, 3, 8,
	9, 9, 10, 2, 5, 7, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	3, 3, 3, 5, 4, 5, 4, 4, 4, 1,
	4, 4, 4, 6, 8, 7, 6, 10, 5, 3,
	2, 4, 4, 6, 3, 1, 3, 2, 2, 5,
	2, 6, 2, 5, 2, 3, 0, 3, 6, 6,
	5, 5, 6, 5, 5, 1, 0, 1, 2, 1,
	1, 0, 1, 1, 2, 1, 0, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -29, -2, -30, 76, -33, -34, 84, -3,
	-4, 38, 39, 10, 12, 28, -7, -8, 29, -9,
	-13, 49, 50, -18, -5, -6, 13, 15, 45, 46,
	-28, 5, 67, 77, 78, 79, 68, 6, 24, 25,
	26, 9, 81, -25, 74, 4, -27, 55, 23, 52,
	58, 72, 53, 57, 56, 11, -17, -29, -30, -33,
	-34, -17, -18, -18, 4, 14, 72, 4, -18, 4,
	-18, 60, 61, 27, 80, 66, 67, 68, 69, 70,
	42, 43, 44, 17, 18, 64, 19, 65, 20, 32,
	33, 34, 35, 36, 37, 40, 41, 83, 21, 79,
	22, 74, 81, 53, 16, -18, 72, -19, -18, 76,
	-4, 4, -18, 72, 81, -18, -18, -18, -28, -18,
	-28, -18, 74, 4, 82, -31, -33, -23, 4, 68,
	-25, 58, 51, 59, 81, -18, 74, 74, 74, 74,
	72, 81, -31, -18, 74, 74, -19, 4, 60, 63,
	-3, 72, 13, 72, -1, 74, 74, 74, 74, -18,
	-18, -18, 4, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -17, -18, 62,
	-18, -18, 72, -1, -33, 16, 63, 72, 76, -18,
	76, 72, -31, -18, 62, 80, 80, -20, 4, 74,
	-25, -17, 72, 80, -23, -23, 81, -23, 72, 82,
	75, -17, -18, -23, -23, 54, -31, -23, -26, -18,
	-18, -18, 60, -17, -31, -1, -18, -1, 73, -17,
	-17, -17, -17, 62, 8, 75, 82, 62, -18, -1,
	73, -18, -31, -1, 72, -18, 76, 76, -18, -31,
	-14, -16, -15, 48, 47, 82, 62, -18, 4, 4,
	63, 75, 8, 62, -20, 63, -32, -33, -31, 4,
	-23, -31, 8, 75, 75, 75, 75, 63, 4, -26,
	82, -32, 63, 62, 75, 75, 63, -17, -18, -28,
	73, 72, 73, 30, 8, 75, 8, 75, 8, 75,
	8, 75, -18, 75, -18, 82, 82, 73, 72, 4,
	73, -1, 72, 72, -18, 72, -18, 76, -10, -12,
	-11, 48, 47, -31, -15, -16, 62, -3, -18, 82,
	82, -31, -21, 62, 75, -23, 75, 8, -33, 82,
	-17, 82, -24, 4, 75, -18, 63, -32, -23, 73,
	-31, -18, -18, -1, 4, 72, 75, 75, 75, 75,
	82, -1, 73, -1, -1, 72, -1, 72, 72, -18,
	-31, -11, -12, 62, -18, -17, 73, -1, 62, 82,
	4, 72, 74, -21, -21, 75, -32, -23, -31, 63,
	-23, 75, 63, -18, 73, 72, -18, 75, 73, 72,
	-1, 73, 73, 73, -1, 73, -1, -1, 72, 73,
	-1, 62, 62, -1, 62, -1, -22, -23, 72, 72,
	-21, 73, 73, -31, -18, 75, -31, 62, -1, 73,
	73, 73, 73, -1, -1, -1, -23, 73, 75, 63,
	-1, -1, 72, 4, 75, -26, -18, 73, 31, 73,
	-31, 73, 73, -1, -23, -32, 31, 72, -23, 73,
	73, 72, -1, -1, 73, 73,
}

var yyDef = [...]int16{
	176, -2, -2, 176, 177, 180, 179, 183, 185, 3,
	6, 7, 8, 79, 0, 0, 12, 13, 0, 18,
	19, 0, 0, -2, 29, 30, 0, -2, 0, 0,
	83, 84, 0, 0, 0, 0, 0, 92, 93, 94,
	95, 0, 181, 0, 0, 175, 139, 0, 0, 0,
	0, 181, 0, 0, 0, 66, 0, 2, -2, 178,
	184, 9, 80, 10, 0, 0, 176, 175, 0, 175,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 128, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 176, 0, 80, 0,
	0, -2, 0, 181, 0, 85, 86, 87, -2, 0,
	-2, 0, 74, 0, -2, 79, 182, 0, 155, 0,
	0, 0, 0, 0, 0, 0, 79, 0, 0, 0,
	181, 0, 166, 150, 0, 0, 0, 67, 79, 181,
	4, 176, 0, 176, 0, 79, 79, 79, 79, 32,
	0, 97, 98, 107, 108, 109, 110, 111, 112, 113,
	114, -2, -2, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 129, 130, 131, 132, 0, 0, 0,
	149, 154, 176, 0, 179, 0, 181, 176, 0, 0,
	0, 181, 49, 0, 0, 0, 0, 0, 75, 74,
	165, 186, 181, 0, 157, 158, 0, 160, 181, 164,
	106, 0, 0, 0, 0, 0, 166, 0, 186, 0,
	0, 0, 79, 33, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 136, 138, 0, 0, 0,
	37, 0, 0, 0, 176, 0, 0, 0, 0, 58,
	181, 50, 51, 0, -2, 137, 0, 0, 89, 91,
	181, 69, 0, 0, 0, -2, 0, 188, 79, 156,
	0, 0, 0, 134, 140, 141, 142, 0, 0, 186,
	0, 0, -2, 0, 151, 152, 0, 31, 81, -2,
	11, 176, 36, 0, 0, -2, 0, -2, 0, -2,
	0, -2, 96, 135, 0, 173, 174, 34, 176, 68,
	39, 0, 176, 176, 0, 176, 0, 0, 181, 59,
	60, 0, 79, 0, 52, 53, 176, 0, 0, 170,
	171, 0, 0, 0, 69, 76, 69, 0, -2, 104,
	186, 0, 181, 0, 133, 0, 0, 0, 0, 148,
	0, 167, 0, 0, 0, 176, -2, -2, -2, -2,
	172, 0, 40, 0, 0, 176, 0, 176, 176, 0,
	0, 61, 62, 176, 80, 0, 48, 56, 176, 169,
	77, 176, 71, 0, 0, 69, 0, 159, 0, 181,
	162, 143, 0, 0, 146, 181, 0, 153, 35, 176,
	0, 38, 41, 42, 0, 44, 0, 0, 176, 57,
	65, 176, 176, 54, 0, 0, 0, 72, 176, 176,
	0, 105, 161, 0, 0, 145, 166, 0, 0, 17,
	43, 45, 46, 0, 63, 64, 78, 99, 70, 181,
	0, 0, 176, 0, 144, 186, 168, 16, 0, 47,
	0, 100, 101, 0, 163, 0, 0, 176, 73, 102,
	147, 176, 0, 0, 15, 14,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	84, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 70, 79, 3,
	74, 75, 68, 66, 63, 67, 80, 69, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 62, 76,
	65, 60, 64, 61, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 81, 3, 82, 78, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 83, 73,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 71,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:94
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:98
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:104
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:113
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:129
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:133
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:137
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:142
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:147
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:152
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:157
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:162
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:166
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 14:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:170
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:175
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:180
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:185
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:198
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:203
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:208
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:213
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:218
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:223
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:228
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:233
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:238
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:245
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:249
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:255
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:262
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:266
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:283
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:288
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:293
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:303
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:308
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:319
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:324
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:329
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:334
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:344
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:349
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:354
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:359
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:366
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:373
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:377
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:381
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:385
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:390
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:401
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:406
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:413
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:419
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:428
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:432
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:436
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:440
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:446
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:457
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:462
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:469
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:474
		{
			yyVAL.expr_idents = []string{}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:478
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:482
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:490
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:494
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[3].opt_func_return_expr_idents1
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:498
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:502
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:506
		{
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:511
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:515
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{{Name: yyDollar[1].tok.Lit}}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:519
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[3].type_data}}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:523
		{
			if len(yyDollar[1].func_expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.func_expr_idents = append(yyDollar[1].func_expr_idents, &ast.ParamExpr{Name: yyDollar[4].tok.Lit})
		}
	case 78:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:530
		{
			if len(yyDollar[1].func_expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.func_expr_idents = append(yyDollar[1].func_expr_idents, &ast.ParamExpr{Name: yyDollar[4].tok.Lit, TypeData: yyDollar[6].type_data})
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:538
		{
			yyVAL.exprs = nil
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:542
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:546
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:553
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:562
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:566
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:571
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:576
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:581
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 88:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:586
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:591
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:596
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:601
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:606
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:611
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:616
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:621
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:626
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:631
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:636
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 99:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:641
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 100:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:646
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 101:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:651
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 102:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:656
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:661
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:666
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 105:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:671
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:676
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:681
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:686
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:691
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:696
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:701
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:706
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:711
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:716
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:721
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:726
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:731
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:736
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:741
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:746
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:751
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:756
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:761
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:766
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:771
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:776
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:781
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:786
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:791
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:796
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:801
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:806
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:811
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:816
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:821
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:826
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:831
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:836
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:841
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:846
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:851
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:861
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:866
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 144:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:871
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 145:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:876
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:881
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 147:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:887
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:893
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:898
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:903
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:908
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:913
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:918
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:923
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:931
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:935
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:944
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:953
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 159:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:963
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:967
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:976
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:982
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:986
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:996
		{
			yyVAL.slice_count = 1
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1000
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1007
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1011
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1015
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1025
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1029
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1033
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 172:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1037
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1041
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1045
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1051
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
