// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:52
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             ast.Stmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_unary                    ast.Expr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"','",
	"'.'",
	"'['",
	"']'",
	"'!'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1168

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	61, 90,
	62, 90,
	80, 6,
	81, 90,
	-2, 2,
	-1, 24,
	81, 91,
	-2, 20,
	-1, 68,
	61, 90,
	62, 90,
	81, 90,
	-2, 6,
	-1, 117,
	16, 72,
	81, 72,
	-2, 195,
	-1, 126,
	4, 184,
	51, 184,
	58, 184,
	59, 184,
	-2, 105,
	-1, 155,
	1, 161,
	8, 161,
	47, 161,
	48, 161,
	61, 161,
	62, 161,
	63, 161,
	76, 161,
	77, 161,
	79, 161,
	80, 161,
	81, 161,
	84, 161,
	86, 161,
	-2, 94,
	-1, 157,
	1, 163,
	8, 163,
	47, 163,
	48, 163,
	61, 163,
	62, 163,
	63, 163,
	76, 163,
	77, 163,
	79, 163,
	80, 163,
	81, 163,
	84, 163,
	86, 163,
	-2, 94,
	-1, 257,
	79, 175,
	82, 175,
	-2, 195,
	-1, 287,
	63, 6,
	-2, 90,
	-1, 295,
	77, 209,
	84, 209,
	-2, 201,
	-1, 309,
	77, 209,
	-2, 201,
	-1, 316,
	1, 93,
	8, 93,
	47, 93,
	48, 93,
	61, 93,
	62, 93,
	63, 93,
	77, 93,
	79, 93,
	80, 93,
	81, 93,
	84, 93,
	86, 93,
	-2, 94,
	-1, 317,
	1, 162,
	8, 162,
	47, 162,
	48, 162,
	61, 162,
	62, 162,
	63, 162,
	76, 162,
	77, 162,
	79, 162,
	80, 162,
	81, 162,
	84, 162,
	86, 162,
	-2, 103,
	-1, 318,
	1, 164,
	8, 164,
	47, 164,
	48, 164,
	61, 164,
	62, 164,
	63, 164,
	76, 164,
	77, 164,
	79, 164,
	80, 164,
	81, 164,
	84, 164,
	86, 164,
	-2, 103,
	-1, 363,
	1, 22,
	47, 22,
	48, 22,
	63, 22,
	77, 22,
	80, 22,
	86, 22,
	-2, 136,
	-1, 365,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	77, 24,
	80, 24,
	86, 24,
	-2, 138,
	-1, 367,
	1, 26,
	47, 26,
	48, 26,
	63, 26,
	77, 26,
	80, 26,
	86, 26,
	-2, 136,
	-1, 369,
	1, 28,
	47, 28,
	48, 28,
	63, 28,
	77, 28,
	80, 28,
	86, 28,
	-2, 138,
	-1, 373,
	77, 207,
	84, 207,
	-2, 202,
	-1, 419,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	77, 21,
	80, 21,
	86, 21,
	-2, 135,
	-1, 420,
	1, 23,
	47, 23,
	48, 23,
	63, 23,
	77, 23,
	80, 23,
	86, 23,
	-2, 137,
	-1, 421,
	1, 25,
	47, 25,
	48, 25,
	63, 25,
	77, 25,
	80, 25,
	86, 25,
	-2, 135,
	-1, 422,
	1, 27,
	47, 27,
	48, 27,
	63, 27,
	77, 27,
	80, 27,
	86, 27,
	-2, 137,
}

const yyPrivate = 57344

const yyLast = 4306

var yyAct = [...]int16{
	2, 296, 235, 251, 386, 8, 248, 10, 284, 353,
	354, 246, 285, 70, 35, 245, 46, 36, 38, 9,
	6, 64, 14, 57, 15, 28, 9, 29, 126, 309,
	9, 374, 356, 355, 9, 50, 39, 40, 41, 427,
	16, 30, 295, 228, 9, 287, 286, 9, 125, 141,
	12, 13, 222, 222, 443, 376, 328, 31, 32, 141,
	86, 33, 34, 136, 66, 54, 142, 48, 56, 55,
	52, 9, 65, 430, 225, 70, 163, 155, 157, 222,
	59, 110, 61, 63, 9, 222, 62, 307, 53, 329,
	45, 330, 222, 368, 72, 43, 107, 60, 24, 475,
	80, 108, 222, 58, 222, 101, 102, 86, 87, 88,
	73, 437, 461, 202, 222, 221, 396, 326, 71, 210,
	222, 222, 305, 111, 114, 222, 119, 151, 122, 124,
	151, 149, 150, 239, 70, 366, 83, 84, 85, 105,
	137, 321, 364, 107, 209, 422, 362, 80, 108, 144,
	302, 151, 205, 421, 152, 153, 154, 156, 158, 266,
	469, 204, 470, 24, 369, 262, 151, 264, 420, 419,
	392, 167, 168, 169, 170, 379, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 130, 336, 192, 193,
	194, 195, 271, 197, 199, 200, 367, 275, 151, 70,
	208, 196, 130, 365, 319, 151, 160, 363, 130, 151,
	217, 303, 110, 151, 44, 138, 205, 252, 215, 520,
	267, 220, 151, 213, 231, 162, 306, 308, 236, 161,
	237, 238, 230, 134, 146, 145, 101, 102, 86, 140,
	133, 135, 139, 240, 241, 519, 254, 316, 517, 134,
	263, 513, 512, 131, 324, 134, 133, 135, 323, 132,
	388, 511, 133, 135, 157, 136, 506, 344, 504, 131,
	143, 499, 498, 408, 107, 131, 490, 441, 80, 108,
	159, 136, 359, 270, 484, 361, 358, 136, 481, 273,
	480, 479, 277, 70, 280, 464, 463, 458, 380, 452,
	450, 449, 448, 294, 447, 429, 416, 288, 289, 290,
	291, 400, 382, 343, 127, 340, 334, 332, 236, 281,
	272, 515, 510, 165, 397, 508, 130, 315, 495, 493,
	473, 471, 399, 314, 456, 7, 401, 402, 433, 404,
	227, 219, 69, 164, 158, 409, 132, 132, 120, 132,
	335, 417, 412, 411, 337, 132, 118, 132, 418, 413,
	360, 113, 509, 347, 349, 356, 355, 424, 500, 70,
	287, 286, 24, 134, 351, 387, 256, 132, 370, 128,
	133, 135, 75, 11, 436, 439, 166, 440, 438, 128,
	393, 212, 375, 131, 451, 384, 453, 454, 385, 320,
	457, 389, 5, 3, 459, 136, 487, 68, 67, 462,
	250, 378, 233, 116, 342, 395, 331, 318, 317, 147,
	129, 299, 242, 171, 468, 148, 74, 1, 47, 377,
	434, 249, 472, 247, 37, 407, 474, 49, 51, 42,
	132, 414, 283, 219, 21, 352, 482, 483, 203, 20,
	415, 485, 486, 18, 17, 22, 128, 23, 19, 488,
	26, 27, 492, 25, 494, 132, 4, 0, 431, 0,
	496, 132, 0, 0, 256, 0, 274, 128, 0, 0,
	502, 446, 282, 0, 505, 0, 507, 128, 0, 0,
	0, 0, 298, 0, 0, 130, 0, 0, 301, 514,
	0, 516, 0, 0, 0, 0, 518, 223, 224, 0,
	226, 0, 0, 0, 0, 0, 232, 0, 234, 0,
	0, 0, 132, 0, 0, 0, 0, 0, 0, 0,
	477, 0, 0, 0, 132, 132, 0, 255, 260, 0,
	0, 128, 134, 132, 0, 261, 0, 128, 0, 133,
	135, 236, 489, 0, 357, 0, 297, 128, 110, 0,
	0, 0, 131, 128, 0, 0, 242, 0, 0, 0,
	0, 297, 0, 0, 136, 0, 0, 0, 0, 0,
	383, 0, 101, 102, 86, 87, 88, 0, 0, 0,
	0, 132, 391, 132, 0, 0, 0, 0, 0, 0,
	0, 300, 0, 132, 132, 0, 0, 132, 132, 81,
	82, 103, 203, 83, 84, 85, 105, 0, 0, 128,
	107, 0, 0, 410, 80, 108, 322, 0, 0, 0,
	0, 373, 327, 0, 0, 223, 0, 0, 0, 0,
	0, 0, 297, 0, 0, 373, 0, 0, 426, 0,
	0, 0, 132, 0, 0, 0, 132, 128, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 110, 89, 90,
	92, 94, 104, 106, 0, 0, 0, 0, 79, 0,
	0, 0, 203, 381, 203, 0, 0, 0, 128, 0,
	132, 101, 102, 86, 87, 88, 390, 0, 465, 0,
	0, 466, 132, 0, 394, 0, 132, 0, 0, 0,
	0, 297, 0, 128, 0, 78, 93, 91, 81, 82,
	103, 0, 83, 84, 85, 105, 0, 0, 0, 107,
	0, 0, 0, 80, 108, 0, 0, 0, 0, 0,
	0, 491, 203, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 425, 0, 428, 0, 0, 0, 0, 0,
	0, 0, 0, 128, 435, 0, 128, 0, 0, 442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 89, 90, 92, 94, 104, 106,
	0, 0, 0, 0, 79, 0, 0, 0, 0, 95,
	96, 97, 98, 99, 100, 0, 128, 101, 102, 86,
	87, 88, 0, 0, 0, 0, 0, 0, 0, 476,
	109, 0, 0, 0, 297, 0, 0, 0, 0, 0,
	293, 78, 93, 91, 81, 82, 103, 0, 83, 84,
	85, 105, 0, 0, 0, 107, 0, 0, 0, 80,
	108, 292, 0, 110, 89, 90, 92, 94, 104, 106,
	0, 0, 0, 501, 79, 0, 0, 503, 0, 95,
	96, 97, 98, 99, 100, 0, 0, 101, 102, 86,
	87, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	269, 78, 93, 91, 81, 82, 103, 0, 83, 84,
	85, 105, 0, 0, 0, 107, 0, 0, 0, 80,
	108, 268, 110, 89, 90, 92, 94, 104, 106, 0,
	0, 0, 0, 79, 0, 0, 0, 0, 95, 96,
	97, 98, 99, 100, 0, 0, 101, 102, 86, 87,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 93, 91, 81, 82, 103, 0, 83, 84, 85,
	105, 0, 206, 0, 107, 0, 0, 0, 80, 108,
	110, 89, 90, 92, 94, 104, 106, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 95, 96, 97, 98,
	99, 100, 0, 0, 101, 102, 86, 87, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 93,
	91, 81, 82, 103, 0, 83, 84, 85, 105, 0,
	0, 0, 107, 444, 0, 445, 80, 108, 110, 89,
	90, 92, 94, 104, 106, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 95, 96, 97, 98, 99, 100,
	0, 0, 101, 102, 86, 87, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 93, 91, 81,
	82, 103, 0, 83, 84, 85, 105, 0, 0, 0,
	107, 0, 0, 0, 80, 108, 423, 110, 89, 90,
	92, 94, 104, 106, 0, 0, 0, 0, 79, 0,
	0, 0, 0, 95, 96, 97, 98, 99, 100, 0,
	0, 101, 102, 86, 87, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 93, 91, 81, 82,
	103, 0, 83, 84, 85, 105, 0, 0, 0, 107,
	0, 0, 0, 80, 108, 398, 110, 89, 90, 92,
	94, 104, 106, 0, 0, 0, 0, 79, 0, 0,
	0, 0, 95, 96, 97, 98, 99, 100, 0, 0,
	101, 102, 86, 87, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 93, 91, 81, 82, 103,
	0, 83, 84, 85, 105, 0, 0, 0, 107, 0,
	0, 0, 80, 108, 372, 110, 89, 90, 92, 94,
	104, 106, 0, 0, 0, 0, 79, 0, 0, 0,
	0, 95, 96, 97, 98, 99, 100, 0, 0, 101,
	102, 86, 87, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 109, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 78, 93, 91, 81, 82, 103, 0,
	83, 84, 85, 105, 0, 0, 0, 107, 0, 0,
	0, 80, 108, 339, 110, 89, 90, 92, 94, 104,
	106, 0, 0, 0, 0, 79, 0, 0, 0, 0,
	95, 96, 97, 98, 99, 100, 0, 0, 101, 102,
	86, 87, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 93, 91, 81, 82, 103, 0, 83,
	84, 85, 105, 0, 0, 0, 107, 312, 0, 313,
	80, 108, 110, 89, 90, 92, 94, 104, 106, 0,
	0, 0, 0, 79, 0, 0, 0, 0, 95, 96,
	97, 98, 99, 100, 0, 0, 101, 102, 86, 87,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 76, 77, 0,
	78, 93, 91, 81, 82, 103, 0, 83, 84, 85,
	105, 0, 0, 0, 107, 0, 0, 0, 80, 108,
	110, 89, 90, 92, 94, 104, 106, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 95, 96, 97, 98,
	99, 100, 0, 0, 101, 102, 86, 87, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 93,
	91, 81, 82, 103, 0, 83, 84, 85, 105, 0,
	0, 0, 107, 497, 0, 0, 80, 108, 110, 89,
	90, 92, 94, 104, 106, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 95, 96, 97, 98, 99, 100,
	0, 0, 101, 102, 86, 87, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 93, 91, 81,
	82, 103, 0, 83, 84, 85, 105, 0, 0, 0,
	107, 478, 0, 0, 80, 108, 110, 89, 90, 92,
	94, 104, 106, 0, 0, 0, 0, 79, 0, 0,
	0, 0, 95, 96, 97, 98, 99, 100, 0, 0,
	101, 102, 86, 87, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 467, 78, 93, 91, 81, 82, 103,
	0, 83, 84, 85, 105, 0, 0, 0, 107, 0,
	0, 0, 80, 108, 110, 89, 90, 92, 94, 104,
	106, 0, 0, 0, 0, 79, 0, 0, 0, 0,
	95, 96, 97, 98, 99, 100, 0, 0, 101, 102,
	86, 87, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 460, 78, 93, 91, 81, 82, 103, 0, 83,
	84, 85, 105, 0, 0, 0, 107, 0, 0, 0,
	80, 108, 110, 89, 90, 92, 94, 104, 106, 0,
	0, 0, 0, 79, 0, 0, 0, 0, 95, 96,
	97, 98, 99, 100, 0, 0, 101, 102, 86, 87,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 93, 91, 81, 82, 103, 0, 83, 84, 85,
	105, 0, 455, 0, 107, 0, 0, 0, 80, 108,
	110, 89, 90, 92, 94, 104, 106, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 95, 96, 97, 98,
	99, 100, 0, 0, 101, 102, 86, 87, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 93,
	91, 81, 82, 103, 0, 83, 84, 85, 105, 0,
	0, 0, 107, 432, 0, 0, 80, 108, 110, 89,
	90, 92, 94, 104, 106, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 95, 96, 97, 98, 99, 100,
	0, 0, 101, 102, 86, 87, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 93, 91, 81,
	82, 103, 0, 83, 84, 85, 105, 0, 405, 0,
	107, 0, 0, 0, 80, 108, 110, 89, 90, 92,
	94, 104, 106, 0, 0, 0, 0, 79, 0, 0,
	0, 0, 95, 96, 97, 98, 99, 100, 0, 0,
	101, 102, 86, 87, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 93, 91, 81, 82, 103,
	0, 83, 84, 85, 105, 0, 403, 0, 107, 0,
	0, 0, 80, 108, 110, 89, 90, 92, 94, 104,
	106, 0, 0, 0, 0, 79, 0, 0, 0, 0,
	95, 96, 97, 98, 99, 100, 0, 0, 101, 102,
	86, 87, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 93, 91, 81, 82, 103, 0, 83,
	84, 85, 105, 0, 0, 0, 107, 0, 350, 0,
	80, 108, 110, 89, 90, 92, 94, 104, 106, 0,
	0, 0, 0, 79, 0, 0, 0, 0, 95, 96,
	97, 98, 99, 100, 0, 0, 101, 102, 86, 87,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 93, 91, 81, 82, 103, 0, 83, 84, 85,
	105, 0, 345, 0, 107, 0, 0, 0, 80, 108,
	110, 89, 90, 92, 94, 104, 106, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 95, 96, 97, 98,
	99, 100, 0, 0, 101, 102, 86, 87, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 93,
	91, 81, 82, 103, 0, 83, 84, 85, 105, 0,
	341, 0, 107, 0, 0, 0, 80, 108, 110, 89,
	90, 92, 94, 104, 106, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 95, 96, 97, 98, 99, 100,
	0, 0, 101, 102, 86, 87, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 93, 91, 81,
	82, 103, 0, 83, 84, 85, 105, 0, 333, 0,
	107, 0, 0, 0, 80, 108, 110, 89, 90, 92,
	94, 104, 106, 0, 0, 0, 0, 79, 0, 0,
	0, 0, 95, 96, 97, 98, 99, 100, 0, 0,
	101, 102, 86, 87, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 93, 91, 81, 82, 103,
	0, 83, 84, 85, 105, 0, 0, 0, 107, 325,
	0, 0, 80, 108, 110, 89, 90, 92, 94, 104,
	106, 0, 0, 0, 0, 79, 0, 0, 0, 0,
	95, 96, 97, 98, 99, 100, 0, 0, 101, 102,
	86, 87, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 93, 91, 81, 82, 103, 0, 83,
	84, 85, 105, 0, 0, 0, 107, 311, 0, 0,
	80, 108, 110, 89, 90, 92, 94, 104, 106, 0,
	0, 0, 0, 79, 0, 0, 0, 0, 95, 96,
	97, 98, 99, 100, 0, 0, 101, 102, 86, 87,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 310,
	78, 93, 91, 81, 82, 103, 0, 83, 84, 85,
	105, 0, 0, 0, 107, 0, 0, 0, 80, 108,
	110, 89, 90, 92, 94, 104, 106, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 95, 96, 97, 98,
	99, 100, 0, 0, 101, 102, 86, 87, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 93,
	91, 81, 82, 103, 0, 83, 84, 85, 105, 0,
	0, 0, 107, 304, 0, 0, 80, 108, 110, 89,
	90, 92, 94, 104, 106, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 95, 96, 97, 98, 99, 100,
	0, 0, 101, 102, 86, 87, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 93, 91, 81,
	82, 103, 0, 83, 84, 85, 105, 0, 0, 0,
	107, 0, 278, 0, 80, 108, 110, 89, 90, 92,
	94, 104, 106, 0, 0, 0, 0, 79, 0, 0,
	0, 0, 95, 96, 97, 98, 99, 100, 0, 0,
	101, 102, 86, 87, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 265, 78, 93, 91, 81, 82, 103,
	0, 83, 84, 85, 105, 0, 0, 0, 107, 0,
	0, 0, 80, 108, 110, 89, 90, 92, 94, 104,
	106, 0, 0, 0, 0, 79, 0, 0, 0, 0,
	95, 96, 97, 98, 99, 100, 0, 0, 101, 102,
	86, 87, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 93, 91, 81, 82, 103, 0, 83,
	84, 85, 105, 0, 0, 0, 107, 229, 0, 0,
	80, 108, 110, 89, 90, 92, 94, 104, 106, 0,
	0, 0, 0, 79, 0, 0, 0, 0, 95, 96,
	97, 98, 99, 100, 0, 0, 101, 102, 86, 87,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 93, 91, 81, 82, 103, 0, 83, 84, 85,
	105, 0, 211, 0, 107, 0, 0, 0, 80, 108,
	110, 89, 90, 92, 94, 104, 106, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 95, 96, 97, 98,
	99, 100, 0, 0, 101, 102, 86, 87, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 93,
	91, 81, 82, 103, 0, 83, 84, 85, 105, 0,
	201, 0, 107, 0, 0, 0, 80, 108, 110, 89,
	90, 92, 94, 104, 106, 0, 0, 0, 0, 79,
	0, 0, 0, 0, 95, 96, 97, 98, 99, 100,
	0, 0, 101, 102, 86, 87, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 78, 93, 91, 81,
	82, 103, 0, 83, 84, 85, 105, 0, 0, 0,
	107, 0, 0, 0, 80, 108, 110, 89, 90, 92,
	94, 104, 106, 0, 0, 0, 0, 79, 0, 0,
	0, 0, 95, 96, 97, 98, 99, 100, 0, 0,
	101, 102, 86, 87, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 78, 93, 91, 81, 82, 103,
	0, 83, 84, 85, 105, 0, 0, 0, 107, 0,
	0, 0, 244, 108, 110, 89, 90, 92, 94, 104,
	106, 0, 0, 0, 0, 79, 0, 0, 0, 0,
	95, 96, 97, 98, 99, 100, 0, 0, 101, 102,
	86, 87, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 78, 93, 91, 81, 82, 103, 0, 83,
	84, 85, 105, 0, 0, 0, 107, 0, 0, 0,
	243, 108, 110, 89, 90, 92, 94, 104, 106, 0,
	0, 0, 0, 79, 0, 0, 0, 0, 95, 96,
	97, 98, 99, 100, 0, 0, 101, 102, 86, 87,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 109,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	78, 93, 91, 81, 82, 103, 0, 83, 84, 85,
	105, 0, 0, 0, 216, 0, 0, 0, 80, 108,
	110, 89, 90, 92, 94, 104, 106, 0, 0, 0,
	0, 79, 0, 0, 0, 0, 95, 96, 97, 98,
	99, 100, 0, 0, 101, 102, 86, 87, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 93,
	91, 81, 82, 103, 0, 83, 84, 85, 105, 257,
	36, 38, 214, 0, 64, 0, 80, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 50, 39,
	40, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 110, 89, 90, 92, 94, 104, 106,
	0, 0, 0, 0, 79, 0, 134, 66, 54, 0,
	48, 56, 55, 258, 135, 65, 0, 101, 102, 86,
	87, 88, 0, 59, 0, 61, 259, 0, 0, 62,
	109, 53, 0, 45, 253, 0, 0, 0, 43, 0,
	60, 78, 93, 91, 81, 82, 103, 0, 83, 84,
	85, 105, 257, 36, 38, 107, 0, 64, 0, 80,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 39, 40, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	117, 36, 38, 0, 0, 64, 0, 57, 0, 134,
	66, 54, 0, 48, 56, 55, 258, 135, 65, 50,
	39, 40, 41, 0, 0, 0, 59, 0, 61, 259,
	0, 0, 62, 0, 53, 0, 45, 0, 0, 0,
	0, 43, 0, 60, 0, 0, 0, 0, 66, 54,
	0, 48, 56, 55, 52, 0, 65, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 61, 63, 0, 0,
	62, 0, 112, 0, 45, 0, 115, 0, 0, 43,
	0, 60, 46, 36, 38, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 39, 40, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 36, 38, 0, 0, 64, 0, 0, 0, 0,
	66, 54, 0, 48, 56, 55, 52, 0, 65, 50,
	39, 40, 41, 0, 0, 0, 59, 0, 61, 63,
	0, 0, 62, 0, 53, 0, 45, 0, 0, 0,
	0, 43, 371, 60, 0, 0, 0, 0, 66, 54,
	0, 48, 56, 55, 52, 0, 65, 0, 0, 0,
	0, 0, 0, 0, 59, 0, 61, 63, 0, 0,
	62, 0, 53, 0, 45, 0, 0, 0, 0, 43,
	338, 60, 46, 36, 38, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 39, 40, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 36, 38, 0, 0, 64, 0, 0, 0, 0,
	66, 54, 0, 48, 56, 55, 52, 0, 65, 50,
	39, 40, 41, 0, 0, 0, 59, 0, 61, 63,
	0, 0, 62, 0, 53, 0, 45, 0, 279, 0,
	0, 43, 0, 60, 0, 0, 0, 0, 66, 54,
	0, 48, 56, 55, 52, 0, 65, 0, 0, 218,
	0, 0, 0, 0, 59, 0, 61, 63, 0, 0,
	62, 0, 53, 0, 45, 46, 36, 38, 0, 43,
	64, 60, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 39, 40, 41, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 46, 36, 38, 0, 0, 64, 0,
	0, 0, 0, 66, 54, 0, 48, 56, 55, 52,
	0, 65, 50, 39, 40, 41, 0, 0, 0, 59,
	0, 61, 63, 0, 0, 62, 0, 53, 0, 45,
	0, 207, 0, 0, 43, 0, 60, 0, 0, 0,
	0, 66, 54, 0, 48, 56, 55, 52, 0, 65,
	0, 0, 198, 0, 0, 0, 0, 59, 0, 61,
	63, 0, 0, 62, 0, 53, 0, 45, 46, 36,
	38, 0, 43, 64, 60, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 39, 40,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 46, 36, 38, 0,
	0, 64, 0, 0, 0, 0, 66, 54, 0, 48,
	56, 55, 52, 0, 65, 50, 39, 40, 41, 0,
	0, 0, 59, 0, 61, 63, 0, 0, 62, 0,
	53, 0, 45, 0, 0, 0, 0, 43, 0, 60,
	0, 0, 0, 0, 66, 54, 0, 48, 56, 55,
	52, 0, 65, 0, 0, 0, 0, 0, 0, 0,
	59, 0, 61, 63, 0, 0, 62, 0, 406, 0,
	45, 46, 36, 38, 0, 43, 64, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	50, 39, 40, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	36, 38, 0, 0, 64, 0, 0, 0, 0, 66,
	54, 0, 48, 56, 55, 52, 0, 65, 50, 39,
	40, 41, 0, 0, 0, 59, 0, 61, 63, 0,
	0, 62, 0, 348, 0, 45, 0, 0, 0, 0,
	43, 0, 60, 0, 0, 0, 0, 66, 54, 0,
	48, 56, 55, 52, 0, 65, 0, 0, 0, 0,
	0, 0, 0, 59, 0, 61, 63, 0, 0, 62,
	0, 346, 0, 45, 46, 36, 38, 0, 43, 64,
	60, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 50, 39, 40, 41, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 123, 36, 38, 0, 0, 64, 0, 0,
	0, 0, 66, 54, 0, 48, 56, 55, 52, 0,
	65, 50, 39, 40, 41, 0, 0, 0, 59, 0,
	61, 63, 0, 0, 62, 0, 276, 0, 45, 0,
	0, 0, 0, 43, 0, 60, 0, 0, 0, 0,
	66, 54, 0, 48, 56, 55, 52, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 59, 0, 61, 63,
	0, 0, 62, 0, 53, 0, 45, 121, 36, 38,
	0, 43, 64, 60, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 50, 39, 40, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	110, 89, 90, 92, 94, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 66, 54, 0, 48, 56,
	55, 52, 0, 65, 101, 102, 86, 87, 88, 0,
	0, 59, 0, 61, 63, 0, 0, 62, 0, 53,
	0, 45, 0, 0, 0, 0, 43, 0, 60, 93,
	91, 81, 82, 103, 0, 83, 84, 85, 105, 0,
	0, 0, 107, 0, 0, 0, 80, 108, 110, 89,
	90, 92, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 86, 87, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 91, 81,
	82, 103, 0, 83, 84, 85, 105, 0, 0, 0,
	107, 0, 0, 0, 80, 108,
}

var yyPact = [...]int16{
	-60, -1000, -1000, 12, -60, -1000, -67, -67, -1000, -1000,
	-1000, -1000, -1000, -1000, 3794, 3794, 432, 378, -1000, -1000,
	-1000, -1000, -1000, -1000, 1396, -1000, -1000, -1000, 3794, 3366,
	290, 3794, 282, 4133, 4058, -35, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -56, 214, 3794, 147, -1000, 174, -1000,
	171, -1000, -17, -67, 3794, 167, 166, 431, 70, 3794,
	3794, 3794, 3794, 3794, 212, 161, 157, -1000, 12, -67,
	-1000, 46, 2892, 2892, 277, 320, 3794, 3794, 3794, 3794,
	429, 3794, 3794, 3794, 3794, 3794, 3794, 3794, 3794, 3794,
	3794, 3794, 3794, 3794, 3794, 3794, 3794, 3794, 3794, 3794,
	3794, -1000, -1000, 3794, 3794, 3794, 3794, 3794, 3719, 3794,
	3794, 2824, -60, 145, 916, 3681, 64, 147, -60, 2756,
	-67, 155, 3164, 150, 3096, 3606, -20, 3794, -67, 39,
	-1000, 214, 214, -9, 214, 274, -41, 2688, 3794, 3794,
	214, -67, 214, 3794, 3257, 3794, 3794, 71, -1000, 3794,
	3794, -67, 18, 18, 18, -35, 3028, -35, 2960, 416,
	149, 3235, 501, -1000, -60, 3794, -60, 2892, 2892, 2620,
	661, -1000, 65, 65, 206, 206, 206, 2892, 206, 206,
	552, 552, 552, 552, 552, 552, 2892, 2892, 2892, 2892,
	2892, 2892, 65, 4154, 206, 4222, 151, 847, 3794, 3257,
	206, -60, 253, -67, 3794, -67, -60, 4020, 2552, 3568,
	252, -67, 333, 3794, 3794, 3794, 3794, 777, 3794, -1000,
	-39, -67, 427, 22, 22, 214, 22, -67, -20, -1000,
	142, 2484, 43, 3794, 3, -52, 2416, 2348, 1328, 3794,
	46, 46, 3794, 424, 423, 135, 401, 60, -1000, -1000,
	214, -1000, 416, -1000, 2280, 38, 214, 147, -27, 3328,
	10, 422, 250, 2212, 249, 3794, 118, -1000, -1000, 3486,
	1259, 248, -1000, 2144, 420, 246, -60, 2076, 3945, 3907,
	2008, 354, 328, -2, -1000, -1000, 307, 12, 138, 134,
	127, 85, -1000, 3448, 1190, -67, -53, -67, 3794, -1000,
	-29, 417, 96, -1000, -1000, -1000, -52, 214, 245, -67,
	3794, -1000, -1000, 3794, 46, 2892, -35, -1000, -1000, 192,
	332, -67, 22, 91, 392, -1000, -1000, 39, 214, -1000,
	3794, 35, -1000, -60, -1000, 3257, -1000, 1121, -1000, -1000,
	-1000, -60, -1000, -1000, 244, -60, -60, 1940, -60, 1872,
	3832, 279, -15, -1000, -1000, 306, 3794, 239, -1000, -1000,
	-60, 305, 90, -1000, 89, -1000, 74, -1000, 66, -1000,
	1052, -1000, -1000, -67, -1000, -39, 214, -42, 214, -1000,
	238, -3, -1000, 3794, 2892, 1804, 272, 22, 214, 192,
	32, 416, 192, 208, -30, 984, 3794, 237, -1000, 235,
	-1000, 234, 233, -60, 232, -60, -60, 1736, 268, -60,
	230, -1000, -1000, -60, 1668, 49, -1000, -1000, -60, -1000,
	-1000, -1000, -1000, -1000, 229, 22, 228, -67, 22, -1000,
	-67, 1600, -1000, -60, 81, 22, 265, 192, -1000, -1000,
	264, 192, 20, 214, -1000, 3794, 1532, -1000, -1000, -1000,
	-1000, 224, -1000, 223, 221, -60, -60, 217, -1000, -1000,
	-60, -60, -1000, -1000, -1000, 412, 3794, 3794, 209, -1000,
	-67, -60, 263, -60, 262, 192, -3, 1464, -1000, -1000,
	-1000, -1000, 205, 204, 347, -1000, -1000, 214, -52, 2892,
	-1000, 214, 201, -60, 199, -60, 259, -1000, -1000, 341,
	256, 22, 194, 22, -1000, 185, -1000, 184, -60, 255,
	-60, -1000, -1000, -1000, 181, -60, 178, -1000, 152, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 0, 476, 7, 393, 473, 471, 470, 468, 467,
	465, 464, 463, 459, 455, 10, 9, 454, 452, 12,
	8, 103, 94, 449, 448, 447, 444, 371, 15, 443,
	6, 3, 11, 441, 4, 440, 385, 439, 224, 2,
	438, 14, 437, 413, 412, 280, 1, 345, 5,
}

var yyR1 = [...]int8{
	0, 42, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 10, 10, 10, 10, 9, 9, 9, 9, 8,
	8, 8, 8, 4, 4, 4, 5, 7, 7, 6,
	6, 11, 11, 11, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 17, 18, 18, 18, 18,
	18, 19, 20, 13, 14, 14, 14, 14, 14, 15,
	15, 16, 27, 27, 34, 34, 34, 35, 35, 35,
	28, 28, 29, 29, 30, 31, 32, 32, 33, 33,
	21, 21, 21, 21, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 25, 25, 25, 26, 26,
	26, 26, 26, 26, 26, 23, 23, 23, 23, 23,
	23, 24, 24, 24, 24, 36, 36, 36, 36, 36,
	36, 36, 37, 37, 38, 38, 39, 39, 39, 40,
	40, 40, 40, 40, 40, 41, 43, 43, 44, 44,
	44, 45, 45, 47, 47, 48, 46, 46, 46, 46,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 3, 0, 1, 1, 1,
	2, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 5, 6, 5, 6, 5, 6, 5, 13,
	12, 9, 8, 1, 1, 1, 4, 3, 3, 3,
	3, 5, 7, 5, 4, 7, 5, 6, 7, 7,
	8, 7, 8, 8, 9, 6, 0, 1, 1, 2,
	2, 4, 3, 7, 0, 1, 1, 2, 2, 4,
	4, 3, 1, 4, 0, 1, 3, 0, 1, 4,
	0, 1, 1, 1, 1, 2, 1, 4, 1, 4,
	0, 1, 4, 4, 1, 1, 1, 1, 1, 1,
	1, 5, 3, 3, 1, 2, 5, 7, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 3, 3, 3, 5, 4, 5, 4, 4,
	4, 1, 4, 1, 4, 1, 6, 10, 5, 3,
	2, 4, 4, 6, 3, 3, 4, 4, 2, 2,
	2, 2, 4, 2, 4, 8, 9, 10, 9, 10,
	11, 4, 6, 8, 7, 1, 3, 2, 2, 5,
	2, 6, 2, 5, 2, 3, 0, 3, 6, 6,
	5, 5, 6, 5, 5, 1, 0, 1, 2, 1,
	1, 0, 1, 1, 2, 1, 0, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -42, -1, -43, -2, -44, 80, -47, -48, 86,
	-3, -4, 38, 39, 10, 12, 28, -11, -12, -8,
	-13, -17, -10, -9, -22, -5, -7, -6, 13, 15,
	29, 45, 46, 49, 50, -41, 5, -26, 6, 24,
	25, 26, -23, 83, -38, 78, 4, -40, 55, -25,
	23, -24, 58, 76, 53, 57, 56, 11, -21, 68,
	85, 70, 74, 71, 9, 60, 52, -43, -44, -47,
	-48, -21, -22, -22, 4, 14, 61, 62, 64, 27,
	82, 67, 68, 71, 72, 73, 42, 43, 44, 17,
	18, 66, 19, 65, 20, 32, 33, 34, 35, 36,
	37, 40, 41, 69, 21, 74, 22, 78, 83, 53,
	16, -22, 76, -27, -22, 80, -4, 4, 76, -22,
	76, 4, -22, 4, -22, 83, 84, -45, -47, -36,
	4, 71, -38, 58, 51, 59, 83, -22, 78, 78,
	78, 76, 83, -45, -22, 78, 78, -27, 4, 61,
	62, 81, -22, -22, -22, -41, -22, -41, -22, 78,
	4, 78, 78, -3, 76, 13, 76, -22, -22, -22,
	-22, 4, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -21, -22, 63, -22,
	-22, 76, -1, -47, 16, 81, 76, 80, -22, 80,
	-1, 76, -45, 78, 78, 78, 78, -22, 63, -38,
	-21, 76, 82, -36, -36, 83, -36, 76, 84, 79,
	-21, -22, -36, -45, -36, -39, -22, -22, -22, 62,
	-21, -21, -45, 82, 82, -28, -32, -29, -30, -33,
	4, -31, 78, 79, -22, -36, -38, 4, 58, 71,
	-36, 54, -1, -22, -1, 63, 8, 79, 84, 63,
	-22, -1, 77, -22, -45, -1, 76, -22, 80, 80,
	-22, 77, -45, -18, -20, -19, 48, 47, -21, -21,
	-21, -21, 84, 63, -22, 81, -46, -47, -45, 4,
	-36, -45, 8, 79, 79, 79, -39, 84, -46, 81,
	63, 79, 79, 81, -21, -22, -41, 4, 4, 79,
	8, 81, -36, -28, -32, 79, 79, -36, 83, 79,
	81, 4, 77, 76, 77, -22, 79, -22, 84, 84,
	77, 76, 4, 77, -1, 76, 76, -22, 76, -22,
	80, 30, -14, -16, -15, 48, 47, -45, -19, -20,
	63, -3, 8, 79, 8, 79, 8, 79, 8, 79,
	-22, 84, 84, -47, 84, -21, 84, -37, 4, 79,
	-46, -36, 77, -45, -22, -22, -34, -36, 78, 79,
	-36, -45, 79, 8, -36, -22, 81, -1, 84, -1,
	77, -1, -1, 76, -1, 76, 76, -22, 4, 76,
	-45, -15, -16, 63, -22, -21, 77, -1, 63, 79,
	79, 79, 79, 84, -46, -36, -45, 81, -36, 77,
	76, -22, 79, 76, -35, -36, -34, 79, -30, -31,
	-34, 79, -36, 84, 79, 81, -22, 77, 77, 77,
	77, -1, 77, -1, -1, 76, 76, -1, 77, -1,
	63, 63, -1, 77, 77, -45, -45, 63, -1, 79,
	81, 76, -34, 76, -34, 79, -36, -22, 79, 77,
	77, 77, -1, -1, 77, -1, -1, 4, -39, -22,
	77, -45, -1, 76, -1, 76, -34, 79, 77, 77,
	31, -36, -46, -36, 77, -1, 77, -1, 76, 31,
	76, 77, 77, 77, -1, 76, -1, 77, -1, 77,
	77,
}

var yyDef = [...]int16{
	196, -2, 1, -2, 196, 197, 200, 199, 203, 205,
	4, 7, 8, 9, 90, 0, 0, 13, 14, 15,
	16, 17, 18, 19, -2, 33, 34, 35, 0, 90,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 98,
	99, 100, 104, 201, 0, 0, 195, 141, 0, 143,
	0, 145, 0, 201, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 3, -2, 198,
	204, 10, 91, 11, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 130, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 196, 0, 91, 0, 0, -2, 196, 0,
	201, 195, 0, 195, 0, 0, -2, 90, 202, 0,
	175, 0, 0, 0, 0, 0, 0, 0, 90, 0,
	0, 201, 0, 186, 150, 0, 0, 0, 72, 90,
	90, 201, 158, 159, 160, -2, 0, -2, 0, 80,
	0, 0, 0, 5, 196, 0, 196, 37, 39, 0,
	102, 103, 109, 110, 111, 112, 113, 114, 115, 116,
	117, 118, 119, 120, 121, 122, 123, 124, 125, 126,
	127, 128, 131, 132, 133, 134, 0, 0, 0, 149,
	154, 196, 0, 199, 0, 201, 196, 0, 0, 0,
	0, 201, 56, 90, 90, 90, 90, 0, 0, 185,
	206, 201, 0, 177, 178, 0, 180, 201, 184, 108,
	0, 0, 0, 186, 0, 206, 0, 0, 0, 90,
	38, 40, 0, 0, 0, 0, 82, 81, 86, 83,
	84, 88, 80, 155, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 140, 0,
	0, 0, 44, 0, 0, 0, 196, 0, 0, 0,
	0, 0, 64, 201, 57, 58, 0, -2, 0, 0,
	0, 0, 139, 0, 0, -2, 0, 208, 90, 176,
	0, 0, 0, 136, 142, 144, 206, 0, 0, -2,
	0, 151, 152, 0, 36, 92, -2, -2, -2, 74,
	0, 201, 85, 0, 82, 156, 157, 178, 0, 171,
	0, 0, 12, 196, 43, 101, 137, 0, 193, 194,
	41, 196, 73, 46, 0, 196, 196, 0, 196, 0,
	0, 0, 201, 65, 66, 0, 90, 0, 59, 60,
	196, 0, 0, -2, 0, -2, 0, -2, 0, -2,
	0, 190, 191, -2, 106, 206, 0, 201, 0, 135,
	0, 0, 148, 0, 187, 0, 0, 75, 77, 74,
	0, 0, 74, 0, 0, 0, 0, 0, 192, 0,
	47, 0, 0, 196, 0, 196, 196, 0, 0, 196,
	0, 67, 68, 196, 91, 0, 55, 62, 196, -2,
	-2, -2, -2, 189, 0, 179, 0, 201, 182, 146,
	201, 0, 153, 196, 0, 78, 0, 74, 87, 89,
	0, 74, 0, 0, 172, 0, 0, 42, 45, 48,
	49, 0, 51, 0, 0, 196, 196, 0, 63, 71,
	196, 196, 61, 107, 181, 0, 186, 0, 0, 76,
	201, 196, 0, 196, 0, 74, 179, 0, 174, 50,
	52, 53, 0, 0, 32, 69, 70, 0, 206, 188,
	165, 0, 0, 196, 0, 196, 0, 173, 54, 31,
	0, 183, 0, 79, 166, 0, 168, 0, 196, 0,
	196, 147, 167, 169, 0, 196, 0, 170, 0, 30,
	29,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 85, 3, 3, 3, 73, 74, 3,
	78, 79, 71, 67, 81, 68, 82, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 80,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 83, 3, 84, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:120
		{
			yyVAL.compstmt = nil
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:124
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:130
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:139
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:155
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:156
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:158
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:163
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:168
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:173
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:178
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:183
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:188
		{
			yyVAL.stmt = yyDollar[1].stmt_try
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:189
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:191
		{
			yyVAL.stmt = yyDollar[1].stmt_go
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = yyDollar[1].stmt_defer
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:201
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:211
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].expr.Position())
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:216
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:223
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:228
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:233
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr.Position())
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:238
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:245
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:250
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:255
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:260
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:267
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:268
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:272
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:279
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:283
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:300
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:304
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:321
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:326
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:331
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:341
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:346
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:357
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:362
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:367
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:372
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:377
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:382
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:387
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:392
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:397
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:404
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:411
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:415
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:419
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:423
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:428
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:439
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:446
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 63:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:452
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:461
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:465
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:469
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:473
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:479
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:490
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:495
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:502
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:508
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:512
		{
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:517
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:521
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:525
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:529
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:533
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:537
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:545
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:548
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:551
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:552
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:556
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:562
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:568
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:572
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:578
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:582
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:587
		{
			yyVAL.exprs = nil
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:591
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:595
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:602
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:610
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:612
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:616
		{
			yyVAL.expr = yyDollar[1].expr_unary
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:618
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:623
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:628
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:633
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:638
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:643
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:648
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:653
		{
			yyVAL.expr = yyDollar[1].expr_func
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:657
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:662
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 107:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:667
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:672
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:677
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:682
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:687
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:692
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:697
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:702
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:707
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:712
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:717
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:722
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:727
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:732
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:737
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:742
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:747
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:752
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:757
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:762
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:767
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:772
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:777
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:782
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:787
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:792
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:797
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:802
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:807
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:812
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:817
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:822
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:827
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:832
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:837
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:842
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:846
		{
			yyVAL.expr = yyDollar[1].expr_dbg
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:848
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:857
		{
			yyVAL.expr = yyDollar[1].expr_make
		}
	case 146:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:859
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 147:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:865
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:871
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:876
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:881
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:886
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:891
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:896
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:901
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:908
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:913
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:918
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 158:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:925
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:930
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:935
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:940
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:945
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:950
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:955
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:962
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 166:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:967
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 167:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:972
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 168:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:978
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 169:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:983
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 170:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:988
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 171:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:996
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 172:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1001
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 173:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:1006
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 174:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:1011
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 175:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1018
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1022
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1031
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1040
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1050
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1054
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1063
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1069
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1073
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1083
		{
			yyVAL.slice_count = 1
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1087
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 186:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1094
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1098
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1102
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1112
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1116
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1120
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1124
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1128
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1132
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1138
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
