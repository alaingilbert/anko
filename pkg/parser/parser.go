// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         *ast.StmtsStmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             *ast.SwitchStmt
	stmt_switch_cases_helper      *ast.SwitchStmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_body              *ast.SelectBodyStmt
	stmt_select_cases             *ast.SelectBodyStmt
	stmt_select_cases_helper      *ast.SelectBodyStmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	stmt_expr                     *ast.ExprStmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_literals                 ast.Expr
	expr_unary                    ast.Expr
	expr_binary                   ast.Expr
	expr_member_or_ident          ast.Expr
	expr_call                     *ast.CallExpr
	expr_anon_call                *ast.AnonCallExpr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	opt_exprs                     []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents2  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	expr_map_content              *ast.MapExpr
	expr_map_content_helper       *ast.MapExpr
	expr_map_key_value            []ast.Expr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57405
	yyEofCode   = 57344
	ANDAND      = 57364
	ANDEQ       = 57378
	ARRAY       = 57349
	BREAK       = 57380
	CASE        = 57389
	CATCH       = 57372
	CHAN        = 57393
	CLOSE       = 57399
	CONTINUE    = 57381
	DBG         = 57402
	DEFAULT     = 57390
	DEFER       = 57392
	DELETE      = 57398
	DIVEQ       = 57377
	ELSE        = 57356
	EQEQ        = 57359
	FALSE       = 57367
	FINALLY     = 57373
	FOR         = 57357
	FUNC        = 57351
	GE          = 57361
	GO          = 57391
	IDENT       = 57346
	IF          = 57355
	IN          = 57358
	LE          = 57362
	LEN         = 57397
	MAKE        = 57394
	MAP         = 57400
	MINUSEQ     = 57375
	MINUSMINUS  = 57383
	MODULE      = 57370
	MULEQ       = 57376
	NEQ         = 57360
	NEW         = 57365
	NIL         = 57368
	NILCOALESCE = 57369
	NUMBER      = 57347
	OPCHAN      = 57395
	OREQ        = 57379
	OROR        = 57363
	PLUSEQ      = 57374
	PLUSPLUS    = 57382
	POW         = 57384
	RETURN      = 57352
	SELECT      = 57388
	SHIFTLEFT   = 57385
	SHIFTRIGHT  = 57386
	STRING      = 57348
	STRUCT      = 57401
	SWITCH      = 57387
	THROW       = 57354
	TRUE        = 57366
	TRY         = 57371
	TYPE        = 57396
	UNARY       = 57404
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57403
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -218
)

var (
	yyPrec = map[int]int{
		'=':         0,
		PLUSEQ:      0,
		MINUSEQ:     0,
		MULEQ:       0,
		DIVEQ:       0,
		ANDEQ:       0,
		OREQ:        0,
		':':         1,
		OPCHAN:      2,
		'?':         3,
		NILCOALESCE: 3,
		OROR:        4,
		ANDAND:      5,
		EQEQ:        6,
		NEQ:         6,
		'<':         6,
		LE:          6,
		'>':         6,
		GE:          6,
		'+':         7,
		'-':         7,
		'|':         7,
		'^':         7,
		'*':         8,
		'/':         8,
		'%':         8,
		SHIFTLEFT:   8,
		SHIFTRIGHT:  8,
		'&':         8,
		IN:          9,
		PLUSPLUS:    10,
		MINUSMINUS:  10,
		UNARY:       11,
	}

	yyXLAT = map[int]int{
		91:    0,   // '[' (302x)
		42:    1,   // '*' (299x)
		40:    2,   // '(' (285x)
		125:   3,   // '}' (274x)
		38:    4,   // '&' (271x)
		45:    5,   // '-' (271x)
		123:   6,   // '{' (271x)
		57395: 7,   // OPCHAN (271x)
		10:    8,   // '\n' (240x)
		59:    9,   // ';' (187x)
		57389: 10,  // CASE (185x)
		57390: 11,  // DEFAULT (185x)
		57346: 12,  // IDENT (176x)
		46:    13,  // '.' (165x)
		57344: 14,  // $end (162x)
		57400: 15,  // MAP (160x)
		58:    16,  // ':' (158x)
		44:    17,  // ',' (153x)
		41:    18,  // ')' (151x)
		57358: 19,  // IN (142x)
		37:    20,  // '%' (140x)
		43:    21,  // '+' (140x)
		47:    22,  // '/' (140x)
		60:    23,  // '<' (140x)
		62:    24,  // '>' (140x)
		63:    25,  // '?' (140x)
		124:   26,  // '|' (140x)
		57364: 27,  // ANDAND (140x)
		57378: 28,  // ANDEQ (140x)
		57377: 29,  // DIVEQ (140x)
		57359: 30,  // EQEQ (140x)
		57361: 31,  // GE (140x)
		57362: 32,  // LE (140x)
		57375: 33,  // MINUSEQ (140x)
		57383: 34,  // MINUSMINUS (140x)
		57376: 35,  // MULEQ (140x)
		57360: 36,  // NEQ (140x)
		57369: 37,  // NILCOALESCE (140x)
		57379: 38,  // OREQ (140x)
		57363: 39,  // OROR (140x)
		57374: 40,  // PLUSEQ (140x)
		57382: 41,  // PLUSPLUS (140x)
		57384: 42,  // POW (140x)
		57385: 43,  // SHIFTLEFT (140x)
		57386: 44,  // SHIFTRIGHT (140x)
		33:    45,  // '!' (131x)
		94:    46,  // '^' (131x)
		57399: 47,  // CLOSE (131x)
		57402: 48,  // DBG (131x)
		57398: 49,  // DELETE (131x)
		57367: 50,  // FALSE (131x)
		57351: 51,  // FUNC (131x)
		57397: 52,  // LEN (131x)
		57394: 53,  // MAKE (131x)
		57365: 54,  // NEW (131x)
		57368: 55,  // NIL (131x)
		57347: 56,  // NUMBER (131x)
		57348: 57,  // STRING (131x)
		57366: 58,  // TRUE (131x)
		93:    59,  // ']' (129x)
		57441: 60,  // slice_count (111x)
		57350: 61,  // VARARG (104x)
		61:    62,  // '=' (103x)
		57403: 63,  // WALRUS (100x)
		57408: 64,  // expr (83x)
		57409: 65,  // expr_anon_call (83x)
		57410: 66,  // expr_binary (83x)
		57411: 67,  // expr_call (83x)
		57412: 68,  // expr_dbg (83x)
		57413: 69,  // expr_func (83x)
		57414: 70,  // expr_ident (83x)
		57416: 71,  // expr_literals (83x)
		57417: 72,  // expr_make (83x)
		57418: 73,  // expr_map (83x)
		57422: 74,  // expr_member_or_ident (83x)
		57423: 75,  // expr_slice (83x)
		57424: 76,  // expr_unary (83x)
		57432: 77,  // newline (53x)
		57433: 78,  // newlines (49x)
		57355: 79,  // IF (44x)
		57353: 80,  // VAR (44x)
		57380: 81,  // BREAK (43x)
		57381: 82,  // CONTINUE (43x)
		57392: 83,  // DEFER (43x)
		57357: 84,  // FOR (43x)
		57391: 85,  // GO (43x)
		57370: 86,  // MODULE (43x)
		57352: 87,  // RETURN (43x)
		57388: 88,  // SELECT (43x)
		57387: 89,  // SWITCH (43x)
		57354: 90,  // THROW (43x)
		57371: 91,  // TRY (43x)
		57393: 92,  // CHAN (37x)
		57401: 93,  // STRUCT (37x)
		57440: 94,  // opt_term (33x)
		57466: 95,  // term (33x)
		57407: 96,  // compstmt (32x)
		57467: 97,  // type_data (28x)
		57439: 98,  // opt_newlines (20x)
		57406: 99,  // comma_newlines (15x)
		57425: 100, // exprs (13x)
		57419: 101, // expr_map_content (8x)
		57435: 102, // opt_exprs (6x)
		57436: 103, // opt_func_return_expr_idents (6x)
		57356: 104, // ELSE (4x)
		57449: 105, // stmt_lets (4x)
		57462: 106, // stmt_typed_lets (4x)
		57463: 107, // stmt_var (4x)
		57464: 108, // stmt_var_or_lets (4x)
		57429: 109, // func_expr_typed_ident (3x)
		57431: 110, // func_expr_untyped_ident (3x)
		57434: 111, // opt_comma_newlines (3x)
		57443: 112, // stmt (3x)
		57444: 113, // stmt_defer (3x)
		57445: 114, // stmt_expr (3x)
		57446: 115, // stmt_for (3x)
		57447: 116, // stmt_go (3x)
		57448: 117, // stmt_if (3x)
		57450: 118, // stmt_select (3x)
		57456: 119, // stmt_switch (3x)
		57461: 120, // stmt_try (3x)
		57415: 121, // expr_idents (2x)
		57421: 122, // expr_map_key_value (2x)
		57373: 123, // FINALLY (2x)
		57426: 124, // func_expr_idents (2x)
		57427: 125, // func_expr_idents_last_untyped (2x)
		57428: 126, // func_expr_idents_not_empty (2x)
		57430: 127, // func_expr_typed_idents (2x)
		57452: 128, // stmt_select_case (2x)
		57455: 129, // stmt_select_default (2x)
		57457: 130, // stmt_switch_case (2x)
		57460: 131, // stmt_switch_default (2x)
		57372: 132, // CATCH (1x)
		57420: 133, // expr_map_content_helper (1x)
		57437: 134, // opt_func_return_expr_idents1 (1x)
		57438: 135, // opt_func_return_expr_idents2 (1x)
		57442: 136, // start (1x)
		57451: 137, // stmt_select_body (1x)
		57453: 138, // stmt_select_cases (1x)
		57454: 139, // stmt_select_cases_helper (1x)
		57458: 140, // stmt_switch_cases (1x)
		57459: 141, // stmt_switch_cases_helper (1x)
		57465: 142, // stmts (1x)
		57396: 143, // TYPE (1x)
		57468: 144, // type_data_struct (1x)
		57405: 145, // $default (0x)
		57349: 146, // ARRAY (0x)
		57345: 147, // error (0x)
		57404: 148, // UNARY (0x)
	}

	yySymNames = []string{
		"'['",
		"'*'",
		"'('",
		"'}'",
		"'&'",
		"'-'",
		"'{'",
		"OPCHAN",
		"'\\n'",
		"';'",
		"CASE",
		"DEFAULT",
		"IDENT",
		"'.'",
		"$end",
		"MAP",
		"':'",
		"','",
		"')'",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"'!'",
		"'^'",
		"CLOSE",
		"DBG",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"']'",
		"slice_count",
		"VARARG",
		"'='",
		"WALRUS",
		"expr",
		"expr_anon_call",
		"expr_binary",
		"expr_call",
		"expr_dbg",
		"expr_func",
		"expr_ident",
		"expr_literals",
		"expr_make",
		"expr_map",
		"expr_member_or_ident",
		"expr_slice",
		"expr_unary",
		"newline",
		"newlines",
		"IF",
		"VAR",
		"BREAK",
		"CONTINUE",
		"DEFER",
		"FOR",
		"GO",
		"MODULE",
		"RETURN",
		"SELECT",
		"SWITCH",
		"THROW",
		"TRY",
		"CHAN",
		"STRUCT",
		"opt_term",
		"term",
		"compstmt",
		"type_data",
		"opt_newlines",
		"comma_newlines",
		"exprs",
		"expr_map_content",
		"opt_exprs",
		"opt_func_return_expr_idents",
		"ELSE",
		"stmt_lets",
		"stmt_typed_lets",
		"stmt_var",
		"stmt_var_or_lets",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"opt_comma_newlines",
		"stmt",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_if",
		"stmt_select",
		"stmt_switch",
		"stmt_try",
		"expr_idents",
		"expr_map_key_value",
		"FINALLY",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"stmt_select_case",
		"stmt_select_default",
		"stmt_switch_case",
		"stmt_switch_default",
		"CATCH",
		"expr_map_content_helper",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"start",
		"stmt_select_body",
		"stmt_select_cases",
		"stmt_select_cases_helper",
		"stmt_switch_cases",
		"stmt_switch_cases_helper",
		"stmts",
		"TYPE",
		"type_data_struct",
		"$default",
		"ARRAY",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {136, 1},
		2:   {96, 1},
		3:   {96, 3},
		4:   {142, 1},
		5:   {142, 3},
		6:   {112, 1},
		7:   {112, 1},
		8:   {112, 1},
		9:   {112, 2},
		10:  {112, 2},
		11:  {112, 5},
		12:  {112, 1},
		13:  {112, 1},
		14:  {112, 1},
		15:  {112, 1},
		16:  {112, 1},
		17:  {112, 1},
		18:  {112, 1},
		19:  {112, 1},
		20:  {114, 1},
		21:  {116, 2},
		22:  {116, 2},
		23:  {113, 2},
		24:  {113, 2},
		25:  {120, 13},
		26:  {120, 12},
		27:  {120, 9},
		28:  {120, 8},
		29:  {108, 1},
		30:  {108, 1},
		31:  {108, 1},
		32:  {107, 4},
		33:  {106, 3},
		34:  {106, 3},
		35:  {105, 3},
		36:  {105, 3},
		37:  {117, 5},
		38:  {117, 7},
		39:  {117, 5},
		40:  {115, 4},
		41:  {115, 7},
		42:  {115, 5},
		43:  {115, 6},
		44:  {115, 7},
		45:  {115, 7},
		46:  {115, 8},
		47:  {115, 7},
		48:  {115, 8},
		49:  {115, 8},
		50:  {115, 9},
		51:  {118, 6},
		52:  {138, 0},
		53:  {138, 1},
		54:  {139, 1},
		55:  {139, 2},
		56:  {139, 2},
		57:  {137, 1},
		58:  {137, 1},
		59:  {128, 4},
		60:  {129, 3},
		61:  {119, 7},
		62:  {140, 0},
		63:  {140, 1},
		64:  {141, 1},
		65:  {141, 1},
		66:  {141, 2},
		67:  {141, 2},
		68:  {130, 4},
		69:  {130, 4},
		70:  {131, 3},
		71:  {121, 1},
		72:  {121, 3},
		73:  {103, 0},
		74:  {103, 1},
		75:  {103, 3},
		76:  {134, 0},
		77:  {134, 1},
		78:  {135, 1},
		79:  {135, 3},
		80:  {124, 0},
		81:  {124, 1},
		82:  {126, 1},
		83:  {126, 1},
		84:  {110, 1},
		85:  {109, 2},
		86:  {125, 1},
		87:  {125, 3},
		88:  {127, 1},
		89:  {127, 3},
		90:  {102, 0},
		91:  {102, 1},
		92:  {100, 1},
		93:  {100, 3},
		94:  {100, 3},
		95:  {64, 1},
		96:  {64, 1},
		97:  {64, 1},
		98:  {64, 5},
		99:  {64, 3},
		100: {64, 1},
		101: {64, 2},
		102: {64, 5},
		103: {64, 7},
		104: {64, 3},
		105: {64, 1},
		106: {64, 1},
		107: {64, 1},
		108: {64, 4},
		109: {64, 4},
		110: {64, 1},
		111: {64, 4},
		112: {64, 1},
		113: {64, 4},
		114: {64, 1},
		115: {64, 1},
		116: {64, 3},
		117: {64, 2},
		118: {64, 4},
		119: {64, 4},
		120: {64, 6},
		121: {64, 3},
		122: {68, 3},
		123: {68, 4},
		124: {68, 4},
		125: {71, 1},
		126: {71, 1},
		127: {71, 1},
		128: {71, 1},
		129: {71, 1},
		130: {74, 1},
		131: {74, 3},
		132: {67, 5},
		133: {67, 4},
		134: {65, 5},
		135: {65, 4},
		136: {76, 2},
		137: {76, 2},
		138: {76, 2},
		139: {76, 2},
		140: {76, 4},
		141: {76, 2},
		142: {76, 4},
		143: {66, 3},
		144: {66, 3},
		145: {66, 3},
		146: {66, 3},
		147: {66, 3},
		148: {66, 3},
		149: {66, 3},
		150: {66, 3},
		151: {66, 3},
		152: {66, 3},
		153: {66, 3},
		154: {66, 3},
		155: {66, 3},
		156: {66, 3},
		157: {66, 3},
		158: {66, 3},
		159: {66, 3},
		160: {66, 3},
		161: {66, 3},
		162: {66, 3},
		163: {66, 2},
		164: {66, 2},
		165: {66, 3},
		166: {66, 3},
		167: {66, 3},
		168: {66, 3},
		169: {69, 8},
		170: {69, 9},
		171: {69, 10},
		172: {69, 9},
		173: {69, 10},
		174: {69, 11},
		175: {72, 4},
		176: {72, 6},
		177: {72, 8},
		178: {72, 7},
		179: {97, 1},
		180: {97, 3},
		181: {97, 2},
		182: {97, 2},
		183: {97, 5},
		184: {97, 2},
		185: {97, 6},
		186: {144, 2},
		187: {144, 4},
		188: {60, 2},
		189: {60, 3},
		190: {73, 4},
		191: {73, 8},
		192: {73, 3},
		193: {101, 1},
		194: {101, 3},
		195: {133, 1},
		196: {133, 3},
		197: {122, 3},
		198: {75, 6},
		199: {75, 5},
		200: {75, 5},
		201: {75, 6},
		202: {75, 5},
		203: {75, 5},
		204: {70, 1},
		205: {94, 0},
		206: {94, 1},
		207: {95, 2},
		208: {95, 1},
		209: {95, 1},
		210: {98, 0},
		211: {98, 1},
		212: {78, 1},
		213: {78, 2},
		214: {77, 1},
		215: {99, 2},
		216: {111, 1},
		217: {111, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [507][]uint16{
		// 0
		{13, 13, 13, 4: 13, 13, 13, 13, 226, 223, 12: 13, 14: 13, 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 220, 136: 219},
		{14: 218},
		{14: 217},
		{262, 289, 264, 216, 288, 285, 293, 275, 216, 10: 216, 216, 284, 14: 216, 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 245, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 79: 254, 252, 232, 233, 247, 255, 246, 236, 234, 256, 257, 235, 248, 100: 253, 105: 251, 250, 249, 231, 112: 230, 243, 244, 238, 242, 237, 241, 240, 239, 142: 229},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 10: 12, 12, 12, 14: 12, 12, 45: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 79: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		// 5
		{9, 9, 9, 9, 9, 9, 9, 9, 226, 10: 9, 9, 9, 14: 9, 9, 45: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77: 225, 228, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{10, 10, 10, 10, 10, 10, 10, 10, 226, 10: 10, 10, 10, 14: 10, 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 77: 227, 79: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 10: 6, 6, 6, 14: 6, 6, 17: 6, 45: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 79: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 10: 4, 4, 4, 14: 4, 4, 17: 4, 45: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 79: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 10: 5, 5, 5, 14: 5, 5, 17: 5, 45: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 79: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		// 10
		{11, 11, 11, 11, 11, 11, 11, 11, 226, 10: 11, 11, 11, 14: 11, 11, 45: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 77: 227, 79: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{3: 13, 8: 226, 223, 13, 13, 14: 13, 77: 225, 224, 94: 722, 723},
		{3: 214, 8: 214, 214, 214, 214, 14: 214},
		{3: 212, 8: 212, 212, 212, 212, 14: 212, 16: 212},
		{3: 211, 8: 211, 211, 211, 211, 14: 211, 16: 211},
		// 15
		{3: 210, 8: 210, 210, 210, 210, 14: 210, 16: 210},
		{262, 289, 264, 128, 288, 285, 293, 275, 128, 128, 128, 128, 284, 14: 128, 292, 128, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 366, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 100: 544, 102: 721},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 720, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{12: 716},
		{3: 206, 8: 206, 206, 206, 206, 14: 206, 16: 206, 104: 707},
		// 20
		{3: 205, 8: 205, 205, 205, 205, 14: 205, 16: 205},
		{3: 204, 8: 204, 204, 204, 204, 14: 204, 16: 204},
		{3: 203, 8: 203, 203, 203, 203, 14: 203, 16: 203},
		{3: 202, 8: 202, 202, 202, 202, 14: 202, 16: 202},
		{3: 201, 8: 201, 201, 201, 201, 14: 201, 16: 201},
		// 25
		{3: 200, 8: 200, 200, 200, 200, 14: 200, 16: 200},
		{3: 199, 8: 199, 199, 199, 199, 14: 199, 16: 199},
		{308, 315, 312, 198, 337, 314, 7: 309, 198, 198, 198, 198, 13: 311, 198, 16: 198, 126, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 62: 665, 664},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 704, 706, 265, 705, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 704, 703, 265, 702, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		// 30
		{6: 683},
		{3: 189, 8: 189, 189, 189, 189, 14: 189, 16: 189},
		{3: 188, 8: 188, 188, 188, 188, 14: 188, 16: 188},
		{3: 187, 8: 187, 187, 187, 187, 14: 187, 16: 187},
		{12: 680, 121: 679},
		// 35
		{17: 302, 62: 676, 675, 99: 369},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 671, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 614, 275, 9: 616, 12: 618, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 613, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 80: 252, 100: 253, 105: 251, 250, 249, 617, 121: 615},
		{6: 595},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 574, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		// 40
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 13: 123, 123, 16: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 59: 123, 61: 123, 123, 123},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 13: 122, 122, 16: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 59: 122, 61: 122, 122, 122},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 13: 121, 121, 16: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 59: 121, 61: 121, 121, 121},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 13: 118, 118, 16: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 59: 118, 61: 118, 118, 118},
		{8, 8, 8, 4: 8, 8, 8, 8, 226, 12: 8, 15: 8, 17: 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 569, 77: 225, 296, 98: 570},
		// 45
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 568},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 566, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 13: 113, 113, 16: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 59: 113, 61: 113, 113, 113},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 13: 112, 112, 16: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 59: 112, 61: 112, 112, 112},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 13: 111, 111, 16: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 59: 111, 61: 111, 111, 111},
		// 50
		{374, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 13: 88, 88, 16: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 59: 88, 61: 88, 88, 88},
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 13: 108, 108, 16: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 59: 108, 61: 108, 108, 108},
		{2: 563},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 13: 106, 106, 16: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 59: 106, 61: 106, 106, 106},
		{2: 560},
		// 55
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 13: 104, 104, 16: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 59: 104, 61: 104, 104, 104},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 13: 103, 103, 16: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 59: 103, 61: 103, 103, 103},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 559, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{2: 556},
		{2: 550},
		// 60
		{2: 528},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 13: 93, 93, 16: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 59: 93, 61: 93, 93, 93},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 13: 92, 92, 16: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 59: 92, 61: 92, 92, 92},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 13: 91, 91, 16: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 59: 91, 61: 91, 91, 91},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 13: 90, 90, 16: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 59: 90, 61: 90, 90, 90},
		// 65
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 13: 89, 89, 16: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 59: 89, 61: 89, 89, 89},
		{14, 14, 522, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13: 14, 14, 16: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 59: 14, 61: 14, 14, 14},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 521, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 520, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 519, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		// 70
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 515, 267, 265, 266, 271, 261, 516, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 511, 267, 265, 266, 271, 261, 512, 259, 273, 274, 258, 269, 260},
		{2: 453, 12: 454},
		{2: 439},
		{402, 6: 401},
		// 75
		{8, 8, 8, 8, 8, 8, 8, 8, 226, 12: 8, 15: 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 77: 225, 296, 98: 295, 101: 294},
		{3: 400},
		{262, 289, 264, 25, 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 297, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 122: 299, 133: 298},
		{7, 7, 7, 7, 7, 7, 7, 7, 226, 10: 7, 7, 7, 15: 7, 17: 7, 45: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 77: 227, 92: 7, 7},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 16: 339, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		// 80
		{3: 8, 8: 226, 17: 302, 77: 225, 296, 98: 303, 301, 111: 300},
		{3: 23, 8: 23, 17: 23},
		{3: 24},
		{262, 289, 264, 2, 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 297, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 122: 305},
		{8, 8, 8, 8, 8, 8, 8, 8, 226, 12: 8, 15: 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 77: 225, 296, 92: 8, 8, 98: 304},
		// 85
		{3: 1, 59: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 12: 3, 15: 3, 45: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 92: 3, 3},
		{3: 22, 8: 22, 17: 22},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 397, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 396, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		// 90
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 388, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 387, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 386, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 385, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{12: 384},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 18: 128, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 366, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 100: 365, 102: 367},
		// 95
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 364, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 363, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 362, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 361, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 360, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		// 100
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 359, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 358, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 357, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 356, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 355, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		// 105
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 354, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 353, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 352, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 351, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 350, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		// 110
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 349, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 348, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 347, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 346, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 345, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		// 115
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 13: 55, 55, 16: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59: 55, 61: 55, 55, 55},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 13: 54, 54, 16: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 59: 54, 61: 54, 54, 54},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 344, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 343, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 342, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		// 120
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 341, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 340, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{308, 315, 312, 21, 337, 314, 7: 309, 21, 13: 311, 17: 21, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{308, 315, 312, 50, 337, 314, 50, 50, 50, 50, 50, 50, 13: 311, 50, 16: 50, 50, 50, 310, 317, 313, 316, 325, 323, 50, 335, 50, 50, 50, 321, 324, 326, 50, 334, 50, 322, 50, 50, 50, 50, 333, 318, 319, 320, 59: 50, 61: 50, 50, 50},
		{308, 51, 312, 51, 51, 51, 51, 51, 51, 51, 51, 51, 13: 311, 51, 16: 51, 51, 51, 310, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 334, 51, 51, 51, 51, 51, 51, 333, 318, 51, 51, 59: 51, 61: 51, 51, 51},
		// 125
		{308, 315, 312, 52, 337, 314, 52, 52, 52, 52, 52, 52, 13: 311, 52, 16: 52, 52, 52, 310, 317, 313, 316, 325, 323, 52, 335, 338, 52, 52, 321, 324, 326, 52, 334, 52, 322, 52, 52, 52, 52, 333, 318, 319, 320, 59: 52, 61: 52, 52, 52},
		{308, 315, 312, 53, 337, 53, 53, 53, 53, 53, 53, 53, 13: 311, 53, 16: 53, 53, 53, 310, 317, 53, 316, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 334, 53, 53, 53, 53, 53, 53, 333, 318, 319, 320, 59: 53, 61: 53, 53, 53},
		{308, 315, 312, 56, 337, 314, 56, 309, 56, 56, 56, 56, 13: 311, 56, 16: 56, 56, 56, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 56, 61: 56, 56, 56},
		{308, 315, 312, 57, 337, 314, 57, 309, 57, 57, 57, 57, 13: 311, 57, 16: 57, 57, 57, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 57, 61: 57, 57, 57},
		{308, 315, 312, 58, 337, 314, 58, 309, 58, 58, 58, 58, 13: 311, 58, 16: 58, 58, 58, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 58, 61: 58, 58, 58},
		// 130
		{308, 315, 312, 59, 337, 314, 59, 309, 59, 59, 59, 59, 13: 311, 59, 16: 59, 59, 59, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 59, 61: 59, 59, 59},
		{308, 315, 312, 60, 337, 314, 60, 309, 60, 60, 60, 60, 13: 311, 60, 16: 60, 60, 60, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 60, 61: 60, 60, 60},
		{308, 315, 312, 61, 337, 314, 61, 309, 61, 61, 61, 61, 13: 311, 61, 16: 61, 61, 61, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 61, 61: 61, 61, 61},
		{308, 315, 312, 62, 337, 314, 62, 62, 62, 62, 62, 62, 13: 311, 62, 16: 62, 62, 62, 310, 317, 313, 316, 62, 62, 62, 335, 62, 62, 62, 62, 62, 62, 62, 334, 62, 62, 62, 62, 62, 62, 333, 318, 319, 320, 59: 62, 61: 62, 62, 62},
		{308, 315, 312, 63, 337, 314, 63, 63, 63, 63, 63, 63, 13: 311, 63, 16: 63, 63, 63, 310, 317, 313, 316, 63, 63, 63, 335, 63, 63, 63, 63, 63, 63, 63, 334, 63, 63, 63, 63, 63, 63, 333, 318, 319, 320, 59: 63, 61: 63, 63, 63},
		// 135
		{308, 315, 312, 64, 337, 314, 64, 64, 64, 64, 64, 64, 13: 311, 64, 16: 64, 64, 64, 310, 317, 313, 316, 64, 64, 64, 335, 64, 64, 64, 64, 64, 64, 64, 334, 64, 64, 64, 64, 64, 64, 333, 318, 319, 320, 59: 64, 61: 64, 64, 64},
		{308, 315, 312, 65, 337, 314, 65, 65, 65, 65, 65, 65, 13: 311, 65, 16: 65, 65, 65, 310, 317, 313, 316, 65, 65, 65, 335, 65, 65, 65, 65, 65, 65, 65, 334, 65, 65, 65, 65, 65, 65, 333, 318, 319, 320, 59: 65, 61: 65, 65, 65},
		{308, 315, 312, 66, 337, 314, 66, 66, 66, 66, 66, 66, 13: 311, 66, 16: 66, 66, 66, 310, 317, 313, 316, 66, 66, 66, 335, 66, 66, 66, 66, 66, 66, 66, 334, 66, 66, 66, 66, 66, 66, 333, 318, 319, 320, 59: 66, 61: 66, 66, 66},
		{308, 315, 312, 67, 337, 314, 67, 67, 67, 67, 67, 67, 13: 311, 67, 16: 67, 67, 67, 310, 317, 313, 316, 67, 67, 67, 335, 67, 67, 67, 67, 67, 67, 67, 334, 67, 67, 67, 67, 67, 67, 333, 318, 319, 320, 59: 67, 61: 67, 67, 67},
		{308, 68, 312, 68, 68, 68, 68, 68, 68, 68, 68, 68, 13: 311, 68, 16: 68, 68, 68, 310, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 334, 68, 68, 68, 68, 68, 68, 333, 318, 68, 68, 59: 68, 61: 68, 68, 68},
		// 140
		{308, 69, 312, 69, 69, 69, 69, 69, 69, 69, 69, 69, 13: 311, 69, 16: 69, 69, 69, 310, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 334, 69, 69, 69, 69, 69, 69, 333, 318, 69, 69, 59: 69, 61: 69, 69, 69},
		{308, 315, 312, 70, 337, 314, 70, 309, 70, 70, 70, 70, 13: 311, 70, 16: 70, 70, 70, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 70, 61: 70, 70, 70},
		{308, 71, 312, 71, 71, 71, 71, 71, 71, 71, 71, 71, 13: 311, 71, 16: 71, 71, 71, 310, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 334, 71, 71, 71, 71, 71, 71, 333, 318, 71, 71, 59: 71, 61: 71, 71, 71},
		{308, 72, 312, 72, 72, 72, 72, 72, 72, 72, 72, 72, 13: 311, 72, 16: 72, 72, 72, 310, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 334, 72, 72, 72, 72, 72, 72, 333, 318, 72, 72, 59: 72, 61: 72, 72, 72},
		{308, 73, 312, 73, 73, 73, 73, 73, 73, 73, 73, 73, 13: 311, 73, 16: 73, 73, 73, 310, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 334, 73, 73, 73, 73, 73, 73, 333, 318, 73, 73, 59: 73, 61: 73, 73, 73},
		// 145
		{308, 315, 312, 74, 337, 74, 74, 74, 74, 74, 74, 74, 13: 311, 74, 16: 74, 74, 74, 310, 317, 74, 316, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 334, 74, 74, 74, 74, 74, 74, 333, 318, 319, 320, 59: 74, 61: 74, 74, 74},
		{308, 315, 312, 75, 337, 75, 75, 75, 75, 75, 75, 75, 13: 311, 75, 16: 75, 75, 75, 310, 317, 75, 316, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 334, 75, 75, 75, 75, 75, 75, 333, 318, 319, 320, 59: 75, 61: 75, 75, 75},
		{17: 302, 127, 61: 370, 99: 369},
		{308, 315, 312, 126, 337, 314, 7: 309, 126, 126, 126, 126, 13: 311, 126, 16: 126, 126, 126, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 126, 61: 126},
		{18: 368},
		// 150
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 13: 83, 83, 16: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 59: 83, 61: 83, 83, 83},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 372, 267, 265, 266, 271, 261, 373, 259, 273, 274, 258, 269, 260},
		{18: 371},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 13: 84, 84, 16: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 59: 84, 61: 84, 84, 84},
		{308, 315, 312, 125, 337, 314, 7: 309, 125, 125, 125, 125, 13: 311, 125, 16: 125, 125, 125, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 125, 61: 125, 125, 125},
		// 155
		{374, 88, 88, 124, 88, 88, 7: 88, 124, 124, 124, 124, 13: 88, 124, 16: 124, 124, 124, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 59: 124, 61: 124, 124, 124},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 376, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 375, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 16: 380, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 379},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 377, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 378},
		// 160
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 13: 18, 18, 16: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 59: 18, 61: 18, 18, 18},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 13: 110, 110, 16: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 59: 110, 61: 110, 110, 110},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 382, 263, 64: 381, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 383},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 13: 19, 19, 16: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 59: 19, 61: 19, 19, 19},
		// 165
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 13: 20, 20, 16: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59: 20, 61: 20, 20, 20},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 13: 87, 87, 16: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 59: 87, 61: 87, 87, 87},
		{308, 97, 312, 97, 97, 97, 97, 97, 97, 97, 97, 97, 13: 311, 97, 16: 97, 97, 97, 310, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 334, 97, 97, 97, 97, 97, 97, 333, 318, 97, 97, 59: 97, 61: 97, 97, 97},
		{308, 315, 312, 102, 337, 314, 102, 309, 102, 102, 102, 102, 13: 311, 102, 16: 102, 102, 102, 310, 317, 313, 316, 325, 323, 306, 335, 338, 102, 102, 321, 324, 326, 102, 334, 102, 322, 307, 102, 336, 102, 333, 318, 319, 320, 59: 102, 61: 102, 102, 102},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 16: 392, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 391},
		// 170
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 389, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 390},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 13: 15, 15, 16: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 59: 15, 61: 15, 15, 15},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 13: 109, 109, 16: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 59: 109, 61: 109, 109, 109},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 394, 263, 64: 393, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		// 175
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 59: 395},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13: 16, 16, 16: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 59: 16, 61: 16, 16, 16},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13: 17, 17, 16: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 59: 17, 61: 17, 17, 17},
		{308, 315, 312, 119, 337, 314, 119, 119, 119, 119, 119, 119, 13: 311, 119, 16: 119, 119, 119, 310, 317, 313, 316, 325, 323, 306, 335, 338, 119, 119, 321, 324, 326, 119, 334, 119, 322, 307, 119, 336, 119, 333, 318, 319, 320, 59: 119, 61: 119, 119, 119},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 16: 398, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		// 180
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 399, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{308, 315, 312, 120, 337, 314, 120, 309, 120, 120, 120, 120, 13: 311, 120, 16: 120, 120, 120, 310, 317, 313, 316, 325, 323, 306, 335, 338, 120, 120, 321, 324, 326, 120, 334, 120, 322, 307, 120, 336, 120, 333, 318, 319, 320, 59: 120, 61: 120, 120, 120},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 13: 26, 26, 16: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 59: 26, 61: 26, 26, 26},
		{8, 8, 8, 8, 8, 8, 8, 8, 226, 12: 8, 15: 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 77: 225, 296, 98: 295, 101: 437},
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 404},
		// 185
		{3: 39, 6: 39, 8: 39, 13: 39, 17: 39, 39, 59: 39},
		{13: 418, 59: 432},
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 431},
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 430},
		{426},
		// 190
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 425},
		{6: 413},
		{59: 411},
		{410, 30, 12: 30, 15: 30, 60: 412, 92: 30, 30},
		{29, 29, 12: 29, 15: 29, 92: 29, 29},
		// 195
		{8: 226, 12: 8, 77: 225, 296, 98: 414},
		{12: 416, 144: 415},
		{3: 8, 8: 226, 17: 302, 77: 225, 296, 98: 420, 421},
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 417},
		{3: 32, 8: 32, 13: 418, 17: 32},
		// 200
		{12: 419},
		{3: 38, 6: 38, 8: 38, 13: 38, 17: 38, 38, 59: 38},
		{3: 424},
		{12: 422},
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 423},
		// 205
		{3: 31, 8: 31, 13: 418, 17: 31},
		{3: 33, 6: 33, 8: 33, 13: 33, 17: 33, 33, 59: 33},
		{3: 34, 6: 34, 8: 34, 13: 418, 17: 34, 34, 59: 34},
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 427},
		{13: 418, 59: 428},
		// 210
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 429},
		{3: 35, 6: 35, 8: 35, 13: 418, 17: 35, 35, 59: 35},
		{3: 36, 6: 36, 8: 36, 13: 418, 17: 36, 36, 59: 36},
		{3: 37, 6: 37, 8: 37, 13: 418, 17: 37, 37, 59: 37},
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 433},
		// 215
		{6: 434, 13: 418},
		{8, 8, 8, 8, 8, 8, 8, 8, 226, 12: 8, 15: 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 77: 225, 296, 98: 295, 101: 435},
		{3: 436},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13: 27, 27, 16: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 59: 27, 61: 27, 27, 27},
		{3: 438},
		// 220
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 13: 28, 28, 16: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 59: 28, 61: 28, 28, 28},
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 440, 143: 441},
		{13: 418, 17: 447, 446},
		{12: 442},
		{17: 443},
		// 225
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 444, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 18: 445, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 13: 40, 40, 16: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 59: 40, 61: 40, 40, 40},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 13: 43, 43, 16: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 59: 43, 61: 43, 43, 43},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 448, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		// 230
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 17: 450, 449, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 13: 42, 42, 16: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 59: 42, 61: 42, 42, 42},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 451, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 18: 452, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 13: 41, 41, 16: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 59: 41, 61: 41, 41, 41},
		// 235
		{12: 459, 18: 138, 109: 461, 460, 124: 493, 492, 456, 458},
		{2: 455},
		{12: 459, 18: 138, 109: 461, 460, 124: 462, 457, 456, 458},
		{17: 302, 137, 99: 489},
		{17: 136, 136, 61: 477},
		// 240
		{17: 135, 135},
		{410, 405, 12: 403, 15: 407, 17: 134, 134, 60: 406, 134, 92: 408, 409, 97: 476},
		{17: 132, 132, 61: 132},
		{17: 130, 130},
		{18: 463},
		// 245
		{410, 405, 465, 6: 145, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 464, 103: 466},
		{6: 144, 13: 418},
		{410, 405, 12: 403, 15: 407, 18: 142, 60: 406, 92: 408, 409, 97: 472, 134: 470, 471},
		{6: 467},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 468},
		// 250
		{3: 469},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 13: 46, 46, 16: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 59: 46, 61: 46, 46, 46},
		{18: 475},
		{17: 302, 141, 99: 473},
		{13: 418, 17: 140, 140},
		// 255
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 474},
		{13: 418, 17: 139, 139},
		{6: 143},
		{13: 418, 17: 133, 133},
		{410, 405, 12: 403, 15: 407, 18: 478, 60: 406, 92: 408, 409, 97: 479},
		// 260
		{410, 405, 465, 6: 145, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 464, 103: 485},
		{13: 418, 18: 480},
		{410, 405, 465, 6: 145, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 464, 103: 481},
		{6: 482},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 483},
		// 265
		{3: 484},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 13: 44, 44, 16: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 59: 44, 61: 44, 44, 44},
		{6: 486},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 487},
		{3: 488},
		// 270
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 13: 45, 45, 16: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 59: 45, 61: 45, 45, 45},
		{12: 459, 109: 491, 490},
		{17: 131, 131, 61: 131},
		{17: 129, 129},
		{17: 136, 136, 61: 499},
		// 275
		{18: 494},
		{410, 405, 465, 6: 145, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 464, 103: 495},
		{6: 496},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 497},
		{3: 498},
		// 280
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 13: 49, 49, 16: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 59: 49, 61: 49, 49, 49},
		{410, 405, 12: 403, 15: 407, 18: 500, 60: 406, 92: 408, 409, 97: 501},
		{410, 405, 465, 6: 145, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 464, 103: 507},
		{13: 418, 18: 502},
		{410, 405, 465, 6: 145, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 464, 103: 503},
		// 285
		{6: 504},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 505},
		{3: 506},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 13: 47, 47, 16: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 59: 47, 61: 47, 47, 47},
		{6: 508},
		// 290
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 509},
		{3: 510},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 13: 48, 48, 16: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 59: 48, 61: 48, 48, 48},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 513, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{374, 88, 88, 77, 88, 88, 77, 88, 77, 77, 77, 77, 13: 88, 77, 16: 77, 77, 77, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 59: 77, 61: 77, 77, 77},
		// 295
		{12: 514},
		{87, 87, 87, 76, 87, 87, 76, 87, 76, 76, 76, 76, 13: 87, 76, 16: 76, 76, 76, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 59: 76, 61: 76, 76, 76},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 517, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{374, 88, 88, 79, 88, 88, 79, 88, 79, 79, 79, 79, 13: 88, 79, 16: 79, 79, 79, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 59: 79, 61: 79, 79, 79},
		{12: 518},
		// 300
		{87, 87, 87, 78, 87, 87, 78, 87, 78, 78, 78, 78, 13: 87, 78, 16: 78, 78, 78, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 59: 78, 61: 78, 78, 78},
		{308, 80, 312, 80, 80, 80, 80, 80, 80, 80, 80, 80, 13: 311, 80, 16: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 318, 80, 80, 59: 80, 61: 80, 80, 80},
		{308, 81, 312, 81, 81, 81, 81, 81, 81, 81, 81, 81, 13: 311, 81, 16: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 318, 81, 81, 59: 81, 61: 81, 81, 81},
		{308, 82, 312, 82, 82, 82, 82, 82, 82, 82, 82, 82, 13: 311, 82, 16: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 318, 82, 82, 59: 82, 61: 82, 82, 82},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 18: 128, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 366, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 100: 523, 102: 524},
		// 305
		{17: 302, 127, 61: 526, 99: 369},
		{18: 525},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 13: 85, 85, 16: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 59: 85, 61: 85, 85, 85},
		{18: 527},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 13: 86, 86, 16: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 59: 86, 61: 86, 86, 86},
		// 310
		{262, 534, 264, 4: 288, 285, 293, 275, 12: 533, 15: 535, 18: 531, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 530, 64: 529, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 92: 408, 409, 97: 532},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 18: 549, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 541},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 13: 96, 96, 16: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 59: 96, 61: 96, 96, 96},
		{13: 418, 18: 540},
		// 315
		{14, 14, 522, 4: 14, 14, 7: 14, 13: 39, 18: 39, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{262, 534, 264, 4: 288, 285, 293, 275, 12: 533, 15: 535, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 530, 64: 511, 267, 265, 266, 271, 261, 512, 259, 273, 274, 258, 269, 260, 92: 408, 409, 97: 431},
		{536, 6: 401},
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 537},
		{13: 418, 59: 538},
		// 320
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 539},
		{6: 434, 13: 418, 18: 35},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 13: 94, 94, 16: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 59: 94, 61: 94, 94, 94},
		{6: 542, 13: 418, 18: 36},
		{8, 8, 8, 8, 8, 8, 8, 8, 226, 12: 8, 15: 8, 17: 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 77: 225, 296, 98: 543},
		// 325
		{262, 289, 264, 128, 288, 285, 293, 275, 128, 12: 284, 15: 292, 17: 128, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 366, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 100: 544, 102: 545},
		{3: 127, 8: 127, 127, 127, 127, 14: 127, 16: 127, 302, 59: 127, 99: 369},
		{3: 8, 8: 226, 17: 302, 77: 225, 296, 98: 303, 547, 111: 546},
		{3: 548},
		{3: 2, 59: 2},
		// 330
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 13: 115, 115, 16: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 59: 115, 61: 115, 115, 115},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 13: 95, 95, 16: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 59: 95, 61: 95, 95, 95},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 551, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 17: 553, 552, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 13: 99, 99, 16: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 59: 99, 61: 99, 99, 99},
		// 335
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 554, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 18: 555, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 13: 98, 98, 16: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 59: 98, 61: 98, 98, 98},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 557, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 18: 558, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		// 340
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 13: 100, 100, 16: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 59: 100, 61: 100, 100, 100},
		{308, 315, 312, 101, 337, 314, 101, 309, 101, 101, 101, 101, 13: 311, 101, 16: 101, 101, 101, 310, 317, 313, 316, 325, 323, 306, 335, 338, 101, 101, 321, 324, 326, 101, 334, 101, 322, 307, 101, 336, 101, 333, 318, 319, 320, 59: 101, 61: 101, 101, 101},
		{410, 405, 12: 403, 15: 407, 60: 406, 92: 408, 409, 97: 561},
		{13: 418, 18: 562},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 13: 105, 105, 16: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 59: 105, 61: 105, 105, 105},
		// 345
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 564, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 18: 565, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 13: 107, 107, 16: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 59: 107, 61: 107, 107, 107},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 18: 567, 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 13: 114, 114, 16: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 59: 114, 61: 114, 114, 114},
		// 350
		{6: 542, 13: 418},
		{410, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 30, 117, 117, 30, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 59: 117, 412, 117, 117, 117, 92: 30, 30},
		{262, 289, 264, 4: 288, 285, 293, 275, 128, 12: 284, 15: 292, 17: 128, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 128, 263, 64: 366, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 100: 544, 102: 571},
		{8: 226, 17: 302, 59: 8, 77: 225, 296, 98: 303, 547, 111: 572},
		{59: 573},
		// 355
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 13: 116, 116, 16: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 59: 116, 61: 116, 116, 116},
		{308, 315, 312, 4: 337, 314, 575, 309, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{3: 8, 8: 226, 10: 8, 8, 77: 225, 296, 98: 576},
		{3: 156, 8: 156, 10: 581, 582, 130: 580, 579, 140: 577, 578},
		{3: 8, 8: 226, 77: 225, 296, 98: 593},
		// 360
		{3: 155, 8: 155, 10: 581, 582, 130: 591, 592},
		{3: 154, 8: 154, 10: 154, 154},
		{3: 153, 8: 153, 10: 153, 153},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 128, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 585, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 100: 544, 102: 586},
		{16: 583},
		// 365
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 13, 13, 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 584},
		{3: 148, 8: 148, 10: 148, 148},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 16: 589, 126, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{16: 587},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 13, 13, 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 588},
		// 370
		{3: 149, 8: 149, 10: 149, 149},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 13, 13, 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 590},
		{3: 150, 8: 150, 10: 150, 150},
		{3: 152, 8: 152, 10: 152, 152},
		{3: 151, 8: 151, 10: 151, 151},
		// 375
		{3: 594},
		{3: 157, 8: 157, 157, 157, 157, 14: 157, 16: 157},
		{3: 8, 8: 226, 10: 8, 8, 77: 225, 296, 98: 596},
		{3: 166, 8: 166, 10: 602, 603, 128: 601, 600, 137: 599, 597, 598},
		{3: 8, 8: 226, 77: 225, 296, 98: 611},
		// 380
		{3: 165, 8: 165, 10: 602, 603, 128: 609, 610},
		{3: 164, 8: 164, 10: 164, 164},
		{3: 161, 8: 161, 10: 161, 161},
		{3: 160, 8: 160, 10: 160, 160},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 245, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 79: 254, 252, 232, 233, 247, 255, 246, 236, 234, 256, 257, 235, 248, 100: 253, 105: 251, 250, 249, 231, 112: 606, 243, 244, 238, 242, 237, 241, 240, 239},
		// 385
		{16: 604},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 13, 13, 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 605},
		{3: 158, 8: 158, 10: 158, 158},
		{16: 607},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 13, 13, 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 608},
		// 390
		{3: 159, 8: 159, 10: 159, 159},
		{3: 163, 8: 163, 10: 163, 163},
		{3: 162, 8: 162, 10: 162, 162},
		{3: 612},
		{3: 167, 8: 167, 167, 167, 167, 14: 167, 16: 167},
		// 395
		{308, 315, 312, 4: 337, 314, 666, 309, 13: 311, 17: 126, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320, 62: 665, 664},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 629, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 662, 98: 295, 101: 294},
		{17: 302, 19: 655, 99: 656},
		{262, 289, 264, 4: 288, 285, 293, 275, 9: 638, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 639, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{9: 619},
		// 400
		{14, 14, 522, 4: 14, 14, 14, 14, 13: 14, 17: 147, 19: 147, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 62: 14, 14},
		{262, 289, 264, 4: 288, 285, 293, 275, 9: 620, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 621, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 631, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 632, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{308, 315, 312, 4: 337, 314, 7: 309, 9: 622, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{262, 289, 264, 4: 288, 285, 623, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 624, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		// 405
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 629, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 628, 98: 295, 101: 294},
		{308, 315, 312, 4: 337, 314, 625, 309, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 626},
		{3: 627},
		{3: 168, 8: 168, 168, 168, 168, 14: 168, 16: 168},
		// 410
		{3: 630},
		{10, 10, 10, 10, 10, 10, 10, 10, 226, 12: 10, 15: 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 77: 227, 79: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{3: 169, 8: 169, 169, 169, 169, 14: 169, 16: 169},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 629, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 636, 98: 295, 101: 294},
		{308, 315, 312, 4: 337, 314, 633, 309, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		// 415
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 634},
		{3: 635},
		{3: 170, 8: 170, 170, 170, 170, 14: 170, 16: 170},
		{3: 637},
		{3: 171, 8: 171, 171, 171, 171, 14: 171, 16: 171},
		// 420
		{262, 289, 264, 4: 288, 285, 648, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 649, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{308, 315, 312, 4: 337, 314, 7: 309, 9: 640, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{262, 289, 264, 4: 288, 285, 641, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 642, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 629, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 646, 98: 295, 101: 294},
		{308, 315, 312, 4: 337, 314, 643, 309, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		// 425
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 644},
		{3: 645},
		{3: 172, 8: 172, 172, 172, 172, 14: 172, 16: 172},
		{3: 647},
		{3: 173, 8: 173, 173, 173, 173, 14: 173, 16: 173},
		// 430
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 629, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 653, 98: 295, 101: 294},
		{308, 315, 312, 4: 337, 314, 650, 309, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 651},
		{3: 652},
		{3: 174, 8: 174, 174, 174, 174, 14: 174, 16: 174},
		// 435
		{3: 654},
		{3: 175, 8: 175, 175, 175, 175, 14: 175, 16: 175},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 658, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{12: 657},
		{17: 146, 19: 146, 62: 146},
		// 440
		{308, 315, 312, 4: 337, 314, 659, 309, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 660},
		{3: 661},
		{3: 177, 8: 177, 177, 177, 177, 14: 177, 16: 177},
		{3: 663},
		// 445
		{3: 178, 8: 178, 178, 178, 178, 14: 178, 16: 178},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 670, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 669, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 667},
		{3: 668},
		// 450
		{3: 176, 8: 176, 176, 176, 176, 14: 176, 16: 176},
		{308, 315, 312, 183, 337, 314, 7: 309, 183, 183, 183, 183, 13: 311, 183, 16: 183, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{308, 315, 312, 185, 337, 314, 7: 309, 185, 185, 185, 185, 13: 311, 185, 16: 185, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{308, 315, 312, 4: 337, 314, 672, 309, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 673},
		// 455
		{3: 674},
		{3: 181, 8: 181, 181, 181, 181, 14: 181, 16: 181, 104: 181},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 366, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 100: 678},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 366, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 100: 677},
		{3: 182, 8: 182, 182, 182, 182, 14: 182, 16: 182, 302, 99: 369},
		// 460
		{3: 184, 8: 184, 184, 184, 184, 14: 184, 16: 184, 302, 99: 369},
		{17: 302, 62: 681, 99: 656},
		{17: 147, 62: 147},
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 366, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 100: 682},
		{3: 186, 8: 186, 186, 186, 186, 14: 186, 16: 186, 302, 99: 369},
		// 465
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 684},
		{3: 685},
		{132: 686},
		{6: 688, 12: 687},
		{6: 695},
		// 470
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 689},
		{3: 690},
		{3: 190, 8: 190, 190, 190, 190, 14: 190, 16: 190, 123: 691},
		{6: 692},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 693},
		// 475
		{3: 694},
		{3: 192, 8: 192, 192, 192, 192, 14: 192, 16: 192},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 696},
		{3: 697},
		{3: 191, 8: 191, 191, 191, 191, 14: 191, 16: 191, 123: 698},
		// 480
		{6: 699},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 700},
		{3: 701},
		{3: 193, 8: 193, 193, 193, 193, 14: 193, 16: 193},
		{112, 112, 112, 195, 112, 112, 7: 112, 195, 195, 195, 195, 13: 112, 195, 16: 195, 19: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		// 485
		{111, 111, 111, 194, 111, 111, 7: 111, 194, 194, 194, 194, 13: 111, 194, 16: 194, 19: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		{308, 315, 312, 4: 337, 314, 7: 309, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{112, 112, 112, 197, 112, 112, 7: 112, 197, 197, 197, 197, 13: 112, 197, 16: 197, 19: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		{111, 111, 111, 196, 111, 111, 7: 111, 196, 196, 196, 196, 13: 111, 196, 16: 196, 19: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		{6: 709, 79: 708},
		// 490
		{262, 289, 264, 4: 288, 285, 293, 275, 12: 284, 15: 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 712, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 710},
		{3: 711},
		{3: 179, 8: 179, 179, 179, 179, 14: 179, 16: 179, 104: 179},
		{308, 315, 312, 4: 337, 314, 713, 309, 13: 311, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		// 495
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 714},
		{3: 715},
		{3: 180, 8: 180, 180, 180, 180, 14: 180, 16: 180, 104: 180},
		{6: 717},
		{13, 13, 13, 13, 13, 13, 13, 13, 226, 223, 12: 13, 15: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 225, 224, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 221, 222, 718},
		// 500
		{3: 719},
		{3: 207, 8: 207, 207, 207, 207, 14: 207, 16: 207},
		{308, 315, 312, 208, 337, 314, 7: 309, 208, 208, 208, 208, 13: 311, 208, 16: 208, 19: 310, 317, 313, 316, 325, 323, 306, 335, 338, 331, 330, 321, 324, 326, 328, 334, 329, 322, 307, 332, 336, 327, 333, 318, 319, 320},
		{3: 209, 8: 209, 209, 209, 209, 14: 209, 16: 209},
		{3: 215, 8: 215, 10: 215, 215, 14: 215},
		// 505
		{262, 289, 264, 12, 288, 285, 293, 275, 12, 10: 12, 12, 284, 14: 12, 292, 45: 286, 287, 276, 278, 277, 282, 290, 270, 291, 272, 283, 279, 280, 281, 60: 263, 64: 245, 267, 265, 266, 271, 261, 268, 259, 273, 274, 258, 269, 260, 79: 254, 252, 232, 233, 247, 255, 246, 236, 234, 256, 257, 235, 248, 100: 253, 105: 251, 250, 249, 231, 112: 724, 243, 244, 238, 242, 237, 241, 240, 239},
		{3: 213, 8: 213, 213, 213, 213, 14: 213},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 147

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			yyVAL.compstmt = nil
		}
	case 3:
		{
			yyVAL.compstmt = yyS[yypt-1].stmts
		}
	case 4:
		{
			yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		{
			yyS[yypt-2].stmts.Stmts = append(yyS[yypt-2].stmts.Stmts, yyS[yypt-0].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 6:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_var_or_lets
		}
	case 7:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 8:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 9:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].opt_exprs}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 10:
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 11:
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyS[yypt-3].tok.Lit, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 12:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
			yyVAL.stmt.SetPosition(yyS[yypt-0].stmt_if.Position())
		}
	case 13:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_for
		}
	case 14:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_try
		}
	case 15:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_switch
		}
	case 16:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_select
		}
	case 17:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_go
		}
	case 18:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_defer
		}
	case 19:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_expr
		}
	case 20:
		{
			yyVAL.stmt_expr = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt_expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 21:
		{
			callExpr := yyS[yypt-0].expr_call
			callExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: callExpr}
			yyVAL.stmt_go.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 22:
		{
			anonCallExpr := yyS[yypt-0].expr_anon_call
			anonCallExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: anonCallExpr}
			yyVAL.stmt_go.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 23:
		{
			callExpr := yyS[yypt-0].expr_call
			callExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: callExpr}
			yyVAL.stmt_defer.SetPosition(yyS[yypt-0].expr_call.Position())
		}
	case 24:
		{
			anonCallExpr := yyS[yypt-0].expr_anon_call
			anonCallExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: anonCallExpr}
			yyVAL.stmt_defer.SetPosition(yyS[yypt-0].expr_anon_call.Position())
		}
	case 25:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-10].compstmt, Var: yyS[yypt-7].tok.Lit, Catch: yyS[yypt-5].compstmt, Finally: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-12].tok.Position())
		}
	case 26:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-9].compstmt, Catch: yyS[yypt-5].compstmt, Finally: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-11].tok.Position())
		}
	case 27:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-6].compstmt, Var: yyS[yypt-3].tok.Lit, Catch: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 28:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-5].compstmt, Catch: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 29:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_var
		}
	case 30:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_typed_lets
		}
	case 31:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_lets
		}
	case 32:
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
			yyVAL.stmt_var.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 33:
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyS[yypt-2].expr}, Operator: "=", Rhss: []ast.Expr{yyS[yypt-0].expr}, Typed: true}
		}
	case 34:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
			}
			if len(yyS[yypt-2].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyS[yypt-2].exprs[0].Position())
			}
		}
	case 35:
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyS[yypt-2].expr}, Operator: "=", Rhss: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 36:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
			}
			if len(yyS[yypt-2].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyS[yypt-2].exprs[0].Position())
			}
		}
	case 37:
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 38:
		{
			yyS[yypt-6].stmt_if.(*ast.IfStmt).ElseIf = append(yyS[yypt-6].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].compstmt})
			yyVAL.stmt_if.SetPosition(yyS[yypt-6].stmt_if.Position())
		}
	case 39:
		{
			yyVAL.stmt_if.SetPosition(yyS[yypt-4].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyS[yypt-1].compstmt
			}
		}
	case 40:
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 41:
		{
			if len(yyS[yypt-5].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyS[yypt-5].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyS[yypt-5].expr_idents, Value: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
				yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
			}
		}
	case 42:
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 43:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 44:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 45:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyS[yypt-4].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 46:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 47:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-5].stmt_var_or_lets, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 48:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-6].stmt_var_or_lets, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 49:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-6].stmt_var_or_lets, Expr2: yyS[yypt-4].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 50:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-7].stmt_var_or_lets, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 51:
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyS[yypt-2].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 52:
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 53:
		{
			yyVAL.stmt_select_cases = yyS[yypt-0].stmt_select_cases_helper
		}
	case 54:
		{
			yyVAL.stmt_select_cases_helper = yyS[yypt-0].stmt_select_body
		}
	case 55:
		{
			yyVAL.stmt_select_cases_helper.Cases = append(yyVAL.stmt_select_cases_helper.Cases, yyS[yypt-0].stmt_select_case)
		}
	case 56:
		{
			if yyVAL.stmt_select_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyVAL.stmt_select_cases_helper.Default = yyS[yypt-0].stmt_select_default
		}
	case 57:
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Default: yyS[yypt-0].stmt_select_default}
		}
	case 58:
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt_select_case}}
		}
	case 59:
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 60:
		{
			yyVAL.stmt_select_default = yyS[yypt-0].compstmt
		}
	case 61:
		{
			yyS[yypt-2].stmt_switch_cases.Expr = yyS[yypt-5].expr
			yyVAL.stmt_switch = yyS[yypt-2].stmt_switch_cases
			yyVAL.stmt_switch.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 62:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 63:
		{
			yyVAL.stmt_switch_cases = yyS[yypt-0].stmt_switch_cases_helper
		}
	case 64:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Default: yyS[yypt-0].stmt_switch_default}
		}
	case 65:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt_switch_case}}
		}
	case 66:
		{
			yyS[yypt-1].stmt_switch_cases_helper.Cases = append(yyS[yypt-1].stmt_switch_cases_helper.Cases, yyS[yypt-0].stmt_switch_case)
			yyVAL.stmt_switch_cases_helper = yyS[yypt-1].stmt_switch_cases_helper
		}
	case 67:
		{
			if yyS[yypt-1].stmt_switch_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyS[yypt-1].stmt_switch_cases_helper.Default = yyS[yypt-0].stmt_switch_default
		}
	case 68:
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyS[yypt-2].expr}, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 69:
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].opt_exprs, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 70:
		{
			yyVAL.stmt_switch_default = yyS[yypt-0].compstmt
		}
	case 71:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 72:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].tok.Lit)
		}
	case 73:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 74:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 75:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents1
		}
	case 76:
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 77:
		{
			yyVAL.opt_func_return_expr_idents1 = yyS[yypt-0].opt_func_return_expr_idents2
		}
	case 78:
		{
			yyVAL.opt_func_return_expr_idents2 = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 79:
		{
			yyVAL.opt_func_return_expr_idents2 = append(yyS[yypt-2].opt_func_return_expr_idents2, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 80:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 81:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents_not_empty
		}
	case 82:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_idents_last_untyped
		}
	case 83:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_typed_idents
		}
	case 84:
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 85:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-1].tok.Lit, TypeData: yyS[yypt-0].type_data}
		}
	case 86:
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyS[yypt-0].func_expr_untyped_ident}
		}
	case 87:
		{
			yyVAL.func_expr_idents_last_untyped = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_untyped_ident)
		}
	case 88:
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 89:
		{
			yyVAL.func_expr_typed_idents = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_typed_ident)
		}
	case 90:
		{
			yyVAL.opt_exprs = nil
		}
	case 91:
		{
			yyVAL.opt_exprs = yyS[yypt-0].exprs
		}
	case 92:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 93:
		{
			if len(yyS[yypt-2].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 94:
		{
			if len(yyS[yypt-2].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr_ident)
		}
	case 95:
		{
			yyVAL.expr = yyS[yypt-0].expr_member_or_ident
		}
	case 96:
		{
			yyVAL.expr = yyS[yypt-0].expr_literals
		}
	case 97:
		{
			yyVAL.expr = yyS[yypt-0].expr_unary
		}
	case 98:
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 99:
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 100:
		{
			yyVAL.expr = yyS[yypt-0].expr_func
		}
	case 101:
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 102:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-2].opt_exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 103:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-2].opt_exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-5].type_data, Dimensions: yyS[yypt-6].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 104:
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 105:
		{
			yyVAL.expr = yyS[yypt-0].expr_binary
		}
	case 106:
		{
			yyVAL.expr = yyS[yypt-0].expr_call
		}
	case 107:
		{
			yyVAL.expr = yyS[yypt-0].expr_anon_call
		}
	case 108:
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyS[yypt-3].expr_ident, Index: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].expr_ident.Position())
		}
	case 109:
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyS[yypt-3].expr, Index: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 110:
		{
			yyVAL.expr = yyS[yypt-0].expr_slice
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_slice.Position())
		}
	case 111:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 112:
		{
			yyVAL.expr = yyS[yypt-0].expr_dbg
		}
	case 113:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 114:
		{
			yyVAL.expr = yyS[yypt-0].expr_make
		}
	case 115:
		{
			yyVAL.expr = yyS[yypt-0].expr_map
		}
	case 116:
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 117:
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 118:
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 119:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 120:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 121:
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 122:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 123:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 124:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 125:
		{
			yyVAL.expr_literals = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 126:
		{
			yyVAL.expr_literals = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 127:
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 128:
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 129:
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 130:
		{
			yyVAL.expr_member_or_ident = yyS[yypt-0].expr_ident
		}
	case 131:
		{
			yyVAL.expr_member_or_ident = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr_member_or_ident.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 132:
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyS[yypt-4].tok.Lit, SubExprs: yyS[yypt-2].exprs, VarArg: true}
			yyVAL.expr_call.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 133:
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyS[yypt-3].tok.Lit, SubExprs: yyS[yypt-1].opt_exprs}
			yyVAL.expr_call.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 134:
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyS[yypt-4].expr, SubExprs: yyS[yypt-2].exprs, VarArg: true}
			yyVAL.expr_anon_call.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 135:
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].opt_exprs}
			yyVAL.expr_anon_call.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 136:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 137:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 138:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 139:
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: yyS[yypt-0].expr_ident}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_ident.Position())
		}
	case 140:
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 141:
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyS[yypt-0].expr_ident}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_ident.Position())
		}
	case 142:
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 143:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "+", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 144:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "-", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 145:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "*", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 146:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "/", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 147:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "%", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 148:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "**", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 149:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 150:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">>", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 151:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 152:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "!=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 153:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 154:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 155:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 156:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 157:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "+=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 158:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "-=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 159:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "*=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 160:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "/=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 161:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "&=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 162:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "|=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 163:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "++"}
			yyVAL.expr_binary.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 164:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "--"}
			yyVAL.expr_binary.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 165:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "|", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 166:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "||", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 167:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 168:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 169:
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-5].func_expr_idents, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt}
			yyVAL.expr_func.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 170:
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-6].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 171:
		{
			yyS[yypt-7].func_expr_idents_last_untyped[len(yyS[yypt-7].func_expr_idents_last_untyped)-1].TypeData = yyS[yypt-5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-7].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 172:
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-7].tok.Lit, Params: yyS[yypt-5].func_expr_idents, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt}
			yyVAL.expr_func.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 173:
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-8].tok.Lit, Params: yyS[yypt-6].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 174:
		{
			yyS[yypt-7].func_expr_idents_last_untyped[len(yyS[yypt-7].func_expr_idents_last_untyped)-1].TypeData = yyS[yypt-5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-9].tok.Lit, Params: yyS[yypt-7].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-10].tok.Position())
		}
	case 175:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr_make.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 176:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 177:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 178:
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 179:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 180:
		{
			if yyS[yypt-2].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyS[yypt-2].type_data.Env = append(yyS[yypt-2].type_data.Env, yyS[yypt-2].type_data.Name)
				yyS[yypt-2].type_data.Name = yyS[yypt-0].tok.Lit
			}
		}
	case 181:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 182:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 183:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 184:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 185:
		{
			yyVAL.type_data = yyS[yypt-2].type_data_struct
		}
	case 186:
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].type_data}}
		}
	case 187:
		{
			if yyS[yypt-3].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyS[yypt-1].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyS[yypt-0].type_data)
		}
	case 188:
		{
			yyVAL.slice_count = 1
		}
	case 189:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 190:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 191:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-5].type_data, SubType: yyS[yypt-3].type_data}
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 192:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-1].expr_map_content.Position())
		}
	case 193:
		{
			yyVAL.expr_map_content = &ast.MapExpr{}
		}
	case 194:
		{
			yyVAL.expr_map_content = yyS[yypt-1].expr_map_content_helper
		}
	case 195:
		{
			yyVAL.expr_map_content_helper = &ast.MapExpr{Keys: []ast.Expr{yyS[yypt-0].expr_map_key_value[0]}, Values: []ast.Expr{yyS[yypt-0].expr_map_key_value[1]}}
		}
	case 196:
		{
			if yyS[yypt-2].expr_map_content_helper.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map_content_helper.Keys = append(yyVAL.expr_map_content_helper.Keys, yyS[yypt-0].expr_map_key_value[0])
			yyVAL.expr_map_content_helper.Values = append(yyVAL.expr_map_content_helper.Values, yyS[yypt-0].expr_map_key_value[1])
		}
	case 197:
		{
			yyVAL.expr_map_key_value = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 198:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-5].expr_ident, Begin: yyS[yypt-3].expr, End: yyS[yypt-1].expr}
		}
	case 199:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-4].expr_ident, Begin: yyS[yypt-2].expr, End: nil}
		}
	case 200:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-4].expr_ident, Begin: nil, End: yyS[yypt-1].expr}
		}
	case 201:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-5].expr, Begin: yyS[yypt-3].expr, End: yyS[yypt-1].expr}
		}
	case 202:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-4].expr, Begin: yyS[yypt-2].expr, End: nil}
		}
	case 203:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-4].expr, Begin: nil, End: yyS[yypt-1].expr}
		}
	case 204:
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyS[yypt-0].tok.Position())
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
