// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:55
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             ast.Stmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_unary                    ast.Expr
	expr_binary                   ast.Expr
	expr_member_or_ident          ast.Expr
	expr_call                     ast.Expr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"','",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1180

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	61, 90,
	62, 90,
	80, 6,
	81, 90,
	-2, 2,
	-1, 24,
	81, 91,
	-2, 20,
	-1, 71,
	61, 90,
	62, 90,
	81, 90,
	-2, 6,
	-1, 120,
	16, 72,
	81, 72,
	-2, 198,
	-1, 128,
	4, 187,
	51, 187,
	58, 187,
	59, 187,
	-2, 104,
	-1, 157,
	1, 138,
	8, 138,
	47, 138,
	48, 138,
	61, 138,
	62, 138,
	63, 138,
	76, 138,
	77, 138,
	79, 138,
	80, 138,
	81, 138,
	83, 138,
	86, 138,
	-2, 129,
	-1, 159,
	1, 140,
	8, 140,
	47, 140,
	48, 140,
	61, 140,
	62, 140,
	63, 140,
	76, 140,
	77, 140,
	79, 140,
	80, 140,
	81, 140,
	83, 140,
	86, 140,
	-2, 129,
	-1, 261,
	79, 178,
	84, 178,
	-2, 198,
	-1, 290,
	63, 6,
	-2, 90,
	-1, 295,
	77, 212,
	83, 212,
	-2, 204,
	-1, 310,
	77, 212,
	-2, 204,
	-1, 317,
	1, 93,
	8, 93,
	47, 93,
	48, 93,
	61, 93,
	62, 93,
	63, 93,
	77, 93,
	79, 93,
	80, 93,
	81, 93,
	83, 93,
	86, 93,
	-2, 129,
	-1, 318,
	1, 139,
	8, 139,
	47, 139,
	48, 139,
	61, 139,
	62, 139,
	63, 139,
	76, 139,
	77, 139,
	79, 139,
	80, 139,
	81, 139,
	83, 139,
	86, 139,
	-2, 130,
	-1, 319,
	1, 141,
	8, 141,
	47, 141,
	48, 141,
	61, 141,
	62, 141,
	63, 141,
	76, 141,
	77, 141,
	79, 141,
	80, 141,
	81, 141,
	83, 141,
	86, 141,
	-2, 130,
	-1, 366,
	1, 22,
	47, 22,
	48, 22,
	63, 22,
	77, 22,
	80, 22,
	86, 22,
	-2, 132,
	-1, 368,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	77, 24,
	80, 24,
	86, 24,
	-2, 134,
	-1, 370,
	1, 26,
	47, 26,
	48, 26,
	63, 26,
	77, 26,
	80, 26,
	86, 26,
	-2, 132,
	-1, 372,
	1, 28,
	47, 28,
	48, 28,
	63, 28,
	77, 28,
	80, 28,
	86, 28,
	-2, 134,
	-1, 373,
	77, 210,
	83, 210,
	-2, 205,
	-1, 422,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	77, 21,
	80, 21,
	86, 21,
	-2, 131,
	-1, 423,
	1, 23,
	47, 23,
	48, 23,
	63, 23,
	77, 23,
	80, 23,
	86, 23,
	-2, 133,
	-1, 424,
	1, 25,
	47, 25,
	48, 25,
	63, 25,
	77, 25,
	80, 25,
	86, 25,
	-2, 131,
	-1, 425,
	1, 27,
	47, 27,
	48, 27,
	63, 27,
	77, 27,
	80, 27,
	86, 27,
	-2, 133,
}

const yyPrivate = 57344

const yyLast = 4348

var yyAct = [...]int16{
	2, 253, 8, 250, 10, 356, 296, 357, 128, 388,
	73, 9, 85, 359, 358, 290, 289, 248, 247, 6,
	287, 288, 48, 310, 429, 9, 295, 9, 9, 9,
	237, 9, 433, 223, 478, 374, 108, 109, 93, 223,
	223, 446, 223, 93, 85, 96, 97, 99, 101, 111,
	113, 332, 9, 333, 9, 82, 223, 371, 222, 229,
	102, 103, 104, 105, 106, 107, 223, 140, 108, 109,
	93, 94, 95, 145, 87, 73, 166, 132, 83, 87,
	86, 84, 472, 83, 473, 86, 440, 157, 159, 79,
	80, 223, 81, 100, 98, 88, 89, 110, 329, 90,
	91, 92, 112, 223, 209, 132, 87, 376, 223, 138,
	83, 369, 86, 308, 223, 306, 205, 129, 464, 143,
	223, 226, 213, 143, 136, 331, 151, 152, 372, 144,
	153, 135, 137, 73, 207, 399, 153, 241, 85, 153,
	367, 322, 212, 425, 133, 365, 153, 424, 423, 422,
	396, 390, 136, 326, 162, 138, 208, 75, 394, 135,
	137, 24, 108, 109, 93, 94, 95, 342, 265, 320,
	267, 163, 133, 76, 254, 218, 216, 165, 164, 523,
	444, 522, 370, 138, 153, 148, 114, 117, 147, 122,
	142, 125, 127, 90, 91, 92, 112, 215, 141, 208,
	87, 520, 516, 139, 83, 274, 86, 515, 272, 73,
	278, 368, 514, 153, 146, 509, 366, 235, 153, 154,
	155, 156, 158, 160, 327, 507, 153, 244, 161, 24,
	502, 501, 493, 487, 484, 483, 482, 170, 171, 172,
	173, 174, 176, 177, 309, 467, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 199, 307, 317, 200, 201,
	202, 203, 325, 324, 466, 461, 211, 168, 455, 273,
	347, 153, 277, 453, 132, 159, 452, 451, 285, 450,
	432, 419, 403, 384, 411, 364, 298, 346, 231, 233,
	73, 44, 301, 238, 60, 239, 240, 362, 361, 343,
	337, 335, 284, 275, 382, 518, 513, 511, 498, 74,
	132, 496, 257, 476, 474, 459, 266, 436, 228, 7,
	167, 136, 123, 271, 121, 421, 72, 400, 135, 137,
	169, 416, 363, 116, 389, 402, 134, 359, 358, 404,
	405, 133, 407, 290, 289, 512, 503, 354, 11, 391,
	360, 415, 138, 414, 420, 276, 412, 136, 280, 244,
	283, 78, 395, 130, 135, 137, 73, 321, 5, 490,
	252, 3, 426, 71, 385, 130, 70, 133, 119, 131,
	304, 378, 179, 238, 345, 442, 393, 441, 138, 334,
	319, 439, 316, 149, 443, 318, 299, 454, 178, 456,
	457, 150, 77, 460, 1, 49, 377, 462, 437, 251,
	160, 249, 465, 46, 37, 51, 338, 53, 339, 413,
	220, 42, 47, 35, 221, 134, 134, 471, 134, 350,
	352, 286, 21, 355, 134, 206, 134, 20, 24, 18,
	475, 428, 17, 130, 477, 22, 242, 243, 23, 485,
	486, 379, 19, 26, 488, 489, 259, 134, 255, 386,
	27, 25, 387, 130, 4, 495, 0, 497, 224, 225,
	0, 227, 132, 130, 0, 0, 0, 234, 499, 236,
	0, 398, 0, 0, 0, 0, 0, 508, 505, 510,
	491, 0, 0, 468, 0, 0, 0, 469, 0, 258,
	263, 410, 517, 0, 519, 0, 0, 417, 0, 521,
	0, 291, 292, 293, 294, 0, 0, 0, 134, 136,
	0, 220, 264, 0, 0, 0, 135, 137, 130, 0,
	0, 0, 0, 434, 130, 0, 315, 494, 0, 133,
	0, 297, 130, 0, 134, 0, 0, 449, 130, 0,
	138, 134, 0, 0, 259, 0, 0, 297, 0, 0,
	0, 300, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 120, 36, 38, 0, 323, 66, 0,
	59, 0, 0, 375, 330, 0, 480, 224, 0, 206,
	134, 0, 52, 39, 40, 41, 130, 0, 0, 0,
	0, 0, 134, 134, 0, 373, 0, 238, 492, 0,
	0, 0, 0, 134, 0, 0, 0, 297, 0, 0,
	373, 69, 56, 0, 50, 58, 57, 54, 0, 68,
	0, 0, 130, 383, 0, 0, 0, 61, 0, 63,
	65, 0, 85, 64, 418, 115, 392, 45, 0, 118,
	0, 43, 0, 0, 62, 0, 397, 0, 134, 206,
	134, 206, 0, 0, 0, 130, 108, 109, 93, 94,
	95, 0, 134, 134, 0, 0, 134, 134, 0, 0,
	0, 0, 0, 0, 0, 297, 0, 130, 0, 0,
	0, 0, 0, 88, 89, 110, 0, 90, 91, 92,
	112, 427, 0, 430, 87, 0, 0, 0, 83, 0,
	86, 0, 0, 0, 0, 438, 0, 0, 0, 206,
	445, 0, 134, 0, 0, 0, 134, 0, 134, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 130,
	0, 0, 0, 130, 67, 36, 38, 0, 0, 66,
	14, 59, 15, 28, 0, 29, 0, 0, 0, 0,
	134, 0, 0, 52, 39, 40, 41, 0, 16, 30,
	0, 479, 134, 0, 0, 0, 134, 0, 12, 13,
	0, 0, 0, 130, 0, 31, 32, 0, 0, 33,
	34, 0, 69, 56, 0, 50, 58, 57, 54, 0,
	68, 297, 0, 0, 0, 0, 0, 0, 61, 0,
	63, 65, 0, 0, 64, 504, 55, 0, 45, 506,
	0, 0, 43, 0, 0, 62, 85, 96, 97, 99,
	101, 111, 113, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 102, 103, 104, 105, 106, 107, 0, 0,
	108, 109, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 100, 98, 88, 89, 110,
	0, 90, 91, 92, 112, 0, 0, 0, 87, 447,
	0, 448, 83, 0, 86, 85, 96, 97, 99, 101,
	111, 113, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 102, 103, 104, 105, 106, 107, 0, 0, 108,
	109, 93, 94, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 100, 98, 88, 89, 110, 0,
	90, 91, 92, 112, 0, 0, 0, 87, 313, 0,
	314, 83, 0, 86, 85, 96, 97, 99, 101, 111,
	113, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	102, 103, 104, 105, 106, 107, 0, 0, 108, 109,
	93, 94, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 303, 81, 100, 98, 88, 89, 110, 0, 90,
	91, 92, 112, 0, 0, 0, 87, 0, 0, 0,
	83, 302, 86, 85, 96, 97, 99, 101, 111, 113,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 102,
	103, 104, 105, 106, 107, 0, 0, 108, 109, 93,
	94, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 81, 100, 98, 88, 89, 110, 0, 90, 91,
	92, 112, 0, 0, 0, 87, 0, 0, 0, 83,
	269, 86, 85, 96, 97, 99, 101, 111, 113, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 102, 103,
	104, 105, 106, 107, 0, 0, 108, 109, 93, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 79, 80, 0,
	81, 100, 98, 88, 89, 110, 0, 90, 91, 92,
	112, 0, 0, 0, 87, 0, 0, 0, 83, 0,
	86, 85, 96, 97, 99, 101, 111, 113, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 102, 103, 104,
	105, 106, 107, 0, 0, 108, 109, 93, 94, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	100, 98, 88, 89, 110, 0, 90, 91, 92, 112,
	0, 0, 0, 87, 500, 0, 0, 83, 0, 86,
	85, 96, 97, 99, 101, 111, 113, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 102, 103, 104, 105,
	106, 107, 0, 0, 108, 109, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 100,
	98, 88, 89, 110, 0, 90, 91, 92, 112, 0,
	0, 0, 87, 481, 0, 0, 83, 0, 86, 85,
	96, 97, 99, 101, 111, 113, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 102, 103, 104, 105, 106,
	107, 0, 0, 108, 109, 93, 94, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 470, 81, 100, 98,
	88, 89, 110, 0, 90, 91, 92, 112, 0, 0,
	0, 87, 0, 0, 0, 83, 0, 86, 85, 96,
	97, 99, 101, 111, 113, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 102, 103, 104, 105, 106, 107,
	0, 0, 108, 109, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 463, 81, 100, 98, 88,
	89, 110, 0, 90, 91, 92, 112, 0, 0, 0,
	87, 0, 0, 0, 83, 0, 86, 85, 96, 97,
	99, 101, 111, 113, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 102, 103, 104, 105, 106, 107, 0,
	0, 108, 109, 93, 94, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 100, 98, 88, 89,
	110, 0, 90, 91, 92, 112, 0, 458, 0, 87,
	0, 0, 0, 83, 0, 86, 85, 96, 97, 99,
	101, 111, 113, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 102, 103, 104, 105, 106, 107, 0, 0,
	108, 109, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 100, 98, 88, 89, 110,
	0, 90, 91, 92, 112, 0, 0, 0, 87, 435,
	0, 0, 83, 0, 86, 85, 96, 97, 99, 101,
	111, 113, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 102, 103, 104, 105, 106, 107, 0, 0, 108,
	109, 93, 94, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 100, 98, 88, 89, 110, 0,
	90, 91, 92, 112, 0, 0, 0, 87, 0, 0,
	0, 83, 431, 86, 85, 96, 97, 99, 101, 111,
	113, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	102, 103, 104, 105, 106, 107, 0, 0, 108, 109,
	93, 94, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 100, 98, 88, 89, 110, 0, 90,
	91, 92, 112, 0, 408, 0, 87, 0, 0, 0,
	83, 0, 86, 85, 96, 97, 99, 101, 111, 113,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 102,
	103, 104, 105, 106, 107, 0, 0, 108, 109, 93,
	94, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 100, 98, 88, 89, 110, 0, 90, 91,
	92, 112, 0, 406, 0, 87, 0, 0, 0, 83,
	0, 86, 85, 96, 97, 99, 101, 111, 113, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 102, 103,
	104, 105, 106, 107, 0, 0, 108, 109, 93, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 100, 98, 88, 89, 110, 0, 90, 91, 92,
	112, 0, 0, 0, 87, 0, 0, 0, 83, 401,
	86, 85, 96, 97, 99, 101, 111, 113, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 102, 103, 104,
	105, 106, 107, 0, 0, 108, 109, 93, 94, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	100, 98, 88, 89, 110, 0, 90, 91, 92, 112,
	0, 0, 0, 87, 0, 0, 0, 83, 381, 86,
	85, 96, 97, 99, 101, 111, 113, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 102, 103, 104, 105,
	106, 107, 0, 0, 108, 109, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 100,
	98, 88, 89, 110, 0, 90, 91, 92, 112, 0,
	0, 0, 87, 0, 353, 0, 83, 0, 86, 85,
	96, 97, 99, 101, 111, 113, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 102, 103, 104, 105, 106,
	107, 0, 0, 108, 109, 93, 94, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 100, 98,
	88, 89, 110, 0, 90, 91, 92, 112, 0, 348,
	0, 87, 0, 0, 0, 83, 0, 86, 85, 96,
	97, 99, 101, 111, 113, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 102, 103, 104, 105, 106, 107,
	0, 0, 108, 109, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 100, 98, 88,
	89, 110, 0, 90, 91, 92, 112, 0, 344, 0,
	87, 0, 0, 0, 83, 0, 86, 85, 96, 97,
	99, 101, 111, 113, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 102, 103, 104, 105, 106, 107, 0,
	0, 108, 109, 93, 94, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 100, 98, 88, 89,
	110, 0, 90, 91, 92, 112, 0, 0, 0, 87,
	0, 0, 0, 83, 341, 86, 85, 96, 97, 99,
	101, 111, 113, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 102, 103, 104, 105, 106, 107, 0, 0,
	108, 109, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 100, 98, 88, 89, 110,
	0, 90, 91, 92, 112, 0, 336, 0, 87, 0,
	0, 0, 83, 0, 86, 85, 96, 97, 99, 101,
	111, 113, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 102, 103, 104, 105, 106, 107, 0, 0, 108,
	109, 93, 94, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 100, 98, 88, 89, 110, 0,
	90, 91, 92, 112, 0, 0, 0, 87, 328, 0,
	0, 83, 0, 86, 85, 96, 97, 99, 101, 111,
	113, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	102, 103, 104, 105, 106, 107, 0, 0, 108, 109,
	93, 94, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 100, 98, 88, 89, 110, 0, 90,
	91, 92, 112, 0, 0, 0, 87, 312, 0, 0,
	83, 0, 86, 85, 96, 97, 99, 101, 111, 113,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 102,
	103, 104, 105, 106, 107, 0, 0, 108, 109, 93,
	94, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	311, 81, 100, 98, 88, 89, 110, 0, 90, 91,
	92, 112, 0, 0, 0, 87, 0, 0, 0, 83,
	0, 86, 85, 96, 97, 99, 101, 111, 113, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 102, 103,
	104, 105, 106, 107, 0, 0, 108, 109, 93, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 100, 98, 88, 89, 110, 0, 90, 91, 92,
	112, 0, 0, 0, 87, 305, 0, 0, 83, 0,
	86, 85, 96, 97, 99, 101, 111, 113, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 102, 103, 104,
	105, 106, 107, 0, 0, 108, 109, 93, 94, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	100, 98, 88, 89, 110, 0, 90, 91, 92, 112,
	0, 0, 0, 87, 0, 281, 0, 83, 0, 86,
	85, 96, 97, 99, 101, 111, 113, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 102, 103, 104, 105,
	106, 107, 0, 0, 108, 109, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 81, 100,
	98, 88, 89, 110, 0, 90, 91, 92, 112, 0,
	0, 0, 87, 0, 0, 0, 83, 0, 86, 85,
	96, 97, 99, 101, 111, 113, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 102, 103, 104, 105, 106,
	107, 0, 0, 108, 109, 93, 94, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 81, 100, 98,
	88, 89, 110, 0, 90, 91, 92, 112, 0, 0,
	0, 87, 230, 0, 0, 83, 0, 86, 85, 96,
	97, 99, 101, 111, 113, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 102, 103, 104, 105, 106, 107,
	0, 0, 108, 109, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 100, 98, 88,
	89, 110, 0, 90, 91, 92, 112, 0, 214, 0,
	87, 0, 0, 0, 83, 0, 86, 85, 96, 97,
	99, 101, 111, 113, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 102, 103, 104, 105, 106, 107, 0,
	0, 108, 109, 93, 94, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 100, 98, 88, 89,
	110, 0, 90, 91, 92, 112, 0, 204, 0, 87,
	0, 0, 0, 83, 0, 86, 85, 96, 97, 99,
	101, 111, 113, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 102, 103, 104, 105, 106, 107, 0, 0,
	108, 109, 93, 94, 95, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 100, 98, 88, 89, 110,
	0, 90, 91, 92, 112, 0, 0, 0, 87, 0,
	0, 0, 83, 0, 86, 85, 96, 97, 99, 101,
	111, 113, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 102, 103, 104, 105, 106, 107, 0, 0, 108,
	109, 93, 94, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 100, 98, 88, 89, 110, 0,
	90, 91, 92, 112, 0, 0, 0, 87, 0, 0,
	0, 83, 0, 246, 85, 96, 97, 99, 101, 111,
	113, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	102, 103, 104, 105, 106, 107, 0, 0, 108, 109,
	93, 94, 95, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 100, 98, 88, 89, 110, 0, 90,
	91, 92, 112, 0, 0, 0, 87, 0, 0, 0,
	83, 0, 245, 85, 96, 97, 99, 101, 111, 113,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 102,
	103, 104, 105, 106, 107, 0, 0, 108, 109, 93,
	94, 95, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 100, 98, 88, 89, 110, 0, 90, 91,
	92, 112, 0, 0, 0, 219, 0, 0, 0, 83,
	0, 86, 85, 96, 97, 99, 101, 111, 113, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 102, 103,
	104, 105, 106, 107, 0, 0, 108, 109, 93, 94,
	95, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 100, 98, 88, 89, 110, 0, 90, 91, 92,
	112, 0, 0, 0, 217, 0, 0, 0, 83, 0,
	86, 85, 96, 97, 99, 101, 111, 113, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 109, 93, 94, 95,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	100, 98, 88, 89, 110, 0, 90, 91, 92, 112,
	261, 36, 38, 87, 0, 66, 0, 83, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	39, 40, 41, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 261, 36,
	38, 0, 0, 66, 0, 0, 0, 136, 69, 56,
	0, 50, 58, 57, 260, 137, 68, 52, 39, 40,
	41, 0, 0, 0, 61, 0, 63, 262, 0, 0,
	64, 0, 55, 0, 45, 256, 0, 0, 43, 0,
	0, 62, 0, 0, 0, 136, 69, 56, 0, 50,
	58, 57, 260, 137, 68, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 63, 262, 0, 0, 64, 0,
	55, 0, 45, 0, 0, 0, 43, 0, 0, 62,
	85, 96, 97, 99, 101, 111, 113, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 109, 93, 94, 95, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 100,
	98, 88, 89, 110, 0, 90, 91, 92, 112, 67,
	36, 38, 87, 0, 66, 0, 83, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 39,
	40, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 67, 36, 38,
	0, 0, 66, 0, 0, 0, 0, 69, 56, 0,
	50, 58, 57, 54, 0, 68, 52, 39, 40, 41,
	0, 0, 0, 61, 0, 63, 65, 0, 0, 64,
	0, 55, 0, 45, 0, 0, 0, 43, 380, 0,
	62, 0, 0, 0, 0, 69, 56, 0, 50, 58,
	57, 54, 0, 68, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 63, 65, 0, 0, 64, 0, 55,
	0, 45, 67, 36, 38, 43, 340, 66, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 52, 39, 40, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	67, 36, 38, 0, 0, 66, 0, 0, 0, 0,
	69, 56, 0, 50, 58, 57, 54, 0, 68, 52,
	39, 40, 41, 0, 0, 0, 61, 0, 63, 65,
	0, 0, 64, 0, 55, 0, 45, 0, 282, 0,
	43, 0, 0, 62, 0, 0, 0, 0, 69, 56,
	0, 50, 58, 57, 54, 0, 68, 0, 0, 232,
	0, 0, 0, 0, 61, 0, 63, 65, 0, 0,
	64, 0, 55, 0, 45, 67, 36, 38, 43, 0,
	66, 62, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 52, 39, 40, 41, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 36, 38, 0, 0, 66, 0,
	0, 0, 0, 69, 56, 0, 50, 58, 57, 54,
	0, 68, 52, 39, 40, 41, 0, 0, 0, 61,
	0, 63, 65, 0, 0, 64, 0, 55, 0, 45,
	0, 210, 0, 43, 0, 0, 62, 0, 0, 0,
	0, 69, 56, 0, 50, 58, 57, 54, 0, 68,
	0, 0, 175, 0, 0, 0, 0, 61, 0, 63,
	65, 0, 0, 64, 0, 55, 0, 45, 67, 36,
	38, 43, 0, 66, 62, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 52, 39, 40,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 67, 36, 38, 0,
	0, 66, 0, 0, 0, 0, 69, 56, 0, 50,
	58, 57, 54, 0, 68, 52, 39, 40, 41, 0,
	0, 0, 61, 0, 63, 65, 0, 0, 64, 0,
	55, 0, 45, 0, 0, 0, 43, 0, 0, 62,
	0, 0, 0, 0, 69, 56, 0, 50, 58, 57,
	54, 0, 68, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 63, 65, 0, 0, 64, 0, 409, 0,
	45, 67, 36, 38, 43, 0, 66, 62, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 39, 40, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 67,
	36, 38, 0, 0, 66, 0, 0, 0, 0, 69,
	56, 0, 50, 58, 57, 54, 0, 68, 52, 39,
	40, 41, 0, 0, 0, 61, 0, 63, 65, 0,
	0, 64, 0, 351, 0, 45, 0, 0, 0, 43,
	0, 0, 62, 0, 0, 0, 0, 69, 56, 0,
	50, 58, 57, 54, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 63, 65, 0, 0, 64,
	0, 349, 0, 45, 67, 36, 38, 43, 0, 66,
	62, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 52, 39, 40, 41, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 126, 36, 38, 0, 0, 66, 0, 0,
	0, 0, 69, 56, 0, 50, 58, 57, 54, 0,
	68, 52, 39, 40, 41, 0, 0, 0, 61, 0,
	63, 65, 0, 0, 64, 0, 279, 0, 45, 0,
	0, 0, 43, 0, 0, 62, 0, 0, 0, 0,
	69, 56, 0, 50, 58, 57, 54, 0, 68, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 63, 65,
	0, 0, 64, 0, 55, 0, 45, 124, 36, 38,
	43, 0, 66, 62, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 39, 40, 41,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 96, 97, 99, 101, 0, 113, 0, 0, 0,
	0, 0, 0, 0, 0, 69, 56, 0, 50, 58,
	57, 54, 0, 68, 108, 109, 93, 94, 95, 0,
	0, 61, 0, 63, 65, 0, 0, 64, 0, 55,
	0, 45, 0, 0, 0, 43, 0, 0, 62, 100,
	98, 88, 89, 110, 0, 90, 91, 92, 112, 0,
	0, 0, 87, 0, 0, 0, 83, 0, 86, 85,
	96, 97, 99, 101, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 109, 93, 94, 95, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 100, 98,
	88, 89, 110, 0, 90, 91, 92, 112, 0, 0,
	0, 87, 0, 0, 0, 83, 0, 86,
}

var yyPact = [...]int16{
	-61, -1000, -1000, 760, -61, -1000, -59, -59, -1000, -1000,
	-1000, -1000, -1000, -1000, 3834, 3834, 408, 357, -1000, -1000,
	-1000, -1000, -1000, -1000, 1106, -1000, -1000, -1000, 3834, 589,
	258, 3834, 256, 4173, 4098, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -75, 316, 3834, -1000, -1000, -15, -1000,
	120, -1000, 112, -1000, 47, -59, 3834, 110, 107, 407,
	65, 3834, 3834, 3834, 3834, 3834, 150, 93, 100, 99,
	-1000, 760, -59, -1000, 58, 2900, 2900, 254, 264, 3834,
	3834, 3834, 3834, 3759, 3834, 3834, 404, 3834, 3834, 3834,
	3834, 3834, 3834, 3834, 3834, 3834, 3834, 3834, 3834, 3834,
	3834, 3834, 3834, 3834, 3834, 3834, 3834, 3834, -1000, -1000,
	3834, 3834, 3834, 3834, 2831, -61, 118, 28, 3721, 62,
	93, -61, 2762, -59, 98, 3176, 97, 3107, 27, 3834,
	-59, -18, -1000, 316, 316, 39, 316, 252, -24, 2693,
	3646, 3834, 316, -59, 316, 3834, 3245, 3834, 3834, 75,
	-1000, 3834, 3834, -59, 1, 1, 1, -15, 3038, -15,
	2969, 376, 96, 3834, 3316, 478, -1000, -61, 3834, -61,
	2900, 2900, 2624, 3424, 1037, 3834, 3245, -4, -1000, 200,
	122, 122, -4, -4, -4, 2900, -4, -4, 646, 646,
	646, 646, 646, 646, 2900, 2900, 2900, 2900, 2900, 2900,
	122, 4194, -4, 4263, -61, 236, -59, 3834, -59, -61,
	4060, 2555, 3608, 235, -59, 306, 3834, 3834, 3834, 3834,
	-1000, -55, -59, 402, -51, -51, 316, -51, -59, 27,
	-1000, 968, 3834, 2486, 36, 3834, 30, -58, 2417, 2348,
	899, 3834, 58, 58, 3834, 401, 396, 90, 369, 60,
	-1000, -1000, 316, -1000, 376, 145, -1000, 2279, 19, 316,
	43, 93, 3354, -28, 395, 234, 2210, 233, 3834, -1000,
	3533, 2141, 88, -1000, 232, -1000, 2072, 390, 220, -61,
	2003, 3985, 3947, 1934, 327, 300, -32, -1000, -1000, 279,
	760, 137, 132, 103, 49, -59, -48, -59, 3834, -1000,
	24, 387, -1000, 3495, 1865, -1000, -1000, -58, 316, 216,
	-59, 3834, -1000, -1000, 3834, 58, 2900, -15, -1000, -1000,
	73, 280, -59, -51, 79, 364, 71, -1000, -1000, -1000,
	-18, 316, -1000, 3834, 54, -1000, -61, -1000, 3245, 1796,
	-1000, -1000, -1000, -1000, -61, -1000, -1000, 215, -61, -61,
	1727, -61, 1658, 3872, 290, -34, -1000, -1000, 278, 3834,
	214, -1000, -1000, -61, 272, 70, -1000, 69, -1000, 68,
	-1000, 64, -1000, -59, -1000, -55, 316, -57, 316, 1589,
	-1000, -1000, 213, -44, -1000, 3834, 2900, 1520, 251, -51,
	316, 73, 7, 376, 73, 101, -1000, -42, 830, 3834,
	212, -1000, 210, -1000, 209, 206, -61, 201, -61, -61,
	1451, 249, -61, 198, -1000, -1000, -61, 1382, 55, -1000,
	-1000, -61, -1000, -1000, -1000, -1000, 197, -51, 168, -59,
	-51, -1000, -1000, -59, 1313, -1000, -61, 3, -51, 248,
	73, -1000, -1000, 247, 73, -45, 316, -1000, 3834, 1244,
	-1000, -1000, -1000, -1000, 159, -1000, 158, 157, -61, -61,
	156, -1000, -1000, -61, -61, -1000, -1000, -1000, 375, 3834,
	3834, 155, -1000, -59, -61, 245, -61, 242, 73, -44,
	1175, -1000, -1000, -1000, -1000, 154, 153, 325, -1000, -1000,
	316, -58, 2900, -1000, 316, 148, -61, 138, -61, 241,
	-1000, -1000, 324, 240, -51, 135, -51, -1000, 130, -1000,
	125, -61, 239, -61, -1000, -1000, -1000, 124, -61, 104,
	-1000, 102, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 0, 474, 4, 358, 471, 470, 463, 462, 458,
	455, 452, 449, 447, 443, 7, 5, 442, 441, 21,
	20, 304, 157, 433, 432, 431, 427, 425, 424, 423,
	343, 18, 421, 3, 1, 17, 419, 9, 418, 344,
	416, 301, 30, 415, 22, 414, 381, 378, 73, 6,
	329, 2,
}

var yyR1 = [...]int8{
	0, 45, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 10, 10, 10, 10, 9, 9, 9, 9, 8,
	8, 8, 8, 4, 4, 4, 5, 7, 7, 6,
	6, 11, 11, 11, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 17, 18, 18, 18, 18,
	18, 19, 20, 13, 14, 14, 14, 14, 14, 15,
	15, 16, 30, 30, 37, 37, 37, 38, 38, 38,
	31, 31, 32, 32, 33, 34, 35, 35, 36, 36,
	21, 21, 21, 21, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 27, 27, 27, 23,
	23, 24, 24, 24, 24, 28, 28, 28, 28, 28,
	28, 28, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 25, 25,
	25, 25, 25, 25, 26, 26, 26, 26, 39, 39,
	39, 39, 39, 39, 39, 40, 40, 41, 41, 42,
	42, 42, 43, 43, 43, 43, 43, 43, 44, 46,
	46, 47, 47, 47, 48, 48, 50, 50, 51, 49,
	49, 49, 49,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 3, 0, 1, 1, 1,
	2, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 5, 6, 5, 6, 5, 6, 5, 13,
	12, 9, 8, 1, 1, 1, 4, 3, 3, 3,
	3, 5, 7, 5, 4, 7, 5, 6, 7, 7,
	8, 7, 8, 8, 9, 6, 0, 1, 1, 2,
	2, 4, 3, 7, 0, 1, 1, 2, 2, 4,
	4, 3, 1, 4, 0, 1, 3, 0, 1, 4,
	0, 1, 1, 1, 1, 2, 1, 4, 1, 4,
	0, 1, 4, 4, 1, 1, 1, 1, 1, 1,
	1, 5, 3, 1, 2, 5, 7, 3, 1, 1,
	4, 4, 1, 4, 1, 4, 1, 6, 10, 5,
	3, 2, 4, 4, 6, 3, 3, 4, 4, 1,
	3, 5, 4, 5, 4, 2, 2, 2, 2, 4,
	2, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 3, 3, 3, 8, 9,
	10, 9, 10, 11, 4, 6, 8, 7, 1, 3,
	2, 2, 5, 2, 6, 2, 5, 2, 3, 0,
	3, 6, 6, 5, 5, 6, 5, 5, 1, 0,
	1, 2, 1, 1, 0, 1, 1, 2, 1, 0,
	2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -45, -1, -46, -2, -47, 80, -50, -51, 86,
	-3, -4, 38, 39, 10, 12, 28, -11, -12, -8,
	-13, -17, -10, -9, -22, -5, -7, -6, 13, 15,
	29, 45, 46, 49, 50, -23, 5, -28, 6, 24,
	25, 26, -25, 82, -41, 78, -29, -24, -44, -43,
	55, -27, 23, -26, 58, 76, 53, 57, 56, 11,
	-21, 68, 85, 70, 74, 71, 9, 4, 60, 52,
	-46, -47, -50, -51, -21, -22, -22, 4, 14, 61,
	62, 64, 27, 82, 53, 16, 84, 78, 67, 68,
	71, 72, 73, 42, 43, 44, 17, 18, 66, 19,
	65, 20, 32, 33, 34, 35, 36, 37, 40, 41,
	69, 21, 74, 22, -22, 76, -30, -22, 80, -4,
	4, 76, -22, 76, 4, -22, 4, -22, 83, -48,
	-50, -39, 4, 71, -41, 58, 51, 59, 82, -22,
	82, 78, 78, 76, 82, -48, -22, 78, 78, -30,
	4, 61, 62, 81, -22, -22, -22, -44, -22, -44,
	-22, 78, 4, 78, 78, 78, -3, 76, 13, 76,
	-22, -22, -22, -22, -22, 63, -22, -22, 4, -21,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, 76, -1, -50, 16, 81, 76,
	80, -22, 80, -1, 76, -48, 78, 78, 78, 78,
	-41, -21, 76, 84, -39, -39, 82, -39, 76, 83,
	79, -22, 63, -22, -39, -48, -39, -42, -22, -22,
	-22, 62, -21, -21, -48, 84, 84, -31, -35, -32,
	-33, -36, 4, -34, 78, -21, 79, -22, -39, -41,
	58, 4, 71, -39, 54, -1, -22, -1, 63, 83,
	63, -22, 8, 79, -1, 77, -22, -48, -1, 76,
	-22, 80, 80, -22, 77, -48, -18, -20, -19, 48,
	47, -21, -21, -21, -21, 81, -49, -50, -48, 4,
	-39, -48, 83, 63, -22, 79, 79, -42, 83, -49,
	81, 63, 79, 79, 81, -21, -22, -44, 4, 4,
	79, 8, 81, -39, -31, -35, 8, 79, 79, 79,
	-39, 82, 79, 81, 4, 77, 76, 77, -22, -22,
	83, 83, 79, 77, 76, 4, 77, -1, 76, 76,
	-22, 76, -22, 80, 30, -14, -16, -15, 48, 47,
	-48, -19, -20, 63, -3, 8, 79, 8, 79, 8,
	79, 8, 79, -50, 83, -21, 83, -40, 4, -22,
	83, 83, -49, -39, 77, -48, -22, -22, -37, -39,
	78, 79, -39, -48, 79, 8, 79, -39, -22, 81,
	-1, 83, -1, 77, -1, -1, 76, -1, 76, 76,
	-22, 4, 76, -48, -15, -16, 63, -22, -21, 77,
	-1, 63, 79, 79, 79, 79, -49, -39, -48, 81,
	-39, 83, 77, 76, -22, 79, 76, -38, -39, -37,
	79, -33, -34, -37, 79, -39, 83, 79, 81, -22,
	77, 77, 77, 77, -1, 77, -1, -1, 76, 76,
	-1, 77, -1, 63, 63, -1, 77, 77, -48, -48,
	63, -1, 79, 81, 76, -37, 76, -37, 79, -39,
	-22, 79, 77, 77, 77, -1, -1, 77, -1, -1,
	4, -42, -22, 77, -48, -1, 76, -1, 76, -37,
	79, 77, 77, 31, -39, -49, -39, 77, -1, 77,
	-1, 76, 31, 76, 77, 77, 77, -1, 76, -1,
	77, -1, 77, 77,
}

var yyDef = [...]int16{
	199, -2, 1, -2, 199, 200, 203, 202, 206, 208,
	4, 7, 8, 9, 90, 0, 0, 13, 14, 15,
	16, 17, 18, 19, -2, 33, 34, 35, 0, 90,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 98,
	99, 100, 103, 204, 0, 0, 108, 109, 129, 112,
	0, 114, 0, 116, 0, 204, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 198, 0, 0,
	3, -2, 201, 207, 10, 91, 11, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 90, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 162, 163,
	0, 0, 0, 0, 0, 199, 0, 91, 0, 0,
	-2, 199, 0, 204, 198, 0, 198, 0, -2, 90,
	205, 0, 178, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 204, 0, 189, 121, 0, 0, 0,
	72, 90, 90, 204, 135, 136, 137, -2, 0, -2,
	0, 80, 0, 90, 0, 0, 5, 199, 0, 199,
	37, 39, 0, 102, 0, 0, 120, 125, 130, 0,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 161,
	164, 165, 166, 167, 199, 0, 202, 0, 204, 199,
	0, 0, 0, 0, 204, 56, 90, 90, 90, 90,
	188, 209, 204, 0, 180, 181, 0, 183, 204, 187,
	107, 0, 0, 0, 0, 189, 0, 209, 0, 0,
	0, 90, 38, 40, 0, 0, 0, 0, 82, 81,
	86, 83, 84, 88, 80, 0, 126, 0, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 111,
	0, 0, 0, 134, 0, 44, 0, 0, 0, 199,
	0, 0, 0, 0, 0, 64, 204, 57, 58, 0,
	-2, 0, 0, 0, 0, -2, 0, 211, 90, 179,
	0, 0, 110, 0, 0, 113, 115, 209, 0, 0,
	-2, 0, 122, 123, 0, 36, 92, -2, -2, -2,
	74, 0, 204, 85, 0, 82, 0, 132, 127, 128,
	181, 0, 174, 0, 0, 12, 199, 43, 101, 0,
	196, 197, 133, 41, 199, 73, 46, 0, 199, 199,
	0, 199, 0, 0, 0, 204, 65, 66, 0, 90,
	0, 59, 60, 199, 0, 0, -2, 0, -2, 0,
	-2, 0, -2, -2, 105, 209, 0, 204, 0, 0,
	193, 194, 0, 0, 119, 0, 190, 0, 0, 75,
	77, 74, 0, 0, 74, 0, 131, 0, 0, 0,
	0, 195, 0, 47, 0, 0, 199, 0, 199, 199,
	0, 0, 199, 0, 67, 68, 199, 91, 0, 55,
	62, 199, -2, -2, -2, -2, 0, 182, 0, 204,
	185, 192, 117, 204, 0, 124, 199, 0, 78, 0,
	74, 87, 89, 0, 74, 0, 0, 175, 0, 0,
	42, 45, 48, 49, 0, 51, 0, 0, 199, 199,
	0, 63, 71, 199, 199, 61, 106, 184, 0, 189,
	0, 0, 76, 204, 199, 0, 199, 0, 74, 182,
	0, 177, 50, 52, 53, 0, 0, 32, 69, 70,
	0, 209, 191, 168, 0, 0, 199, 0, 199, 0,
	176, 54, 31, 0, 186, 0, 79, 169, 0, 171,
	0, 199, 0, 199, 118, 170, 172, 0, 199, 0,
	173, 0, 30, 29,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 85, 3, 3, 3, 73, 74, 3,
	78, 79, 71, 67, 81, 68, 84, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 80,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 82, 3, 83, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:126
		{
			yyVAL.compstmt = nil
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:130
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:136
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:145
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:161
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:162
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:169
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:174
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:179
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:184
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:189
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:193
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.stmt = yyDollar[1].stmt_try
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:195
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.stmt = yyDollar[1].stmt_go
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:198
		{
			yyVAL.stmt = yyDollar[1].stmt_defer
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:200
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:207
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:212
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:217
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].expr.Position())
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:222
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:229
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:234
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:239
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr.Position())
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:244
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:251
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:256
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:261
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:272
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:273
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:274
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:278
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:285
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:289
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:306
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:310
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:327
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:332
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:337
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:347
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:352
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:363
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:368
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:373
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:378
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:383
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:388
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:393
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:398
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:403
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:410
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:417
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:421
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:425
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:429
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:434
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:445
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:452
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 63:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:458
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:467
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:471
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:475
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:479
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:485
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:496
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:501
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:508
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:514
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:518
		{
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:523
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:527
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:531
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:535
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:539
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:543
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:551
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:554
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:557
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:558
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:562
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:568
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:574
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:578
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:584
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:588
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:593
		{
			yyVAL.exprs = nil
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:597
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:601
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:608
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:616
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:618
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:622
		{
			yyVAL.expr = yyDollar[1].expr_unary
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:624
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:629
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:634
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:639
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:644
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:649
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:653
		{
			yyVAL.expr = yyDollar[1].expr_func
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:655
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:660
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 106:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:665
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:670
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:674
		{
			yyVAL.expr = yyDollar[1].expr_binary
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:675
		{
			yyVAL.expr = yyDollar[1].expr_call
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:677
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:682
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:687
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:692
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:696
		{
			yyVAL.expr = yyDollar[1].expr_dbg
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:698
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:707
		{
			yyVAL.expr = yyDollar[1].expr_make
		}
	case 117:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:709
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 118:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:715
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 119:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:721
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:726
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:731
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:736
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:741
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:746
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:751
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:758
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:763
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:768
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:774
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:776
		{
			yyVAL.expr_member_or_ident = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member_or_ident.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:783
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr_call.SetPosition(yyDollar[1].tok.Position())
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:788
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr_call.SetPosition(yyDollar[1].tok.Position())
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:793
		{
			yyVAL.expr_call = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr_call.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:798
		{
			yyVAL.expr_call = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr_call.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:805
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:810
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:815
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:820
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:825
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:830
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:835
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:842
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:847
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:852
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:857
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:862
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:867
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:872
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:877
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:882
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:887
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:892
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:897
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:902
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:907
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:912
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:917
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:922
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:927
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:932
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:937
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:942
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:947
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:952
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:957
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:962
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:967
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 168:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:974
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 169:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:979
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 170:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:984
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 171:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:990
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 172:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:995
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 173:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:1000
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1008
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1013
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 176:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:1018
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 177:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:1023
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1030
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1034
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1043
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1052
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1062
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1066
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1075
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1081
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1085
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1095
		{
			yyVAL.slice_count = 1
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1099
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 189:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1106
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1110
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1114
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 192:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1124
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1128
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1132
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 195:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1136
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1140
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 197:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1144
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 198:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1150
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
