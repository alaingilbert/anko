// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                 int
	stmtsStmt           *ast.StmtsStmt
	exprsExpr           *ast.ExprsExpr
	stmt                ast.Stmt
	expr                ast.Expr
	exprs               []ast.Expr
	stmts               []ast.Stmt
	stmt_select_content *ast.SelectBodyStmt
	expr_call_helper    struct {
		Exprs  *ast.ExprsExpr
		VarArg bool
	}
	expr_idents           []string
	func_expr_idents      []*ast.ParamExpr
	func_expr_typed_ident *ast.ParamExpr
	func_expr_args        struct {
		Params   []*ast.ParamExpr
		VarArg   bool
		TypeData *ast.TypeStruct
	}
	expr_typed_ident struct {
		Name     string
		TypeData *ast.TypeStruct
	}
	stmt_lets_helper struct {
		Exprs1, Exprs2 *ast.ExprsExpr
		Typed, Mutable bool
	}
	opt_func_return_expr_idents []*ast.FuncReturnValuesExpr
	expr_map                    *ast.MapExpr
	type_data                   *ast.TypeStruct
	slice_count                 int
	tok                         ast.Token
	opt_ident                   *ast.Token
	str                         string
	op_lets                     bool
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57408
	yyEofCode   = 57344
	ANDAND      = 57365
	ANDEQ       = 57379
	ARRAY       = 57349
	BREAK       = 57381
	CASE        = 57390
	CATCH       = 57373
	CHAN        = 57394
	CLOSE       = 57400
	CONTINUE    = 57382
	DBG         = 57403
	DEFAULT     = 57391
	DEFER       = 57393
	DELETE      = 57399
	DIVEQ       = 57378
	ELSE        = 57356
	EMPTYARR    = 57405
	EQEQ        = 57360
	FALSE       = 57368
	FINALLY     = 57374
	FOR         = 57357
	FUNC        = 57351
	GE          = 57362
	GO          = 57392
	IDENT       = 57346
	IF          = 57355
	IN          = 57359
	LE          = 57363
	LEN         = 57398
	LOOP        = 57358
	MAKE        = 57395
	MAP         = 57401
	MINUSEQ     = 57376
	MINUSMINUS  = 57384
	MODULE      = 57371
	MULEQ       = 57377
	MUT         = 57406
	NEQ         = 57361
	NEW         = 57366
	NIL         = 57369
	NILCOALESCE = 57370
	NUMBER      = 57347
	OPCHAN      = 57396
	OREQ        = 57380
	OROR        = 57364
	PLUSEQ      = 57375
	PLUSPLUS    = 57383
	POW         = 57385
	RETURN      = 57352
	SELECT      = 57389
	SHIFTLEFT   = 57386
	SHIFTRIGHT  = 57387
	STRING      = 57348
	STRUCT      = 57402
	SWITCH      = 57388
	THROW       = 57354
	TRUE        = 57367
	TRY         = 57372
	TYPE        = 57397
	UNARY       = 57407
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57404
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -272
)

var (
	yyPrec = map[int]int{
		POW:         0,
		'=':         1,
		PLUSEQ:      1,
		MINUSEQ:     1,
		DIVEQ:       1,
		MULEQ:       1,
		ANDEQ:       1,
		OREQ:        1,
		':':         2,
		OPCHAN:      3,
		'?':         4,
		NILCOALESCE: 4,
		OROR:        5,
		ANDAND:      6,
		EQEQ:        7,
		NEQ:         7,
		'<':         7,
		LE:          7,
		'>':         7,
		GE:          7,
		'+':         8,
		'-':         8,
		'|':         8,
		'^':         8,
		'*':         9,
		'/':         9,
		'%':         9,
		SHIFTLEFT:   9,
		SHIFTRIGHT:  9,
		'&':         9,
		IN:          10,
		PLUSPLUS:    11,
		MINUSMINUS:  11,
		UNARY:       12,
	}

	yyXLAT = map[int]int{
		91:    0,   // '[' (214x)
		42:    1,   // '*' (213x)
		125:   2,   // '}' (213x)
		123:   3,   // '{' (209x)
		40:    4,   // '(' (205x)
		38:    5,   // '&' (195x)
		43:    6,   // '+' (195x)
		45:    7,   // '-' (195x)
		57396: 8,   // OPCHAN (195x)
		10:    9,   // '\n' (170x)
		57391: 10,  // DEFAULT (150x)
		57390: 11,  // CASE (148x)
		57344: 12,  // $end (137x)
		44:    13,  // ',' (136x)
		59:    14,  // ';' (136x)
		57346: 15,  // IDENT (135x)
		58:    16,  // ':' (132x)
		41:    17,  // ')' (125x)
		57405: 18,  // EMPTYARR (118x)
		57401: 19,  // MAP (118x)
		93:    20,  // ']' (101x)
		46:    21,  // '.' (99x)
		33:    22,  // '!' (98x)
		94:    23,  // '^' (98x)
		57400: 24,  // CLOSE (98x)
		57399: 25,  // DELETE (98x)
		57368: 26,  // FALSE (98x)
		57351: 27,  // FUNC (98x)
		57359: 28,  // IN (98x)
		57398: 29,  // LEN (98x)
		57395: 30,  // MAKE (98x)
		57366: 31,  // NEW (98x)
		57369: 32,  // NIL (98x)
		57347: 33,  // NUMBER (98x)
		57348: 34,  // STRING (98x)
		57367: 35,  // TRUE (98x)
		37:    36,  // '%' (97x)
		47:    37,  // '/' (97x)
		60:    38,  // '<' (97x)
		62:    39,  // '>' (97x)
		63:    40,  // '?' (97x)
		124:   41,  // '|' (97x)
		57365: 42,  // ANDAND (97x)
		57379: 43,  // ANDEQ (97x)
		57378: 44,  // DIVEQ (97x)
		57360: 45,  // EQEQ (97x)
		57362: 46,  // GE (97x)
		57363: 47,  // LE (97x)
		57376: 48,  // MINUSEQ (97x)
		57384: 49,  // MINUSMINUS (97x)
		57377: 50,  // MULEQ (97x)
		57361: 51,  // NEQ (97x)
		57370: 52,  // NILCOALESCE (97x)
		57380: 53,  // OREQ (97x)
		57364: 54,  // OROR (97x)
		57375: 55,  // PLUSEQ (97x)
		57383: 56,  // PLUSPLUS (97x)
		57385: 57,  // POW (97x)
		57386: 58,  // SHIFTLEFT (97x)
		57387: 59,  // SHIFTRIGHT (97x)
		61:    60,  // '=' (74x)
		57404: 61,  // WALRUS (73x)
		57350: 62,  // VARARG (72x)
		57471: 63,  // map_type (66x)
		57497: 64,  // slice_type (66x)
		57434: 65,  // expr_ident (55x)
		57443: 66,  // expr_map_container (49x)
		57416: 67,  // composite_lit (48x)
		57418: 68,  // const_expr (48x)
		57423: 69,  // expr (48x)
		57424: 70,  // expr_anon_call (48x)
		57425: 71,  // expr_array (48x)
		57426: 72,  // expr_assoc (48x)
		57427: 73,  // expr_binary (48x)
		57428: 74,  // expr_call (48x)
		57431: 75,  // expr_close (48x)
		57432: 76,  // expr_delete (48x)
		57433: 77,  // expr_func (48x)
		57436: 78,  // expr_item_or_slice (48x)
		57437: 79,  // expr_iterable (48x)
		57438: 80,  // expr_len (48x)
		57439: 81,  // expr_literals (48x)
		57440: 82,  // expr_literals_helper (48x)
		57441: 83,  // expr_make (48x)
		57442: 84,  // expr_map (48x)
		57447: 85,  // expr_member (48x)
		57448: 86,  // expr_member_or_ident (48x)
		57449: 87,  // expr_new (48x)
		57450: 88,  // expr_opchan (48x)
		57451: 89,  // expr_paren (48x)
		57452: 90,  // expr_ternary (48x)
		57454: 91,  // expr_unary (48x)
		57469: 92,  // literal_type (48x)
		57538: 93,  // unary_op (48x)
		57429: 94,  // expr_call_helper (33x)
		57411: 95,  // bin_op (32x)
		57475: 96,  // op_assoc1 (32x)
		57394: 97,  // CHAN (26x)
		57406: 98,  // MUT (26x)
		57402: 99,  // STRUCT (26x)
		57355: 100, // IF (19x)
		57353: 101, // VAR (19x)
		57410: 102, // array_type (18x)
		57381: 103, // BREAK (18x)
		57413: 104, // channel_type (18x)
		57382: 105, // CONTINUE (18x)
		57403: 106, // DBG (18x)
		57393: 107, // DEFER (18x)
		57357: 108, // FOR (18x)
		57392: 109, // GO (18x)
		57358: 110, // LOOP (18x)
		57371: 111, // MODULE (18x)
		57473: 112, // newline (18x)
		57492: 113, // package_name (18x)
		57493: 114, // pointer_type (18x)
		57494: 115, // qualified_ident (18x)
		57352: 116, // RETURN (18x)
		57389: 117, // SELECT (18x)
		57496: 118, // slice_count (18x)
		57529: 119, // struct_type (18x)
		57388: 120, // SWITCH (18x)
		57354: 121, // THROW (18x)
		57372: 122, // TRY (18x)
		57532: 123, // type (18x)
		57534: 124, // type_lit (18x)
		57535: 125, // type_name (18x)
		57537: 126, // typed_slice_count (18x)
		57474: 127, // newlines (16x)
		57415: 128, // comma_opt_newlines (12x)
		57455: 129, // exprs (12x)
		57412: 130, // block (9x)
		57487: 131, // opt_newlines (8x)
		57531: 132, // term (8x)
		57491: 133, // opt_term (7x)
		57417: 134, // compstmt (6x)
		57467: 135, // label (6x)
		57507: 136, // stmt_if (5x)
		57508: 137, // stmt_lets (5x)
		57509: 138, // stmt_lets_helper (5x)
		57526: 139, // stmt_var (5x)
		57527: 140, // stmt_var_or_lets (5x)
		57420: 141, // element (4x)
		57422: 142, // element_type (4x)
		57453: 143, // expr_typed_ident (4x)
		57468: 144, // labeled_stmt (4x)
		57499: 145, // stmt (4x)
		57500: 146, // stmt_break (4x)
		57501: 147, // stmt_continue (4x)
		57502: 148, // stmt_dbg (4x)
		57503: 149, // stmt_defer (4x)
		57504: 150, // stmt_expr (4x)
		57505: 151, // stmt_for (4x)
		57506: 152, // stmt_go (4x)
		57510: 153, // stmt_loop (4x)
		57511: 154, // stmt_module (4x)
		57512: 155, // stmt_return (4x)
		57513: 156, // stmt_select (4x)
		57519: 157, // stmt_switch (4x)
		57524: 158, // stmt_throw (4x)
		57525: 159, // stmt_try (4x)
		57464: 160, // key (3x)
		57466: 161, // keyed_element (3x)
		57481: 162, // opt_exprs (3x)
		57373: 163, // CATCH (2x)
		57421: 164, // element_list (2x)
		57356: 165, // ELSE (2x)
		57430: 166, // expr_callable (2x)
		57446: 167, // expr_map_key_value (2x)
		57374: 168, // FINALLY (2x)
		57461: 169, // func_expr_typed_ident (2x)
		57463: 170, // func_expr_untyped_ident (2x)
		57480: 171, // opt_expr (2x)
		57486: 172, // opt_ident (2x)
		57514: 173, // stmt_select_case (2x)
		57520: 174, // stmt_switch_case (2x)
		57409: 175, // array_length (1x)
		57414: 176, // comma (1x)
		57419: 177, // dbg_content (1x)
		57435: 178, // expr_idents (1x)
		57444: 179, // expr_map_content (1x)
		57445: 180, // expr_map_content_helper (1x)
		57456: 181, // for_content (1x)
		57457: 182, // func_expr_args (1x)
		57458: 183, // func_expr_idents (1x)
		57459: 184, // func_expr_idents_last_untyped (1x)
		57460: 185, // func_expr_idents_not_empty (1x)
		57462: 186, // func_expr_typed_idents (1x)
		57465: 187, // key_type (1x)
		57470: 188, // literal_value (1x)
		57472: 189, // maybe_else (1x)
		57476: 190, // op_lets (1x)
		57477: 191, // opt_comma (1x)
		57478: 192, // opt_comma_opt_newlines (1x)
		57479: 193, // opt_element_list (1x)
		57482: 194, // opt_finally (1x)
		57483: 195, // opt_func_return_expr_idents (1x)
		57484: 196, // opt_func_return_expr_idents1 (1x)
		57485: 197, // opt_func_return_expr_idents2 (1x)
		57488: 198, // opt_stmt_select_cases (1x)
		57489: 199, // opt_stmt_switch_cases (1x)
		57490: 200, // opt_stmt_var_or_lets (1x)
		57495: 201, // slice (1x)
		57498: 202, // start (1x)
		57515: 203, // stmt_select_cases (1x)
		57516: 204, // stmt_select_content (1x)
		57517: 205, // stmt_select_default (1x)
		57518: 206, // stmt_select_opt_default (1x)
		57521: 207, // stmt_switch_cases (1x)
		57522: 208, // stmt_switch_default (1x)
		57523: 209, // stmt_switch_opt_default (1x)
		57528: 210, // stmtsStmt (1x)
		57530: 211, // switch_content (1x)
		57397: 212, // TYPE (1x)
		57533: 213, // type_data_struct (1x)
		57536: 214, // type_struct_content (1x)
		57408: 215, // $default (0x)
		57349: 216, // ARRAY (0x)
		57345: 217, // error (0x)
		57407: 218, // UNARY (0x)
	}

	yySymNames = []string{
		"'['",
		"'*'",
		"'}'",
		"'{'",
		"'('",
		"'&'",
		"'+'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"DEFAULT",
		"CASE",
		"$end",
		"','",
		"';'",
		"IDENT",
		"':'",
		"')'",
		"EMPTYARR",
		"MAP",
		"']'",
		"'.'",
		"'!'",
		"'^'",
		"CLOSE",
		"DELETE",
		"FALSE",
		"FUNC",
		"IN",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"'%'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"'='",
		"WALRUS",
		"VARARG",
		"map_type",
		"slice_type",
		"expr_ident",
		"expr_map_container",
		"composite_lit",
		"const_expr",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_delete",
		"expr_func",
		"expr_item_or_slice",
		"expr_iterable",
		"expr_len",
		"expr_literals",
		"expr_literals_helper",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"literal_type",
		"unary_op",
		"expr_call_helper",
		"bin_op",
		"op_assoc1",
		"CHAN",
		"MUT",
		"STRUCT",
		"IF",
		"VAR",
		"array_type",
		"BREAK",
		"channel_type",
		"CONTINUE",
		"DBG",
		"DEFER",
		"FOR",
		"GO",
		"LOOP",
		"MODULE",
		"newline",
		"package_name",
		"pointer_type",
		"qualified_ident",
		"RETURN",
		"SELECT",
		"slice_count",
		"struct_type",
		"SWITCH",
		"THROW",
		"TRY",
		"type",
		"type_lit",
		"type_name",
		"typed_slice_count",
		"newlines",
		"comma_opt_newlines",
		"exprs",
		"block",
		"opt_newlines",
		"term",
		"opt_term",
		"compstmt",
		"label",
		"stmt_if",
		"stmt_lets",
		"stmt_lets_helper",
		"stmt_var",
		"stmt_var_or_lets",
		"element",
		"element_type",
		"expr_typed_ident",
		"labeled_stmt",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_dbg",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_loop",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"key",
		"keyed_element",
		"opt_exprs",
		"CATCH",
		"element_list",
		"ELSE",
		"expr_callable",
		"expr_map_key_value",
		"FINALLY",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"opt_expr",
		"opt_ident",
		"stmt_select_case",
		"stmt_switch_case",
		"array_length",
		"comma",
		"dbg_content",
		"expr_idents",
		"expr_map_content",
		"expr_map_content_helper",
		"for_content",
		"func_expr_args",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"key_type",
		"literal_value",
		"maybe_else",
		"op_lets",
		"opt_comma",
		"opt_comma_opt_newlines",
		"opt_element_list",
		"opt_finally",
		"opt_func_return_expr_idents",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"opt_stmt_select_cases",
		"opt_stmt_switch_cases",
		"opt_stmt_var_or_lets",
		"slice",
		"start",
		"stmt_select_cases",
		"stmt_select_content",
		"stmt_select_default",
		"stmt_select_opt_default",
		"stmt_switch_cases",
		"stmt_switch_default",
		"stmt_switch_opt_default",
		"stmtsStmt",
		"switch_content",
		"TYPE",
		"type_data_struct",
		"type_struct_content",
		"$default",
		"ARRAY",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {202, 1},
		2:   {134, 1},
		3:   {134, 3},
		4:   {210, 1},
		5:   {210, 3},
		6:   {145, 1},
		7:   {145, 1},
		8:   {145, 1},
		9:   {145, 1},
		10:  {145, 1},
		11:  {145, 1},
		12:  {145, 1},
		13:  {145, 1},
		14:  {145, 1},
		15:  {145, 1},
		16:  {145, 1},
		17:  {145, 1},
		18:  {145, 1},
		19:  {145, 1},
		20:  {145, 1},
		21:  {145, 1},
		22:  {145, 1},
		23:  {69, 1},
		24:  {69, 1},
		25:  {69, 1},
		26:  {69, 1},
		27:  {69, 1},
		28:  {69, 1},
		29:  {69, 1},
		30:  {69, 1},
		31:  {69, 1},
		32:  {69, 1},
		33:  {69, 1},
		34:  {69, 1},
		35:  {79, 1},
		36:  {79, 1},
		37:  {79, 1},
		38:  {79, 1},
		39:  {79, 1},
		40:  {79, 1},
		41:  {79, 1},
		42:  {79, 1},
		43:  {130, 3},
		44:  {135, 1},
		45:  {144, 4},
		46:  {146, 1},
		47:  {146, 2},
		48:  {147, 1},
		49:  {147, 2},
		50:  {155, 2},
		51:  {158, 2},
		52:  {154, 3},
		53:  {150, 1},
		54:  {152, 2},
		55:  {149, 2},
		56:  {159, 6},
		57:  {194, 0},
		58:  {194, 2},
		59:  {200, 0},
		60:  {200, 1},
		61:  {140, 1},
		62:  {140, 1},
		63:  {139, 4},
		64:  {137, 1},
		65:  {138, 3},
		66:  {138, 4},
		67:  {190, 1},
		68:  {190, 1},
		69:  {136, 4},
		70:  {189, 0},
		71:  {189, 2},
		72:  {189, 2},
		73:  {153, 2},
		74:  {151, 3},
		75:  {181, 1},
		76:  {181, 3},
		77:  {181, 5},
		78:  {181, 5},
		79:  {156, 4},
		80:  {204, 3},
		81:  {198, 0},
		82:  {198, 1},
		83:  {203, 1},
		84:  {203, 2},
		85:  {173, 4},
		86:  {206, 0},
		87:  {206, 1},
		88:  {205, 3},
		89:  {157, 5},
		90:  {211, 3},
		91:  {199, 0},
		92:  {199, 1},
		93:  {207, 1},
		94:  {207, 2},
		95:  {174, 4},
		96:  {209, 0},
		97:  {209, 1},
		98:  {208, 3},
		99:  {195, 0},
		100: {195, 1},
		101: {195, 3},
		102: {196, 0},
		103: {196, 1},
		104: {197, 1},
		105: {197, 3},
		106: {183, 0},
		107: {183, 1},
		108: {185, 1},
		109: {185, 1},
		110: {170, 1},
		111: {169, 1},
		112: {184, 1},
		113: {184, 3},
		114: {186, 1},
		115: {186, 3},
		116: {162, 0},
		117: {162, 1},
		118: {129, 1},
		119: {129, 3},
		120: {171, 0},
		121: {171, 1},
		122: {148, 3},
		123: {148, 4},
		124: {177, 1},
		125: {80, 4},
		126: {89, 3},
		127: {141, 1},
		128: {164, 1},
		129: {164, 3},
		130: {193, 0},
		131: {193, 1},
		132: {160, 1},
		133: {161, 1},
		134: {161, 3},
		135: {67, 2},
		136: {92, 1},
		137: {175, 1},
		138: {102, 4},
		139: {64, 2},
		140: {188, 4},
		141: {71, 1},
		142: {71, 3},
		143: {90, 5},
		144: {87, 4},
		145: {88, 2},
		146: {76, 4},
		147: {76, 6},
		148: {75, 4},
		149: {81, 1},
		150: {82, 1},
		151: {82, 1},
		152: {82, 1},
		153: {68, 1},
		154: {68, 1},
		155: {68, 1},
		156: {86, 1},
		157: {86, 1},
		158: {143, 2},
		159: {143, 3},
		160: {172, 0},
		161: {172, 1},
		162: {85, 3},
		163: {166, 1},
		164: {166, 1},
		165: {74, 2},
		166: {70, 2},
		167: {94, 4},
		168: {94, 3},
		169: {93, 1},
		170: {93, 1},
		171: {93, 1},
		172: {93, 1},
		173: {93, 1},
		174: {93, 1},
		175: {91, 2},
		176: {95, 1},
		177: {95, 1},
		178: {95, 1},
		179: {95, 1},
		180: {95, 1},
		181: {95, 1},
		182: {95, 1},
		183: {95, 1},
		184: {95, 1},
		185: {95, 1},
		186: {95, 1},
		187: {95, 1},
		188: {95, 1},
		189: {95, 1},
		190: {95, 1},
		191: {95, 1},
		192: {95, 1},
		193: {95, 1},
		194: {95, 1},
		195: {95, 1},
		196: {95, 1},
		197: {95, 1},
		198: {95, 1},
		199: {95, 1},
		200: {95, 1},
		201: {73, 3},
		202: {73, 3},
		203: {73, 3},
		204: {73, 1},
		205: {96, 1},
		206: {96, 1},
		207: {72, 2},
		208: {77, 7},
		209: {182, 3},
		210: {182, 2},
		211: {182, 1},
		212: {83, 4},
		213: {83, 6},
		214: {83, 8},
		215: {83, 7},
		216: {123, 1},
		217: {123, 1},
		218: {124, 1},
		219: {124, 1},
		220: {124, 1},
		221: {124, 1},
		222: {124, 1},
		223: {124, 1},
		224: {124, 1},
		225: {125, 1},
		226: {125, 1},
		227: {113, 1},
		228: {115, 3},
		229: {114, 2},
		230: {119, 4},
		231: {104, 2},
		232: {187, 1},
		233: {142, 1},
		234: {63, 5},
		235: {214, 3},
		236: {213, 1},
		237: {213, 3},
		238: {126, 2},
		239: {118, 1},
		240: {118, 2},
		241: {84, 2},
		242: {84, 1},
		243: {66, 3},
		244: {179, 1},
		245: {179, 3},
		246: {180, 1},
		247: {180, 3},
		248: {167, 3},
		249: {78, 4},
		250: {201, 3},
		251: {201, 2},
		252: {201, 2},
		253: {201, 1},
		254: {178, 1},
		255: {178, 3},
		256: {65, 1},
		257: {176, 1},
		258: {191, 0},
		259: {191, 1},
		260: {133, 0},
		261: {133, 1},
		262: {132, 1},
		263: {132, 2},
		264: {131, 0},
		265: {131, 1},
		266: {127, 1},
		267: {127, 2},
		268: {112, 1},
		269: {128, 2},
		270: {192, 1},
		271: {192, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [417][]uint16{
		// 0
		{12, 12, 3: 12, 12, 12, 12, 12, 12, 280, 12: 12, 14: 278, 12, 18: 12, 12, 22: 12, 12, 12, 12, 12, 12, 29: 12, 12, 12, 12, 12, 12, 12, 98: 12, 100: 12, 12, 103: 12, 105: 12, 12, 12, 12, 12, 12, 12, 279, 116: 12, 12, 120: 12, 12, 12, 127: 277, 132: 276, 275, 274, 202: 273},
		{12: 272},
		{12: 271},
		{351, 369, 270, 378, 347, 370, 365, 366, 353, 10: 270, 270, 270, 15: 323, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 330, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 98: 339, 100: 340, 336, 103: 325, 105: 326, 345, 332, 342, 331, 341, 329, 116: 327, 343, 120: 344, 328, 333, 129: 338, 135: 324, 293, 335, 337, 334, 286, 144: 287, 285, 288, 289, 302, 300, 301, 295, 299, 294, 292, 290, 298, 297, 291, 296, 210: 284},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 10: 11, 11, 11, 15: 11, 18: 11, 11, 22: 11, 11, 11, 11, 11, 11, 29: 11, 11, 11, 11, 11, 11, 11, 98: 11, 100: 11, 11, 103: 11, 105: 11, 11, 11, 11, 11, 11, 11, 116: 11, 11, 120: 11, 11, 11},
		// 5
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 280, 10, 10, 10, 15: 10, 18: 10, 10, 22: 10, 10, 10, 10, 10, 10, 29: 10, 10, 10, 10, 10, 10, 10, 98: 10, 100: 10, 10, 103: 10, 105: 10, 10, 10, 10, 10, 10, 10, 283, 116: 10, 10, 120: 10, 10, 10},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 280, 8, 8, 8, 15: 8, 18: 8, 8, 22: 8, 8, 8, 8, 8, 8, 29: 8, 8, 8, 8, 8, 8, 8, 98: 8, 100: 8, 8, 103: 8, 105: 8, 8, 8, 8, 8, 8, 8, 279, 116: 8, 8, 120: 8, 8, 8, 127: 282, 131: 281},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 15: 6, 18: 6, 6, 22: 6, 6, 6, 6, 6, 6, 29: 6, 6, 6, 6, 6, 6, 6, 97: 6, 6, 6, 6, 6, 103: 6, 105: 6, 6, 6, 6, 6, 6, 6, 116: 6, 6, 120: 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 15: 4, 18: 4, 4, 22: 4, 4, 4, 4, 4, 4, 29: 4, 4, 4, 4, 4, 4, 4, 97: 4, 4, 4, 4, 4, 103: 4, 105: 4, 4, 4, 4, 4, 4, 4, 116: 4, 4, 120: 4, 4, 4},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 10: 9, 9, 9, 15: 9, 18: 9, 9, 22: 9, 9, 9, 9, 9, 9, 29: 9, 9, 9, 9, 9, 9, 9, 98: 9, 100: 9, 9, 103: 9, 105: 9, 9, 9, 9, 9, 9, 9, 116: 9, 9, 120: 9, 9, 9},
		// 10
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 280, 7, 7, 7, 15: 7, 18: 7, 7, 22: 7, 7, 7, 7, 7, 7, 29: 7, 7, 7, 7, 7, 7, 7, 97: 7, 7, 7, 7, 7, 103: 7, 105: 7, 7, 7, 7, 7, 7, 7, 283, 116: 7, 7, 120: 7, 7, 7},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 15: 5, 18: 5, 5, 22: 5, 5, 5, 5, 5, 5, 29: 5, 5, 5, 5, 5, 5, 5, 97: 5, 5, 5, 5, 5, 103: 5, 105: 5, 5, 5, 5, 5, 5, 5, 116: 5, 5, 120: 5, 5, 5},
		{2: 12, 9: 280, 12, 12, 12, 14: 278, 112: 279, 127: 277, 132: 687, 686},
		{2: 268, 9: 268, 268, 268, 268, 14: 268},
		{2: 266, 9: 266, 266, 266, 266, 14: 266, 16: 266},
		// 15
		{2: 265, 9: 265, 265, 265, 265, 14: 265, 16: 265},
		{2: 264, 9: 264, 264, 264, 264, 14: 264, 16: 264},
		{2: 263, 9: 263, 263, 263, 263, 14: 263, 16: 263},
		{2: 262, 9: 262, 262, 262, 262, 14: 262, 16: 262},
		{2: 261, 9: 261, 261, 261, 261, 14: 261, 16: 261},
		// 20
		{2: 260, 9: 260, 260, 260, 260, 14: 260, 16: 260},
		{2: 259, 9: 259, 259, 259, 259, 14: 259, 16: 259},
		{2: 258, 9: 258, 258, 258, 258, 14: 258, 16: 258},
		{2: 257, 9: 257, 257, 257, 257, 14: 257, 16: 257},
		{2: 256, 9: 256, 256, 256, 256, 14: 256, 16: 256},
		// 25
		{2: 255, 9: 255, 255, 255, 255, 14: 255, 16: 255},
		{2: 254, 9: 254, 254, 254, 254, 14: 254, 16: 254},
		{2: 253, 9: 253, 253, 253, 253, 14: 253, 16: 253},
		{2: 252, 9: 252, 252, 252, 252, 14: 252, 16: 252},
		{2: 251, 9: 251, 251, 251, 251, 14: 251, 16: 251},
		// 30
		{2: 250, 9: 250, 250, 250, 250, 14: 250, 16: 250},
		{249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 16: 249, 249, 20: 249, 249, 28: 249, 36: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249},
		{248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 16: 248, 248, 20: 248, 248, 28: 248, 36: 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248},
		{247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 16: 247, 247, 20: 247, 247, 28: 247, 36: 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247},
		{246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 16: 246, 246, 20: 246, 246, 28: 246, 36: 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246},
		// 35
		{245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 16: 245, 245, 20: 245, 245, 28: 245, 36: 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245},
		{244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 16: 244, 244, 20: 244, 244, 28: 244, 36: 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244},
		{243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 16: 243, 243, 20: 243, 243, 28: 243, 36: 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243},
		{242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 16: 242, 242, 20: 242, 242, 28: 242, 36: 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242},
		{241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 16: 241, 241, 20: 241, 241, 28: 241, 36: 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241},
		// 40
		{240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 16: 240, 240, 20: 240, 240, 28: 240, 36: 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240},
		{239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 16: 239, 239, 20: 239, 239, 28: 239, 36: 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239},
		{238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 16: 238, 238, 20: 238, 238, 28: 238, 36: 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238},
		{237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 16: 237, 237, 20: 237, 237, 28: 237, 36: 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237},
		{236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 16: 236, 236, 20: 236, 236, 28: 236, 36: 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236},
		// 45
		{235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 16: 235, 235, 20: 235, 235, 28: 235, 36: 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235},
		{234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 16: 234, 234, 20: 234, 234, 28: 234, 36: 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234},
		{233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 16: 233, 233, 20: 233, 233, 28: 233, 36: 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233},
		{232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 16: 232, 232, 20: 232, 232, 28: 232, 36: 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232},
		{231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 16: 231, 231, 20: 231, 231, 28: 231, 36: 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231},
		// 50
		{230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 16: 230, 230, 20: 230, 230, 28: 230, 36: 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230},
		{16, 16, 16, 4: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16: 228, 21: 16, 28: 16, 36: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{16: 683},
		{2: 226, 9: 226, 226, 226, 226, 14: 226, 680, 226, 135: 682},
		{2: 224, 9: 224, 224, 224, 224, 14: 224, 680, 224, 135: 681},
		// 55
		{351, 369, 156, 378, 347, 370, 365, 366, 353, 156, 156, 156, 156, 14: 156, 384, 156, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 440, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 129: 600, 162: 679},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 678, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{15: 676},
		{427, 397, 219, 4: 394, 405, 395, 396, 419, 219, 219, 219, 219, 154, 219, 16: 219, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 154, 154, 94: 393, 420, 425},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 642, 672, 317, 372, 308, 673, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 166: 675},
		// 60
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 642, 672, 317, 372, 308, 673, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 166: 674},
		{3: 532, 130: 665},
		{2: 211, 9: 211, 211, 211, 211, 14: 211, 16: 211},
		{2: 210, 9: 210, 210, 210, 210, 14: 210, 16: 210},
		{15: 384, 65: 660, 178: 659},
		// 65
		{2: 208, 9: 208, 208, 208, 208, 14: 208, 16: 208},
		{13: 387, 60: 657, 656, 128: 443, 190: 655},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 440, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 129: 652},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 646, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{3: 532, 130: 645},
		// 70
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 14: 213, 630, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 629, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 98: 339, 101: 336, 129: 338, 137: 335, 337, 334, 627, 181: 628, 200: 631},
		{3: 610},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 591, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{4: 586},
		{4: 583},
		// 75
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 581, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{3: 574, 188: 573},
		{3: 136},
		{454, 468, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 465, 131, 131, 455, 375, 131, 131, 28: 131, 36: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 476, 457, 456, 461, 142: 496},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 562, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 141: 565, 160: 566, 563, 164: 564},
		// 80
		{4: 559},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 558, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{4: 552},
		{4: 549},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 16: 123, 123, 20: 123, 123, 28: 123, 36: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
		// 85
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 16: 122, 122, 20: 122, 122, 28: 122, 36: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 16: 121, 121, 20: 121, 121, 28: 121, 36: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 16: 120, 120, 20: 120, 120, 28: 120, 36: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 16: 119, 119, 20: 119, 119, 28: 119, 36: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 16: 118, 118, 20: 118, 118, 28: 118, 36: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		// 90
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 16: 117, 117, 20: 117, 117, 28: 117, 36: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{116, 116, 116, 116, 394, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 16: 116, 116, 20: 116, 116, 28: 116, 36: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 94: 548},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 16: 115, 115, 20: 115, 115, 28: 115, 36: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		{103, 103, 3: 103, 103, 103, 103, 103, 103, 15: 103, 18: 103, 103, 22: 103, 103, 103, 103, 103, 103, 29: 103, 103, 103, 103, 103, 103, 103},
		{102, 102, 3: 102, 102, 102, 102, 102, 102, 15: 102, 18: 102, 102, 22: 102, 102, 102, 102, 102, 102, 29: 102, 102, 102, 102, 102, 102, 102},
		// 95
		{101, 101, 3: 101, 101, 101, 101, 101, 101, 15: 101, 18: 101, 101, 22: 101, 101, 101, 101, 101, 101, 29: 101, 101, 101, 101, 101, 101, 101},
		{100, 100, 3: 100, 100, 100, 100, 100, 100, 15: 100, 18: 100, 100, 22: 100, 100, 100, 100, 100, 100, 29: 100, 100, 100, 100, 100, 100, 100},
		{99, 99, 3: 99, 99, 99, 99, 99, 99, 15: 99, 18: 99, 99, 22: 99, 99, 99, 99, 99, 99, 29: 99, 99, 99, 99, 99, 99, 99},
		{98, 98, 3: 98, 98, 98, 98, 98, 98, 15: 98, 18: 98, 98, 22: 98, 98, 98, 98, 98, 98, 29: 98, 98, 98, 98, 98, 98, 98},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 547, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		// 100
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 16: 68, 68, 20: 68, 68, 28: 68, 36: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		{4: 112, 15: 516, 172: 517},
		{4: 502},
		{453},
		{3: 378, 66: 452},
		// 105
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 16: 30, 30, 20: 30, 30, 28: 30, 36: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 280, 15: 8, 18: 8, 8, 22: 8, 8, 8, 8, 8, 8, 29: 8, 8, 8, 8, 8, 8, 8, 112: 279, 127: 282, 131: 380, 179: 379},
		{2: 451},
		{351, 369, 28, 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 381, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 167: 383, 180: 382},
		{427, 397, 4: 394, 405, 395, 396, 419, 16: 426, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		// 110
		{2: 8, 9: 280, 13: 387, 112: 279, 127: 282, 386, 131: 388, 192: 385},
		{2: 26, 9: 26, 13: 26},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 28: 16, 36: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 97: 16, 99: 16},
		{2: 27},
		{351, 369, 2, 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 381, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 167: 390},
		// 115
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 280, 15: 8, 18: 8, 8, 22: 8, 8, 8, 8, 8, 8, 29: 8, 8, 8, 8, 8, 8, 8, 97: 8, 8, 8, 112: 279, 127: 282, 131: 389},
		{2: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 15: 3, 18: 3, 3, 22: 3, 3, 3, 3, 3, 3, 29: 3, 3, 3, 3, 3, 3, 3, 97: 3, 3, 3},
		{2: 25, 9: 25, 13: 25},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 448, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		// 120
		{15: 447},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 16: 106, 106, 20: 106, 106, 28: 106, 36: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 17: 156, 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 440, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 129: 439, 162: 441},
		{96, 96, 3: 96, 96, 96, 96, 96, 96, 15: 96, 18: 96, 96, 22: 96, 96, 96, 96, 96, 96, 29: 96, 96, 96, 96, 96, 96, 96},
		{95, 95, 3: 95, 95, 95, 95, 95, 95, 15: 95, 18: 95, 95, 22: 95, 95, 95, 95, 95, 95, 29: 95, 95, 95, 95, 95, 95, 95},
		// 125
		{94, 94, 3: 94, 94, 94, 94, 94, 94, 15: 94, 18: 94, 94, 22: 94, 94, 94, 94, 94, 94, 29: 94, 94, 94, 94, 94, 94, 94},
		{93, 93, 3: 93, 93, 93, 93, 93, 93, 15: 93, 18: 93, 93, 22: 93, 93, 93, 93, 93, 93, 29: 93, 93, 93, 93, 93, 93, 93},
		{92, 92, 3: 92, 92, 92, 92, 92, 92, 15: 92, 18: 92, 92, 22: 92, 92, 92, 92, 92, 92, 29: 92, 92, 92, 92, 92, 92, 92},
		{91, 91, 3: 91, 91, 91, 91, 91, 91, 15: 91, 18: 91, 91, 22: 91, 91, 91, 91, 91, 91, 29: 91, 91, 91, 91, 91, 91, 91},
		{90, 90, 3: 90, 90, 90, 90, 90, 90, 15: 90, 18: 90, 90, 22: 90, 90, 90, 90, 90, 90, 29: 90, 90, 90, 90, 90, 90, 90},
		// 130
		{89, 89, 3: 89, 89, 89, 89, 89, 89, 15: 89, 18: 89, 89, 22: 89, 89, 89, 89, 89, 89, 29: 89, 89, 89, 89, 89, 89, 89},
		{88, 88, 3: 88, 88, 88, 88, 88, 88, 15: 88, 18: 88, 88, 22: 88, 88, 88, 88, 88, 88, 29: 88, 88, 88, 88, 88, 88, 88},
		{87, 87, 3: 87, 87, 87, 87, 87, 87, 15: 87, 18: 87, 87, 22: 87, 87, 87, 87, 87, 87, 29: 87, 87, 87, 87, 87, 87, 87},
		{86, 86, 3: 86, 86, 86, 86, 86, 86, 15: 86, 18: 86, 86, 22: 86, 86, 86, 86, 86, 86, 29: 86, 86, 86, 86, 86, 86, 86},
		{85, 85, 3: 85, 85, 85, 85, 85, 85, 15: 85, 18: 85, 85, 22: 85, 85, 85, 85, 85, 85, 29: 85, 85, 85, 85, 85, 85, 85},
		// 135
		{84, 84, 3: 84, 84, 84, 84, 84, 84, 15: 84, 18: 84, 84, 22: 84, 84, 84, 84, 84, 84, 29: 84, 84, 84, 84, 84, 84, 84},
		{83, 83, 3: 83, 83, 83, 83, 83, 83, 15: 83, 18: 83, 83, 22: 83, 83, 83, 83, 83, 83, 29: 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 3: 82, 82, 82, 82, 82, 82, 15: 82, 18: 82, 82, 22: 82, 82, 82, 82, 82, 82, 29: 82, 82, 82, 82, 82, 82, 82},
		{81, 81, 3: 81, 81, 81, 81, 81, 81, 15: 81, 18: 81, 81, 22: 81, 81, 81, 81, 81, 81, 29: 81, 81, 81, 81, 81, 81, 81},
		{80, 80, 3: 80, 80, 80, 80, 80, 80, 15: 80, 18: 80, 80, 22: 80, 80, 80, 80, 80, 80, 29: 80, 80, 80, 80, 80, 80, 80},
		// 140
		{79, 79, 3: 79, 79, 79, 79, 79, 79, 15: 79, 18: 79, 79, 22: 79, 79, 79, 79, 79, 79, 29: 79, 79, 79, 79, 79, 79, 79},
		{78, 78, 3: 78, 78, 78, 78, 78, 78, 15: 78, 18: 78, 78, 22: 78, 78, 78, 78, 78, 78, 29: 78, 78, 78, 78, 78, 78, 78},
		{77, 77, 3: 77, 77, 77, 77, 77, 77, 15: 77, 18: 77, 77, 22: 77, 77, 77, 77, 77, 77, 29: 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 3: 76, 76, 76, 76, 76, 76, 15: 76, 18: 76, 76, 22: 76, 76, 76, 76, 76, 76, 29: 76, 76, 76, 76, 76, 76, 76},
		{75, 75, 3: 75, 75, 75, 75, 75, 75, 15: 75, 18: 75, 75, 22: 75, 75, 75, 75, 75, 75, 29: 75, 75, 75, 75, 75, 75, 75},
		// 145
		{74, 74, 3: 74, 74, 74, 74, 74, 74, 15: 74, 18: 74, 74, 22: 74, 74, 74, 74, 74, 74, 29: 74, 74, 74, 74, 74, 74, 74},
		{73, 73, 3: 73, 73, 73, 73, 73, 73, 15: 73, 18: 73, 73, 22: 73, 73, 73, 73, 73, 73, 29: 73, 73, 73, 73, 73, 73, 73},
		{72, 72, 3: 72, 72, 72, 72, 72, 72, 15: 72, 18: 72, 72, 22: 72, 72, 72, 72, 72, 72, 29: 72, 72, 72, 72, 72, 72, 72},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 438, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 437, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		// 150
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 436, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 16: 67, 67, 20: 67, 67, 28: 67, 36: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 16: 66, 66, 20: 66, 66, 28: 66, 36: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 16: 65, 65, 20: 65, 65, 28: 65, 36: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 435, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		// 155
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 430, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 428, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 201: 429},
		{427, 397, 4: 394, 405, 395, 396, 419, 16: 433, 20: 19, 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{20: 432},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 431, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{427, 397, 4: 394, 405, 395, 396, 419, 20: 20, 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		// 160
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 16: 23, 23, 20: 23, 23, 28: 23, 36: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 21, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 434, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{427, 397, 4: 394, 405, 395, 396, 419, 20: 22, 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{427, 397, 24, 4: 394, 405, 395, 396, 419, 24, 13: 24, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{427, 69, 69, 69, 394, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 16: 69, 69, 20: 69, 392, 28: 422, 36: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 424, 69, 69, 69, 69, 69, 69, 423, 69, 69, 69, 69, 69, 69, 94: 393, 420, 425},
		// 165
		{427, 397, 70, 70, 394, 405, 395, 396, 70, 70, 70, 70, 70, 70, 70, 16: 70, 70, 20: 70, 392, 28: 422, 36: 400, 398, 70, 70, 70, 403, 70, 70, 70, 70, 70, 70, 70, 424, 70, 70, 70, 70, 70, 70, 423, 70, 401, 402, 70, 70, 70, 94: 393, 420, 425},
		{427, 397, 71, 71, 394, 405, 395, 396, 419, 71, 71, 71, 71, 71, 71, 16: 71, 71, 20: 71, 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 71, 71, 71, 94: 393, 420, 425},
		{13: 387, 17: 155, 62: 444, 128: 443},
		{427, 397, 154, 4: 394, 405, 395, 396, 419, 154, 154, 154, 154, 154, 154, 16: 154, 154, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 61: 154, 154, 94: 393, 420, 425},
		{17: 442},
		// 170
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 16: 104, 104, 20: 104, 104, 28: 104, 36: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 446, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{17: 445},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 16: 105, 105, 20: 105, 105, 28: 105, 36: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105},
		{427, 397, 153, 4: 394, 405, 395, 396, 419, 153, 153, 153, 153, 153, 153, 16: 153, 153, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 153, 153, 153, 94: 393, 420, 425},
		// 175
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 16: 110, 110, 20: 110, 110, 28: 110, 36: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		{427, 397, 4: 394, 405, 395, 396, 419, 16: 449, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 450, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{427, 397, 129, 129, 394, 405, 395, 396, 419, 129, 129, 129, 129, 129, 129, 16: 129, 129, 20: 129, 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 129, 129, 421, 409, 411, 129, 424, 129, 407, 412, 129, 404, 129, 423, 129, 401, 402, 129, 129, 129, 94: 393, 420, 425},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 16: 29, 29, 20: 29, 29, 28: 29, 36: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		// 180
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 16: 31, 31, 20: 31, 31, 28: 31, 36: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{454, 468, 15: 465, 18: 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 471, 457, 456, 461, 187: 472},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 498, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 175: 499},
		{454, 468, 15: 465, 18: 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 497, 464, 123: 476, 457, 456, 461, 142: 496},
		{2: 56, 56, 9: 56, 13: 56, 17: 56, 20: 56},
		// 185
		{2: 55, 55, 9: 55, 13: 55, 17: 55, 20: 55},
		{2: 54, 54, 9: 54, 13: 54, 17: 54, 20: 54},
		{2: 53, 53, 9: 53, 13: 53, 17: 53, 20: 53},
		{2: 52, 52, 9: 52, 13: 52, 17: 52, 20: 52},
		{2: 51, 51, 9: 51, 13: 51, 17: 51, 20: 51},
		// 190
		{2: 50, 50, 9: 50, 13: 50, 17: 50, 20: 50},
		{2: 49, 49, 9: 49, 13: 49, 17: 49, 20: 49},
		{2: 48, 48, 9: 48, 13: 48, 17: 48, 20: 48},
		{2: 47, 47, 9: 47, 13: 47, 17: 47, 20: 47, 45},
		{2: 46, 46, 9: 46, 13: 46, 17: 46, 20: 46},
		// 195
		{21: 494},
		{454, 468, 15: 465, 18: 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 493, 457, 456, 461},
		{3: 479},
		{454, 468, 15: 465, 18: 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 478, 457, 456, 461},
		{20: 40},
		// 200
		{20: 475},
		{454, 468, 15: 465, 18: 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 474, 457, 456, 461},
		{2: 34, 34, 9: 34, 13: 34, 17: 34, 20: 34},
		{454, 468, 15: 465, 18: 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 476, 457, 456, 461, 142: 477},
		{2: 39, 39, 9: 39, 13: 39, 17: 39, 20: 39},
		// 205
		{2: 38, 38, 9: 38, 13: 38, 17: 38, 20: 38},
		{2: 41, 41, 9: 41, 13: 41, 17: 41, 20: 41},
		{9: 280, 15: 8, 98: 8, 112: 279, 127: 282, 131: 481, 214: 480},
		{2: 492},
		{15: 384, 65: 482, 98: 483, 143: 485, 213: 484},
		// 210
		{454, 468, 15: 465, 18: 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 491, 457, 456, 461},
		{15: 384, 65: 489},
		{2: 8, 9: 280, 13: 387, 112: 279, 127: 282, 487, 131: 486},
		{2: 36, 9: 36, 13: 36},
		{2: 37},
		// 215
		{15: 384, 65: 482, 98: 483, 143: 488},
		{2: 35, 9: 35, 13: 35},
		{454, 468, 15: 465, 18: 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 490, 457, 456, 461},
		{2: 113, 9: 113, 13: 113, 17: 113},
		{2: 114, 9: 114, 13: 114, 17: 114},
		// 220
		{2: 42, 42, 9: 42, 13: 42, 17: 42, 20: 42},
		{2: 43, 43, 9: 43, 13: 43, 17: 43, 20: 43},
		{15: 495},
		{2: 44, 44, 9: 44, 13: 44, 17: 44, 20: 44},
		{2: 133, 133, 9: 133, 13: 133, 17: 133, 20: 133},
		// 225
		{454, 468, 15: 465, 18: 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 474, 457, 456, 461},
		{427, 397, 4: 394, 405, 395, 396, 419, 20: 135, 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{20: 500},
		{454, 468, 15: 465, 18: 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 476, 457, 456, 461, 142: 501},
		{2: 134, 134, 9: 134, 13: 134, 17: 134, 20: 134},
		// 230
		{454, 468, 15: 465, 18: 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 503, 457, 456, 461, 212: 504},
		{13: 510, 17: 509},
		{15: 505},
		{13: 506},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 507, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		// 235
		{427, 397, 4: 394, 405, 395, 396, 419, 17: 508, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 16: 57, 57, 20: 57, 57, 28: 57, 36: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 16: 60, 60, 20: 60, 60, 28: 60, 36: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 511, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{427, 397, 4: 394, 405, 395, 396, 419, 13: 513, 17: 512, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		// 240
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 16: 59, 59, 20: 59, 59, 28: 59, 36: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 514, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{427, 397, 4: 394, 405, 395, 396, 419, 17: 515, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 16: 58, 58, 20: 58, 58, 28: 58, 36: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{3: 111, 111},
		// 245
		{4: 518},
		{15: 522, 17: 166, 65: 482, 98: 483, 143: 523, 169: 525, 524, 182: 526, 527, 520, 519, 521},
		{13: 387, 17: 165, 128: 544},
		{13: 164, 17: 164, 62: 542},
		{13: 163, 17: 163},
		// 250
		{16, 16, 13: 162, 15: 16, 17: 162, 16, 16, 62: 162, 97: 16, 99: 16},
		{13: 161, 17: 161},
		{13: 160, 17: 160, 62: 160},
		{13: 158, 17: 158},
		{17: 528},
		// 255
		{17: 61},
		{454, 468, 3: 173, 530, 15: 465, 18: 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 529, 457, 456, 461, 195: 531},
		{3: 172},
		{454, 468, 15: 465, 17: 170, 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 538, 457, 456, 461, 196: 536, 537},
		{3: 532, 130: 533},
		// 260
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 280, 14: 278, 12, 18: 12, 12, 22: 12, 12, 12, 12, 12, 12, 29: 12, 12, 12, 12, 12, 12, 12, 98: 12, 100: 12, 12, 103: 12, 105: 12, 12, 12, 12, 12, 12, 12, 279, 116: 12, 12, 120: 12, 12, 12, 127: 277, 132: 276, 275, 534},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 16: 64, 64, 20: 64, 64, 28: 64, 36: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{2: 535},
		{229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 16: 229, 229, 20: 229, 229, 28: 229, 36: 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 163: 229, 165: 229, 168: 229},
		{17: 541},
		// 265
		{13: 387, 17: 169, 128: 539},
		{13: 168, 17: 168},
		{454, 468, 15: 465, 18: 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 540, 457, 456, 461},
		{13: 167, 17: 167},
		{3: 171},
		// 270
		{454, 468, 15: 465, 17: 62, 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 543, 457, 456, 461},
		{17: 63},
		{15: 522, 65: 482, 98: 483, 143: 523, 169: 546, 545},
		{13: 159, 17: 159, 62: 159},
		{13: 157, 17: 157},
		// 275
		{427, 97, 97, 97, 394, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 16: 97, 97, 20: 97, 392, 28: 97, 36: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 94: 393, 420, 425},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 16: 107, 107, 20: 107, 107, 28: 107, 36: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 550, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{427, 397, 4: 394, 405, 395, 396, 419, 17: 551, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 16: 124, 124, 20: 124, 124, 28: 124, 36: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124},
		// 280
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 553, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{427, 397, 4: 394, 405, 395, 396, 419, 13: 555, 17: 554, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 16: 126, 126, 20: 126, 126, 28: 126, 36: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 556, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{427, 397, 4: 394, 405, 395, 396, 419, 17: 557, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		// 285
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 16: 125, 125, 20: 125, 125, 28: 125, 36: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		{427, 397, 127, 127, 394, 405, 395, 396, 419, 127, 127, 127, 127, 127, 127, 16: 127, 127, 20: 127, 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 127, 127, 421, 409, 411, 127, 424, 127, 407, 412, 127, 404, 127, 423, 127, 401, 402, 127, 127, 127, 94: 393, 420, 425},
		{454, 468, 15: 465, 18: 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 560, 457, 456, 461},
		{17: 561},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 16: 128, 128, 20: 128, 128, 28: 128, 36: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		// 290
		{427, 397, 145, 4: 394, 405, 395, 396, 419, 13: 145, 16: 140, 20: 145, 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{2: 144, 13: 144, 20: 144},
		{13: 570, 20: 571},
		{2: 139, 13: 139, 20: 139},
		{16: 567},
		// 295
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 568, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 141: 569},
		{427, 397, 145, 4: 394, 405, 395, 396, 419, 13: 145, 20: 145, 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{2: 138, 13: 138, 20: 138},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 562, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 141: 565, 160: 566, 572},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 16: 130, 130, 20: 130, 130, 28: 130, 36: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130},
		// 300
		{2: 143, 13: 143, 20: 143},
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 16: 137, 137, 20: 137, 137, 28: 137, 36: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137},
		{351, 369, 142, 378, 347, 370, 365, 366, 353, 13: 142, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 562, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 141: 565, 160: 566, 563, 164: 575, 193: 576},
		{2: 141, 13: 570},
		{2: 14, 13: 578, 176: 579, 191: 577},
		// 305
		{2: 580},
		{2: 15},
		{2: 13},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 16: 132, 132, 20: 132, 132, 28: 132, 36: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132},
		{427, 397, 4: 394, 405, 395, 396, 419, 17: 582, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		// 310
		{146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 16: 146, 146, 20: 146, 146, 28: 146, 36: 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 584, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{427, 397, 4: 394, 405, 395, 396, 419, 17: 585, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 16: 147, 147, 20: 147, 147, 28: 147, 36: 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147},
		{454, 468, 15: 465, 17: 587, 455, 375, 63: 462, 460, 97: 470, 99: 469, 102: 459, 104: 463, 113: 467, 458, 466, 118: 473, 464, 123: 589, 457, 456, 461, 177: 588},
		// 315
		{2: 150, 9: 150, 150, 150, 150, 14: 150, 16: 150},
		{17: 590},
		{17: 148},
		{2: 149, 9: 149, 149, 149, 149, 14: 149, 16: 149},
		{427, 397, 3: 592, 394, 405, 395, 396, 419, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		// 320
		{2: 8, 9: 280, 8, 8, 112: 279, 127: 282, 131: 594, 211: 593},
		{2: 609},
		{2: 181, 10: 181, 598, 174: 597, 199: 595, 207: 596},
		{2: 176, 10: 606, 208: 605, 604},
		{2: 180, 10: 180, 598, 174: 603},
		// 325
		{2: 179, 10: 179, 179},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 156, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 440, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 129: 600, 162: 599},
		{16: 601},
		{2: 155, 9: 155, 155, 155, 155, 387, 155, 16: 155, 128: 443},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 280, 12, 12, 14: 278, 12, 18: 12, 12, 22: 12, 12, 12, 12, 12, 12, 29: 12, 12, 12, 12, 12, 12, 12, 98: 12, 100: 12, 12, 103: 12, 105: 12, 12, 12, 12, 12, 12, 12, 279, 116: 12, 12, 120: 12, 12, 12, 127: 277, 132: 276, 275, 602},
		// 330
		{2: 177, 10: 177, 177},
		{2: 178, 10: 178, 178},
		{2: 182},
		{2: 175},
		{16: 607},
		// 335
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 280, 14: 278, 12, 18: 12, 12, 22: 12, 12, 12, 12, 12, 12, 29: 12, 12, 12, 12, 12, 12, 12, 98: 12, 100: 12, 12, 103: 12, 105: 12, 12, 12, 12, 12, 12, 12, 279, 116: 12, 12, 120: 12, 12, 12, 127: 277, 132: 276, 275, 608},
		{2: 174},
		{2: 183, 9: 183, 183, 183, 183, 14: 183, 16: 183},
		{2: 8, 9: 280, 8, 8, 112: 279, 127: 282, 131: 612, 204: 611},
		{2: 626},
		// 340
		{2: 191, 10: 191, 616, 173: 615, 198: 613, 203: 614},
		{2: 186, 10: 623, 205: 622, 621},
		{2: 190, 10: 190, 616, 173: 620},
		{2: 189, 10: 189, 189},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 323, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 330, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 98: 339, 100: 340, 336, 103: 325, 105: 326, 345, 332, 342, 331, 341, 329, 116: 327, 343, 120: 344, 328, 333, 129: 338, 135: 324, 293, 335, 337, 334, 286, 144: 287, 617, 288, 289, 302, 300, 301, 295, 299, 294, 292, 290, 298, 297, 291, 296},
		// 345
		{16: 618},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 280, 12, 12, 14: 278, 12, 18: 12, 12, 22: 12, 12, 12, 12, 12, 12, 29: 12, 12, 12, 12, 12, 12, 12, 98: 12, 100: 12, 12, 103: 12, 105: 12, 12, 12, 12, 12, 12, 12, 279, 116: 12, 12, 120: 12, 12, 12, 127: 277, 132: 276, 275, 619},
		{2: 187, 10: 187, 187},
		{2: 188, 10: 188, 188},
		{2: 192},
		// 350
		{2: 185},
		{16: 624},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 280, 14: 278, 12, 18: 12, 12, 22: 12, 12, 12, 12, 12, 12, 29: 12, 12, 12, 12, 12, 12, 12, 98: 12, 100: 12, 12, 103: 12, 105: 12, 12, 12, 12, 12, 12, 12, 279, 116: 12, 12, 120: 12, 12, 12, 127: 277, 132: 276, 275, 625},
		{2: 184},
		{2: 193, 9: 193, 193, 193, 193, 14: 193, 16: 193},
		// 355
		{14: 212},
		{3: 532, 130: 644},
		{427, 397, 3: 197, 394, 405, 395, 396, 419, 13: 154, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 154, 154, 94: 393, 420, 425},
		{16, 16, 3: 16, 16, 16, 16, 16, 16, 13: 638, 21: 16, 28: 637, 36: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{14: 632},
		// 360
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 14: 152, 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 634, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 171: 633},
		{14: 635},
		{427, 397, 3: 151, 394, 405, 395, 396, 419, 14: 151, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 634, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 171: 636},
		{3: 194},
		// 365
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 642, 318, 317, 372, 308, 319, 313, 314, 307, 321, 643, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{15: 639},
		{28: 640},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 642, 318, 317, 372, 308, 319, 313, 314, 307, 321, 641, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371},
		{249, 249, 3: 195, 249, 249, 249, 249, 249, 21: 249, 28: 249, 36: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249},
		// 370
		{427, 397, 4: 394, 405, 395, 396, 419, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{249, 249, 3: 196, 249, 249, 249, 249, 249, 21: 249, 28: 249, 36: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249},
		{2: 198, 9: 198, 198, 198, 198, 14: 198, 16: 198},
		{2: 199, 9: 199, 199, 199, 199, 14: 199, 16: 199},
		{427, 397, 3: 532, 394, 405, 395, 396, 419, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425, 130: 647},
		// 375
		{2: 202, 9: 202, 202, 202, 202, 14: 202, 16: 202, 165: 649, 189: 648},
		{2: 203, 9: 203, 203, 203, 203, 14: 203, 16: 203},
		{3: 532, 100: 340, 130: 651, 136: 650},
		{2: 201, 9: 201, 201, 201, 201, 14: 201, 16: 201},
		{2: 200, 9: 200, 200, 200, 200, 14: 200, 16: 200},
		// 380
		{13: 387, 61: 653, 128: 443},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 440, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 129: 654},
		{2: 206, 9: 206, 206, 206, 206, 387, 206, 16: 206, 128: 443},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 440, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 129: 658},
		{205, 205, 3: 205, 205, 205, 205, 205, 205, 15: 205, 18: 205, 205, 22: 205, 205, 205, 205, 205, 205, 29: 205, 205, 205, 205, 205, 205, 205},
		// 385
		{204, 204, 3: 204, 204, 204, 204, 204, 204, 15: 204, 18: 204, 204, 22: 204, 204, 204, 204, 204, 204, 29: 204, 204, 204, 204, 204, 204, 204},
		{2: 207, 9: 207, 207, 207, 207, 387, 207, 16: 207, 128: 443},
		{13: 387, 60: 661, 128: 662},
		{13: 18, 60: 18},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 384, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 440, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 129: 664},
		// 390
		{15: 384, 65: 663},
		{13: 17, 60: 17},
		{2: 209, 9: 209, 209, 209, 209, 387, 209, 16: 209, 128: 443},
		{163: 666},
		{3: 112, 15: 516, 172: 667},
		// 395
		{3: 532, 130: 668},
		{2: 215, 9: 215, 215, 215, 215, 14: 215, 16: 215, 168: 670, 194: 669},
		{2: 216, 9: 216, 216, 216, 216, 14: 216, 16: 216},
		{3: 532, 130: 671},
		{2: 214, 9: 214, 214, 214, 214, 14: 214, 16: 214},
		// 400
		{234, 234, 108, 4: 234, 234, 234, 234, 234, 108, 108, 108, 108, 14: 108, 16: 108, 21: 234, 28: 234, 36: 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234},
		{233, 233, 109, 4: 233, 233, 233, 233, 233, 109, 109, 109, 109, 14: 109, 16: 109, 21: 233, 28: 233, 36: 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233},
		{2: 217, 9: 217, 217, 217, 217, 14: 217, 16: 217},
		{2: 218, 9: 218, 218, 218, 218, 14: 218, 16: 218},
		{3: 532, 130: 677},
		// 405
		{2: 220, 9: 220, 220, 220, 220, 14: 220, 16: 220},
		{427, 397, 221, 4: 394, 405, 395, 396, 419, 221, 221, 221, 221, 14: 221, 16: 221, 21: 392, 28: 422, 36: 400, 398, 410, 408, 391, 403, 406, 417, 416, 421, 409, 411, 414, 424, 415, 407, 412, 418, 404, 413, 423, 399, 401, 402, 94: 393, 420, 425},
		{2: 222, 9: 222, 222, 222, 222, 14: 222, 16: 222},
		{2: 228, 9: 228, 228, 228, 228, 14: 228, 16: 228},
		{2: 223, 9: 223, 223, 223, 223, 14: 223, 16: 223},
		// 410
		{2: 225, 9: 225, 225, 225, 225, 14: 225, 16: 225},
		{9: 280, 14: 278, 112: 279, 127: 277, 132: 684},
		{351, 369, 3: 378, 347, 370, 365, 366, 353, 15: 323, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 330, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 98: 339, 100: 340, 336, 103: 325, 105: 326, 345, 332, 342, 331, 341, 329, 116: 327, 343, 120: 344, 328, 333, 129: 338, 135: 324, 293, 335, 337, 334, 286, 144: 287, 685, 288, 289, 302, 300, 301, 295, 299, 294, 292, 290, 298, 297, 291, 296},
		{2: 227, 9: 227, 227, 227, 227, 14: 227, 16: 227},
		{2: 269, 10: 269, 269, 269},
		// 415
		{351, 369, 11, 378, 347, 370, 365, 366, 353, 10: 11, 11, 11, 15: 323, 18: 350, 375, 22: 367, 368, 355, 354, 361, 373, 29: 346, 374, 352, 362, 357, 358, 360, 63: 376, 349, 363, 377, 304, 359, 330, 318, 317, 372, 308, 319, 313, 314, 307, 321, 303, 309, 305, 356, 311, 315, 364, 320, 310, 312, 316, 322, 306, 348, 371, 98: 339, 100: 340, 336, 103: 325, 105: 326, 345, 332, 342, 331, 341, 329, 116: 327, 343, 120: 344, 328, 333, 129: 338, 135: 324, 293, 335, 337, 334, 286, 144: 287, 688, 288, 289, 302, 300, 301, 295, 299, 294, 292, 290, 298, 297, 291, 296},
		{2: 267, 9: 267, 267, 267, 267, 14: 267},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 217

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmt
			}
		}
	case 2:
		{
			yyVAL.stmt = nil
		}
	case 3:
		{
			yyVAL.stmt = yyS[yypt-1].stmtsStmt
		}
	case 4:
		{
			yyVAL.stmtsStmt = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 5:
		{
			yyS[yypt-2].stmtsStmt.Stmts = append(yyS[yypt-2].stmtsStmt.Stmts, yyS[yypt-0].stmt)
		}
	case 43:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 45:
		{
			yyVAL.stmt = &ast.LabelStmt{Name: yyS[yypt-3].tok.Lit, Stmt: yyS[yypt-0].stmt}
		}
	case 46:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 47:
		{
			yyVAL.stmt = &ast.BreakStmt{Label: yyS[yypt-0].tok.Lit}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 48:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 49:
		{
			yyVAL.stmt = &ast.ContinueStmt{Label: yyS[yypt-0].tok.Lit}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 50:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprsExpr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 51:
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 52:
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyS[yypt-1].tok.Lit, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 53:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 54:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Go = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Go = true
			}
			yyVAL.stmt = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 55:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Defer = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Defer = true
			}
			yyVAL.stmt = &ast.DeferStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 56:
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyS[yypt-4].stmt, Var: yyS[yypt-2].opt_ident.Lit, Catch: yyS[yypt-1].stmt, Finally: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 57:
		{
			yyVAL.stmt = nil
		}
	case 58:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 59:
		{
			yyVAL.stmt = nil
		}
	case 60:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 63:
		{
			isItem := false
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprsExpr.Exprs) == 1 {
				if _, ok := yyS[yypt-0].exprsExpr.Exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					arr := &ast.ExprsExpr{}
					for _, el := range yyS[yypt-2].expr_idents {
						arr.Exprs = append(arr.Exprs, &ast.IdentExpr{Lit: el})
					}
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: arr, Rhs: yyS[yypt-0].exprsExpr.Exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprsExpr.Exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprsExpr.Exprs) && !(len(yyS[yypt-0].exprsExpr.Exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprsExpr.Exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 64:
		{
			lhs := yyS[yypt-0].stmt_lets_helper.Exprs1
			rhs := yyS[yypt-0].stmt_lets_helper.Exprs2
			isItem := false
			if len(lhs.Exprs) == 2 && len(rhs.Exprs) == 1 {
				if _, ok := rhs.Exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: lhs, Rhs: rhs.Exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.LetsStmt{Lhss: lhs, Operator: "=", Rhss: rhs, Typed: yyS[yypt-0].stmt_lets_helper.Typed, Mutable: yyS[yypt-0].stmt_lets_helper.Mutable}
				if len(lhs.Exprs) != len(rhs.Exprs) && !(len(rhs.Exprs) == 1 && len(lhs.Exprs) > len(rhs.Exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(lhs.Exprs[0].Position())
		}
	case 65:
		{
			yyVAL.stmt_lets_helper = struct {
				Exprs1, Exprs2 *ast.ExprsExpr
				Typed, Mutable bool
			}{Exprs1: yyS[yypt-2].exprsExpr, Exprs2: yyS[yypt-0].exprsExpr, Typed: yyS[yypt-1].op_lets, Mutable: false}
		}
	case 66:
		{
			yyVAL.stmt_lets_helper = struct {
				Exprs1, Exprs2 *ast.ExprsExpr
				Typed, Mutable bool
			}{Exprs1: yyS[yypt-2].exprsExpr, Exprs2: yyS[yypt-0].exprsExpr, Typed: true, Mutable: true}
		}
	case 67:
		{
			yyVAL.op_lets = true
		}
	case 68:
		{
			yyVAL.op_lets = false
		}
	case 69:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-2].expr, Then: yyS[yypt-1].stmt, Else: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 70:
		{
			yyVAL.stmt = nil
		}
	case 71:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 72:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 73:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 74:
		{
			if el, ok := yyS[yypt-1].stmt.(*ast.LoopStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			} else if el, ok := yyS[yypt-1].stmt.(*ast.ForStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			} else if el, ok := yyS[yypt-1].stmt.(*ast.CForStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			}
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 75:
		{
			yyVAL.stmt = &ast.LoopStmt{Expr: yyS[yypt-0].expr}
		}
	case 76:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: []string{yyS[yypt-2].tok.Lit}, Value: yyS[yypt-0].expr}
		}
	case 77:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: []string{yyS[yypt-4].tok.Lit, yyS[yypt-2].tok.Lit}, Value: yyS[yypt-0].expr}
		}
	case 78:
		{
			yyVAL.stmt = &ast.CForStmt{Stmt1: yyS[yypt-4].stmt, Expr2: yyS[yypt-2].expr, Expr3: yyS[yypt-0].expr}
		}
	case 79:
		{
			yyVAL.stmt = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 80:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{Cases: yyS[yypt-1].stmts, Default: yyS[yypt-0].stmt}
		}
	case 81:
		{
			yyVAL.stmts = nil
		}
	case 82:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 83:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 84:
		{
			yyVAL.stmts = append(yyVAL.stmts, yyS[yypt-0].stmt)
		}
	case 85:
		{
			yyVAL.stmt = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 86:
		{
			yyVAL.stmt = nil
		}
	case 87:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 88:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 89:
		{
			yyS[yypt-1].stmt.(*ast.SwitchStmt).Expr = yyS[yypt-3].expr
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 90:
		{
			yyVAL.stmt = &ast.SwitchStmt{Cases: yyS[yypt-1].stmts, Default: yyS[yypt-0].stmt}
		}
	case 91:
		{
			yyVAL.stmts = nil
		}
	case 92:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 93:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 94:
		{
			yyVAL.stmts = append(yyVAL.stmts, yyS[yypt-0].stmt)
		}
	case 95:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].exprsExpr, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 96:
		{
			yyVAL.stmt = nil
		}
	case 97:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 98:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 99:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 100:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 101:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents
		}
	case 102:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{}
		}
	case 103:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-0].opt_func_return_expr_idents
		}
	case 104:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 105:
		{
			yyVAL.opt_func_return_expr_idents = append(yyS[yypt-2].opt_func_return_expr_idents, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 106:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 107:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents
		}
	case 110:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 111:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].expr_typed_ident.Name, TypeData: yyS[yypt-0].expr_typed_ident.TypeData}
		}
	case 112:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 113:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 114:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 115:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 116:
		{
			yyVAL.exprsExpr = &ast.ExprsExpr{Exprs: []ast.Expr{}}
		}
	case 117:
		{
			yyVAL.exprsExpr = yyS[yypt-0].exprsExpr
		}
	case 118:
		{
			yyVAL.exprsExpr = &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 119:
		{
			yyS[yypt-2].exprsExpr.Exprs = append(yyS[yypt-2].exprsExpr.Exprs, yyS[yypt-0].expr)
		}
	case 120:
		{
			yyVAL.expr = nil
		}
	case 121:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 122:
		{
			yyVAL.stmt = &ast.DbgStmt{Expr: nil}
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 123:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 124:
		{
			yyVAL.stmt = &ast.DbgStmt{TypeData: yyS[yypt-0].type_data}
		}
	case 125:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 126:
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 128:
		{
			yyVAL.exprsExpr = &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 129:
		{
			yyS[yypt-2].exprsExpr.Exprs = append(yyS[yypt-2].exprsExpr.Exprs, yyS[yypt-0].expr)
		}
	case 130:
		{
			yyVAL.exprsExpr = nil
		}
	case 131:
		{
			yyVAL.exprsExpr = yyS[yypt-0].exprsExpr
		}
	case 133:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 134:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 135:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeSlice {
				yyVAL.expr = &ast.ArrayExpr{TypeData: yyS[yypt-1].type_data, Exprs: yyS[yypt-0].expr.(*ast.ExprsExpr)}
			} else {
				yyVAL.expr = yyS[yypt-0].expr
			}
		}
	case 138:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 139:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data}
		}
	case 140:
		{
			yyVAL.expr = yyS[yypt-2].exprsExpr
		}
	case 141:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: &ast.ExprsExpr{Exprs: []ast.Expr{}}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 142:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprsExpr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 143:
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 144:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 145:
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 146:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 147:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 148:
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 149:
		{
			yyVAL.expr = yyS[yypt-0].expr
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 150:
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 151:
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 152:
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 158:
		{
			typeData := yyS[yypt-0].type_data
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: typeData}
		}
	case 159:
		{
			typeData := yyS[yypt-0].type_data
			typeData.Mutable = true
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: typeData}
		}
	case 160:
		{
			yyVAL.opt_ident = nil
		}
	case 161:
		{
			yyVAL.opt_ident = &yyS[yypt-0].tok
		}
	case 162:
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 165:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 166:
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyS[yypt-1].expr, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 167:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  *ast.ExprsExpr
				VarArg bool
			}{Exprs: yyS[yypt-2].exprsExpr, VarArg: true}
		}
	case 168:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  *ast.ExprsExpr
				VarArg bool
			}{Exprs: yyS[yypt-1].exprsExpr}
		}
	case 169:
		{
			yyVAL.str = "+"
		}
	case 170:
		{
			yyVAL.str = "-"
		}
	case 171:
		{
			yyVAL.str = "!"
		}
	case 172:
		{
			yyVAL.str = "^"
		}
	case 173:
		{
			yyVAL.str = "*"
		}
	case 174:
		{
			yyVAL.str = "&"
		}
	case 175:
		{
			if yyS[yypt-1].str == "&" {
				if el, ok := yyS[yypt-0].expr.(*ast.IdentExpr); ok {
					yyVAL.expr = &ast.AddrExpr{Expr: el}
				} else if el, ok := yyS[yypt-0].expr.(*ast.MemberExpr); ok {
					yyVAL.expr = el
				}
			} else if yyS[yypt-1].str == "*" {
				yyVAL.expr = &ast.DerefExpr{Expr: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.UnaryExpr{Operator: yyS[yypt-1].str, Expr: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 176:
		{
			yyVAL.str = "+"
		}
	case 177:
		{
			yyVAL.str = "-"
		}
	case 178:
		{
			yyVAL.str = "*"
		}
	case 179:
		{
			yyVAL.str = "/"
		}
	case 180:
		{
			yyVAL.str = "**"
		}
	case 181:
		{
			yyVAL.str = "%"
		}
	case 182:
		{
			yyVAL.str = "<<"
		}
	case 183:
		{
			yyVAL.str = ">>"
		}
	case 184:
		{
			yyVAL.str = "|"
		}
	case 185:
		{
			yyVAL.str = "||"
		}
	case 186:
		{
			yyVAL.str = "&"
		}
	case 187:
		{
			yyVAL.str = "&&"
		}
	case 188:
		{
			yyVAL.str = "!="
		}
	case 189:
		{
			yyVAL.str = ">"
		}
	case 190:
		{
			yyVAL.str = ">="
		}
	case 191:
		{
			yyVAL.str = "<"
		}
	case 192:
		{
			yyVAL.str = "<="
		}
	case 193:
		{
			yyVAL.str = "??"
		}
	case 194:
		{
			yyVAL.str = "+="
		}
	case 195:
		{
			yyVAL.str = "-="
		}
	case 196:
		{
			yyVAL.str = "*="
		}
	case 197:
		{
			yyVAL.str = "/="
		}
	case 198:
		{
			yyVAL.str = "&="
		}
	case 199:
		{
			yyVAL.str = "|="
		}
	case 200:
		{
			yyVAL.str = "<-"
		}
	case 201:
		{
			if yyS[yypt-1].str == "??" {
				yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "<-" {
				yyVAL.expr = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "+=" ||
				yyS[yypt-1].str == "-=" ||
				yyS[yypt-1].str == "*=" ||
				yyS[yypt-1].str == "/=" ||
				yyS[yypt-1].str == "&=" ||
				yyS[yypt-1].str == "|=" {
				yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 202:
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 203:
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 205:
		{
			yyVAL.str = "++"
		}
	case 206:
		{
			yyVAL.str = "--"
		}
	case 207:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: yyS[yypt-0].str}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 208:
		{
			f := &ast.FuncExpr{Params: yyS[yypt-3].func_expr_args.Params, Returns: yyS[yypt-1].opt_func_return_expr_idents, Stmt: yyS[yypt-0].stmt, VarArg: yyS[yypt-3].func_expr_args.VarArg}
			if yyS[yypt-3].func_expr_args.TypeData != nil {
				f.Params[len(f.Params)-1].TypeData = yyS[yypt-3].func_expr_args.TypeData
			}
			if yyS[yypt-5].opt_ident != nil {
				f.Name = yyS[yypt-5].opt_ident.Lit
			}
			yyVAL.expr = f
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 209:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-2].func_expr_idents, VarArg: true, TypeData: yyS[yypt-0].type_data}
		}
	case 210:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-1].func_expr_idents, VarArg: true, TypeData: nil}
		}
	case 211:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-0].func_expr_idents, VarArg: false, TypeData: nil}
		}
	case 212:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 213:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 214:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 215:
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 225:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 226:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 228:
		{
			yyVAL.type_data = &ast.TypeStruct{Env: []string{yyS[yypt-2].tok.Lit}, Name: yyS[yypt-0].tok.Lit}
		}
	case 229:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 230:
		{
			yyVAL.type_data = yyS[yypt-1].type_data
		}
	case 231:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 234:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 235:
		{
			yyVAL.type_data = yyS[yypt-1].type_data
		}
	case 236:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-0].expr_typed_ident.Name}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].expr_typed_ident.TypeData}}
		}
	case 237:
		{
			if yyS[yypt-2].type_data == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data.StructNames = append(yyVAL.type_data.StructNames, yyS[yypt-0].expr_typed_ident.Name)
			yyVAL.type_data.StructTypes = append(yyVAL.type_data.StructTypes, yyS[yypt-0].expr_typed_ident.TypeData)
		}
	case 238:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 239:
		{
			yyVAL.slice_count = 1
		}
	case 240:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 241:
		{
			yyS[yypt-0].expr_map.TypeData = yyS[yypt-1].type_data
			yyVAL.expr = yyS[yypt-0].expr_map
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_map.Position())
		}
	case 242:
		{
			yyVAL.expr = yyS[yypt-0].expr_map
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_map.Position())
		}
	case 243:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map
		}
	case 244:
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: &ast.ExprsExpr{Exprs: []ast.Expr{}}, Values: &ast.ExprsExpr{Exprs: []ast.Expr{}}}
		}
	case 245:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map
		}
	case 246:
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].exprs[0]}}, Values: &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].exprs[1]}}}
		}
	case 247:
		{
			yyVAL.expr_map.Keys.Exprs = append(yyVAL.expr_map.Keys.Exprs, yyS[yypt-0].exprs[0])
			yyVAL.expr_map.Values.Exprs = append(yyVAL.expr_map.Values.Exprs, yyS[yypt-0].exprs[1])
		}
	case 248:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 249:
		{
			if el, ok := yyS[yypt-1].expr.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-3].expr
			} else if el, ok := yyS[yypt-1].expr.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-3].expr
			}
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 250:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: yyS[yypt-0].expr}
		}
	case 251:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-1].expr, End: nil}
		}
	case 252:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: nil, End: yyS[yypt-0].expr}
		}
	case 253:
		{
			yyVAL.expr = &ast.ItemExpr{Index: yyS[yypt-0].expr}
		}
	case 254:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].expr.(*ast.IdentExpr).Lit}
		}
	case 255:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].expr.(*ast.IdentExpr).Lit)
		}
	case 256:
		{
			yyVAL.expr = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-0].tok.Position())
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
