// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                 int
	stmtsStmt           *ast.StmtsStmt
	stmt                ast.Stmt
	expr                ast.Expr
	exprs               []ast.Expr
	stmts               []ast.Stmt
	stmt_select_content *ast.SelectBodyStmt
	expr_call_helper    struct {
		Exprs  []ast.Expr
		VarArg bool
	}
	expr_idents           []string
	func_expr_idents      []*ast.ParamExpr
	func_expr_typed_ident *ast.ParamExpr
	func_expr_args        struct {
		Params   []*ast.ParamExpr
		VarArg   bool
		TypeData *ast.TypeStruct
	}
	expr_typed_ident struct {
		Name     string
		TypeData *ast.TypeStruct
	}
	opt_func_return_expr_idents []*ast.FuncReturnValuesExpr
	expr_map                    *ast.MapExpr
	type_data                   *ast.TypeStruct
	slice_count                 int
	tok                         ast.Token
	opt_ident                   *ast.Token
	str                         string
	op_lets                     bool
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57407
	yyEofCode   = 57344
	ANDAND      = 57365
	ANDEQ       = 57379
	ARRAY       = 57349
	BREAK       = 57381
	CASE        = 57390
	CATCH       = 57373
	CHAN        = 57394
	CLOSE       = 57400
	CONTINUE    = 57382
	DBG         = 57403
	DEFAULT     = 57391
	DEFER       = 57393
	DELETE      = 57399
	DIVEQ       = 57378
	ELSE        = 57356
	EMPTYARR    = 57405
	EQEQ        = 57360
	FALSE       = 57368
	FINALLY     = 57374
	FOR         = 57357
	FUNC        = 57351
	GE          = 57362
	GO          = 57392
	IDENT       = 57346
	IF          = 57355
	IN          = 57359
	LE          = 57363
	LEN         = 57398
	LOOP        = 57358
	MAKE        = 57395
	MAP         = 57401
	MINUSEQ     = 57376
	MINUSMINUS  = 57384
	MODULE      = 57371
	MULEQ       = 57377
	NEQ         = 57361
	NEW         = 57366
	NIL         = 57369
	NILCOALESCE = 57370
	NUMBER      = 57347
	OPCHAN      = 57396
	OREQ        = 57380
	OROR        = 57364
	PLUSEQ      = 57375
	PLUSPLUS    = 57383
	POW         = 57385
	RETURN      = 57352
	SELECT      = 57389
	SHIFTLEFT   = 57386
	SHIFTRIGHT  = 57387
	STRING      = 57348
	STRUCT      = 57402
	SWITCH      = 57388
	THROW       = 57354
	TRUE        = 57367
	TRY         = 57372
	TYPE        = 57397
	UNARY       = 57406
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57404
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -238
)

var (
	yyPrec = map[int]int{
		POW:         0,
		'=':         1,
		PLUSEQ:      1,
		MINUSEQ:     1,
		DIVEQ:       1,
		MULEQ:       1,
		ANDEQ:       1,
		OREQ:        1,
		':':         2,
		OPCHAN:      3,
		'?':         4,
		NILCOALESCE: 4,
		OROR:        5,
		ANDAND:      6,
		EQEQ:        7,
		NEQ:         7,
		'<':         7,
		LE:          7,
		'>':         7,
		GE:          7,
		'+':         8,
		'-':         8,
		'|':         8,
		'^':         8,
		'*':         9,
		'/':         9,
		'%':         9,
		SHIFTLEFT:   9,
		SHIFTRIGHT:  9,
		'&':         9,
		IN:          10,
		PLUSPLUS:    11,
		MINUSMINUS:  11,
		UNARY:       12,
	}

	yyXLAT = map[int]int{
		42:    0,   // '*' (211x)
		40:    1,   // '(' (206x)
		123:   2,   // '{' (204x)
		125:   3,   // '}' (203x)
		91:    4,   // '[' (197x)
		38:    5,   // '&' (196x)
		45:    6,   // '-' (196x)
		57396: 7,   // OPCHAN (196x)
		10:    8,   // '\n' (161x)
		57391: 9,   // DEFAULT (140x)
		57390: 10,  // CASE (138x)
		59:    11,  // ';' (134x)
		57346: 12,  // IDENT (134x)
		57344: 13,  // $end (127x)
		57405: 14,  // EMPTYARR (120x)
		57401: 15,  // MAP (120x)
		44:    16,  // ',' (119x)
		58:    17,  // ':' (119x)
		41:    18,  // ')' (118x)
		46:    19,  // '.' (105x)
		33:    20,  // '!' (103x)
		94:    21,  // '^' (103x)
		57400: 22,  // CLOSE (103x)
		57403: 23,  // DBG (103x)
		57399: 24,  // DELETE (103x)
		57368: 25,  // FALSE (103x)
		57351: 26,  // FUNC (103x)
		57398: 27,  // LEN (103x)
		57395: 28,  // MAKE (103x)
		57366: 29,  // NEW (103x)
		57369: 30,  // NIL (103x)
		57347: 31,  // NUMBER (103x)
		57348: 32,  // STRING (103x)
		57367: 33,  // TRUE (103x)
		93:    34,  // ']' (96x)
		57359: 35,  // IN (95x)
		37:    36,  // '%' (93x)
		43:    37,  // '+' (93x)
		47:    38,  // '/' (93x)
		60:    39,  // '<' (93x)
		62:    40,  // '>' (93x)
		63:    41,  // '?' (93x)
		124:   42,  // '|' (93x)
		57365: 43,  // ANDAND (93x)
		57379: 44,  // ANDEQ (93x)
		57378: 45,  // DIVEQ (93x)
		57360: 46,  // EQEQ (93x)
		57362: 47,  // GE (93x)
		57363: 48,  // LE (93x)
		57376: 49,  // MINUSEQ (93x)
		57384: 50,  // MINUSMINUS (93x)
		57377: 51,  // MULEQ (93x)
		57361: 52,  // NEQ (93x)
		57370: 53,  // NILCOALESCE (93x)
		57380: 54,  // OREQ (93x)
		57364: 55,  // OROR (93x)
		57375: 56,  // PLUSEQ (93x)
		57383: 57,  // PLUSPLUS (93x)
		57385: 58,  // POW (93x)
		57386: 59,  // SHIFTLEFT (93x)
		57387: 60,  // SHIFTRIGHT (93x)
		61:    61,  // '=' (72x)
		57350: 62,  // VARARG (71x)
		57404: 63,  // WALRUS (69x)
		57479: 64,  // slice_count (57x)
		57459: 65,  // map_type (55x)
		57514: 66,  // typed_slice_count (55x)
		57429: 67,  // expr_ident (48x)
		57438: 68,  // expr_map_container (44x)
		57412: 69,  // const_expr (42x)
		57416: 70,  // expr (42x)
		57417: 71,  // expr_anon_call (42x)
		57418: 72,  // expr_array (42x)
		57419: 73,  // expr_assoc (42x)
		57420: 74,  // expr_binary (42x)
		57421: 75,  // expr_call (42x)
		57424: 76,  // expr_close (42x)
		57425: 77,  // expr_dbg (42x)
		57426: 78,  // expr_delete (42x)
		57428: 79,  // expr_func (42x)
		57431: 80,  // expr_item_or_slice (42x)
		57432: 81,  // expr_iterable (42x)
		57433: 82,  // expr_len (42x)
		57434: 83,  // expr_literals (42x)
		57435: 84,  // expr_literals_helper (42x)
		57436: 85,  // expr_make (42x)
		57437: 86,  // expr_map (42x)
		57442: 87,  // expr_member (42x)
		57443: 88,  // expr_member_or_ident (42x)
		57444: 89,  // expr_new (42x)
		57445: 90,  // expr_opchan (42x)
		57446: 91,  // expr_paren (42x)
		57447: 92,  // expr_ternary (42x)
		57449: 93,  // expr_unary (42x)
		57515: 94,  // unary_op (42x)
		57422: 95,  // expr_call_helper (31x)
		57408: 96,  // bin_op (30x)
		57463: 97,  // op_assoc1 (30x)
		57461: 98,  // newline (29x)
		57355: 99,  // IF (27x)
		57462: 100, // newlines (27x)
		57353: 101, // VAR (27x)
		57381: 102, // BREAK (26x)
		57382: 103, // CONTINUE (26x)
		57393: 104, // DEFER (26x)
		57357: 105, // FOR (26x)
		57392: 106, // GO (26x)
		57358: 107, // LOOP (26x)
		57371: 108, // MODULE (26x)
		57352: 109, // RETURN (26x)
		57389: 110, // SELECT (26x)
		57388: 111, // SWITCH (26x)
		57354: 112, // THROW (26x)
		57372: 113, // TRY (26x)
		57394: 114, // CHAN (25x)
		57402: 115, // STRUCT (25x)
		57477: 116, // opt_term (16x)
		57510: 117, // term (16x)
		57411: 118, // compstmt (15x)
		57512: 119, // type_data_helper (14x)
		57409: 120, // comma_opt_newlines (11x)
		57473: 121, // opt_newlines (11x)
		57511: 122, // type_data (11x)
		57450: 123, // exprs (10x)
		57356: 124, // ELSE (4x)
		57448: 125, // expr_typed_ident (4x)
		57467: 126, // opt_exprs (4x)
		57489: 127, // stmt_lets (4x)
		57506: 128, // stmt_var (4x)
		57507: 129, // stmt_var_or_lets (4x)
		57466: 130, // opt_expr (3x)
		57481: 131, // stmt (3x)
		57482: 132, // stmt_break (3x)
		57483: 133, // stmt_continue (3x)
		57484: 134, // stmt_defer (3x)
		57485: 135, // stmt_expr (3x)
		57486: 136, // stmt_for (3x)
		57487: 137, // stmt_go (3x)
		57488: 138, // stmt_if (3x)
		57490: 139, // stmt_loop (3x)
		57491: 140, // stmt_module (3x)
		57492: 141, // stmt_return (3x)
		57493: 142, // stmt_select (3x)
		57499: 143, // stmt_switch (3x)
		57504: 144, // stmt_throw (3x)
		57505: 145, // stmt_try (3x)
		57410: 146, // comma_separated_exprs (2x)
		57423: 147, // expr_callable (2x)
		57441: 148, // expr_map_key_value (2x)
		57456: 149, // func_expr_typed_ident (2x)
		57458: 150, // func_expr_untyped_ident (2x)
		57465: 151, // opt_comma_opt_newlines (2x)
		57472: 152, // opt_ident (2x)
		57494: 153, // stmt_select_case (2x)
		57500: 154, // stmt_switch_case (2x)
		57373: 155, // CATCH (1x)
		57413: 156, // dbg_content (1x)
		57414: 157, // else_if (1x)
		57415: 158, // else_if_list (1x)
		57427: 159, // expr_for_idents (1x)
		57430: 160, // expr_idents (1x)
		57439: 161, // expr_map_content (1x)
		57440: 162, // expr_map_content_helper (1x)
		57374: 163, // FINALLY (1x)
		57451: 164, // for_content (1x)
		57452: 165, // func_expr_args (1x)
		57453: 166, // func_expr_idents (1x)
		57454: 167, // func_expr_idents_last_untyped (1x)
		57455: 168, // func_expr_idents_not_empty (1x)
		57457: 169, // func_expr_typed_idents (1x)
		57460: 170, // maybe_else (1x)
		57464: 171, // op_lets (1x)
		57468: 172, // opt_finally (1x)
		57469: 173, // opt_func_return_expr_idents (1x)
		57470: 174, // opt_func_return_expr_idents1 (1x)
		57471: 175, // opt_func_return_expr_idents2 (1x)
		57474: 176, // opt_stmt_select_cases (1x)
		57475: 177, // opt_stmt_switch_cases (1x)
		57476: 178, // opt_stmt_var_or_lets (1x)
		57478: 179, // slice (1x)
		57480: 180, // start (1x)
		57495: 181, // stmt_select_cases (1x)
		57496: 182, // stmt_select_content (1x)
		57497: 183, // stmt_select_default (1x)
		57498: 184, // stmt_select_opt_default (1x)
		57501: 185, // stmt_switch_cases (1x)
		57502: 186, // stmt_switch_default (1x)
		57503: 187, // stmt_switch_opt_default (1x)
		57508: 188, // stmtsStmt (1x)
		57509: 189, // switch_content (1x)
		57397: 190, // TYPE (1x)
		57513: 191, // type_data_struct (1x)
		57407: 192, // $default (0x)
		57349: 193, // ARRAY (0x)
		57345: 194, // error (0x)
		57406: 195, // UNARY (0x)
	}

	yySymNames = []string{
		"'*'",
		"'('",
		"'{'",
		"'}'",
		"'['",
		"'&'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"DEFAULT",
		"CASE",
		"';'",
		"IDENT",
		"$end",
		"EMPTYARR",
		"MAP",
		"','",
		"':'",
		"')'",
		"'.'",
		"'!'",
		"'^'",
		"CLOSE",
		"DBG",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"']'",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"'='",
		"VARARG",
		"WALRUS",
		"slice_count",
		"map_type",
		"typed_slice_count",
		"expr_ident",
		"expr_map_container",
		"const_expr",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_dbg",
		"expr_delete",
		"expr_func",
		"expr_item_or_slice",
		"expr_iterable",
		"expr_len",
		"expr_literals",
		"expr_literals_helper",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"unary_op",
		"expr_call_helper",
		"bin_op",
		"op_assoc1",
		"newline",
		"IF",
		"newlines",
		"VAR",
		"BREAK",
		"CONTINUE",
		"DEFER",
		"FOR",
		"GO",
		"LOOP",
		"MODULE",
		"RETURN",
		"SELECT",
		"SWITCH",
		"THROW",
		"TRY",
		"CHAN",
		"STRUCT",
		"opt_term",
		"term",
		"compstmt",
		"type_data_helper",
		"comma_opt_newlines",
		"opt_newlines",
		"type_data",
		"exprs",
		"ELSE",
		"expr_typed_ident",
		"opt_exprs",
		"stmt_lets",
		"stmt_var",
		"stmt_var_or_lets",
		"opt_expr",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_if",
		"stmt_loop",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"comma_separated_exprs",
		"expr_callable",
		"expr_map_key_value",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"opt_comma_opt_newlines",
		"opt_ident",
		"stmt_select_case",
		"stmt_switch_case",
		"CATCH",
		"dbg_content",
		"else_if",
		"else_if_list",
		"expr_for_idents",
		"expr_idents",
		"expr_map_content",
		"expr_map_content_helper",
		"FINALLY",
		"for_content",
		"func_expr_args",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"maybe_else",
		"op_lets",
		"opt_finally",
		"opt_func_return_expr_idents",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"opt_stmt_select_cases",
		"opt_stmt_switch_cases",
		"opt_stmt_var_or_lets",
		"slice",
		"start",
		"stmt_select_cases",
		"stmt_select_content",
		"stmt_select_default",
		"stmt_select_opt_default",
		"stmt_switch_cases",
		"stmt_switch_default",
		"stmt_switch_opt_default",
		"stmtsStmt",
		"switch_content",
		"TYPE",
		"type_data_struct",
		"$default",
		"ARRAY",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {180, 1},
		2:   {118, 1},
		3:   {118, 3},
		4:   {188, 1},
		5:   {188, 3},
		6:   {131, 1},
		7:   {131, 1},
		8:   {131, 1},
		9:   {131, 1},
		10:  {131, 1},
		11:  {131, 1},
		12:  {131, 1},
		13:  {131, 1},
		14:  {131, 1},
		15:  {131, 1},
		16:  {131, 1},
		17:  {131, 1},
		18:  {131, 1},
		19:  {131, 1},
		20:  {131, 1},
		21:  {70, 1},
		22:  {70, 1},
		23:  {70, 1},
		24:  {70, 1},
		25:  {70, 1},
		26:  {70, 1},
		27:  {70, 1},
		28:  {70, 1},
		29:  {70, 1},
		30:  {70, 1},
		31:  {70, 1},
		32:  {70, 1},
		33:  {81, 1},
		34:  {81, 1},
		35:  {81, 1},
		36:  {81, 1},
		37:  {81, 1},
		38:  {81, 1},
		39:  {81, 1},
		40:  {81, 1},
		41:  {132, 1},
		42:  {133, 1},
		43:  {141, 2},
		44:  {144, 2},
		45:  {140, 5},
		46:  {135, 1},
		47:  {137, 2},
		48:  {134, 2},
		49:  {145, 10},
		50:  {172, 0},
		51:  {172, 4},
		52:  {178, 0},
		53:  {178, 1},
		54:  {129, 1},
		55:  {129, 1},
		56:  {128, 4},
		57:  {127, 3},
		58:  {171, 1},
		59:  {171, 1},
		60:  {138, 7},
		61:  {158, 0},
		62:  {158, 2},
		63:  {157, 6},
		64:  {170, 0},
		65:  {170, 4},
		66:  {139, 4},
		67:  {136, 5},
		68:  {164, 1},
		69:  {164, 3},
		70:  {164, 5},
		71:  {159, 1},
		72:  {159, 3},
		73:  {142, 4},
		74:  {182, 3},
		75:  {176, 0},
		76:  {176, 1},
		77:  {181, 1},
		78:  {181, 2},
		79:  {153, 4},
		80:  {184, 0},
		81:  {184, 1},
		82:  {183, 3},
		83:  {143, 5},
		84:  {189, 3},
		85:  {177, 0},
		86:  {177, 1},
		87:  {185, 1},
		88:  {185, 2},
		89:  {154, 4},
		90:  {187, 0},
		91:  {187, 1},
		92:  {186, 3},
		93:  {173, 0},
		94:  {173, 1},
		95:  {173, 3},
		96:  {174, 0},
		97:  {174, 1},
		98:  {175, 1},
		99:  {175, 3},
		100: {166, 0},
		101: {166, 1},
		102: {168, 1},
		103: {168, 1},
		104: {150, 1},
		105: {149, 1},
		106: {167, 1},
		107: {167, 3},
		108: {169, 1},
		109: {169, 3},
		110: {126, 0},
		111: {126, 1},
		112: {123, 1},
		113: {123, 3},
		114: {130, 0},
		115: {130, 1},
		116: {77, 4},
		117: {156, 1},
		118: {156, 1},
		119: {82, 4},
		120: {91, 3},
		121: {72, 1},
		122: {72, 3},
		123: {72, 4},
		124: {146, 3},
		125: {92, 5},
		126: {89, 4},
		127: {90, 2},
		128: {78, 4},
		129: {78, 6},
		130: {76, 4},
		131: {83, 1},
		132: {84, 1},
		133: {84, 1},
		134: {84, 1},
		135: {69, 1},
		136: {69, 1},
		137: {69, 1},
		138: {88, 1},
		139: {88, 1},
		140: {67, 1},
		141: {125, 2},
		142: {152, 0},
		143: {152, 1},
		144: {87, 3},
		145: {147, 1},
		146: {147, 1},
		147: {75, 2},
		148: {71, 2},
		149: {95, 4},
		150: {95, 3},
		151: {94, 1},
		152: {94, 1},
		153: {94, 1},
		154: {94, 1},
		155: {94, 1},
		156: {93, 2},
		157: {96, 1},
		158: {96, 1},
		159: {96, 1},
		160: {96, 1},
		161: {96, 1},
		162: {96, 1},
		163: {96, 1},
		164: {96, 1},
		165: {96, 1},
		166: {96, 1},
		167: {96, 1},
		168: {96, 1},
		169: {96, 1},
		170: {96, 1},
		171: {96, 1},
		172: {96, 1},
		173: {96, 1},
		174: {96, 1},
		175: {96, 1},
		176: {96, 1},
		177: {96, 1},
		178: {96, 1},
		179: {96, 1},
		180: {96, 1},
		181: {96, 1},
		182: {74, 3},
		183: {74, 3},
		184: {74, 3},
		185: {74, 1},
		186: {97, 1},
		187: {97, 1},
		188: {73, 2},
		189: {79, 9},
		190: {165, 3},
		191: {165, 2},
		192: {165, 1},
		193: {85, 4},
		194: {85, 6},
		195: {85, 8},
		196: {85, 7},
		197: {122, 1},
		198: {119, 1},
		199: {119, 3},
		200: {119, 2},
		201: {119, 1},
		202: {119, 1},
		203: {119, 2},
		204: {119, 6},
		205: {65, 5},
		206: {191, 1},
		207: {191, 3},
		208: {66, 2},
		209: {64, 1},
		210: {64, 2},
		211: {86, 2},
		212: {86, 1},
		213: {68, 3},
		214: {161, 1},
		215: {161, 3},
		216: {162, 1},
		217: {162, 3},
		218: {148, 3},
		219: {80, 4},
		220: {179, 3},
		221: {179, 2},
		222: {179, 2},
		223: {179, 1},
		224: {160, 1},
		225: {160, 3},
		226: {116, 0},
		227: {116, 1},
		228: {117, 1},
		229: {117, 2},
		230: {121, 0},
		231: {121, 1},
		232: {100, 1},
		233: {100, 2},
		234: {98, 1},
		235: {120, 2},
		236: {151, 1},
		237: {151, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [394][]uint16{
		// 0
		{12, 12, 12, 4: 12, 12, 12, 12, 246, 11: 244, 12, 12, 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 240, 180: 239},
		{13: 238},
		{13: 237},
		{328, 307, 338, 236, 309, 329, 325, 312, 9: 236, 236, 12: 324, 236, 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 292, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 99: 300, 101: 298, 287, 288, 294, 302, 293, 301, 291, 289, 303, 304, 290, 295, 123: 299, 127: 297, 296, 252, 131: 251, 253, 254, 265, 266, 260, 264, 258, 259, 257, 255, 263, 262, 256, 261, 188: 250},
		{11, 11, 11, 11, 11, 11, 11, 11, 9: 11, 11, 12: 11, 11, 11, 11, 20: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 99: 11, 101: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		// 5
		{10, 10, 10, 10, 10, 10, 10, 10, 246, 10, 10, 12: 10, 10, 10, 10, 20: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 98: 249, 10, 101: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{8, 8, 8, 8, 8, 8, 8, 8, 246, 8, 8, 12: 8, 8, 8, 8, 20: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 98: 245, 8, 248, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 121: 247},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12: 6, 6, 6, 6, 6, 20: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 99: 6, 101: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12: 4, 4, 4, 4, 4, 20: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 99: 4, 101: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{9, 9, 9, 9, 9, 9, 9, 9, 9: 9, 9, 12: 9, 9, 9, 9, 20: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 99: 9, 101: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		// 10
		{7, 7, 7, 7, 7, 7, 7, 7, 246, 7, 7, 12: 7, 7, 7, 7, 7, 20: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 98: 249, 7, 101: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12: 5, 5, 5, 5, 5, 20: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 99: 5, 101: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{3: 12, 8: 246, 12, 12, 244, 13: 12, 98: 245, 100: 243, 116: 629, 630},
		{3: 234, 8: 234, 234, 234, 234, 13: 234},
		{3: 232, 8: 232, 232, 232, 232, 13: 232, 17: 232},
		// 15
		{3: 231, 8: 231, 231, 231, 231, 13: 231, 17: 231},
		{3: 230, 8: 230, 230, 230, 230, 13: 230, 17: 230},
		{3: 229, 8: 229, 229, 229, 229, 13: 229, 17: 229},
		{3: 228, 8: 228, 228, 228, 228, 13: 228, 17: 228},
		{3: 227, 8: 227, 227, 227, 227, 13: 227, 17: 227},
		// 20
		{3: 226, 8: 226, 226, 226, 226, 13: 226, 17: 226},
		{3: 225, 8: 225, 225, 225, 225, 13: 225, 17: 225},
		{3: 224, 8: 224, 224, 224, 224, 13: 224, 17: 224},
		{3: 223, 8: 223, 223, 223, 223, 13: 223, 17: 223},
		{3: 222, 8: 222, 222, 222, 222, 13: 222, 17: 222},
		// 25
		{3: 221, 8: 221, 221, 221, 221, 13: 221, 17: 221},
		{3: 220, 8: 220, 220, 220, 220, 13: 220, 17: 220},
		{3: 219, 8: 219, 219, 219, 219, 13: 219, 17: 219},
		{3: 218, 8: 218, 218, 218, 218, 13: 218, 17: 218},
		{217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 13: 217, 16: 217, 217, 217, 217, 34: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217},
		// 30
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 13: 216, 16: 216, 216, 216, 216, 34: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 13: 215, 16: 215, 215, 215, 215, 34: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215},
		{214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 13: 214, 16: 214, 214, 214, 214, 34: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214},
		{213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 13: 213, 16: 213, 213, 213, 213, 34: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
		{212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 13: 212, 16: 212, 212, 212, 212, 34: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
		// 35
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 13: 211, 16: 211, 211, 211, 211, 34: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211},
		{210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 13: 210, 16: 210, 210, 210, 210, 34: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
		{209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 13: 209, 16: 209, 209, 209, 209, 34: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
		{208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 13: 208, 16: 208, 208, 208, 208, 34: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208},
		{207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 13: 207, 16: 207, 207, 207, 207, 34: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
		// 40
		{206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 13: 206, 16: 206, 206, 206, 206, 34: 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206},
		{205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 13: 205, 16: 205, 205, 205, 205, 34: 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
		{204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 13: 204, 16: 204, 204, 204, 204, 34: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204},
		{203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 13: 203, 16: 203, 203, 203, 203, 34: 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203},
		{202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 13: 202, 16: 202, 202, 202, 202, 34: 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202},
		// 45
		{201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 13: 201, 16: 201, 201, 201, 201, 34: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201},
		{200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 13: 200, 16: 200, 200, 200, 200, 34: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
		{199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 13: 199, 16: 199, 199, 199, 199, 34: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199},
		{198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 13: 198, 16: 198, 198, 198, 198, 34: 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198},
		{3: 197, 8: 197, 197, 197, 197, 13: 197, 17: 197},
		// 50
		{3: 196, 8: 196, 196, 196, 196, 13: 196, 17: 196},
		{328, 307, 338, 128, 309, 329, 325, 312, 128, 128, 128, 128, 324, 128, 308, 334, 17: 128, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 399, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 123: 502, 126: 628},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 627, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{12: 623},
		{356, 353, 3: 192, 386, 364, 355, 378, 192, 192, 192, 192, 13: 192, 16: 126, 192, 19: 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 126, 63: 126, 95: 352, 379, 384},
		// 55
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 573, 619, 281, 331, 271, 620, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 147: 622},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 573, 619, 281, 331, 271, 620, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 147: 621},
		{2: 606},
		{3: 184, 8: 184, 184, 184, 184, 13: 184, 17: 184},
		{3: 183, 8: 183, 183, 183, 183, 13: 183, 17: 183},
		// 60
		{12: 324, 67: 601, 160: 600},
		{16: 346, 61: 598, 63: 597, 120: 402, 171: 596},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 580, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{2: 577},
		{328, 307, 338, 4: 309, 329, 325, 312, 11: 186, 564, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 561, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 101: 298, 123: 299, 127: 297, 296, 559, 159: 562, 164: 560, 178: 563},
		// 65
		{2: 542},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 524, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{1: 514},
		{1: 511},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 509, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		// 70
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 29, 117, 420, 29, 117, 117, 117, 117, 34: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 421, 114: 29, 29},
		{8, 8, 8, 4: 8, 8, 8, 8, 246, 12: 8, 14: 8, 8, 8, 20: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 98: 245, 100: 248, 121: 501, 146: 507},
		{2: 499},
		{1: 496},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 495, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		// 75
		{1: 489},
		{1: 486},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 13: 107, 16: 107, 107, 107, 107, 34: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 13: 106, 16: 106, 106, 106, 106, 34: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 13: 105, 16: 105, 105, 105, 105, 34: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105},
		// 80
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 13: 104, 16: 104, 104, 104, 104, 34: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 13: 103, 16: 103, 103, 103, 103, 34: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 13: 102, 16: 102, 102, 102, 102, 34: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 13: 101, 16: 101, 101, 101, 101, 34: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		{100, 353, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 13: 100, 16: 100, 100, 100, 100, 34: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 95: 485},
		// 85
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 13: 99, 16: 99, 99, 99, 99, 34: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 34: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 114: 98, 98},
		{87, 87, 87, 4: 87, 87, 87, 87, 12: 87, 14: 87, 87, 20: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{86, 86, 86, 4: 86, 86, 86, 86, 12: 86, 14: 86, 86, 20: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{85, 85, 85, 4: 85, 85, 85, 85, 12: 85, 14: 85, 85, 20: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		// 90
		{84, 84, 84, 4: 84, 84, 84, 84, 12: 84, 14: 84, 84, 20: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{83, 83, 83, 4: 83, 83, 83, 83, 12: 83, 14: 83, 83, 20: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 484, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 13: 53, 16: 53, 53, 53, 53, 34: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{1: 96, 12: 454, 152: 455},
		// 95
		{1: 440},
		{4: 436},
		{414, 12: 413, 14: 420, 334, 64: 335, 416, 415, 114: 417, 418, 119: 412, 122: 419},
		{2: 338, 68: 411},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 13: 26, 16: 26, 26, 26, 26, 34: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		// 100
		{8, 8, 8, 8, 8, 8, 8, 8, 246, 12: 8, 14: 8, 8, 20: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 98: 245, 100: 248, 121: 340, 161: 339},
		{3: 410},
		{328, 307, 338, 24, 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 341, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 148: 343, 162: 342},
		{356, 353, 4: 386, 364, 355, 378, 17: 385, 19: 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		{3: 8, 8: 246, 16: 346, 98: 245, 100: 248, 120: 345, 347, 151: 344},
		// 105
		{3: 22, 8: 22, 16: 22},
		{3: 23},
		{328, 307, 338, 2, 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 341, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 148: 349},
		{8, 8, 8, 8, 8, 8, 8, 8, 246, 12: 8, 14: 8, 8, 20: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 98: 245, 100: 248, 114: 8, 8, 121: 348},
		{3: 1, 34: 1},
		// 110
		{3, 3, 3, 3, 3, 3, 3, 3, 12: 3, 14: 3, 3, 20: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 114: 3, 3},
		{3: 21, 8: 21, 16: 21},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 407, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{12: 406},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 13: 90, 16: 90, 90, 90, 90, 34: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		// 115
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 18: 128, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 399, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 123: 398, 126: 400},
		{81, 81, 81, 4: 81, 81, 81, 81, 12: 81, 14: 81, 81, 20: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{80, 80, 80, 4: 80, 80, 80, 80, 12: 80, 14: 80, 80, 20: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
		{79, 79, 79, 4: 79, 79, 79, 79, 12: 79, 14: 79, 79, 20: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{78, 78, 78, 4: 78, 78, 78, 78, 12: 78, 14: 78, 78, 20: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		// 120
		{77, 77, 77, 4: 77, 77, 77, 77, 12: 77, 14: 77, 77, 20: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 4: 76, 76, 76, 76, 12: 76, 14: 76, 76, 20: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		{75, 75, 75, 4: 75, 75, 75, 75, 12: 75, 14: 75, 75, 20: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{74, 74, 74, 4: 74, 74, 74, 74, 12: 74, 14: 74, 74, 20: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{73, 73, 73, 4: 73, 73, 73, 73, 12: 73, 14: 73, 73, 20: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		// 125
		{72, 72, 72, 4: 72, 72, 72, 72, 12: 72, 14: 72, 72, 20: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		{71, 71, 71, 4: 71, 71, 71, 71, 12: 71, 14: 71, 71, 20: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		{70, 70, 70, 4: 70, 70, 70, 70, 12: 70, 14: 70, 70, 20: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{69, 69, 69, 4: 69, 69, 69, 69, 12: 69, 14: 69, 69, 20: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{68, 68, 68, 4: 68, 68, 68, 68, 12: 68, 14: 68, 68, 20: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		// 130
		{67, 67, 67, 4: 67, 67, 67, 67, 12: 67, 14: 67, 67, 20: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{66, 66, 66, 4: 66, 66, 66, 66, 12: 66, 14: 66, 66, 20: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{65, 65, 65, 4: 65, 65, 65, 65, 12: 65, 14: 65, 65, 20: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		{64, 64, 64, 4: 64, 64, 64, 64, 12: 64, 14: 64, 64, 20: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{63, 63, 63, 4: 63, 63, 63, 63, 12: 63, 14: 63, 63, 20: 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		// 135
		{62, 62, 62, 4: 62, 62, 62, 62, 12: 62, 14: 62, 62, 20: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 4: 61, 61, 61, 61, 12: 61, 14: 61, 61, 20: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{60, 60, 60, 4: 60, 60, 60, 60, 12: 60, 14: 60, 60, 20: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 4: 59, 59, 59, 59, 12: 59, 14: 59, 59, 20: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{58, 58, 58, 4: 58, 58, 58, 58, 12: 58, 14: 58, 58, 20: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		// 140
		{57, 57, 57, 4: 57, 57, 57, 57, 12: 57, 14: 57, 57, 20: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 397, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 396, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 395, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 13: 52, 16: 52, 52, 52, 52, 34: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		// 145
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 13: 51, 16: 51, 51, 51, 51, 34: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 13: 50, 16: 50, 50, 50, 50, 34: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 394, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 17: 389, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 387, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 179: 388},
		{356, 353, 4: 386, 364, 355, 378, 17: 392, 19: 351, 34: 15, 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		// 150
		{34: 391},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 390, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{356, 353, 4: 386, 364, 355, 378, 19: 351, 34: 16, 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 13: 19, 16: 19, 19, 19, 19, 34: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 17, 64: 335, 336, 310, 322, 337, 318, 393, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		// 155
		{356, 353, 4: 386, 364, 355, 378, 19: 351, 34: 18, 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		{356, 353, 3: 20, 386, 364, 355, 378, 20, 16: 20, 19: 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		{54, 353, 54, 54, 386, 54, 54, 54, 54, 54, 54, 54, 13: 54, 16: 54, 54, 54, 351, 34: 54, 381, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 383, 54, 54, 54, 54, 54, 54, 382, 54, 54, 54, 54, 54, 54, 95: 352, 379, 384},
		{356, 353, 55, 55, 386, 364, 355, 55, 55, 55, 55, 55, 13: 55, 16: 55, 55, 55, 351, 34: 55, 381, 359, 354, 357, 55, 55, 55, 362, 55, 55, 55, 55, 55, 55, 55, 383, 55, 55, 55, 55, 55, 55, 382, 55, 360, 361, 55, 55, 55, 95: 352, 379, 384},
		{356, 353, 56, 56, 386, 364, 355, 378, 56, 56, 56, 56, 13: 56, 16: 56, 56, 56, 351, 34: 56, 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 56, 56, 56, 95: 352, 379, 384},
		// 160
		{16: 346, 18: 127, 62: 403, 120: 402},
		{356, 353, 3: 126, 386, 364, 355, 378, 126, 126, 126, 126, 13: 126, 16: 126, 126, 126, 351, 34: 126, 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 62: 126, 95: 352, 379, 384},
		{18: 401},
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 13: 88, 16: 88, 88, 88, 88, 34: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 405, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		// 165
		{18: 404},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 13: 89, 16: 89, 89, 89, 89, 34: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{356, 353, 3: 125, 386, 364, 355, 378, 125, 125, 125, 125, 13: 125, 16: 125, 125, 125, 351, 34: 125, 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 125, 125, 125, 95: 352, 379, 384},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 13: 94, 16: 94, 94, 94, 94, 34: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{356, 353, 4: 386, 364, 355, 378, 17: 408, 19: 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		// 170
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 409, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{356, 353, 113, 113, 386, 364, 355, 378, 113, 113, 113, 113, 13: 113, 16: 113, 113, 113, 351, 34: 113, 381, 359, 354, 357, 369, 367, 350, 362, 365, 113, 113, 380, 368, 370, 113, 383, 113, 366, 371, 113, 363, 113, 382, 113, 360, 361, 113, 113, 113, 95: 352, 379, 384},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 13: 25, 16: 25, 25, 25, 25, 34: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13: 27, 16: 27, 27, 27, 27, 34: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{2: 41, 41, 8: 41, 16: 41, 18: 41, 433, 34: 41},
		// 175
		{2: 40, 40, 8: 40, 16: 40, 18: 40, 40, 34: 40},
		{414, 12: 413, 14: 420, 334, 64: 335, 416, 415, 114: 417, 418, 119: 435},
		{2: 37, 37, 8: 37, 16: 37, 18: 37, 37, 34: 37},
		{2: 36, 36, 8: 36, 16: 36, 18: 36, 36, 34: 36},
		{414, 12: 413, 14: 420, 334, 64: 335, 416, 415, 114: 417, 418, 119: 432},
		// 180
		{2: 422},
		{2: 30, 30, 8: 30, 16: 30, 18: 30, 30, 34: 30},
		{29, 12: 29, 14: 420, 29, 64: 421, 114: 29, 29},
		{28, 12: 28, 14: 28, 28, 114: 28, 28},
		{8: 246, 12: 8, 98: 245, 100: 248, 121: 423},
		// 185
		{12: 324, 67: 424, 125: 426, 191: 425},
		{414, 12: 413, 14: 420, 334, 64: 335, 416, 415, 114: 417, 418, 119: 412, 122: 431},
		{3: 8, 8: 246, 16: 346, 98: 245, 100: 248, 120: 428, 427},
		{3: 32, 8: 32, 16: 32},
		{3: 430},
		// 190
		{12: 324, 67: 424, 125: 429},
		{3: 31, 8: 31, 16: 31},
		{2: 34, 34, 8: 34, 16: 34, 18: 34, 34, 34: 34},
		{3: 97, 8: 97, 16: 97, 18: 97},
		{2: 35, 35, 8: 35, 16: 35, 18: 35, 433, 34: 35},
		// 195
		{12: 434},
		{2: 39, 39, 8: 39, 16: 39, 18: 39, 39, 34: 39},
		{2: 38, 38, 8: 38, 16: 38, 18: 38, 433, 34: 38},
		{414, 12: 413, 14: 420, 334, 64: 335, 416, 415, 114: 417, 418, 119: 412, 122: 437},
		{34: 438},
		// 200
		{414, 12: 413, 14: 420, 334, 64: 335, 416, 415, 114: 417, 418, 119: 412, 122: 439},
		{2: 33, 33, 8: 33, 16: 33, 18: 33, 33, 34: 33},
		{414, 12: 413, 14: 420, 334, 64: 335, 416, 415, 114: 417, 418, 119: 412, 122: 441, 190: 442},
		{16: 448, 18: 447},
		{12: 443},
		// 205
		{16: 444},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 445, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{356, 353, 4: 386, 364, 355, 378, 18: 446, 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 13: 42, 16: 42, 42, 42, 42, 34: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 13: 45, 16: 45, 45, 45, 45, 34: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		// 210
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 449, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{356, 353, 4: 386, 364, 355, 378, 16: 451, 18: 450, 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 13: 44, 16: 44, 44, 44, 44, 34: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 452, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{356, 353, 4: 386, 364, 355, 378, 18: 453, 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		// 215
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 13: 43, 16: 43, 43, 43, 43, 34: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{1: 95, 95},
		{1: 456},
		{12: 460, 18: 138, 67: 424, 125: 461, 149: 463, 462, 165: 464, 465, 458, 457, 459},
		{16: 346, 18: 137, 120: 481},
		// 220
		{16: 136, 18: 136, 62: 479},
		{16: 135, 18: 135},
		{98, 12: 98, 14: 98, 98, 134, 18: 134, 62: 134, 114: 98, 98},
		{16: 133, 18: 133},
		{16: 132, 18: 132, 62: 132},
		// 225
		{16: 130, 18: 130},
		{18: 466},
		{18: 46},
		{414, 468, 145, 12: 413, 14: 420, 334, 64: 335, 416, 415, 114: 417, 418, 119: 412, 122: 467, 173: 469},
		{2: 144},
		// 230
		{414, 12: 413, 14: 420, 334, 18: 142, 64: 335, 416, 415, 114: 417, 418, 119: 412, 122: 475, 174: 473, 474},
		{2: 470},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 471},
		{3: 472},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 13: 49, 16: 49, 49, 49, 49, 34: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		// 235
		{18: 478},
		{16: 346, 18: 141, 120: 476},
		{16: 140, 18: 140},
		{414, 12: 413, 14: 420, 334, 64: 335, 416, 415, 114: 417, 418, 119: 412, 122: 477},
		{16: 139, 18: 139},
		// 240
		{2: 143},
		{414, 12: 413, 14: 420, 334, 18: 47, 64: 335, 416, 415, 114: 417, 418, 119: 412, 122: 480},
		{18: 48},
		{12: 460, 67: 424, 125: 461, 149: 483, 482},
		{16: 131, 18: 131, 62: 131},
		// 245
		{16: 129, 18: 129},
		{82, 353, 82, 82, 386, 82, 82, 82, 82, 82, 82, 82, 13: 82, 16: 82, 82, 82, 351, 34: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 95: 352, 379, 384},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 13: 91, 16: 91, 91, 91, 91, 34: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 487, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{356, 353, 4: 386, 364, 355, 378, 18: 488, 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		// 250
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 13: 108, 16: 108, 108, 108, 108, 34: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 490, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{356, 353, 4: 386, 364, 355, 378, 16: 492, 18: 491, 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 13: 110, 16: 110, 110, 110, 110, 34: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 493, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		// 255
		{356, 353, 4: 386, 364, 355, 378, 18: 494, 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 13: 109, 16: 109, 109, 109, 109, 34: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109},
		{356, 353, 111, 111, 386, 364, 355, 378, 111, 111, 111, 111, 13: 111, 16: 111, 111, 111, 351, 34: 111, 381, 359, 354, 357, 369, 367, 350, 362, 365, 111, 111, 380, 368, 370, 111, 383, 111, 366, 371, 111, 363, 111, 382, 111, 360, 361, 111, 111, 111, 95: 352, 379, 384},
		{414, 12: 413, 14: 420, 334, 64: 335, 416, 415, 114: 417, 418, 119: 412, 122: 497},
		{18: 498},
		// 260
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 13: 112, 16: 112, 112, 112, 112, 34: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		{8, 8, 8, 8, 8, 8, 8, 8, 246, 12: 8, 14: 8, 8, 8, 20: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 98: 245, 100: 248, 121: 501, 146: 500},
		{3: 506},
		{328, 307, 338, 128, 309, 329, 325, 312, 128, 12: 324, 14: 308, 334, 128, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 128, 64: 335, 336, 310, 322, 337, 318, 399, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 123: 502, 126: 503},
		{3: 127, 8: 127, 127, 127, 127, 13: 127, 16: 346, 127, 34: 127, 120: 402},
		// 265
		{3: 8, 8: 246, 16: 346, 34: 8, 98: 245, 100: 248, 120: 505, 347, 151: 504},
		{3: 114, 34: 114},
		{3: 2, 34: 2},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 13: 115, 16: 115, 115, 115, 115, 34: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		{34: 508},
		// 270
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 13: 116, 16: 116, 116, 116, 116, 34: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
		{356, 353, 4: 386, 364, 355, 378, 18: 510, 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 13: 118, 16: 118, 118, 118, 118, 34: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 512, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{356, 353, 4: 386, 364, 355, 378, 18: 513, 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		// 275
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 13: 119, 16: 119, 119, 119, 119, 34: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{521, 307, 338, 4: 309, 329, 325, 312, 12: 520, 14: 308, 334, 18: 124, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 522, 519, 322, 337, 318, 515, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 114: 417, 418, 119: 412, 122: 518, 130: 517, 156: 516},
		{356, 353, 123, 4: 386, 364, 355, 378, 11: 123, 18: 123, 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		{18: 523},
		{18: 121},
		// 280
		{18: 120},
		{2: 499, 18: 37, 37},
		{98, 98, 4: 98, 98, 98, 98, 18: 98, 98, 35: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		{84, 84, 84, 4: 84, 84, 84, 84, 12: 413, 14: 420, 334, 20: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 64: 335, 416, 415, 114: 417, 418, 119: 435},
		{2: 338, 18: 36, 36, 68: 411},
		// 285
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 13: 122, 16: 122, 122, 122, 122, 34: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		{356, 353, 525, 4: 386, 364, 355, 378, 19: 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		{3: 8, 8: 246, 8, 8, 98: 245, 100: 248, 121: 527, 189: 526},
		{3: 541},
		{3: 153, 9: 153, 531, 154: 530, 177: 528, 185: 529},
		// 290
		{3: 148, 9: 538, 186: 537, 536},
		{3: 152, 9: 152, 531, 154: 535},
		{3: 151, 9: 151, 151},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 17: 128, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 399, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 123: 502, 126: 532},
		{17: 533},
		// 295
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 12, 12, 244, 12, 14: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 534},
		{3: 149, 9: 149, 149},
		{3: 150, 9: 150, 150},
		{3: 154},
		{3: 147},
		// 300
		{17: 539},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 540},
		{3: 146},
		{3: 155, 8: 155, 155, 155, 155, 13: 155, 17: 155},
		{3: 8, 8: 246, 8, 8, 98: 245, 100: 248, 121: 544, 182: 543},
		// 305
		{3: 558},
		{3: 163, 9: 163, 548, 153: 547, 176: 545, 181: 546},
		{3: 158, 9: 555, 183: 554, 553},
		{3: 162, 9: 162, 548, 153: 552},
		{3: 161, 9: 161, 161},
		// 310
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 292, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 99: 300, 101: 298, 287, 288, 294, 302, 293, 301, 291, 289, 303, 304, 290, 295, 123: 299, 127: 297, 296, 252, 131: 549, 253, 254, 265, 266, 260, 264, 258, 259, 257, 255, 263, 262, 256, 261},
		{17: 550},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 12, 12, 244, 12, 14: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 551},
		{3: 159, 9: 159, 159},
		{3: 160, 9: 160, 160},
		// 315
		{3: 164},
		{3: 157},
		{17: 556},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 557},
		{3: 156},
		// 320
		{3: 165, 8: 165, 165, 165, 165, 13: 165, 17: 165},
		{11: 185},
		{2: 574},
		{356, 353, 170, 4: 386, 364, 355, 378, 16: 126, 19: 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 126, 63: 126, 95: 352, 379, 384},
		{35: 571},
		// 325
		{11: 567},
		{98, 98, 98, 4: 98, 98, 98, 98, 16: 565, 19: 98, 35: 167, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 63: 98},
		{12: 566},
		{35: 166},
		{328, 307, 338, 4: 309, 329, 325, 312, 11: 124, 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 515, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 130: 568},
		// 330
		{11: 569},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 515, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 130: 570},
		{2: 168},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 573, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 572, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{217, 217, 169, 4: 217, 217, 217, 217, 19: 217, 35: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217},
		// 335
		{356, 353, 4: 386, 364, 355, 378, 19: 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 575},
		{3: 576},
		{3: 171, 8: 171, 171, 171, 171, 13: 171, 17: 171},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 578},
		// 340
		{3: 579},
		{3: 172, 8: 172, 172, 172, 172, 13: 172, 17: 172},
		{356, 353, 581, 4: 386, 364, 355, 378, 19: 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 582},
		{3: 583},
		// 345
		{3: 177, 8: 177, 177, 177, 177, 13: 177, 17: 177, 124: 177, 158: 584},
		{3: 174, 8: 174, 174, 174, 174, 13: 174, 17: 174, 124: 587, 157: 586, 170: 585},
		{3: 178, 8: 178, 178, 178, 178, 13: 178, 17: 178},
		{3: 176, 8: 176, 176, 176, 176, 13: 176, 17: 176, 124: 176},
		{2: 589, 99: 588},
		// 350
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 592, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 590},
		{3: 591},
		{3: 173, 8: 173, 173, 173, 173, 13: 173, 17: 173},
		{356, 353, 593, 4: 386, 364, 355, 378, 19: 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		// 355
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 594},
		{3: 595},
		{3: 175, 8: 175, 175, 175, 175, 13: 175, 17: 175, 124: 175},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 399, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 123: 599},
		{180, 180, 180, 4: 180, 180, 180, 180, 12: 180, 14: 180, 180, 20: 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180},
		// 360
		{179, 179, 179, 4: 179, 179, 179, 179, 12: 179, 14: 179, 179, 20: 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179},
		{3: 181, 8: 181, 181, 181, 181, 13: 181, 16: 346, 181, 120: 402},
		{16: 346, 61: 602, 120: 603},
		{16: 14, 61: 14},
		{328, 307, 338, 4: 309, 329, 325, 312, 12: 324, 14: 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 399, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 123: 605},
		// 365
		{12: 324, 67: 604},
		{16: 13, 61: 13},
		{3: 182, 8: 182, 182, 182, 182, 13: 182, 16: 346, 182, 120: 402},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 607},
		{3: 608},
		// 370
		{155: 609},
		{2: 96, 12: 454, 152: 610},
		{2: 611},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 612},
		{3: 613},
		// 375
		{3: 188, 8: 188, 188, 188, 188, 13: 188, 17: 188, 163: 615, 172: 614},
		{3: 189, 8: 189, 189, 189, 189, 13: 189, 17: 189},
		{2: 616},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 617},
		{3: 618},
		// 380
		{3: 187, 8: 187, 187, 187, 187, 13: 187, 17: 187},
		{202, 202, 3: 92, 202, 202, 202, 202, 92, 92, 92, 92, 13: 92, 17: 92, 19: 202, 35: 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202},
		{201, 201, 3: 93, 201, 201, 201, 201, 93, 93, 93, 93, 13: 93, 17: 93, 19: 201, 35: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201},
		{3: 190, 8: 190, 190, 190, 190, 13: 190, 17: 190},
		{3: 191, 8: 191, 191, 191, 191, 13: 191, 17: 191},
		// 385
		{2: 624},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 245, 12, 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 116: 241, 242, 625},
		{3: 626},
		{3: 193, 8: 193, 193, 193, 193, 13: 193, 17: 193},
		{356, 353, 3: 194, 386, 364, 355, 378, 194, 194, 194, 194, 13: 194, 17: 194, 19: 351, 35: 381, 359, 354, 357, 369, 367, 350, 362, 365, 376, 375, 380, 368, 370, 373, 383, 374, 366, 371, 377, 363, 372, 382, 358, 360, 361, 95: 352, 379, 384},
		// 390
		{3: 195, 8: 195, 195, 195, 195, 13: 195, 17: 195},
		{3: 235, 9: 235, 235, 13: 235},
		{328, 307, 338, 11, 309, 329, 325, 312, 9: 11, 11, 12: 324, 11, 308, 334, 20: 326, 327, 314, 305, 313, 320, 332, 306, 333, 311, 321, 316, 317, 319, 64: 335, 336, 310, 322, 337, 318, 292, 282, 281, 331, 271, 283, 277, 273, 278, 270, 285, 267, 272, 268, 315, 275, 279, 323, 284, 274, 276, 280, 286, 269, 330, 99: 300, 101: 298, 287, 288, 294, 302, 293, 301, 291, 289, 303, 304, 290, 295, 123: 299, 127: 297, 296, 252, 131: 631, 253, 254, 265, 266, 260, 264, 258, 259, 257, 255, 263, 262, 256, 261},
		{3: 233, 8: 233, 233, 233, 233, 13: 233},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 194

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmt
			}
		}
	case 2:
		{
			yyVAL.stmt = nil
		}
	case 3:
		{
			yyVAL.stmt = yyS[yypt-1].stmtsStmt
		}
	case 4:
		{
			yyVAL.stmtsStmt = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 5:
		{
			yyS[yypt-2].stmtsStmt.Stmts = append(yyS[yypt-2].stmtsStmt.Stmts, yyS[yypt-0].stmt)
		}
	case 41:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 42:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 43:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 44:
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 45:
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyS[yypt-3].tok.Lit, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 46:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 47:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Go = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Go = true
			}
			yyVAL.stmt = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 48:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Defer = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Defer = true
			}
			yyVAL.stmt = &ast.DeferStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 49:
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyS[yypt-7].stmt, Var: yyS[yypt-4].opt_ident.Lit, Catch: yyS[yypt-2].stmt, Finally: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 50:
		{
			yyVAL.stmt = nil
		}
	case 51:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 52:
		{
			yyVAL.stmt = nil
		}
	case 53:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 56:
		{
			isItem := false
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					arr := []ast.Expr{}
					for _, el := range yyS[yypt-2].expr_idents {
						arr = append(arr, &ast.IdentExpr{Lit: el})
					}
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: arr, Rhs: yyS[yypt-0].exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 57:
		{
			isItem := false
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: yyS[yypt-1].op_lets}
				if len(yyS[yypt-2].exprs) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].exprs) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-2].exprs[0].Position())
		}
	case 58:
		{
			yyVAL.op_lets = true
		}
	case 59:
		{
			yyVAL.op_lets = false
		}
	case 60:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-5].expr, Then: yyS[yypt-3].stmt, ElseIf: yyS[yypt-1].stmts, Else: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 61:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 62:
		{
			yyS[yypt-1].stmts = append(yyS[yypt-1].stmts, yyS[yypt-0].stmt)
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 63:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmt}
		}
	case 64:
		{
			yyVAL.stmt = nil
		}
	case 65:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 66:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 67:
		{
			if el, ok := yyS[yypt-3].stmt.(*ast.LoopStmt); ok {
				el.Stmt = yyS[yypt-1].stmt
			} else if el, ok := yyS[yypt-3].stmt.(*ast.ForStmt); ok {
				el.Stmt = yyS[yypt-1].stmt
			} else if el, ok := yyS[yypt-3].stmt.(*ast.CForStmt); ok {
				el.Stmt = yyS[yypt-1].stmt
			}
			yyVAL.stmt = yyS[yypt-3].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 68:
		{
			yyVAL.stmt = &ast.LoopStmt{Expr: yyS[yypt-0].expr}
		}
	case 69:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: yyS[yypt-2].expr_idents, Value: yyS[yypt-0].expr}
		}
	case 70:
		{
			yyVAL.stmt = &ast.CForStmt{Stmt1: yyS[yypt-4].stmt, Expr2: yyS[yypt-2].expr, Expr3: yyS[yypt-0].expr}
		}
	case 71:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 72:
		{
			yyVAL.expr_idents = []string{yyS[yypt-2].tok.Lit, yyS[yypt-0].tok.Lit}
		}
	case 73:
		{
			yyVAL.stmt = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 74:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{Cases: yyS[yypt-1].stmts, Default: yyS[yypt-0].stmt}
		}
	case 75:
		{
			yyVAL.stmts = nil
		}
	case 76:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 77:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 78:
		{
			yyVAL.stmts = append(yyVAL.stmts, yyS[yypt-0].stmt)
		}
	case 79:
		{
			yyVAL.stmt = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 80:
		{
			yyVAL.stmt = nil
		}
	case 81:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 82:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 83:
		{
			yyS[yypt-1].stmt.(*ast.SwitchStmt).Expr = yyS[yypt-3].expr
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 84:
		{
			yyVAL.stmt = &ast.SwitchStmt{Cases: yyS[yypt-1].stmts, Default: yyS[yypt-0].stmt}
		}
	case 85:
		{
			yyVAL.stmts = nil
		}
	case 86:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 87:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 88:
		{
			yyVAL.stmts = append(yyVAL.stmts, yyS[yypt-0].stmt)
		}
	case 89:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].exprs, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 90:
		{
			yyVAL.stmt = nil
		}
	case 91:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 92:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 93:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 94:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 95:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents
		}
	case 96:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{}
		}
	case 97:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-0].opt_func_return_expr_idents
		}
	case 98:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 99:
		{
			yyVAL.opt_func_return_expr_idents = append(yyS[yypt-2].opt_func_return_expr_idents, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 100:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 101:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents
		}
	case 104:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 105:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].expr_typed_ident.Name, TypeData: yyS[yypt-0].expr_typed_ident.TypeData}
		}
	case 106:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 107:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 108:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 109:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 110:
		{
			yyVAL.exprs = nil
		}
	case 111:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 112:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 113:
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 114:
		{
			yyVAL.expr = nil
		}
	case 115:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 116:
		{
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 117:
		{
			yyVAL.expr = &ast.DbgExpr{Expr: yyS[yypt-0].expr}
		}
	case 118:
		{
			yyVAL.expr = &ast.DbgExpr{TypeData: yyS[yypt-0].type_data}
		}
	case 119:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 120:
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 121:
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 122:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 123:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprs, TypeData: yyS[yypt-3].type_data}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 124:
		{
			yyVAL.exprs = yyS[yypt-1].exprs
		}
	case 125:
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 126:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 127:
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 128:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 129:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 130:
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 131:
		{
			yyVAL.expr = yyS[yypt-0].expr
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 132:
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 133:
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 134:
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 140:
		{
			yyVAL.expr = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 141:
		{
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: yyS[yypt-0].type_data}
		}
	case 142:
		{
			yyVAL.opt_ident = nil
		}
	case 143:
		{
			yyVAL.opt_ident = &yyS[yypt-0].tok
		}
	case 144:
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 147:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 148:
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyS[yypt-1].expr, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 149:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-2].exprs, VarArg: true}
		}
	case 150:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-1].exprs}
		}
	case 151:
		{
			yyVAL.str = "-"
		}
	case 152:
		{
			yyVAL.str = "!"
		}
	case 153:
		{
			yyVAL.str = "^"
		}
	case 154:
		{
			yyVAL.str = "*"
		}
	case 155:
		{
			yyVAL.str = "&"
		}
	case 156:
		{
			if yyS[yypt-1].str == "&" {
				if el, ok := yyS[yypt-0].expr.(*ast.IdentExpr); ok {
					yyVAL.expr = &ast.AddrExpr{Expr: el}
				} else if el, ok := yyS[yypt-0].expr.(*ast.MemberExpr); ok {
					yyVAL.expr = el
				}
			} else if yyS[yypt-1].str == "*" {
				yyVAL.expr = &ast.DerefExpr{Expr: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.UnaryExpr{Operator: yyS[yypt-1].str, Expr: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 157:
		{
			yyVAL.str = "+"
		}
	case 158:
		{
			yyVAL.str = "-"
		}
	case 159:
		{
			yyVAL.str = "*"
		}
	case 160:
		{
			yyVAL.str = "/"
		}
	case 161:
		{
			yyVAL.str = "**"
		}
	case 162:
		{
			yyVAL.str = "%"
		}
	case 163:
		{
			yyVAL.str = "<<"
		}
	case 164:
		{
			yyVAL.str = ">>"
		}
	case 165:
		{
			yyVAL.str = "|"
		}
	case 166:
		{
			yyVAL.str = "||"
		}
	case 167:
		{
			yyVAL.str = "&"
		}
	case 168:
		{
			yyVAL.str = "&&"
		}
	case 169:
		{
			yyVAL.str = "!="
		}
	case 170:
		{
			yyVAL.str = ">"
		}
	case 171:
		{
			yyVAL.str = ">="
		}
	case 172:
		{
			yyVAL.str = "<"
		}
	case 173:
		{
			yyVAL.str = "<="
		}
	case 174:
		{
			yyVAL.str = "??"
		}
	case 175:
		{
			yyVAL.str = "+="
		}
	case 176:
		{
			yyVAL.str = "-="
		}
	case 177:
		{
			yyVAL.str = "*="
		}
	case 178:
		{
			yyVAL.str = "/="
		}
	case 179:
		{
			yyVAL.str = "&="
		}
	case 180:
		{
			yyVAL.str = "|="
		}
	case 181:
		{
			yyVAL.str = "<-"
		}
	case 182:
		{
			if yyS[yypt-1].str == "??" {
				yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "<-" {
				yyVAL.expr = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "+=" ||
				yyS[yypt-1].str == "-=" ||
				yyS[yypt-1].str == "*=" ||
				yyS[yypt-1].str == "/=" ||
				yyS[yypt-1].str == "&=" ||
				yyS[yypt-1].str == "|=" {
				yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 183:
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 184:
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 186:
		{
			yyVAL.str = "++"
		}
	case 187:
		{
			yyVAL.str = "--"
		}
	case 188:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: yyS[yypt-0].str}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 189:
		{
			f := &ast.FuncExpr{Params: yyS[yypt-5].func_expr_args.Params, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].stmt, VarArg: yyS[yypt-5].func_expr_args.VarArg}
			if yyS[yypt-5].func_expr_args.TypeData != nil {
				f.Params[len(f.Params)-1].TypeData = yyS[yypt-5].func_expr_args.TypeData
			}
			if yyS[yypt-7].opt_ident != nil {
				f.Name = yyS[yypt-7].opt_ident.Lit
			}
			yyVAL.expr = f
			yyVAL.expr.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 190:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-2].func_expr_idents, VarArg: true, TypeData: yyS[yypt-0].type_data}
		}
	case 191:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-1].func_expr_idents, VarArg: true, TypeData: nil}
		}
	case 192:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-0].func_expr_idents, VarArg: false, TypeData: nil}
		}
	case 193:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 194:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 195:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 196:
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 198:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 199:
		{
			if yyS[yypt-2].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyS[yypt-2].type_data.Env = append(yyS[yypt-2].type_data.Env, yyS[yypt-2].type_data.Name)
				yyS[yypt-2].type_data.Name = yyS[yypt-0].tok.Lit
			}
		}
	case 200:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 201:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 202:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 203:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 204:
		{
			yyVAL.type_data = yyS[yypt-2].type_data
		}
	case 205:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 206:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-0].expr_typed_ident.Name}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].expr_typed_ident.TypeData}}
		}
	case 207:
		{
			if yyS[yypt-2].type_data == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data.StructNames = append(yyVAL.type_data.StructNames, yyS[yypt-0].expr_typed_ident.Name)
			yyVAL.type_data.StructTypes = append(yyVAL.type_data.StructTypes, yyS[yypt-0].expr_typed_ident.TypeData)
		}
	case 208:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 209:
		{
			yyVAL.slice_count = 1
		}
	case 210:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 211:
		{
			yyS[yypt-0].expr_map.TypeData = yyS[yypt-1].type_data
			yyVAL.expr = yyS[yypt-0].expr_map
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_map.Position())
		}
	case 212:
		{
			yyVAL.expr = yyS[yypt-0].expr_map
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_map.Position())
		}
	case 213:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map
		}
	case 214:
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 215:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map
		}
	case 216:
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyS[yypt-0].exprs[0]}, Values: []ast.Expr{yyS[yypt-0].exprs[1]}}
		}
	case 217:
		{
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyS[yypt-0].exprs[0])
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyS[yypt-0].exprs[1])
		}
	case 218:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 219:
		{
			if el, ok := yyS[yypt-1].expr.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-3].expr
			} else if el, ok := yyS[yypt-1].expr.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-3].expr
			}
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 220:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: yyS[yypt-0].expr}
		}
	case 221:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-1].expr, End: nil}
		}
	case 222:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: nil, End: yyS[yypt-0].expr}
		}
	case 223:
		{
			yyVAL.expr = &ast.ItemExpr{Index: yyS[yypt-0].expr}
		}
	case 224:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].expr.(*ast.IdentExpr).Lit}
		}
	case 225:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].expr.(*ast.IdentExpr).Lit)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
