// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:45
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             ast.Stmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	exprs                         []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"','",
	"'!'",
	"'.'",
	"'['",
	"']'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1171

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	61, 88,
	62, 88,
	80, 6,
	81, 88,
	-2, 2,
	-1, 24,
	81, 89,
	-2, 29,
	-1, 29,
	61, 88,
	62, 88,
	-2, 69,
	-1, 61,
	61, 88,
	62, 88,
	81, 88,
	-2, 6,
	-1, 115,
	16, 70,
	81, 70,
	-2, 189,
	-1, 122,
	1, 97,
	8, 97,
	47, 97,
	48, 97,
	61, 97,
	62, 97,
	63, 97,
	76, 97,
	77, 97,
	79, 97,
	80, 97,
	81, 97,
	85, 97,
	86, 97,
	-2, 92,
	-1, 124,
	1, 99,
	8, 99,
	47, 99,
	48, 99,
	61, 99,
	62, 99,
	63, 99,
	76, 99,
	77, 99,
	79, 99,
	80, 99,
	81, 99,
	85, 99,
	86, 99,
	-2, 92,
	-1, 128,
	4, 178,
	51, 178,
	58, 178,
	59, 178,
	-2, 114,
	-1, 240,
	79, 169,
	83, 169,
	-2, 189,
	-1, 284,
	63, 6,
	-2, 88,
	-1, 296,
	77, 203,
	85, 203,
	-2, 195,
	-1, 317,
	77, 203,
	-2, 195,
	-1, 324,
	1, 91,
	8, 91,
	47, 91,
	48, 91,
	61, 91,
	62, 91,
	63, 91,
	77, 91,
	79, 91,
	80, 91,
	81, 91,
	85, 91,
	86, 91,
	-2, 92,
	-1, 330,
	1, 22,
	47, 22,
	48, 22,
	63, 22,
	77, 22,
	80, 22,
	86, 22,
	-2, 145,
	-1, 332,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	77, 24,
	80, 24,
	86, 24,
	-2, 147,
	-1, 334,
	1, 26,
	47, 26,
	48, 26,
	63, 26,
	77, 26,
	80, 26,
	86, 26,
	-2, 145,
	-1, 336,
	1, 28,
	47, 28,
	48, 28,
	63, 28,
	77, 28,
	80, 28,
	86, 28,
	-2, 147,
	-1, 374,
	77, 201,
	85, 201,
	-2, 196,
	-1, 393,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	77, 21,
	80, 21,
	86, 21,
	-2, 144,
	-1, 394,
	1, 23,
	47, 23,
	48, 23,
	63, 23,
	77, 23,
	80, 23,
	86, 23,
	-2, 146,
	-1, 395,
	1, 25,
	47, 25,
	48, 25,
	63, 25,
	77, 25,
	80, 25,
	86, 25,
	-2, 144,
	-1, 396,
	1, 27,
	47, 27,
	48, 27,
	63, 27,
	77, 27,
	80, 27,
	86, 27,
	-2, 146,
}

const yyPrivate = 57344

const yyLast = 4281

var yyAct = [...]int16{
	65, 220, 297, 247, 24, 8, 354, 355, 10, 281,
	217, 282, 215, 63, 32, 214, 66, 9, 357, 356,
	366, 284, 283, 71, 73, 84, 6, 147, 317, 109,
	112, 116, 9, 9, 375, 119, 120, 121, 123, 125,
	430, 296, 128, 9, 225, 9, 9, 139, 225, 231,
	432, 2, 122, 124, 463, 396, 148, 9, 225, 59,
	9, 105, 24, 225, 207, 377, 78, 106, 63, 225,
	156, 315, 129, 118, 64, 165, 166, 167, 168, 138,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	228, 335, 190, 191, 192, 193, 421, 195, 197, 198,
	225, 333, 155, 108, 206, 145, 311, 145, 312, 210,
	225, 160, 437, 309, 224, 146, 310, 127, 108, 225,
	225, 225, 457, 383, 458, 292, 63, 99, 100, 84,
	85, 86, 234, 236, 331, 209, 454, 329, 248, 395,
	249, 250, 99, 100, 84, 303, 307, 153, 154, 256,
	225, 394, 200, 393, 155, 194, 380, 202, 81, 82,
	83, 103, 336, 245, 155, 105, 140, 155, 372, 251,
	78, 106, 334, 254, 155, 7, 264, 338, 290, 223,
	105, 221, 62, 163, 161, 78, 106, 268, 203, 45,
	233, 126, 150, 271, 149, 144, 275, 63, 278, 255,
	143, 257, 287, 252, 253, 332, 142, 155, 330, 141,
	155, 259, 260, 261, 262, 513, 304, 132, 155, 512,
	130, 272, 203, 510, 295, 507, 279, 294, 505, 125,
	130, 504, 497, 495, 493, 134, 248, 491, 480, 314,
	316, 269, 299, 124, 476, 323, 273, 265, 302, 155,
	475, 474, 473, 465, 337, 464, 451, 447, 339, 324,
	445, 444, 443, 440, 136, 436, 413, 349, 351, 399,
	391, 135, 137, 386, 345, 24, 342, 363, 327, 325,
	360, 270, 359, 362, 133, 258, 201, 508, 503, 158,
	499, 368, 485, 130, 63, 483, 461, 138, 358, 459,
	441, 322, 417, 382, 230, 157, 132, 384, 117, 388,
	371, 69, 389, 415, 254, 410, 346, 361, 222, 357,
	356, 130, 502, 134, 134, 492, 134, 328, 111, 284,
	283, 130, 239, 134, 134, 387, 134, 11, 68, 373,
	291, 5, 392, 406, 487, 219, 61, 132, 411, 376,
	409, 408, 159, 136, 3, 379, 344, 132, 313, 60,
	135, 137, 300, 423, 289, 288, 169, 114, 390, 427,
	63, 407, 422, 133, 435, 152, 67, 1, 438, 130,
	420, 425, 48, 424, 130, 398, 138, 151, 378, 400,
	401, 418, 403, 218, 136, 216, 429, 280, 21, 298,
	130, 135, 137, 414, 136, 353, 130, 412, 20, 134,
	18, 135, 137, 17, 133, 26, 27, 25, 134, 4,
	0, 222, 369, 298, 133, 468, 0, 138, 239, 134,
	0, 0, 460, 0, 442, 0, 462, 138, 0, 367,
	0, 0, 0, 0, 446, 0, 448, 449, 466, 0,
	201, 0, 452, 0, 0, 470, 130, 455, 0, 456,
	0, 248, 490, 132, 489, 0, 0, 0, 130, 0,
	0, 0, 374, 0, 486, 0, 481, 0, 0, 0,
	134, 134, 501, 472, 0, 131, 0, 0, 0, 0,
	298, 0, 477, 374, 0, 478, 479, 0, 0, 134,
	0, 482, 0, 484, 0, 134, 0, 0, 0, 0,
	136, 0, 0, 244, 0, 0, 0, 135, 137, 0,
	0, 0, 0, 0, 201, 496, 201, 498, 0, 130,
	133, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 506, 0, 138, 0, 509, 0, 0, 0, 0,
	511, 0, 298, 0, 130, 0, 0, 0, 134, 134,
	0, 0, 134, 134, 0, 0, 0, 134, 0, 134,
	0, 0, 0, 226, 227, 0, 229, 0, 0, 0,
	0, 201, 237, 242, 243, 0, 246, 0, 0, 0,
	0, 0, 0, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 130, 0, 0, 0,
	0, 134, 0, 130, 0, 134, 0, 99, 100, 84,
	85, 86, 134, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 130, 0, 0, 0, 0, 0,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 134, 0, 105, 0, 0, 0, 293,
	78, 106, 0, 0, 0, 298, 0, 0, 301, 0,
	0, 134, 0, 0, 0, 0, 0, 134, 226, 308,
	0, 0, 0, 0, 47, 33, 39, 0, 0, 43,
	14, 58, 15, 28, 0, 29, 0, 0, 0, 0,
	0, 0, 0, 51, 40, 41, 42, 0, 16, 19,
	0, 0, 0, 0, 0, 0, 0, 0, 12, 13,
	0, 0, 0, 0, 0, 30, 31, 0, 0, 22,
	23, 370, 52, 55, 0, 49, 57, 56, 53, 0,
	50, 0, 0, 0, 0, 0, 0, 0, 34, 381,
	36, 38, 0, 0, 37, 385, 54, 0, 46, 0,
	0, 0, 35, 0, 44, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 419, 0,
	107, 0, 0, 426, 0, 0, 0, 428, 0, 431,
	286, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 0, 0, 105, 0, 0, 0, 0,
	78, 106, 285, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 467, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	267, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 0, 0, 105, 0, 0, 0, 0,
	78, 106, 266, 108, 87, 88, 90, 92, 102, 104,
	0, 494, 0, 0, 77, 0, 0, 500, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 74, 75,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 204, 0, 105, 0, 0, 0, 0,
	78, 106, 108, 87, 88, 90, 92, 102, 104, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 93, 94,
	95, 96, 97, 98, 0, 0, 99, 100, 84, 85,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 91, 89, 79, 80, 101, 0, 81, 82, 83,
	103, 0, 0, 0, 105, 433, 0, 434, 0, 78,
	106, 108, 87, 88, 90, 92, 102, 104, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 93, 94, 95,
	96, 97, 98, 0, 0, 99, 100, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	91, 89, 79, 80, 101, 0, 81, 82, 83, 103,
	0, 0, 0, 105, 0, 0, 0, 0, 78, 106,
	416, 108, 87, 88, 90, 92, 102, 104, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 93, 94, 95,
	96, 97, 98, 0, 0, 99, 100, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	91, 89, 79, 80, 101, 0, 81, 82, 83, 103,
	0, 0, 0, 105, 0, 0, 0, 0, 78, 106,
	397, 108, 87, 88, 90, 92, 102, 104, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 93, 94, 95,
	96, 97, 98, 0, 0, 99, 100, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	91, 89, 79, 80, 101, 0, 81, 82, 83, 103,
	0, 0, 0, 105, 0, 0, 0, 0, 78, 106,
	365, 108, 87, 88, 90, 92, 102, 104, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 93, 94, 95,
	96, 97, 98, 0, 0, 99, 100, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	91, 89, 79, 80, 101, 0, 81, 82, 83, 103,
	0, 0, 0, 105, 0, 0, 0, 0, 78, 106,
	341, 108, 87, 88, 90, 92, 102, 104, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 93, 94, 95,
	96, 97, 98, 0, 0, 99, 100, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	91, 89, 79, 80, 101, 0, 81, 82, 83, 103,
	0, 0, 0, 105, 320, 0, 321, 0, 78, 106,
	108, 87, 88, 90, 92, 102, 104, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 93, 94, 95, 96,
	97, 98, 0, 0, 99, 100, 84, 85, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 74, 75, 0, 76, 91,
	89, 79, 80, 101, 0, 81, 82, 83, 103, 0,
	0, 0, 105, 0, 0, 0, 0, 78, 106, 108,
	87, 88, 90, 92, 102, 104, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 93, 94, 95, 96, 97,
	98, 0, 0, 99, 100, 84, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 91, 89,
	79, 80, 101, 0, 81, 82, 83, 103, 0, 0,
	0, 105, 488, 0, 0, 0, 78, 106, 108, 87,
	88, 90, 92, 102, 104, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 93, 94, 95, 96, 97, 98,
	0, 0, 99, 100, 84, 85, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 471, 76, 91, 89, 79,
	80, 101, 0, 81, 82, 83, 103, 0, 0, 0,
	105, 0, 0, 0, 0, 78, 106, 108, 87, 88,
	90, 92, 102, 104, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 93, 94, 95, 96, 97, 98, 0,
	0, 99, 100, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 91, 89, 79, 80,
	101, 0, 81, 82, 83, 103, 0, 0, 0, 105,
	469, 0, 0, 0, 78, 106, 108, 87, 88, 90,
	92, 102, 104, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 93, 94, 95, 96, 97, 98, 0, 0,
	99, 100, 84, 85, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 453, 76, 91, 89, 79, 80, 101,
	0, 81, 82, 83, 103, 0, 0, 0, 105, 0,
	0, 0, 0, 78, 106, 108, 87, 88, 90, 92,
	102, 104, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 93, 94, 95, 96, 97, 98, 0, 0, 99,
	100, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 0, 450, 0, 105, 0, 0,
	0, 0, 78, 106, 108, 87, 88, 90, 92, 102,
	104, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	93, 94, 95, 96, 97, 98, 0, 0, 99, 100,
	84, 85, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 91, 89, 79, 80, 101, 0, 81,
	82, 83, 103, 0, 0, 0, 105, 439, 0, 0,
	0, 78, 106, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 404, 0, 105, 0, 0, 0, 0,
	78, 106, 108, 87, 88, 90, 92, 102, 104, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 93, 94,
	95, 96, 97, 98, 0, 0, 99, 100, 84, 85,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 91, 89, 79, 80, 101, 0, 81, 82, 83,
	103, 0, 402, 0, 105, 0, 0, 0, 0, 78,
	106, 108, 87, 88, 90, 92, 102, 104, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 93, 94, 95,
	96, 97, 98, 0, 0, 99, 100, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	91, 89, 79, 80, 101, 0, 81, 82, 83, 103,
	0, 0, 0, 105, 0, 352, 0, 0, 78, 106,
	108, 87, 88, 90, 92, 102, 104, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 93, 94, 95, 96,
	97, 98, 0, 0, 99, 100, 84, 85, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 91,
	89, 79, 80, 101, 0, 81, 82, 83, 103, 0,
	347, 0, 105, 0, 0, 0, 0, 78, 106, 108,
	87, 88, 90, 92, 102, 104, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 93, 94, 95, 96, 97,
	98, 0, 0, 99, 100, 84, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 91, 89,
	79, 80, 101, 0, 81, 82, 83, 103, 0, 343,
	0, 105, 0, 0, 0, 0, 78, 106, 108, 87,
	88, 90, 92, 102, 104, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 93, 94, 95, 96, 97, 98,
	0, 0, 99, 100, 84, 85, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 91, 89, 79,
	80, 101, 0, 81, 82, 83, 103, 0, 326, 0,
	105, 0, 0, 0, 0, 78, 106, 108, 87, 88,
	90, 92, 102, 104, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 93, 94, 95, 96, 97, 98, 0,
	0, 99, 100, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 91, 89, 79, 80,
	101, 0, 81, 82, 83, 103, 0, 0, 0, 105,
	319, 0, 0, 0, 78, 106, 108, 87, 88, 90,
	92, 102, 104, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 93, 94, 95, 96, 97, 98, 0, 0,
	99, 100, 84, 85, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 318, 76, 91, 89, 79, 80, 101,
	0, 81, 82, 83, 103, 0, 0, 0, 105, 0,
	0, 0, 0, 78, 106, 108, 87, 88, 90, 92,
	102, 104, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 93, 94, 95, 96, 97, 98, 0, 0, 99,
	100, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 0, 0, 0, 105, 306, 0,
	0, 0, 78, 106, 108, 87, 88, 90, 92, 102,
	104, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	93, 94, 95, 96, 97, 98, 0, 0, 99, 100,
	84, 85, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 91, 89, 79, 80, 101, 0, 81,
	82, 83, 103, 0, 0, 0, 105, 305, 0, 0,
	0, 78, 106, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 0, 0, 105, 0, 276, 0, 0,
	78, 106, 108, 87, 88, 90, 92, 102, 104, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 93, 94,
	95, 96, 97, 98, 0, 0, 99, 100, 84, 85,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 263,
	76, 91, 89, 79, 80, 101, 0, 81, 82, 83,
	103, 0, 0, 0, 105, 0, 0, 0, 0, 78,
	106, 108, 87, 88, 90, 92, 102, 104, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 93, 94, 95,
	96, 97, 98, 0, 0, 99, 100, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	91, 89, 79, 80, 101, 0, 81, 82, 83, 103,
	0, 0, 0, 105, 232, 0, 0, 0, 78, 106,
	108, 87, 88, 90, 92, 102, 104, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 93, 94, 95, 96,
	97, 98, 0, 0, 99, 100, 84, 85, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 91,
	89, 79, 80, 101, 0, 81, 82, 83, 103, 0,
	208, 0, 105, 0, 0, 0, 0, 78, 106, 108,
	87, 88, 90, 92, 102, 104, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 93, 94, 95, 96, 97,
	98, 0, 0, 99, 100, 84, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 91, 89,
	79, 80, 101, 0, 81, 82, 83, 103, 0, 199,
	0, 105, 0, 0, 0, 0, 78, 106, 108, 87,
	88, 90, 92, 102, 104, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 93, 94, 95, 96, 97, 98,
	0, 0, 99, 100, 84, 85, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 91, 89, 79,
	80, 101, 0, 81, 82, 83, 103, 0, 0, 0,
	105, 0, 0, 0, 0, 78, 106, 108, 87, 88,
	90, 92, 102, 104, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 93, 94, 95, 96, 97, 98, 0,
	0, 99, 100, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 91, 89, 79, 80,
	101, 0, 81, 82, 83, 103, 0, 0, 0, 105,
	0, 0, 0, 0, 213, 106, 108, 87, 88, 90,
	92, 102, 104, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 93, 94, 95, 96, 97, 98, 0, 0,
	99, 100, 84, 85, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 91, 89, 79, 80, 101,
	0, 81, 82, 83, 103, 0, 0, 0, 105, 0,
	0, 0, 0, 212, 106, 108, 87, 88, 90, 92,
	102, 104, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 93, 94, 95, 96, 97, 98, 0, 0, 99,
	100, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 0, 0, 0, 164, 0, 0,
	0, 0, 78, 106, 108, 87, 88, 90, 92, 102,
	104, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	93, 94, 95, 96, 97, 98, 0, 0, 99, 100,
	84, 85, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 91, 89, 79, 80, 101, 0, 81,
	82, 83, 103, 0, 0, 0, 162, 0, 0, 0,
	0, 78, 106, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 240, 33, 39, 105, 0, 43, 0, 0,
	78, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 40, 41, 42, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 33, 39, 0, 0, 43, 0, 0, 0, 136,
	52, 55, 0, 49, 57, 56, 241, 137, 50, 51,
	40, 41, 42, 0, 0, 0, 34, 0, 36, 238,
	0, 0, 37, 0, 54, 0, 46, 235, 0, 0,
	35, 0, 44, 0, 0, 0, 0, 0, 52, 55,
	0, 49, 57, 56, 53, 0, 50, 0, 0, 0,
	0, 0, 0, 0, 34, 0, 36, 38, 0, 0,
	37, 0, 54, 0, 46, 0, 0, 0, 35, 0,
	44, 364, 47, 33, 39, 0, 0, 43, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 40, 41, 42, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	240, 33, 39, 0, 0, 43, 0, 0, 0, 0,
	52, 55, 0, 49, 57, 56, 53, 0, 50, 51,
	40, 41, 42, 0, 0, 0, 34, 0, 36, 38,
	0, 0, 37, 0, 54, 0, 46, 0, 0, 0,
	35, 0, 44, 340, 0, 0, 0, 136, 52, 55,
	0, 49, 57, 56, 241, 137, 50, 0, 0, 0,
	0, 0, 0, 0, 34, 0, 36, 238, 0, 0,
	37, 0, 54, 0, 46, 0, 0, 0, 35, 0,
	44, 115, 33, 39, 0, 0, 43, 0, 58, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	51, 40, 41, 42, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 47,
	33, 39, 0, 0, 43, 0, 0, 0, 0, 52,
	55, 0, 49, 57, 56, 53, 0, 50, 51, 40,
	41, 42, 0, 0, 0, 34, 0, 36, 38, 0,
	0, 37, 0, 110, 0, 46, 0, 113, 0, 35,
	0, 44, 0, 0, 0, 0, 0, 52, 55, 0,
	49, 57, 56, 53, 0, 50, 0, 0, 0, 0,
	0, 0, 0, 34, 0, 36, 38, 0, 0, 37,
	0, 54, 0, 46, 0, 277, 0, 35, 0, 44,
	47, 33, 39, 0, 0, 43, 0, 0, 0, 47,
	33, 39, 0, 0, 43, 0, 0, 0, 0, 51,
	40, 41, 42, 0, 0, 0, 0, 0, 51, 40,
	41, 42, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 55,
	0, 49, 57, 56, 53, 0, 50, 52, 55, 211,
	49, 57, 56, 53, 34, 50, 36, 38, 0, 0,
	37, 0, 54, 34, 46, 36, 38, 0, 35, 37,
	44, 54, 0, 46, 0, 205, 0, 35, 0, 44,
	47, 33, 39, 0, 0, 43, 0, 0, 0, 47,
	33, 39, 0, 0, 43, 0, 0, 0, 0, 51,
	40, 41, 42, 0, 0, 0, 0, 0, 51, 40,
	41, 42, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 55,
	0, 49, 57, 56, 53, 0, 50, 52, 55, 196,
	49, 57, 56, 53, 34, 50, 36, 38, 0, 0,
	37, 0, 54, 34, 46, 36, 38, 0, 35, 37,
	44, 54, 0, 46, 0, 0, 0, 35, 0, 44,
	47, 33, 39, 0, 0, 43, 0, 0, 0, 47,
	33, 39, 0, 0, 43, 0, 0, 0, 0, 51,
	40, 41, 42, 0, 0, 0, 0, 0, 51, 40,
	41, 42, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 55,
	0, 49, 57, 56, 53, 0, 50, 52, 55, 0,
	49, 57, 56, 53, 34, 50, 36, 38, 0, 0,
	37, 0, 405, 34, 46, 36, 38, 0, 35, 37,
	44, 350, 0, 46, 0, 0, 0, 35, 0, 44,
	47, 33, 39, 0, 0, 43, 0, 0, 0, 47,
	33, 39, 0, 0, 43, 0, 0, 0, 0, 51,
	40, 41, 42, 0, 0, 0, 0, 0, 51, 40,
	41, 42, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 52, 55,
	0, 49, 57, 56, 53, 0, 50, 52, 55, 0,
	49, 57, 56, 53, 34, 50, 36, 38, 0, 0,
	37, 0, 348, 34, 46, 36, 38, 0, 35, 37,
	44, 274, 0, 46, 0, 0, 0, 35, 0, 44,
	108, 87, 88, 90, 92, 0, 104, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 100, 84, 85, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 91,
	89, 79, 80, 101, 0, 81, 82, 83, 103, 72,
	33, 39, 105, 0, 43, 0, 0, 78, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 40,
	41, 42, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 70, 33, 39,
	0, 0, 43, 0, 0, 0, 0, 52, 55, 0,
	49, 57, 56, 53, 0, 50, 51, 40, 41, 42,
	0, 0, 0, 34, 0, 36, 38, 0, 0, 37,
	0, 54, 0, 46, 0, 0, 0, 35, 0, 44,
	0, 0, 0, 0, 0, 52, 55, 0, 49, 57,
	56, 53, 0, 50, 108, 87, 88, 90, 92, 0,
	0, 34, 108, 36, 38, 0, 0, 37, 0, 54,
	0, 46, 0, 0, 0, 35, 0, 44, 99, 100,
	84, 85, 86, 0, 0, 0, 99, 100, 84, 85,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 91, 89, 79, 80, 101, 0, 81,
	82, 83, 103, 79, 80, 101, 105, 81, 82, 83,
	103, 78, 106, 0, 105, 0, 0, 0, 0, 78,
	106,
}

var yyPact = [...]int16{
	-54, -1000, -1000, 690, -54, -1000, -69, -69, -1000, -1000,
	-1000, -1000, -1000, -1000, 3785, 3785, 382, 334, -1000, 245,
	-1000, -1000, 4143, 4105, 1394, -1000, -1000, -1000, 3785, 3567,
	3785, 242, -11, -1000, 3785, 3785, 3785, 3785, 3785, -1000,
	-1000, -1000, -1000, 123, -43, 363, 3785, 98, -1000, 141,
	138, 132, 127, 41, -69, 3785, 126, 124, 381, 96,
	-1000, 690, -69, -1000, 31, 2912, 2912, 239, 286, -54,
	116, 3188, 115, 3119, 3785, 3785, 3785, 3785, 372, 3785,
	3785, 3785, 3785, 3785, 3785, 3785, 3785, 3785, 3785, 3785,
	3785, 3785, 3785, 3785, 3785, 3785, 3785, 3785, 3785, -1000,
	-1000, 3785, 3785, 3785, 3785, 3785, 3776, 3785, 3785, 2843,
	-54, 151, 907, 3695, -16, 98, 2774, -69, 3686, -17,
	-17, -17, -11, 3050, -11, 2981, 351, 113, -5, 3785,
	-69, 48, -1000, 363, 363, 16, 363, 238, -36, 2705,
	3785, 3785, 3328, 363, 469, -69, 363, 3785, 587, 3785,
	3785, 117, -1000, 3785, 3785, -69, -1000, -54, 3785, -54,
	218, 3785, 3785, 3785, 3785, 2912, 2912, 2636, 3257, -1000,
	97, 97, 112, 112, 112, 2912, 112, 112, 4196, 4196,
	4196, 4196, 4196, 4196, 2912, 2912, 2912, 2912, 2912, 2912,
	97, 4034, 112, 4188, 178, 837, 3785, 587, 112, -54,
	214, -69, 3785, -69, -54, 3965, 2567, 3605, -69, 292,
	767, 3785, 371, 370, 109, 342, 54, -1000, -1000, 363,
	-1000, 351, -1000, -40, -69, 368, -39, -39, 363, -39,
	-69, -5, -1000, 147, 2498, -1000, 2429, 77, 3486, 363,
	98, 39, 47, 37, 364, 3785, -14, -53, 2360, 2291,
	1325, 3785, 31, 31, 3785, 212, 2222, 211, 307, 139,
	136, 103, 93, 3785, 108, -1000, -1000, 3448, 1255, 209,
	-1000, 2153, 362, 207, -54, 2084, 3956, 3875, 2015, 282,
	-26, -1000, -1000, 264, 690, -1000, 3366, 1185, -1000, -1000,
	223, 353, -69, -39, 99, 341, -69, -51, -69, 3785,
	-1000, -20, 361, 87, -1000, -1000, -1000, -1000, 48, 363,
	-1000, -1000, 3785, 52, -53, 363, 206, -69, 3785, -1000,
	-1000, 3785, 31, 2912, -11, -1000, -54, -1000, 276, 84,
	-1000, 82, -1000, 70, -1000, -24, -1000, 587, -1000, 1115,
	-1000, -1000, -1000, -54, -1000, -1000, 202, -54, -54, 1946,
	-54, 1877, 3866, -29, -1000, -1000, 262, 3785, 199, -1000,
	-1000, -54, 260, 1045, -1000, -1000, 236, -39, 363, 223,
	27, 351, 223, 312, -69, -1000, -40, 363, -41, 363,
	-1000, -35, 976, 3785, 198, 46, -1000, 3785, 2912, 1808,
	196, 234, -54, -1000, -1000, -1000, -1000, -1000, 195, -1000,
	194, 193, -54, 190, -54, -54, 1739, 189, -1000, -1000,
	-54, 1670, 83, -1000, -1000, -54, -1000, -54, 53, -39,
	233, 223, -1000, -1000, 230, 223, -25, 188, -39, 186,
	-69, -39, 363, -1000, 3785, 1601, -1000, -69, 1532, -1000,
	-1000, -54, 185, -1000, -1000, -1000, 184, -1000, 183, 177,
	-54, -1000, -1000, -54, -54, -1000, 171, -1000, -69, -54,
	229, -54, 226, 223, -1000, -1000, 350, 46, 1463, -1000,
	3785, 3785, 170, 304, -1000, -1000, -1000, 167, -1000, -1000,
	-1000, 363, 166, -54, 165, -54, 224, 363, -1000, -53,
	2912, 301, 222, -1000, -39, -1000, 164, -1000, 161, -54,
	-39, 158, 221, -54, -1000, -1000, 156, -1000, -54, 152,
	-1000, 148, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 51, 429, 8, 347, 427, 426, 425, 423, 420,
	418, 415, 7, 6, 408, 407, 11, 9, 59, 0,
	338, 15, 405, 10, 1, 12, 403, 20, 401, 449,
	398, 199, 3, 392, 14, 387, 364, 351, 27, 2,
	185, 5,
}

var yyR1 = [...]int8{
	0, 35, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 4, 4, 5, 7, 7, 6, 6, 8, 8,
	8, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 9, 14, 15, 15, 15, 15, 15, 16, 17,
	10, 11, 11, 11, 11, 11, 12, 12, 13, 20,
	20, 20, 27, 27, 27, 28, 28, 28, 21, 21,
	22, 22, 23, 24, 25, 25, 26, 26, 18, 18,
	18, 18, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 29,
	29, 29, 29, 29, 29, 29, 30, 30, 31, 31,
	32, 32, 32, 33, 33, 33, 33, 33, 33, 34,
	36, 36, 37, 37, 37, 38, 38, 40, 40, 41,
	39, 39, 39, 39,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 3, 0, 1, 1, 1,
	2, 2, 5, 1, 1, 13, 12, 9, 8, 1,
	1, 6, 5, 6, 5, 6, 5, 6, 5, 1,
	1, 1, 1, 4, 3, 3, 3, 3, 5, 7,
	5, 4, 7, 5, 6, 7, 7, 8, 7, 8,
	8, 9, 6, 0, 1, 1, 2, 2, 4, 3,
	7, 0, 1, 1, 2, 2, 4, 4, 3, 0,
	1, 4, 0, 1, 3, 0, 1, 4, 0, 1,
	1, 1, 1, 2, 1, 4, 1, 4, 0, 1,
	4, 4, 1, 1, 2, 2, 2, 2, 4, 2,
	4, 1, 1, 1, 1, 5, 3, 3, 8, 9,
	10, 9, 10, 11, 2, 5, 7, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 2, 2,
	3, 3, 3, 3, 5, 4, 5, 4, 4, 4,
	1, 4, 3, 4, 4, 4, 4, 6, 8, 7,
	6, 10, 5, 3, 2, 4, 4, 6, 3, 1,
	3, 2, 2, 5, 2, 6, 2, 5, 2, 3,
	0, 3, 6, 6, 5, 5, 6, 5, 5, 1,
	0, 1, 2, 1, 1, 0, 1, 1, 2, 1,
	0, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -35, -1, -36, -2, -37, 80, -40, -41, 86,
	-3, -4, 38, 39, 10, 12, 28, -8, -9, 29,
	-10, -14, 49, 50, -19, -5, -7, -6, 13, 15,
	45, 46, -34, 5, 68, 82, 70, 74, 71, 6,
	24, 25, 26, 9, 84, -31, 78, 4, -33, 55,
	60, 23, 52, 58, 76, 53, 57, 56, 11, -18,
	-36, -37, -40, -41, -18, -19, -19, 4, 14, 76,
	4, -19, 4, -19, 61, 62, 64, 27, 83, 67,
	68, 71, 72, 73, 42, 43, 44, 17, 18, 66,
	19, 65, 20, 32, 33, 34, 35, 36, 37, 40,
	41, 69, 21, 74, 22, 78, 84, 53, 16, -19,
	76, -20, -19, 80, -4, 4, -19, 76, 84, -19,
	-19, -19, -34, -19, -34, -19, 78, 4, 85, -38,
	-40, -29, 4, 71, -31, 58, 51, 59, 84, -19,
	78, 78, 78, 78, 78, 76, 84, -38, -19, 78,
	78, -20, 4, 61, 62, 81, -3, 76, 13, 76,
	-1, 78, 78, 78, 78, -19, -19, -19, -19, 4,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -18, -19, 63, -19, -19, 76,
	-1, -40, 16, 81, 76, 80, -19, 80, 76, -38,
	-19, 63, 83, 83, -21, -25, -22, -23, -26, 4,
	-24, 78, -31, -18, 76, 83, -29, -29, 84, -29,
	76, 85, 79, -18, -19, 79, -19, -29, 71, -31,
	4, 58, -29, -29, 54, -38, -29, -32, -19, -19,
	-19, 62, -18, -18, -38, -1, -19, -1, 77, -18,
	-18, -18, -18, 63, 8, 79, 85, 63, -19, -1,
	77, -19, -38, -1, 76, -19, 80, 80, -19, -38,
	-15, -17, -16, 48, 47, 85, 63, -19, 4, 4,
	79, 8, 81, -29, -21, -25, 81, -39, -40, -38,
	4, -29, -38, 8, 79, 79, 79, 79, -29, 84,
	79, 79, 81, 4, -32, 85, -39, 81, 63, 79,
	79, 81, -18, -19, -34, 77, 76, 77, 30, 8,
	79, 8, 79, 8, 79, 8, 79, -19, 79, -19,
	85, 85, 77, 76, 4, 77, -1, 76, 76, -19,
	76, -19, 80, -11, -13, -12, 48, 47, -38, -16,
	-17, 63, -3, -19, 85, 85, -27, -29, 78, 79,
	-29, -38, 79, 8, -40, 85, -18, 85, -30, 4,
	79, -29, -19, 81, -39, -29, 77, -38, -19, -19,
	-1, 4, 76, 79, 79, 79, 79, 85, -1, 77,
	-1, -1, 76, -1, 76, 76, -19, -38, -12, -13,
	63, -19, -18, 77, -1, 63, 85, 76, -28, -29,
	-27, 79, -23, -24, -27, 79, -29, -39, -29, -38,
	81, -29, 85, 79, 81, -19, 77, 76, -19, 79,
	77, 76, -1, 77, 77, 77, -1, 77, -1, -1,
	76, 77, -1, 63, 63, -1, -1, 79, 81, 76,
	-27, 76, -27, 79, 77, 77, -38, -29, -19, 79,
	-38, 63, -1, 77, 77, 77, 77, -1, -1, -1,
	77, -38, -1, 76, -1, 76, -27, 4, 79, -32,
	-19, 77, 31, 77, -29, 77, -1, 77, -1, 76,
	-29, -39, 31, 76, 77, 77, -1, 77, 76, -1,
	77, -1, 77, 77,
}

var yyDef = [...]int16{
	190, -2, 1, -2, 190, 191, 194, 193, 197, 199,
	4, 7, 8, 9, 88, 0, 0, 13, 14, 0,
	19, 20, 0, 0, -2, 30, 31, 32, 0, -2,
	0, 0, 92, 93, 0, 0, 0, 0, 0, 101,
	102, 103, 104, 0, 195, 0, 0, 189, 150, 0,
	0, 0, 0, 0, 195, 0, 0, 0, 69, 0,
	3, -2, 192, 198, 10, 89, 11, 0, 0, 190,
	189, 0, 189, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	139, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	190, 0, 89, 0, 0, -2, 0, 195, 0, 94,
	95, 96, -2, 0, -2, 0, 78, 0, -2, 88,
	196, 0, 169, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 195, 0, 180, 164, 0,
	0, 0, 70, 88, 88, 195, 5, 190, 0, 190,
	0, 88, 88, 88, 88, 34, 36, 0, 106, 107,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 137,
	140, 141, 142, 143, 0, 0, 0, 163, 168, 190,
	0, 193, 0, 195, 190, 0, 0, 0, 195, 53,
	0, 0, 0, 0, 0, 80, 79, 84, 81, 82,
	86, 78, 179, 200, 195, 0, 171, 172, 0, 174,
	195, 178, 117, 0, 0, 152, 0, 0, 0, 0,
	-2, 0, 0, 0, 0, 180, 0, 200, 0, 0,
	0, 88, 35, 37, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 147, 149, 0, 0, 0,
	41, 0, 0, 0, 190, 0, 0, 0, 0, 61,
	195, 54, 55, 0, -2, 148, 0, 0, 98, 100,
	72, 0, 195, 83, 0, 80, -2, 0, 202, 88,
	170, 0, 0, 0, 145, 151, 153, 154, 172, 0,
	155, 156, 0, 0, 200, 0, 0, -2, 0, 165,
	166, 0, 33, 90, -2, 12, 190, 40, 0, 0,
	-2, 0, -2, 0, -2, 0, -2, 105, 146, 0,
	187, 188, 38, 190, 71, 43, 0, 190, 190, 0,
	190, 0, 0, 195, 62, 63, 0, 88, 0, 56,
	57, 190, 0, 0, 184, 185, 0, 73, 75, 72,
	0, 0, 72, 0, -2, 115, 200, 0, 195, 0,
	144, 0, 0, 0, 0, 0, 162, 0, 181, 0,
	0, 0, 190, -2, -2, -2, -2, 186, 0, 44,
	0, 0, 190, 0, 190, 190, 0, 0, 64, 65,
	190, 89, 0, 52, 59, 190, 183, 190, 0, 76,
	0, 72, 85, 87, 0, 72, 0, 0, 173, 0,
	195, 176, 0, 157, 0, 0, 160, 195, 0, 167,
	39, 190, 0, 42, 45, 46, 0, 48, 0, 0,
	190, 60, 68, 190, 190, 58, 0, 74, 195, 190,
	0, 190, 0, 72, 116, 175, 0, 173, 0, 159,
	180, 0, 0, 18, 47, 49, 50, 0, 66, 67,
	108, 0, 0, 190, 0, 190, 0, 0, 158, 200,
	182, 17, 0, 51, 77, 109, 0, 111, 0, 190,
	177, 0, 0, 190, 110, 112, 0, 161, 190, 0,
	113, 0, 16, 15,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 73, 74, 3,
	78, 79, 71, 67, 81, 68, 83, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 80,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 84, 3, 85, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:106
		{
			yyVAL.compstmt = nil
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:110
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:116
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:125
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:141
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:145
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:149
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:154
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:159
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:169
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:174
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:178
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 15:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:210
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:215
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:220
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:225
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:230
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:235
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:240
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:245
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:250
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:257
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:261
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:265
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:271
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:278
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:282
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:299
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:303
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:320
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:325
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:330
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:340
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:345
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:356
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:361
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:366
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:371
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:376
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:381
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:386
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:391
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:396
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:403
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:410
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:414
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:418
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:422
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:427
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:438
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:445
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 60:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:451
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:460
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:464
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:468
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:472
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:478
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:489
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:494
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:501
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:506
		{
			yyVAL.expr_idents = []string{}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:510
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:514
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:522
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:526
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:530
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:534
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:538
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:542
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:550
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:554
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:560
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:564
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:570
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:576
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:582
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:586
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:592
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:596
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:601
		{
			yyVAL.exprs = nil
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:605
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:609
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:616
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:625
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:629
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:634
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:639
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:644
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:649
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:654
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:659
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:664
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:669
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:674
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:679
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:684
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:689
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:694
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:699
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 108:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:704
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 109:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:709
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 110:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:714
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:720
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 112:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:725
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:730
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:736
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:741
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 116:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:746
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:751
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:756
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:761
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:766
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:771
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:776
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:781
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:786
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:791
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:796
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:801
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:806
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:811
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:816
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:821
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:826
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:831
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:836
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:841
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:846
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:851
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:856
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:861
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:866
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:871
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:876
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:881
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:886
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:891
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:896
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:901
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:906
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:911
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:916
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:921
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:926
		{
			yyVAL.expr = &ast.DbgExpr{}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:931
		{
			yyVAL.expr = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:936
		{
			yyVAL.expr = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:941
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:951
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 157:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:956
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 158:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:961
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 159:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:966
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 160:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:971
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 161:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:977
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:983
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:988
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:993
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:998
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1003
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 167:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1008
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1013
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 169:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1021
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1025
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1034
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1043
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 173:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1053
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1057
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1066
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1072
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1076
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1086
		{
			yyVAL.slice_count = 1
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1090
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 180:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1097
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1101
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 182:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1105
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1115
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1119
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1123
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1127
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1131
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1135
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1141
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
