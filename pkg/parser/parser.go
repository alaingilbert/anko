// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:56
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             ast.Stmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_unary                    ast.Expr
	expr_binary                   ast.Expr
	expr_member_or_ident          ast.Expr
	expr_call                     *ast.CallExpr
	anon_expr_call                *ast.AnonCallExpr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"','",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1179

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	61, 88,
	62, 88,
	80, 6,
	81, 88,
	-2, 2,
	-1, 24,
	81, 89,
	-2, 20,
	-1, 72,
	61, 88,
	62, 88,
	81, 88,
	-2, 6,
	-1, 121,
	16, 70,
	81, 70,
	-2, 197,
	-1, 125,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	77, 21,
	80, 21,
	86, 21,
	-2, 107,
	-1, 126,
	1, 22,
	47, 22,
	48, 22,
	63, 22,
	77, 22,
	80, 22,
	86, 22,
	-2, 108,
	-1, 130,
	4, 186,
	51, 186,
	58, 186,
	59, 186,
	-2, 102,
	-1, 159,
	1, 137,
	8, 137,
	47, 137,
	48, 137,
	61, 137,
	62, 137,
	63, 137,
	76, 137,
	77, 137,
	79, 137,
	80, 137,
	81, 137,
	83, 137,
	86, 137,
	-2, 128,
	-1, 161,
	1, 139,
	8, 139,
	47, 139,
	48, 139,
	61, 139,
	62, 139,
	63, 139,
	76, 139,
	77, 139,
	79, 139,
	80, 139,
	81, 139,
	83, 139,
	86, 139,
	-2, 128,
	-1, 261,
	79, 177,
	84, 177,
	-2, 197,
	-1, 290,
	63, 6,
	-2, 88,
	-1, 293,
	77, 211,
	83, 211,
	-2, 203,
	-1, 308,
	77, 211,
	-2, 203,
	-1, 315,
	1, 91,
	8, 91,
	47, 91,
	48, 91,
	61, 91,
	62, 91,
	63, 91,
	77, 91,
	79, 91,
	80, 91,
	81, 91,
	83, 91,
	86, 91,
	-2, 128,
	-1, 316,
	1, 138,
	8, 138,
	47, 138,
	48, 138,
	61, 138,
	62, 138,
	63, 138,
	76, 138,
	77, 138,
	79, 138,
	80, 138,
	81, 138,
	83, 138,
	86, 138,
	-2, 129,
	-1, 317,
	1, 140,
	8, 140,
	47, 140,
	48, 140,
	61, 140,
	62, 140,
	63, 140,
	76, 140,
	77, 140,
	79, 140,
	80, 140,
	81, 140,
	83, 140,
	86, 140,
	-2, 129,
	-1, 364,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	77, 24,
	80, 24,
	86, 24,
	-2, 131,
	-1, 366,
	1, 26,
	47, 26,
	48, 26,
	63, 26,
	77, 26,
	80, 26,
	86, 26,
	-2, 133,
	-1, 367,
	77, 209,
	83, 209,
	-2, 204,
	-1, 416,
	1, 23,
	47, 23,
	48, 23,
	63, 23,
	77, 23,
	80, 23,
	86, 23,
	-2, 130,
	-1, 417,
	1, 25,
	47, 25,
	48, 25,
	63, 25,
	77, 25,
	80, 25,
	86, 25,
	-2, 132,
}

const yyPrivate = 57344

const yyLast = 4189

var yyAct = [...]int16{
	2, 253, 237, 250, 8, 287, 354, 10, 382, 355,
	294, 248, 74, 247, 288, 49, 130, 357, 356, 9,
	68, 36, 38, 86, 6, 67, 14, 60, 15, 28,
	9, 29, 9, 308, 223, 425, 290, 289, 9, 53,
	39, 40, 41, 223, 16, 30, 421, 109, 110, 94,
	368, 9, 293, 470, 12, 13, 9, 9, 223, 438,
	223, 31, 32, 94, 145, 33, 34, 229, 70, 57,
	329, 51, 59, 58, 55, 9, 69, 365, 74, 142,
	168, 159, 161, 86, 62, 88, 64, 66, 432, 84,
	65, 87, 56, 223, 45, 363, 76, 327, 43, 88,
	24, 63, 223, 84, 140, 87, 222, 109, 110, 94,
	95, 96, 77, 330, 223, 331, 393, 207, 223, 370,
	223, 306, 223, 215, 304, 115, 118, 241, 123, 223,
	127, 129, 153, 154, 89, 90, 111, 74, 91, 92,
	93, 113, 141, 226, 324, 88, 210, 272, 366, 84,
	155, 87, 155, 464, 148, 465, 456, 209, 145, 156,
	157, 158, 160, 162, 146, 155, 364, 320, 155, 24,
	265, 214, 267, 417, 155, 416, 390, 172, 173, 174,
	175, 176, 178, 179, 388, 340, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 318, 274, 202, 203,
	204, 205, 278, 74, 164, 325, 213, 155, 273, 515,
	155, 165, 210, 254, 218, 167, 166, 86, 150, 149,
	144, 143, 134, 514, 512, 508, 507, 506, 305, 231,
	233, 501, 499, 494, 238, 44, 239, 240, 307, 493,
	485, 109, 110, 94, 95, 96, 479, 476, 475, 474,
	315, 459, 458, 257, 453, 447, 323, 266, 322, 445,
	444, 134, 443, 134, 271, 442, 424, 413, 161, 138,
	345, 405, 91, 92, 93, 113, 137, 139, 163, 88,
	136, 397, 360, 84, 378, 87, 344, 341, 362, 135,
	74, 359, 335, 333, 284, 510, 276, 436, 275, 280,
	140, 283, 170, 505, 503, 490, 376, 7, 138, 488,
	138, 468, 466, 264, 73, 137, 139, 137, 139, 302,
	451, 428, 238, 228, 169, 394, 124, 122, 135, 415,
	135, 314, 410, 396, 361, 384, 504, 398, 399, 140,
	401, 140, 48, 406, 357, 356, 117, 290, 289, 162,
	409, 132, 414, 408, 495, 336, 47, 337, 134, 352,
	147, 134, 74, 79, 132, 171, 220, 389, 348, 350,
	418, 136, 136, 319, 136, 482, 126, 24, 5, 434,
	136, 433, 136, 72, 431, 252, 372, 435, 373, 343,
	125, 446, 11, 448, 449, 3, 380, 452, 332, 381,
	71, 454, 259, 136, 131, 138, 457, 151, 138, 317,
	316, 297, 137, 139, 180, 137, 139, 152, 392, 463,
	78, 1, 120, 383, 208, 135, 50, 371, 135, 429,
	251, 467, 132, 385, 249, 469, 140, 46, 404, 140,
	37, 477, 478, 61, 411, 52, 480, 481, 54, 42,
	35, 286, 21, 132, 483, 353, 20, 487, 75, 489,
	18, 17, 136, 132, 22, 220, 426, 23, 133, 491,
	19, 26, 27, 25, 4, 0, 0, 0, 0, 500,
	441, 502, 0, 0, 497, 217, 0, 0, 136, 0,
	0, 0, 0, 0, 509, 136, 511, 0, 259, 0,
	0, 513, 0, 0, 0, 0, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 244, 0, 132, 0,
	0, 0, 0, 0, 132, 0, 0, 472, 0, 295,
	132, 0, 181, 0, 0, 0, 132, 0, 0, 0,
	0, 0, 136, 0, 0, 295, 0, 0, 238, 484,
	0, 0, 0, 0, 136, 136, 0, 0, 0, 224,
	225, 0, 227, 0, 0, 136, 0, 0, 234, 0,
	236, 277, 0, 0, 0, 221, 0, 285, 0, 0,
	0, 0, 0, 296, 0, 0, 0, 208, 0, 299,
	258, 263, 0, 0, 132, 0, 0, 242, 243, 0,
	0, 367, 0, 0, 0, 0, 136, 0, 136, 255,
	0, 0, 0, 295, 0, 0, 367, 0, 0, 0,
	136, 136, 0, 0, 136, 136, 0, 0, 132, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 358, 0, 0,
	298, 0, 0, 0, 244, 208, 0, 208, 0, 0,
	0, 132, 291, 292, 0, 0, 0, 0, 136, 379,
	0, 0, 136, 0, 136, 0, 321, 295, 0, 132,
	0, 387, 0, 328, 0, 313, 224, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	97, 98, 100, 102, 112, 114, 136, 0, 0, 0,
	83, 208, 0, 0, 407, 0, 0, 0, 136, 0,
	0, 0, 136, 109, 110, 94, 95, 96, 0, 132,
	377, 0, 420, 132, 0, 0, 85, 0, 0, 0,
	369, 0, 0, 386, 0, 0, 0, 82, 101, 99,
	89, 90, 111, 391, 91, 92, 93, 113, 0, 0,
	0, 88, 0, 0, 0, 84, 0, 87, 0, 0,
	0, 0, 0, 132, 0, 0, 0, 0, 0, 0,
	0, 0, 460, 0, 0, 0, 461, 0, 0, 0,
	0, 295, 0, 0, 419, 0, 422, 0, 0, 0,
	0, 412, 0, 0, 0, 0, 0, 0, 430, 0,
	0, 0, 0, 437, 0, 0, 0, 0, 86, 97,
	98, 100, 102, 112, 114, 0, 486, 0, 0, 83,
	0, 0, 0, 0, 103, 104, 105, 106, 107, 108,
	0, 0, 109, 110, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 471, 80, 81, 0, 82, 101, 99, 89,
	90, 111, 0, 91, 92, 93, 113, 0, 211, 0,
	88, 0, 0, 0, 84, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 97, 98, 100,
	102, 112, 114, 0, 0, 0, 496, 83, 0, 0,
	498, 0, 103, 104, 105, 106, 107, 108, 0, 0,
	109, 110, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 101, 99, 89, 90, 111,
	0, 91, 92, 93, 113, 0, 0, 0, 88, 439,
	0, 440, 84, 0, 87, 86, 97, 98, 100, 102,
	112, 114, 0, 0, 0, 0, 83, 0, 0, 0,
	0, 103, 104, 105, 106, 107, 108, 0, 0, 109,
	110, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 101, 99, 89, 90, 111, 0,
	91, 92, 93, 113, 0, 0, 0, 88, 311, 0,
	312, 84, 0, 87, 86, 97, 98, 100, 102, 112,
	114, 0, 0, 0, 0, 83, 0, 0, 0, 0,
	103, 104, 105, 106, 107, 108, 0, 0, 109, 110,
	94, 95, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 301, 82, 101, 99, 89, 90, 111, 0, 91,
	92, 93, 113, 0, 0, 0, 88, 0, 0, 0,
	84, 300, 87, 86, 97, 98, 100, 102, 112, 114,
	0, 0, 0, 0, 83, 0, 0, 0, 0, 103,
	104, 105, 106, 107, 108, 0, 0, 109, 110, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 82, 101, 99, 89, 90, 111, 0, 91, 92,
	93, 113, 0, 0, 0, 88, 0, 0, 0, 84,
	269, 87, 86, 97, 98, 100, 102, 112, 114, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 103, 104,
	105, 106, 107, 108, 0, 0, 109, 110, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 80, 81, 0,
	82, 101, 99, 89, 90, 111, 0, 91, 92, 93,
	113, 0, 0, 0, 88, 0, 0, 0, 84, 0,
	87, 86, 97, 98, 100, 102, 112, 114, 0, 0,
	0, 0, 83, 0, 0, 0, 0, 103, 104, 105,
	106, 107, 108, 0, 0, 109, 110, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	101, 99, 89, 90, 111, 0, 91, 92, 93, 113,
	0, 0, 0, 88, 492, 0, 0, 84, 0, 87,
	86, 97, 98, 100, 102, 112, 114, 0, 0, 0,
	0, 83, 0, 0, 0, 0, 103, 104, 105, 106,
	107, 108, 0, 0, 109, 110, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 101,
	99, 89, 90, 111, 0, 91, 92, 93, 113, 0,
	0, 0, 88, 473, 0, 0, 84, 0, 87, 86,
	97, 98, 100, 102, 112, 114, 0, 0, 0, 0,
	83, 0, 0, 0, 0, 103, 104, 105, 106, 107,
	108, 0, 0, 109, 110, 94, 95, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 462, 82, 101, 99,
	89, 90, 111, 0, 91, 92, 93, 113, 0, 0,
	0, 88, 0, 0, 0, 84, 0, 87, 86, 97,
	98, 100, 102, 112, 114, 0, 0, 0, 0, 83,
	0, 0, 0, 0, 103, 104, 105, 106, 107, 108,
	0, 0, 109, 110, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 455, 82, 101, 99, 89,
	90, 111, 0, 91, 92, 93, 113, 0, 0, 0,
	88, 0, 0, 0, 84, 0, 87, 86, 97, 98,
	100, 102, 112, 114, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 103, 104, 105, 106, 107, 108, 0,
	0, 109, 110, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 101, 99, 89, 90,
	111, 0, 91, 92, 93, 113, 0, 450, 0, 88,
	0, 0, 0, 84, 0, 87, 86, 97, 98, 100,
	102, 112, 114, 0, 0, 0, 0, 83, 0, 0,
	0, 0, 103, 104, 105, 106, 107, 108, 0, 0,
	109, 110, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 101, 99, 89, 90, 111,
	0, 91, 92, 93, 113, 0, 0, 0, 88, 427,
	0, 0, 84, 0, 87, 86, 97, 98, 100, 102,
	112, 114, 0, 0, 0, 0, 83, 0, 0, 0,
	0, 103, 104, 105, 106, 107, 108, 0, 0, 109,
	110, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 101, 99, 89, 90, 111, 0,
	91, 92, 93, 113, 0, 0, 0, 88, 0, 0,
	0, 84, 423, 87, 86, 97, 98, 100, 102, 112,
	114, 0, 0, 0, 0, 83, 0, 0, 0, 0,
	103, 104, 105, 106, 107, 108, 0, 0, 109, 110,
	94, 95, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 101, 99, 89, 90, 111, 0, 91,
	92, 93, 113, 0, 402, 0, 88, 0, 0, 0,
	84, 0, 87, 86, 97, 98, 100, 102, 112, 114,
	0, 0, 0, 0, 83, 0, 0, 0, 0, 103,
	104, 105, 106, 107, 108, 0, 0, 109, 110, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 101, 99, 89, 90, 111, 0, 91, 92,
	93, 113, 0, 400, 0, 88, 0, 0, 0, 84,
	0, 87, 86, 97, 98, 100, 102, 112, 114, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 103, 104,
	105, 106, 107, 108, 0, 0, 109, 110, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 101, 99, 89, 90, 111, 0, 91, 92, 93,
	113, 0, 0, 0, 88, 0, 0, 0, 84, 395,
	87, 86, 97, 98, 100, 102, 112, 114, 0, 0,
	0, 0, 83, 0, 0, 0, 0, 103, 104, 105,
	106, 107, 108, 0, 0, 109, 110, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	101, 99, 89, 90, 111, 0, 91, 92, 93, 113,
	0, 0, 0, 88, 0, 0, 0, 84, 375, 87,
	86, 97, 98, 100, 102, 112, 114, 0, 0, 0,
	0, 83, 0, 0, 0, 0, 103, 104, 105, 106,
	107, 108, 0, 0, 109, 110, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 101,
	99, 89, 90, 111, 0, 91, 92, 93, 113, 0,
	0, 0, 88, 0, 351, 0, 84, 0, 87, 86,
	97, 98, 100, 102, 112, 114, 0, 0, 0, 0,
	83, 0, 0, 0, 0, 103, 104, 105, 106, 107,
	108, 0, 0, 109, 110, 94, 95, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 101, 99,
	89, 90, 111, 0, 91, 92, 93, 113, 0, 346,
	0, 88, 0, 0, 0, 84, 0, 87, 86, 97,
	98, 100, 102, 112, 114, 0, 0, 0, 0, 83,
	0, 0, 0, 0, 103, 104, 105, 106, 107, 108,
	0, 0, 109, 110, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 101, 99, 89,
	90, 111, 0, 91, 92, 93, 113, 0, 342, 0,
	88, 0, 0, 0, 84, 0, 87, 86, 97, 98,
	100, 102, 112, 114, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 103, 104, 105, 106, 107, 108, 0,
	0, 109, 110, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 101, 99, 89, 90,
	111, 0, 91, 92, 93, 113, 0, 0, 0, 88,
	0, 0, 0, 84, 339, 87, 86, 97, 98, 100,
	102, 112, 114, 0, 0, 0, 0, 83, 0, 0,
	0, 0, 103, 104, 105, 106, 107, 108, 0, 0,
	109, 110, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 101, 99, 89, 90, 111,
	0, 91, 92, 93, 113, 0, 334, 0, 88, 0,
	0, 0, 84, 0, 87, 86, 97, 98, 100, 102,
	112, 114, 0, 0, 0, 0, 83, 0, 0, 0,
	0, 103, 104, 105, 106, 107, 108, 0, 0, 109,
	110, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 101, 99, 89, 90, 111, 0,
	91, 92, 93, 113, 0, 0, 0, 88, 326, 0,
	0, 84, 0, 87, 86, 97, 98, 100, 102, 112,
	114, 0, 0, 0, 0, 83, 0, 0, 0, 0,
	103, 104, 105, 106, 107, 108, 0, 0, 109, 110,
	94, 95, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 101, 99, 89, 90, 111, 0, 91,
	92, 93, 113, 0, 0, 0, 88, 310, 0, 0,
	84, 0, 87, 86, 97, 98, 100, 102, 112, 114,
	0, 0, 0, 0, 83, 0, 0, 0, 0, 103,
	104, 105, 106, 107, 108, 0, 0, 109, 110, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	309, 82, 101, 99, 89, 90, 111, 0, 91, 92,
	93, 113, 0, 0, 0, 88, 0, 0, 0, 84,
	0, 87, 86, 97, 98, 100, 102, 112, 114, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 103, 104,
	105, 106, 107, 108, 0, 0, 109, 110, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 101, 99, 89, 90, 111, 0, 91, 92, 93,
	113, 0, 0, 0, 88, 303, 0, 0, 84, 0,
	87, 86, 97, 98, 100, 102, 112, 114, 0, 0,
	0, 0, 83, 0, 0, 0, 0, 103, 104, 105,
	106, 107, 108, 0, 0, 109, 110, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	101, 99, 89, 90, 111, 0, 91, 92, 93, 113,
	0, 0, 0, 88, 0, 281, 0, 84, 0, 87,
	86, 97, 98, 100, 102, 112, 114, 0, 0, 0,
	0, 83, 0, 0, 0, 0, 103, 104, 105, 106,
	107, 108, 0, 0, 109, 110, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 268, 82, 101,
	99, 89, 90, 111, 0, 91, 92, 93, 113, 0,
	0, 0, 88, 0, 0, 0, 84, 0, 87, 86,
	97, 98, 100, 102, 112, 114, 0, 0, 0, 0,
	83, 0, 0, 0, 0, 103, 104, 105, 106, 107,
	108, 0, 0, 109, 110, 94, 95, 96, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 101, 99,
	89, 90, 111, 0, 91, 92, 93, 113, 0, 0,
	0, 88, 230, 0, 0, 84, 0, 87, 86, 97,
	98, 100, 102, 112, 114, 0, 0, 0, 0, 83,
	0, 0, 0, 0, 103, 104, 105, 106, 107, 108,
	0, 0, 109, 110, 94, 95, 96, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 101, 99, 89,
	90, 111, 0, 91, 92, 93, 113, 0, 216, 0,
	88, 0, 0, 0, 84, 0, 87, 86, 97, 98,
	100, 102, 112, 114, 0, 0, 0, 0, 83, 0,
	0, 0, 0, 103, 104, 105, 106, 107, 108, 0,
	0, 109, 110, 94, 95, 96, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 101, 99, 89, 90,
	111, 0, 91, 92, 93, 113, 0, 206, 0, 88,
	0, 0, 0, 84, 0, 87, 86, 97, 98, 100,
	102, 112, 114, 0, 0, 0, 0, 83, 0, 0,
	0, 0, 103, 104, 105, 106, 107, 108, 0, 0,
	109, 110, 94, 95, 96, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 101, 99, 89, 90, 111,
	0, 91, 92, 93, 113, 0, 0, 0, 88, 0,
	0, 0, 84, 0, 87, 86, 97, 98, 100, 102,
	112, 114, 0, 0, 0, 0, 83, 0, 0, 0,
	0, 103, 104, 105, 106, 107, 108, 0, 0, 109,
	110, 94, 95, 96, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 101, 99, 89, 90, 111, 0,
	91, 92, 93, 113, 0, 0, 0, 88, 0, 0,
	0, 84, 0, 246, 86, 97, 98, 100, 102, 112,
	114, 0, 0, 0, 0, 83, 0, 0, 0, 0,
	103, 104, 105, 106, 107, 108, 0, 0, 109, 110,
	94, 95, 96, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 101, 99, 89, 90, 111, 0, 91,
	92, 93, 113, 0, 0, 0, 88, 0, 0, 0,
	84, 0, 245, 86, 97, 98, 100, 102, 112, 114,
	0, 0, 0, 0, 83, 0, 0, 0, 0, 103,
	104, 105, 106, 107, 108, 0, 0, 109, 110, 94,
	95, 96, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 101, 99, 89, 90, 111, 0, 91, 92,
	93, 113, 261, 36, 38, 219, 0, 67, 0, 84,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 53, 39, 40, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	261, 36, 38, 0, 0, 67, 0, 0, 0, 138,
	70, 57, 0, 51, 59, 58, 260, 139, 69, 53,
	39, 40, 41, 0, 0, 0, 62, 0, 64, 262,
	0, 0, 65, 0, 56, 0, 45, 256, 0, 0,
	43, 0, 0, 63, 0, 0, 0, 138, 70, 57,
	0, 51, 59, 58, 260, 139, 69, 0, 0, 0,
	0, 0, 0, 0, 62, 0, 64, 262, 0, 0,
	65, 0, 56, 0, 45, 0, 0, 0, 43, 0,
	0, 63, 86, 97, 98, 100, 102, 112, 114, 0,
	0, 0, 0, 83, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 109, 110, 94, 95,
	96, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 101, 99, 89, 90, 111, 0, 91, 92, 93,
	113, 0, 0, 0, 88, 0, 0, 0, 84, 0,
	87, 121, 36, 38, 0, 0, 67, 0, 60, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 39, 40, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	36, 38, 0, 0, 67, 0, 0, 0, 0, 70,
	57, 0, 51, 59, 58, 55, 0, 69, 53, 39,
	40, 41, 0, 0, 0, 62, 0, 64, 66, 0,
	0, 65, 0, 116, 0, 45, 0, 119, 0, 43,
	0, 0, 63, 0, 0, 0, 0, 70, 57, 0,
	51, 59, 58, 55, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 64, 66, 0, 0, 65,
	0, 56, 0, 45, 68, 36, 38, 43, 374, 67,
	63, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 39, 40, 41, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 36, 38, 0, 0, 67, 0, 0,
	0, 0, 70, 57, 0, 51, 59, 58, 55, 0,
	69, 53, 39, 40, 41, 0, 0, 0, 62, 0,
	64, 66, 0, 0, 65, 0, 56, 0, 45, 0,
	0, 0, 43, 338, 0, 63, 0, 0, 0, 0,
	70, 57, 0, 51, 59, 58, 55, 0, 69, 0,
	0, 0, 0, 0, 0, 0, 62, 0, 64, 66,
	0, 0, 65, 0, 56, 0, 45, 0, 282, 0,
	43, 0, 0, 63, 68, 36, 38, 0, 0, 67,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 39, 40, 41, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 36, 38, 0, 0,
	67, 0, 70, 57, 0, 51, 59, 58, 55, 0,
	69, 0, 0, 232, 53, 39, 40, 41, 62, 0,
	64, 66, 0, 0, 65, 0, 56, 0, 45, 0,
	0, 0, 43, 0, 0, 63, 68, 36, 38, 0,
	0, 67, 0, 70, 57, 0, 51, 59, 58, 55,
	0, 69, 0, 0, 0, 53, 39, 40, 41, 62,
	0, 64, 66, 0, 0, 65, 0, 56, 0, 45,
	0, 212, 0, 43, 0, 0, 63, 68, 36, 38,
	0, 0, 67, 0, 70, 57, 0, 51, 59, 58,
	55, 0, 69, 0, 0, 177, 53, 39, 40, 41,
	62, 0, 64, 66, 0, 0, 65, 0, 56, 0,
	45, 0, 0, 0, 43, 0, 0, 63, 68, 36,
	38, 0, 0, 67, 0, 70, 57, 0, 51, 59,
	58, 55, 0, 69, 0, 0, 0, 53, 39, 40,
	41, 62, 0, 64, 66, 0, 0, 65, 0, 56,
	0, 45, 0, 0, 0, 43, 0, 0, 63, 68,
	36, 38, 0, 0, 67, 0, 70, 57, 0, 51,
	59, 58, 55, 0, 69, 0, 0, 0, 53, 39,
	40, 41, 62, 0, 64, 66, 0, 0, 65, 0,
	403, 0, 45, 0, 0, 0, 43, 0, 0, 63,
	68, 36, 38, 0, 0, 67, 0, 70, 57, 0,
	51, 59, 58, 55, 0, 69, 0, 0, 0, 53,
	39, 40, 41, 62, 0, 64, 66, 0, 0, 65,
	0, 349, 0, 45, 0, 0, 0, 43, 0, 0,
	63, 68, 36, 38, 0, 0, 67, 0, 70, 57,
	0, 51, 59, 58, 55, 0, 69, 0, 0, 0,
	53, 39, 40, 41, 62, 0, 64, 66, 0, 0,
	65, 0, 347, 0, 45, 0, 0, 0, 43, 0,
	0, 63, 128, 36, 38, 0, 0, 67, 0, 70,
	57, 0, 51, 59, 58, 55, 0, 69, 0, 0,
	0, 53, 39, 40, 41, 62, 0, 64, 66, 0,
	0, 65, 0, 279, 0, 45, 0, 0, 0, 43,
	0, 0, 63, 0, 0, 0, 0, 0, 0, 0,
	70, 57, 0, 51, 59, 58, 55, 0, 69, 0,
	0, 86, 97, 98, 100, 102, 62, 114, 64, 66,
	0, 0, 65, 0, 56, 0, 45, 0, 0, 0,
	43, 0, 0, 63, 0, 109, 110, 94, 95, 96,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 99, 89, 90, 111, 0, 91, 92, 93, 113,
	0, 0, 0, 88, 0, 0, 0, 84, 0, 87,
	86, 97, 98, 100, 102, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 109, 110, 94, 95, 96, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	99, 89, 90, 111, 0, 91, 92, 93, 113, 0,
	0, 0, 88, 0, 0, 0, 84, 0, 87,
}

var yyPact = [...]int16{
	-56, -1000, -1000, 16, -56, -1000, -54, -54, -1000, -1000,
	-1000, -1000, -1000, -1000, 3783, 3783, 426, 359, -1000, -1000,
	-1000, -1000, -1000, -1000, 1166, -1000, -1000, -1000, 3783, 3427,
	261, 3783, 260, 3783, 3988, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -67, 367, 3783, -1000, -1000, -1000, -3,
	-1000, 153, -1000, 152, -1000, 82, -54, 3783, 151, 150,
	423, 71, 3783, 3783, 3783, 3783, 3783, 210, 143, 148,
	147, -1000, 16, -54, -1000, 84, 2960, 2960, 258, 299,
	3783, 3783, 3783, 3783, 3742, 3783, 3783, 420, 3783, 3783,
	3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783,
	3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783, 3783, -1000,
	-1000, 3783, 3783, 3783, 3783, 2891, -56, 141, 812, 3701,
	91, 143, -56, 2822, -54, -1000, -1000, 2960, 146, 3167,
	22, 3783, -54, 30, -1000, 367, 367, 61, 367, 257,
	-16, 2753, 3660, 3783, 367, -54, 367, 3783, 693, 3783,
	3783, 65, -1000, 3783, 3783, -54, 21, 21, 21, -3,
	3098, -3, 3029, 391, 145, 3783, 3238, 269, -1000, -56,
	3783, -56, 2960, 2960, 2684, 3346, 1097, 3783, 693, 7,
	-1000, 139, 211, 211, 7, 7, 7, 2960, 7, 7,
	67, 67, 67, 67, 67, 67, 2960, 2960, 2960, 2960,
	2960, 2960, 211, 4035, 7, 4104, -56, 231, -54, 3783,
	-54, -56, 3947, 2615, 3578, 227, -54, 310, 3783, 3783,
	-1000, -29, -54, 417, -50, -50, 367, -50, -54, 22,
	-1000, 1028, 3783, 2546, 45, 3783, 38, -48, 2477, 2408,
	959, 3783, 84, 84, 3783, 416, 415, 127, 375, 86,
	-1000, -1000, 367, -1000, 391, 136, -1000, 2339, 18, 367,
	-12, 143, 3276, 34, 404, 226, 2270, 225, 3783, -1000,
	3540, 2201, 106, -1000, 220, -1000, 2132, 395, 219, -56,
	2063, 3906, 3865, 1994, 339, 307, -11, -1000, -1000, 281,
	16, 87, 69, -54, -33, -54, 3783, -1000, 36, 392,
	-1000, 3465, 1925, -1000, -1000, -48, 367, 217, -54, 3783,
	-1000, -1000, 3783, 84, 2960, -3, -1000, -1000, 267, 364,
	-54, -50, 105, 369, 97, -1000, -1000, -1000, 30, 367,
	-1000, 3783, 35, -1000, -56, -1000, 693, 1856, -1000, -1000,
	-1000, -1000, -56, -1000, -1000, 214, -56, -56, 1787, -56,
	1718, 3824, 277, -30, -1000, -1000, 279, 3783, 200, -1000,
	-1000, -56, 276, 96, -1000, 94, -1000, -54, -1000, -29,
	367, -35, 367, 1649, -1000, -1000, 199, -41, -1000, 3783,
	2960, 1580, 255, -50, 367, 267, 9, 391, 267, 228,
	-1000, -24, 890, 3783, 198, -1000, 195, -1000, 193, 192,
	-56, 188, -56, -56, 1511, 254, -56, 187, -1000, -1000,
	-56, 1442, 93, -1000, -1000, -56, -1000, -1000, 185, -50,
	184, -54, -50, -1000, -1000, -54, 1373, -1000, -56, 74,
	-50, 246, 267, -1000, -1000, 245, 267, -26, 367, -1000,
	3783, 1304, -1000, -1000, -1000, -1000, 182, -1000, 181, 180,
	-56, -56, 179, -1000, -1000, -56, -56, -1000, -1000, -1000,
	381, 3783, 3783, 173, -1000, -54, -56, 243, -56, 239,
	267, -41, 1235, -1000, -1000, -1000, -1000, 172, 166, 333,
	-1000, -1000, 367, -48, 2960, -1000, 367, 165, -56, 164,
	-56, 238, -1000, -1000, 315, 237, -50, 160, -50, -1000,
	159, -1000, 158, -56, 229, -56, -1000, -1000, -1000, 157,
	-56, 156, -1000, 142, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 0, 484, 7, 402, 483, 482, 481, 480, 477,
	474, 471, 470, 466, 465, 9, 6, 462, 461, 14,
	5, 453, 96, 460, 366, 352, 459, 458, 455, 450,
	447, 356, 13, 444, 3, 1, 11, 440, 8, 439,
	433, 437, 245, 2, 436, 15, 431, 405, 388, 370,
	10, 317, 4,
}

var yyR1 = [...]int8{
	0, 46, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 10, 10, 9, 9, 9, 9, 8, 8, 8,
	8, 4, 4, 4, 5, 7, 7, 6, 6, 11,
	11, 11, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 17, 18, 18, 18, 18, 18, 19,
	20, 13, 14, 14, 14, 14, 14, 15, 15, 16,
	31, 31, 38, 38, 38, 39, 39, 39, 32, 32,
	33, 33, 34, 35, 36, 36, 37, 37, 21, 21,
	21, 21, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 28, 28, 28, 23, 23,
	24, 24, 25, 25, 29, 29, 29, 29, 29, 29,
	29, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 30, 26, 26, 26,
	26, 26, 26, 27, 27, 27, 27, 40, 40, 40,
	40, 40, 40, 40, 41, 41, 42, 42, 43, 43,
	43, 44, 44, 44, 44, 44, 44, 45, 47, 47,
	48, 48, 48, 49, 49, 51, 51, 52, 50, 50,
	50, 50,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 3, 0, 1, 1, 1,
	2, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 6, 5, 6, 5, 13, 12, 9,
	8, 1, 1, 1, 4, 3, 3, 3, 3, 5,
	7, 5, 4, 7, 5, 6, 7, 7, 8, 7,
	8, 8, 9, 6, 0, 1, 1, 2, 2, 4,
	3, 7, 0, 1, 1, 2, 2, 4, 4, 3,
	1, 4, 0, 1, 3, 0, 1, 4, 0, 1,
	1, 1, 1, 2, 1, 4, 1, 4, 0, 1,
	4, 4, 1, 1, 1, 1, 1, 1, 1, 5,
	3, 1, 2, 5, 7, 3, 1, 1, 1, 4,
	4, 1, 4, 1, 4, 1, 6, 10, 5, 3,
	2, 4, 4, 6, 3, 3, 4, 4, 1, 3,
	5, 4, 5, 4, 2, 2, 2, 2, 4, 2,
	4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 3, 3, 3, 8, 9, 10,
	9, 10, 11, 4, 6, 8, 7, 1, 3, 2,
	2, 5, 2, 6, 2, 5, 2, 3, 0, 3,
	6, 6, 5, 5, 6, 5, 5, 1, 0, 1,
	2, 1, 1, 0, 1, 1, 2, 1, 0, 2,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -46, -1, -47, -2, -48, 80, -51, -52, 86,
	-3, -4, 38, 39, 10, 12, 28, -11, -12, -8,
	-13, -17, -10, -9, -22, -5, -7, -6, 13, 15,
	29, 45, 46, 49, 50, -23, 5, -29, 6, 24,
	25, 26, -26, 82, -42, 78, -30, -24, -25, -45,
	-44, 55, -28, 23, -27, 58, 76, 53, 57, 56,
	11, -21, 68, 85, 70, 74, 71, 9, 4, 60,
	52, -47, -48, -51, -52, -21, -22, -22, 4, 14,
	61, 62, 64, 27, 82, 53, 16, 84, 78, 67,
	68, 71, 72, 73, 42, 43, 44, 17, 18, 66,
	19, 65, 20, 32, 33, 34, 35, 36, 37, 40,
	41, 69, 21, 74, 22, -22, 76, -31, -22, 80,
	-4, 4, 76, -22, 76, -24, -25, -22, 4, -22,
	83, -49, -51, -40, 4, 71, -42, 58, 51, 59,
	82, -22, 82, 78, 78, 76, 82, -49, -22, 78,
	78, -31, 4, 61, 62, 81, -22, -22, -22, -45,
	-22, -45, -22, 78, 4, 78, 78, 78, -3, 76,
	13, 76, -22, -22, -22, -22, -22, 63, -22, -22,
	4, -21, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, 76, -1, -51, 16,
	81, 76, 80, -22, 80, -1, 76, -49, 78, 78,
	-42, -21, 76, 84, -40, -40, 82, -40, 76, 83,
	79, -22, 63, -22, -40, -49, -40, -43, -22, -22,
	-22, 62, -21, -21, -49, 84, 84, -32, -36, -33,
	-34, -37, 4, -35, 78, -21, 79, -22, -40, -42,
	58, 4, 71, -40, 54, -1, -22, -1, 63, 83,
	63, -22, 8, 79, -1, 77, -22, -49, -1, 76,
	-22, 80, 80, -22, 77, -49, -18, -20, -19, 48,
	47, -21, -21, 81, -50, -51, -49, 4, -40, -49,
	83, 63, -22, 79, 79, -43, 83, -50, 81, 63,
	79, 79, 81, -21, -22, -45, 4, 4, 79, 8,
	81, -40, -32, -36, 8, 79, 79, 79, -40, 82,
	79, 81, 4, 77, 76, 77, -22, -22, 83, 83,
	79, 77, 76, 4, 77, -1, 76, 76, -22, 76,
	-22, 80, 30, -14, -16, -15, 48, 47, -49, -19,
	-20, 63, -3, 8, 79, 8, 79, -51, 83, -21,
	83, -41, 4, -22, 83, 83, -50, -40, 77, -49,
	-22, -22, -38, -40, 78, 79, -40, -49, 79, 8,
	79, -40, -22, 81, -1, 83, -1, 77, -1, -1,
	76, -1, 76, 76, -22, 4, 76, -49, -15, -16,
	63, -22, -21, 77, -1, 63, 79, 79, -50, -40,
	-49, 81, -40, 83, 77, 76, -22, 79, 76, -39,
	-40, -38, 79, -34, -35, -38, 79, -40, 83, 79,
	81, -22, 77, 77, 77, 77, -1, 77, -1, -1,
	76, 76, -1, 77, -1, 63, 63, -1, 77, 77,
	-49, -49, 63, -1, 79, 81, 76, -38, 76, -38,
	79, -40, -22, 79, 77, 77, 77, -1, -1, 77,
	-1, -1, 4, -43, -22, 77, -49, -1, 76, -1,
	76, -38, 79, 77, 77, 31, -40, -50, -40, 77,
	-1, 77, -1, 76, 31, 76, 77, 77, 77, -1,
	76, -1, 77, -1, 77, 77,
}

var yyDef = [...]int16{
	198, -2, 1, -2, 198, 199, 202, 201, 205, 207,
	4, 7, 8, 9, 88, 0, 0, 13, 14, 15,
	16, 17, 18, 19, -2, 31, 32, 33, 0, 88,
	0, 0, 0, 0, 0, 92, 93, 94, 95, 96,
	97, 98, 101, 203, 0, 0, 106, 107, 108, 128,
	111, 0, 113, 0, 115, 0, 203, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 197, 0,
	0, 3, -2, 200, 206, 10, 89, 11, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 161,
	162, 0, 0, 0, 0, 0, 198, 0, 89, 0,
	0, -2, 198, 0, 203, -2, -2, 0, 197, 0,
	-2, 88, 204, 0, 177, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 203, 0, 188, 120, 0,
	0, 0, 70, 88, 88, 203, 134, 135, 136, -2,
	0, -2, 0, 78, 0, 88, 0, 0, 5, 198,
	0, 198, 35, 37, 0, 100, 0, 0, 119, 124,
	129, 0, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 163, 164, 165, 166, 198, 0, 201, 0,
	203, 198, 0, 0, 0, 0, 203, 54, 88, 88,
	187, 208, 203, 0, 179, 180, 0, 182, 203, 186,
	105, 0, 0, 0, 0, 188, 0, 208, 0, 0,
	0, 88, 36, 38, 0, 0, 0, 0, 80, 79,
	84, 81, 82, 86, 78, 0, 125, 0, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 0, 0, 110,
	0, 0, 0, 133, 0, 42, 0, 0, 0, 198,
	0, 0, 0, 0, 0, 62, 203, 55, 56, 0,
	-2, 0, 0, -2, 0, 210, 88, 178, 0, 0,
	109, 0, 0, 112, 114, 208, 0, 0, -2, 0,
	121, 122, 0, 34, 90, -2, -2, -2, 72, 0,
	203, 83, 0, 80, 0, 131, 126, 127, 180, 0,
	173, 0, 0, 12, 198, 41, 99, 0, 195, 196,
	132, 39, 198, 71, 44, 0, 198, 198, 0, 198,
	0, 0, 0, 203, 63, 64, 0, 88, 0, 57,
	58, 198, 0, 0, -2, 0, -2, -2, 103, 208,
	0, 203, 0, 0, 192, 193, 0, 0, 118, 0,
	189, 0, 0, 73, 75, 72, 0, 0, 72, 0,
	130, 0, 0, 0, 0, 194, 0, 45, 0, 0,
	198, 0, 198, 198, 0, 0, 198, 0, 65, 66,
	198, 89, 0, 53, 60, 198, -2, -2, 0, 181,
	0, 203, 184, 191, 116, 203, 0, 123, 198, 0,
	76, 0, 72, 85, 87, 0, 72, 0, 0, 174,
	0, 0, 40, 43, 46, 47, 0, 49, 0, 0,
	198, 198, 0, 61, 69, 198, 198, 59, 104, 183,
	0, 188, 0, 0, 74, 203, 198, 0, 198, 0,
	72, 181, 0, 176, 48, 50, 51, 0, 0, 30,
	67, 68, 0, 208, 190, 167, 0, 0, 198, 0,
	198, 0, 175, 52, 29, 0, 185, 0, 77, 168,
	0, 170, 0, 198, 0, 198, 117, 169, 171, 0,
	198, 0, 172, 0, 28, 27,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 85, 3, 3, 3, 73, 74, 3,
	78, 79, 71, 67, 81, 68, 84, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 80,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 82, 3, 83, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:128
		{
			yyVAL.compstmt = nil
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:132
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:138
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:147
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:163
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:166
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:171
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:176
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:181
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:191
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:195
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.stmt = yyDollar[1].stmt_try
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:198
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:199
		{
			yyVAL.stmt = yyDollar[1].stmt_go
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:200
		{
			yyVAL.stmt = yyDollar[1].stmt_defer
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:209
		{
			callExpr := yyDollar[2].expr_call
			callExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: callExpr}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:216
		{
			anonCallExpr := yyDollar[2].anon_expr_call
			anonCallExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: anonCallExpr}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:225
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:230
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:235
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr.Position())
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:240
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[1].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:247
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:252
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:257
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:262
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:268
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:269
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:270
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:274
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:281
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:285
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:302
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:306
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:323
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:328
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:333
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:343
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:348
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:359
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:364
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:369
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:374
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:379
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:384
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:389
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:394
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:399
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:406
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:413
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:417
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:421
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:425
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:430
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:441
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:448
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:454
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:463
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:467
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:471
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:475
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:481
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:492
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:497
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:504
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:510
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:514
		{
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:519
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:523
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:527
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:531
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:535
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:539
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:547
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:550
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:553
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:554
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:558
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 83:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:564
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:570
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:574
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:580
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:584
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:589
		{
			yyVAL.exprs = nil
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:593
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:597
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:604
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:612
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:614
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:618
		{
			yyVAL.expr = yyDollar[1].expr_unary
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:620
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:625
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:630
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:635
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 99:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:640
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:645
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:649
		{
			yyVAL.expr = yyDollar[1].expr_func
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:651
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:656
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 104:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:661
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:666
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:670
		{
			yyVAL.expr = yyDollar[1].expr_binary
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:671
		{
			yyVAL.expr = yyDollar[1].expr_call
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:672
		{
			yyVAL.expr = yyDollar[1].anon_expr_call
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:674
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:679
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:684
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:689
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:693
		{
			yyVAL.expr = yyDollar[1].expr_dbg
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:695
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:704
		{
			yyVAL.expr = yyDollar[1].expr_make
		}
	case 116:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:706
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 117:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:712
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 118:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:718
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:723
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:728
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:733
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:738
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 123:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:743
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:748
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:755
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:760
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:765
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:771
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:773
		{
			yyVAL.expr_member_or_ident = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member_or_ident.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:780
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr_call.SetPosition(yyDollar[1].tok.Position())
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:785
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr_call.SetPosition(yyDollar[1].tok.Position())
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:792
		{
			yyVAL.anon_expr_call = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.anon_expr_call.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:797
		{
			yyVAL.anon_expr_call = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.anon_expr_call.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:804
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:809
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:814
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:819
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:824
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:829
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:834
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:841
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:846
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:851
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:856
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:861
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:866
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:871
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:876
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:881
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:886
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:891
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:896
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:901
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:906
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:911
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:916
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:921
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:926
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:931
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:936
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:941
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:946
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:951
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:956
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:961
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:966
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:973
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 168:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:978
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 169:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:983
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 170:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:989
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 171:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:994
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 172:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:999
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1007
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1012
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 175:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:1017
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:1022
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1029
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1033
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1042
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1051
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1061
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1065
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1074
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1080
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1084
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1094
		{
			yyVAL.slice_count = 1
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1098
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1105
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1109
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1113
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1123
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1127
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1131
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1135
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1139
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1143
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1149
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
