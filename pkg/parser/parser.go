// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:44
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             ast.Stmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	exprs                         []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"'?'",
	"':'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"'!'",
	"'^'",
	"'&'",
	"'.'",
	"'['",
	"']'",
	"'|'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1201

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	61, 86,
	62, 86,
	65, 86,
	78, 5,
	-2, 1,
	-1, 23,
	65, 87,
	-2, 28,
	-1, 28,
	61, 86,
	62, 86,
	-2, 68,
	-1, 60,
	61, 86,
	62, 86,
	65, 86,
	-2, 5,
	-1, 114,
	16, 69,
	65, 69,
	-2, 191,
	-1, 121,
	1, 95,
	8, 95,
	47, 95,
	48, 95,
	61, 95,
	62, 95,
	64, 95,
	65, 95,
	74, 95,
	75, 95,
	77, 95,
	78, 95,
	84, 95,
	86, 95,
	-2, 90,
	-1, 123,
	1, 97,
	8, 97,
	47, 97,
	48, 97,
	61, 97,
	62, 97,
	64, 97,
	65, 97,
	74, 97,
	75, 97,
	77, 97,
	78, 97,
	84, 97,
	86, 97,
	-2, 90,
	-1, 127,
	4, 180,
	51, 180,
	58, 180,
	59, 180,
	-2, 116,
	-1, 177,
	17, 0,
	18, 0,
	-2, 128,
	-1, 178,
	17, 0,
	18, 0,
	-2, 129,
	-1, 238,
	77, 171,
	82, 171,
	-2, 191,
	-1, 282,
	64, 5,
	-2, 86,
	-1, 295,
	75, 205,
	84, 205,
	-2, 197,
	-1, 316,
	75, 205,
	-2, 197,
	-1, 323,
	1, 89,
	8, 89,
	47, 89,
	48, 89,
	61, 89,
	62, 89,
	64, 89,
	65, 89,
	75, 89,
	77, 89,
	78, 89,
	84, 89,
	86, 89,
	-2, 90,
	-1, 329,
	1, 21,
	47, 21,
	48, 21,
	64, 21,
	75, 21,
	78, 21,
	86, 21,
	-2, 147,
	-1, 331,
	1, 23,
	47, 23,
	48, 23,
	64, 23,
	75, 23,
	78, 23,
	86, 23,
	-2, 149,
	-1, 333,
	1, 25,
	47, 25,
	48, 25,
	64, 25,
	75, 25,
	78, 25,
	86, 25,
	-2, 147,
	-1, 335,
	1, 27,
	47, 27,
	48, 27,
	64, 27,
	75, 27,
	78, 27,
	86, 27,
	-2, 149,
	-1, 375,
	75, 203,
	84, 203,
	-2, 198,
	-1, 394,
	1, 20,
	47, 20,
	48, 20,
	64, 20,
	75, 20,
	78, 20,
	86, 20,
	-2, 146,
	-1, 395,
	1, 22,
	47, 22,
	48, 22,
	64, 22,
	75, 22,
	78, 22,
	86, 22,
	-2, 148,
	-1, 396,
	1, 24,
	47, 24,
	48, 24,
	64, 24,
	75, 24,
	78, 24,
	86, 24,
	-2, 146,
	-1, 397,
	1, 26,
	47, 26,
	48, 26,
	64, 26,
	75, 26,
	78, 26,
	86, 26,
	-2, 148,
}

const yyPrivate = 57344

const yyLast = 4353

var yyAct = [...]int16{
	1, 296, 44, 353, 245, 214, 216, 215, 279, 354,
	7, 280, 31, 213, 58, 365, 9, 62, 5, 8,
	356, 355, 376, 316, 434, 295, 8, 144, 63, 282,
	281, 127, 223, 8, 436, 229, 308, 107, 86, 87,
	89, 91, 101, 103, 8, 8, 8, 133, 76, 121,
	123, 144, 117, 92, 93, 94, 95, 96, 97, 8,
	145, 98, 99, 83, 84, 85, 522, 137, 8, 159,
	506, 223, 62, 6, 106, 223, 223, 155, 378, 61,
	470, 424, 73, 74, 75, 223, 223, 88, 90, 78,
	79, 80, 81, 82, 223, 203, 314, 104, 226, 441,
	309, 222, 102, 77, 105, 223, 100, 223, 311, 223,
	199, 92, 93, 94, 95, 96, 97, 129, 306, 193,
	310, 83, 223, 223, 206, 223, 397, 129, 396, 334,
	220, 332, 106, 395, 330, 133, 133, 394, 133, 381,
	62, 337, 126, 221, 237, 133, 133, 139, 133, 80,
	81, 82, 219, 328, 231, 104, 162, 253, 462, 255,
	102, 77, 105, 160, 100, 131, 149, 250, 251, 373,
	461, 148, 289, 143, 142, 257, 258, 259, 260, 141,
	131, 372, 140, 200, 288, 543, 154, 541, 154, 540,
	129, 154, 92, 93, 94, 95, 96, 97, 335, 267,
	333, 302, 83, 331, 271, 262, 539, 535, 534, 532,
	154, 62, 135, 106, 125, 525, 523, 520, 129, 134,
	136, 133, 329, 509, 507, 294, 503, 135, 129, 133,
	501, 132, 220, 293, 134, 136, 104, 367, 487, 237,
	133, 102, 77, 105, 137, 100, 132, 315, 313, 123,
	131, 392, 483, 510, 482, 481, 480, 472, 154, 137,
	471, 455, 154, 451, 321, 323, 449, 448, 291, 447,
	303, 444, 538, 345, 263, 440, 129, 414, 131, 400,
	387, 129, 344, 341, 326, 324, 268, 359, 256, 530,
	358, 133, 157, 133, 529, 297, 129, 135, 526, 361,
	518, 517, 129, 513, 134, 136, 495, 492, 62, 467,
	464, 133, 445, 377, 418, 385, 132, 133, 228, 297,
	154, 393, 156, 489, 116, 135, 391, 68, 384, 137,
	152, 153, 134, 136, 154, 458, 154, 131, 249, 416,
	201, 202, 411, 399, 132, 360, 200, 401, 402, 516,
	404, 429, 129, 158, 131, 110, 410, 137, 356, 355,
	502, 415, 409, 129, 327, 129, 282, 281, 10, 375,
	133, 413, 133, 67, 421, 133, 422, 133, 425, 431,
	494, 133, 463, 133, 135, 423, 62, 297, 427, 202,
	375, 134, 136, 374, 446, 290, 497, 113, 218, 426,
	380, 135, 343, 132, 450, 312, 452, 453, 134, 136,
	369, 299, 456, 150, 287, 286, 137, 459, 168, 460,
	132, 200, 151, 200, 131, 66, 129, 133, 47, 133,
	379, 4, 133, 137, 468, 60, 422, 2, 419, 133,
	465, 59, 217, 278, 366, 469, 479, 129, 20, 352,
	19, 297, 17, 129, 16, 484, 25, 26, 485, 486,
	24, 3, 0, 0, 0, 491, 133, 0, 493, 0,
	0, 135, 0, 133, 242, 0, 0, 0, 134, 136,
	200, 0, 499, 0, 0, 0, 496, 0, 0, 130,
	132, 133, 133, 508, 0, 0, 512, 133, 0, 0,
	133, 515, 0, 137, 0, 505, 0, 0, 129, 133,
	0, 0, 0, 133, 524, 129, 0, 0, 527, 528,
	64, 0, 519, 23, 0, 133, 521, 533, 0, 0,
	536, 537, 0, 0, 0, 65, 129, 0, 531, 542,
	0, 0, 70, 72, 0, 0, 0, 146, 108, 111,
	115, 0, 0, 0, 118, 119, 120, 122, 124, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	0, 0, 0, 297, 0, 147, 0, 224, 225, 0,
	227, 23, 0, 0, 0, 0, 235, 240, 241, 0,
	244, 128, 0, 0, 164, 165, 166, 167, 0, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 0,
	0, 189, 190, 191, 192, 0, 194, 196, 197, 0,
	0, 0, 0, 205, 0, 46, 32, 38, 209, 0,
	42, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 50, 39, 40, 41, 0, 0,
	0, 232, 234, 292, 208, 0, 0, 246, 0, 247,
	248, 300, 0, 0, 0, 0, 0, 0, 254, 0,
	0, 224, 307, 51, 54, 0, 48, 56, 55, 52,
	0, 49, 243, 0, 0, 0, 0, 0, 0, 0,
	33, 37, 252, 0, 0, 53, 0, 45, 0, 0,
	34, 35, 36, 0, 43, 363, 266, 0, 0, 0,
	0, 0, 269, 0, 0, 273, 0, 276, 0, 0,
	0, 285, 0, 0, 0, 370, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	270, 0, 0, 382, 0, 277, 0, 124, 0, 386,
	0, 0, 0, 0, 246, 0, 0, 0, 0, 0,
	298, 0, 0, 322, 0, 0, 301, 0, 0, 0,
	0, 0, 336, 0, 0, 0, 338, 0, 0, 0,
	0, 0, 0, 0, 0, 348, 350, 0, 0, 0,
	0, 0, 0, 23, 0, 362, 0, 0, 0, 0,
	0, 0, 420, 0, 0, 0, 0, 0, 0, 430,
	0, 0, 0, 432, 0, 435, 357, 0, 0, 0,
	0, 0, 383, 0, 0, 89, 91, 368, 389, 371,
	0, 390, 0, 252, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 388, 0, 0, 0, 0, 106,
	0, 466, 407, 0, 0, 0, 0, 412, 0, 0,
	0, 474, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	408, 100, 0, 0, 0, 439, 0, 0, 490, 442,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 428, 0, 0, 0, 0, 0, 433, 0, 0,
	0, 0, 0, 504, 0, 0, 0, 0, 0, 511,
	0, 0, 514, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 475,
	0, 0, 0, 0, 0, 0, 0, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 473, 92, 93, 94, 95, 96, 97, 477,
	0, 98, 99, 83, 84, 85, 0, 0, 246, 500,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	488, 0, 0, 0, 75, 0, 438, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 437, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 320, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 319, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 284, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 283, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 265, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 264, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 73, 74, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 498, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 478, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 476, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 457, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 454, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 443, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 417, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 405, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 403, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 398, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 364, 100, 46, 32, 38,
	0, 0, 42, 13, 57, 14, 27, 0, 28, 0,
	0, 0, 0, 0, 0, 0, 50, 39, 40, 41,
	0, 15, 18, 0, 0, 0, 0, 0, 0, 0,
	0, 11, 12, 0, 0, 0, 0, 0, 29, 30,
	0, 0, 21, 22, 0, 51, 54, 0, 48, 56,
	55, 52, 0, 49, 0, 0, 0, 0, 0, 0,
	0, 0, 33, 37, 0, 0, 0, 53, 0, 45,
	0, 0, 34, 35, 36, 0, 43, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 351,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 346, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 342, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 340, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 325, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 318, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 317, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 305, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 304, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 274,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 261, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 230, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 207, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 198, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 212, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 211, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 163, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 161, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 0, 0,
	0, 0, 102, 77, 105, 0, 100, 107, 86, 87,
	89, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 238,
	32, 38, 0, 0, 42, 0, 0, 88, 90, 78,
	79, 80, 81, 82, 0, 0, 0, 104, 50, 39,
	40, 41, 102, 77, 105, 0, 100, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 32, 38,
	0, 0, 42, 0, 0, 0, 135, 51, 54, 0,
	48, 56, 55, 239, 136, 49, 50, 39, 40, 41,
	0, 0, 0, 0, 33, 236, 0, 0, 0, 53,
	0, 45, 233, 0, 34, 35, 36, 0, 43, 238,
	32, 38, 0, 0, 42, 51, 54, 0, 48, 56,
	55, 52, 0, 49, 0, 0, 0, 0, 50, 39,
	40, 41, 33, 37, 0, 0, 0, 53, 0, 45,
	0, 0, 34, 35, 36, 0, 43, 339, 114, 32,
	38, 0, 0, 42, 0, 57, 135, 51, 54, 0,
	48, 56, 55, 239, 136, 49, 0, 50, 39, 40,
	41, 0, 0, 0, 33, 236, 0, 0, 0, 53,
	0, 45, 0, 0, 34, 35, 36, 0, 43, 46,
	32, 38, 0, 0, 42, 0, 51, 54, 0, 48,
	56, 55, 52, 0, 49, 0, 0, 0, 50, 39,
	40, 41, 0, 33, 37, 0, 0, 0, 109, 0,
	45, 0, 112, 34, 35, 36, 0, 43, 46, 32,
	38, 0, 0, 42, 0, 0, 0, 51, 54, 0,
	48, 56, 55, 52, 0, 49, 0, 50, 39, 40,
	41, 0, 0, 0, 33, 37, 0, 0, 0, 53,
	0, 45, 0, 275, 34, 35, 36, 0, 43, 0,
	46, 32, 38, 0, 0, 42, 51, 54, 0, 48,
	56, 55, 52, 0, 49, 0, 0, 0, 210, 50,
	39, 40, 41, 33, 37, 0, 0, 0, 53, 0,
	45, 0, 0, 34, 35, 36, 0, 43, 46, 32,
	38, 0, 0, 42, 0, 0, 0, 0, 51, 54,
	0, 48, 56, 55, 52, 0, 49, 50, 39, 40,
	41, 0, 0, 0, 0, 33, 37, 0, 0, 0,
	53, 0, 45, 0, 204, 34, 35, 36, 0, 43,
	46, 32, 38, 0, 0, 42, 51, 54, 0, 48,
	56, 55, 52, 0, 49, 0, 0, 0, 195, 50,
	39, 40, 41, 33, 37, 0, 0, 0, 53, 0,
	45, 0, 0, 34, 35, 36, 0, 43, 46, 32,
	38, 0, 0, 42, 0, 0, 0, 0, 51, 54,
	0, 48, 56, 55, 52, 0, 49, 50, 39, 40,
	41, 0, 0, 0, 0, 33, 37, 0, 0, 0,
	53, 0, 45, 0, 0, 34, 35, 36, 0, 43,
	46, 32, 38, 0, 0, 42, 51, 54, 0, 48,
	56, 55, 52, 0, 49, 0, 0, 0, 0, 50,
	39, 40, 41, 33, 37, 0, 0, 0, 406, 0,
	45, 0, 0, 34, 35, 36, 0, 43, 46, 32,
	38, 0, 0, 42, 0, 0, 0, 0, 51, 54,
	0, 48, 56, 55, 52, 0, 49, 50, 39, 40,
	41, 0, 0, 0, 0, 33, 37, 0, 0, 0,
	349, 0, 45, 0, 0, 34, 35, 36, 0, 43,
	46, 32, 38, 0, 0, 42, 51, 54, 0, 48,
	56, 55, 52, 0, 49, 0, 0, 0, 0, 50,
	39, 40, 41, 33, 37, 0, 0, 0, 347, 0,
	45, 0, 0, 34, 35, 36, 0, 43, 71, 32,
	38, 0, 0, 42, 0, 0, 0, 0, 51, 54,
	0, 48, 56, 55, 52, 0, 49, 50, 39, 40,
	41, 0, 0, 0, 0, 33, 37, 0, 0, 0,
	272, 0, 45, 0, 0, 34, 35, 36, 0, 43,
	69, 32, 38, 0, 0, 42, 51, 54, 0, 48,
	56, 55, 52, 0, 49, 0, 0, 0, 0, 50,
	39, 40, 41, 33, 37, 0, 0, 0, 53, 0,
	45, 0, 0, 34, 35, 36, 0, 43, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 54,
	0, 48, 56, 55, 52, 0, 49, 0, 0, 92,
	93, 94, 95, 96, 97, 33, 37, 98, 99, 83,
	53, 0, 45, 0, 0, 34, 35, 36, 0, 43,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 78, 79, 80, 81, 82,
	0, 0, 0, 104, 0, 0, 0, 0, 102, 77,
	105, 0, 100,
}

var yyPact = [...]int16{
	-60, -1000, 2083, -60, -1000, -67, -67, -1000, -1000, -1000,
	-1000, -1000, -1000, 3996, 3996, 421, 359, -1000, 253, -1000,
	-1000, 4236, 4194, 1231, -1000, -1000, -1000, 3996, 3794, 3996,
	250, -31, -1000, 3996, 3996, 3996, 3996, 3996, -1000, -1000,
	-1000, -1000, 138, -53, 350, 3996, 71, -1000, 106, 103,
	98, 97, -23, -67, 3996, 95, 90, 418, 269, -1000,
	2083, -67, -1000, 255, 3131, 3131, 248, 279, -60, 87,
	3411, 80, 3341, 3996, 3996, 3996, 3996, 414, 3996, 3996,
	3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996,
	3996, 3996, 3996, 3996, 3996, 3996, 3996, 3996, -1000, -1000,
	3996, 3996, 3996, 3996, 3996, 3954, 3996, 3996, 3061, -60,
	324, 21, 3916, 46, 71, 2991, -67, 3874, 160, 160,
	160, -31, 3271, -31, 3201, 394, 76, -16, 3996, -67,
	27, -1000, 350, 350, 15, 350, 244, -49, 2921, 3996,
	3996, 3675, 350, 420, -67, 350, 3996, 3131, 3996, 3996,
	276, -1000, 3996, 3996, -67, -1000, -60, 3996, -60, 213,
	3996, 3996, 3996, 3996, 3131, 3131, 2851, 3481, -1000, 79,
	79, 160, 160, 160, 3131, 4267, 4267, 816, 816, 4267,
	4267, 4267, 4267, 3131, 3131, 3131, 3131, 3131, 3131, 3131,
	3551, 3131, 3621, 197, 1161, 3996, 3131, 3621, -60, 211,
	-67, 3996, -67, -60, 4156, 2781, 3835, -67, 319, 1091,
	3996, 411, 410, 107, 387, 203, -1000, -1000, 350, 394,
	-1000, -40, -67, 407, 40, 40, 350, 40, -67, -16,
	-1000, 193, 2711, -1000, 2641, 41, 3755, 350, 71, -47,
	23, 43, 401, 3996, 12, -42, 2571, 2501, 1021, 3996,
	255, 255, 3996, 210, 2431, 209, 334, 145, 126, 123,
	121, 3996, 64, -1000, -1000, 3713, 2361, 208, -1000, 2291,
	398, 207, -60, 2221, 4114, 4076, 2151, 311, -18, -1000,
	-1000, 281, 2083, -1000, 631, 2001, -1000, -1000, 161, -67,
	333, -67, 40, 104, 385, -67, -62, -67, 3996, -1000,
	-6, 396, 62, -1000, -1000, -1000, -1000, 27, 350, -1000,
	-1000, 3996, 263, -42, 350, 205, -67, 3996, -1000, -1000,
	3996, 255, 3131, -31, -1000, -60, -1000, 247, 60, -1000,
	56, -1000, 51, -1000, 49, -1000, 3131, -1000, 1931, -1000,
	-1000, -1000, -60, -1000, -1000, 204, -60, -60, 1861, -60,
	1791, 4034, -27, -1000, -1000, 278, 3996, 202, -1000, -1000,
	-60, 275, 1721, -1000, -1000, 240, 40, 350, 394, 161,
	4, 395, 161, -67, 274, -67, -1000, -40, 350, -41,
	350, -1000, -50, 951, 3996, 200, 25, -1000, 3996, 3131,
	1651, 196, 238, -60, -1000, -1000, -1000, -1000, -1000, 194,
	-1000, 192, 191, -60, 188, -60, -60, 1581, 186, -1000,
	-1000, -60, 1511, 271, -1000, -1000, -60, -1000, -60, 93,
	40, 374, 203, 236, 161, -1000, 350, 235, 394, 161,
	3, 185, 40, 182, -67, 40, 350, -1000, 3996, 1441,
	-1000, -67, 1371, -1000, -1000, -60, 181, -1000, -1000, -1000,
	180, -1000, 179, 177, -60, -1000, -1000, -60, -60, -1000,
	163, -1000, -67, 246, -60, 233, 40, -60, 372, 232,
	161, -1000, -1000, 392, 25, 1301, -1000, 3996, 3996, 155,
	329, -1000, -1000, -1000, 151, -1000, -1000, -1000, 350, 161,
	-7, 149, -60, 148, 176, -60, 229, 350, -1000, -42,
	3131, 318, 227, -1000, 40, 226, 161, -1000, 142, -1000,
	161, -11, 141, -60, 40, 140, 224, -60, -60, 220,
	-1000, 215, 161, -1000, 134, -1000, -60, 133, 132, -60,
	-60, 198, -1000, 131, -1000, -1000, 114, 112, -60, -1000,
	-1000, -1000, 110, -1000,
}

var yyPgo = [...]int16{
	0, 0, 461, 16, 368, 460, 457, 456, 454, 452,
	450, 449, 9, 3, 448, 443, 11, 8, 14, 520,
	355, 13, 7, 6, 5, 442, 15, 438, 444, 430,
	2, 4, 428, 12, 437, 431, 547, 1, 73, 10,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 5, 7, 7, 6, 6, 8, 8, 8,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 14, 15, 15, 15, 15, 15, 16, 17, 10,
	11, 11, 11, 11, 11, 12, 12, 13, 20, 20,
	20, 26, 26, 26, 27, 27, 27, 21, 21, 22,
	22, 23, 24, 24, 25, 25, 18, 18, 18, 18,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 28, 28, 28, 28, 28, 28, 28, 29, 29,
	30, 30, 31, 31, 31, 32, 32, 32, 32, 32,
	32, 33, 34, 34, 35, 35, 35, 36, 36, 38,
	38, 39, 37, 37, 37, 37,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 1, 1, 13, 12, 9, 8, 1, 1,
	6, 5, 6, 5, 6, 5, 6, 5, 1, 1,
	1, 1, 4, 3, 3, 3, 3, 5, 7, 5,
	4, 7, 5, 6, 7, 7, 8, 7, 8, 8,
	9, 6, 0, 1, 1, 2, 2, 4, 3, 7,
	0, 1, 1, 2, 2, 4, 4, 3, 0, 1,
	4, 0, 1, 3, 0, 1, 4, 0, 1, 1,
	1, 1, 1, 4, 2, 5, 0, 1, 4, 4,
	1, 1, 2, 2, 2, 2, 4, 2, 4, 1,
	1, 1, 1, 5, 3, 3, 8, 9, 10, 12,
	13, 9, 10, 11, 13, 14, 2, 5, 7, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 3, 3, 3, 5, 4, 5, 4,
	4, 4, 1, 4, 3, 4, 4, 4, 4, 6,
	8, 7, 6, 10, 5, 3, 2, 4, 4, 6,
	3, 1, 3, 2, 2, 5, 2, 6, 2, 5,
	2, 3, 0, 3, 6, 6, 5, 5, 6, 5,
	5, 1, 0, 1, 2, 1, 1, 0, 1, 1,
	2, 1, 0, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -34, -2, -35, 78, -38, -39, 86, -3,
	-4, 38, 39, 10, 12, 28, -8, -9, 29, -10,
	-14, 49, 50, -19, -5, -7, -6, 13, 15, 45,
	46, -33, 5, 69, 79, 80, 81, 70, 6, 24,
	25, 26, 9, 83, -30, 76, 4, -32, 55, 60,
	23, 52, 58, 74, 53, 57, 56, 11, -18, -34,
	-35, -38, -39, -18, -19, -19, 4, 14, 74, 4,
	-19, 4, -19, 61, 62, 63, 27, 82, 68, 69,
	70, 71, 72, 42, 43, 44, 17, 18, 66, 19,
	67, 20, 32, 33, 34, 35, 36, 37, 40, 41,
	85, 21, 81, 22, 76, 83, 53, 16, -19, 74,
	-20, -19, 78, -4, 4, -19, 74, 83, -19, -19,
	-19, -33, -19, -33, -19, 76, 4, 84, -36, -38,
	-28, 4, 70, -30, 58, 51, 59, 83, -19, 76,
	76, 76, 76, 76, 74, 83, -36, -19, 76, 76,
	-20, 4, 61, 62, 65, -3, 74, 13, 74, -1,
	76, 76, 76, 76, -19, -19, -19, -19, 4, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -18, -19, 64, -19, -19, 74, -1,
	-38, 16, 65, 74, 78, -19, 78, 74, -36, -19,
	64, 82, 82, -21, -24, -22, -23, -25, 4, 76,
	-30, -18, 74, 82, -28, -28, 83, -28, 74, 84,
	77, -18, -19, 77, -19, -28, 70, -30, 4, 58,
	-28, -28, 54, -36, -28, -31, -19, -19, -19, 62,
	-18, -18, -36, -1, -19, -1, 75, -18, -18, -18,
	-18, 64, 8, 77, 84, 64, -19, -1, 75, -19,
	-36, -1, 74, -19, 78, 78, -19, -36, -15, -17,
	-16, 48, 47, 84, 64, -19, 4, 4, 77, 65,
	8, 65, -28, -21, -24, 65, -37, -38, -36, 4,
	-28, -36, 8, 77, 77, 77, 77, -28, 83, 77,
	77, 65, 4, -31, 84, -37, 65, 64, 77, 77,
	65, -18, -19, -33, 75, 74, 75, 30, 8, 77,
	8, 77, 8, 77, 8, 77, -19, 77, -19, 84,
	84, 75, 74, 4, 75, -1, 74, 74, -19, 74,
	-19, 78, -11, -13, -12, 48, 47, -36, -16, -17,
	64, -3, -19, 84, 84, -26, -28, 76, -36, 77,
	-28, -36, 77, 65, 8, -38, 84, -18, 84, -29,
	4, 77, -28, -19, 65, -37, -28, 75, -36, -19,
	-19, -1, 4, 74, 77, 77, 77, 77, 84, -1,
	75, -1, -1, 74, -1, 74, 74, -19, -36, -12,
	-13, 64, -19, -18, 75, -1, 64, 84, 74, -27,
	-28, -24, -22, -26, 77, -23, 4, -26, -36, 77,
	-28, -37, -28, -36, 65, -28, 84, 77, 65, -19,
	75, 74, -19, 77, 75, 74, -1, 75, 75, 75,
	-1, 75, -1, -1, 74, 75, -1, 64, 64, -1,
	-1, 77, 65, 8, 74, -26, -28, 74, -24, -26,
	77, 75, 75, -36, -28, -19, 77, -36, 64, -1,
	75, 75, 75, 75, -1, -1, -1, 75, -36, 77,
	-28, -1, 74, -1, 8, 74, -26, 4, 77, -31,
	-19, 75, 31, 75, -28, -26, 77, 75, -1, 75,
	77, -28, -1, 74, -28, -37, 31, 74, 74, -26,
	75, -26, 77, 75, -1, 75, 74, -1, -1, 74,
	74, -26, 75, -1, 75, 75, -1, -1, 74, 75,
	75, 75, -1, 75,
}

var yyDef = [...]int16{
	192, -2, -2, 192, 193, 196, 195, 199, 201, 3,
	6, 7, 8, 86, 0, 0, 12, 13, 0, 18,
	19, 0, 0, -2, 29, 30, 31, 0, -2, 0,
	0, 90, 91, 0, 0, 0, 0, 0, 99, 100,
	101, 102, 0, 197, 0, 0, 191, 152, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 68, 0, 2,
	-2, 194, 200, 9, 87, 10, 0, 0, 192, 191,
	0, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 141,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 192,
	0, 87, 0, 0, -2, 0, 197, 0, 92, 93,
	94, -2, 0, -2, 0, 77, 0, -2, 86, 198,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 197, 0, 182, 166, 0, 0,
	0, 69, 86, 86, 197, 4, 192, 0, 192, 0,
	86, 86, 86, 86, 33, 35, 0, 104, 105, 120,
	121, 122, 123, 124, 125, 126, 127, -2, -2, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 142,
	143, 144, 145, 0, 0, 0, 165, 170, 192, 0,
	195, 0, 197, 192, 0, 0, 0, 197, 52, 0,
	0, 0, 0, 0, 79, 78, 82, 80, 81, 77,
	181, 202, 197, 0, 173, 174, 0, 176, 197, 180,
	119, 0, 0, 154, 0, 0, 0, 0, -2, 0,
	0, 0, 0, 182, 0, 202, 0, 0, 0, 86,
	34, 36, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 149, 151, 0, 0, 0, 40, 0,
	0, 0, 192, 0, 0, 0, 0, 60, 197, 53,
	54, 0, -2, 150, 0, 0, 96, 98, 71, 197,
	0, 197, 84, 0, 79, -2, 0, 204, 86, 172,
	0, 0, 0, 147, 153, 155, 156, 174, 0, 157,
	158, 0, 0, 202, 0, 0, -2, 0, 167, 168,
	0, 32, 88, -2, 11, 192, 39, 0, 0, -2,
	0, -2, 0, -2, 0, -2, 103, 148, 0, 189,
	190, 37, 192, 70, 42, 0, 192, 192, 0, 192,
	0, 0, 197, 61, 62, 0, 86, 0, 55, 56,
	192, 0, 0, 186, 187, 0, 72, 74, 0, 71,
	0, 0, 71, 197, 0, -2, 117, 202, 0, 197,
	0, 146, 0, 0, 0, 0, 0, 164, 0, 183,
	0, 0, 0, 192, -2, -2, -2, -2, 188, 0,
	43, 0, 0, 192, 0, 192, 192, 0, 0, 63,
	64, 192, 87, 0, 51, 58, 192, 185, 192, 0,
	75, 79, 0, 0, 71, 83, 81, 0, 0, 71,
	0, 0, 175, 0, 197, 178, 0, 159, 0, 0,
	162, 197, 0, 169, 38, 192, 0, 41, 44, 45,
	0, 47, 0, 0, 192, 59, 67, 192, 192, 57,
	0, 73, 197, 0, 192, 0, 85, 192, 79, 0,
	71, 118, 177, 0, 175, 0, 161, 182, 0, 0,
	17, 46, 48, 49, 0, 65, 66, 106, 0, 71,
	0, 0, 192, 0, 0, 192, 0, 0, 160, 202,
	184, 16, 0, 50, 76, 0, 71, 107, 0, 111,
	71, 0, 0, 192, 179, 0, 0, 192, 192, 0,
	108, 0, 71, 112, 0, 163, 192, 0, 0, 192,
	192, 0, 113, 0, 15, 109, 0, 0, 192, 14,
	110, 114, 0, 115,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 72, 81, 3,
	76, 77, 70, 68, 65, 69, 82, 71, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 64, 78,
	67, 62, 66, 63, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 83, 3, 84, 80, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 85, 75,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	73,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:104
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:108
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:114
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:123
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:139
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:143
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:147
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:152
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:157
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:162
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:167
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:172
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:176
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 14:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:180
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:185
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:195
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:200
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:204
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:208
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:213
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:218
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:223
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:228
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:233
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:238
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:243
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:248
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:255
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:259
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:263
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:269
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:276
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:280
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:297
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:301
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:318
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:323
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:328
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:338
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:343
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:354
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:359
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:364
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:369
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:374
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:379
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:384
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:389
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:394
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:401
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:408
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:412
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:416
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:420
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:425
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:436
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:443
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:449
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:458
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:462
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:466
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:470
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:476
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:487
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:492
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:499
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:504
		{
			yyVAL.expr_idents = []string{}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:508
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:512
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:520
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:524
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:528
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:532
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:536
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:540
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:548
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:552
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:558
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:562
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:568
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:574
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:578
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:584
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:588
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, &ast.ParamExpr{Name: yyDollar[4].tok.Lit, TypeData: yyDollar[5].type_data})
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:593
		{
			yyVAL.exprs = nil
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:597
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:601
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:608
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:617
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:621
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:626
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:631
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:636
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:641
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:646
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:651
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:656
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:661
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:666
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:671
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:676
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:681
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:686
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:691
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 106:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:696
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 107:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:701
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 108:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:706
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 109:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:712
		{
			if len(yyDollar[3].func_expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyDollar[3].func_expr_idents = append(yyDollar[3].func_expr_idents, yyDollar[6].func_expr_idents_last_untyped...)
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[9].opt_func_return_expr_idents, Stmt: yyDollar[11].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 110:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:721
		{
			if len(yyDollar[3].func_expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyDollar[6].func_expr_idents_last_untyped[len(yyDollar[6].func_expr_idents_last_untyped)-1].TypeData = yyDollar[8].type_data
			yyDollar[3].func_expr_idents = append(yyDollar[3].func_expr_idents, yyDollar[6].func_expr_idents_last_untyped...)
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[10].opt_func_return_expr_idents, Stmt: yyDollar[12].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:731
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 112:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:736
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:741
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 114:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:747
		{
			if len(yyDollar[4].func_expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyDollar[4].func_expr_idents = append(yyDollar[4].func_expr_idents, yyDollar[7].func_expr_idents_last_untyped...)
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[10].opt_func_return_expr_idents, Stmt: yyDollar[12].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 115:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.go.y:756
		{
			if len(yyDollar[4].func_expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyDollar[7].func_expr_idents_last_untyped[len(yyDollar[7].func_expr_idents_last_untyped)-1].TypeData = yyDollar[9].type_data
			yyDollar[4].func_expr_idents = append(yyDollar[4].func_expr_idents, yyDollar[7].func_expr_idents_last_untyped...)
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[11].opt_func_return_expr_idents, Stmt: yyDollar[13].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:766
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:771
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 118:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:776
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:781
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:786
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:791
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:796
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:801
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:806
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:811
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:816
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:821
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:826
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:831
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:836
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:841
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:846
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:851
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:856
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:861
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:866
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:871
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:876
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:881
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:886
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:891
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:896
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:901
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:906
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:911
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:916
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:921
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:926
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:931
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:936
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:941
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:946
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:951
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:956
		{
			yyVAL.expr = &ast.DbgExpr{}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:961
		{
			yyVAL.expr = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:966
		{
			yyVAL.expr = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:971
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:981
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:986
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 160:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:991
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 161:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:996
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1001
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 163:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:1007
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1013
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1018
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1023
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1028
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1033
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1038
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1043
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1051
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1055
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1064
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1073
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1083
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1087
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1096
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1102
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1106
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1116
		{
			yyVAL.slice_count = 1
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1120
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1127
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1131
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1135
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1145
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1149
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1153
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1157
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1161
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1165
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1171
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
