// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:51
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             ast.Stmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"','",
	"'!'",
	"'.'",
	"'['",
	"']'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1163

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	61, 90,
	62, 90,
	80, 6,
	81, 90,
	-2, 2,
	-1, 24,
	81, 91,
	-2, 20,
	-1, 67,
	61, 90,
	62, 90,
	81, 90,
	-2, 6,
	-1, 116,
	16, 72,
	81, 72,
	-2, 194,
	-1, 128,
	1, 99,
	8, 99,
	47, 99,
	48, 99,
	61, 99,
	62, 99,
	63, 99,
	76, 99,
	77, 99,
	79, 99,
	80, 99,
	81, 99,
	85, 99,
	86, 99,
	-2, 94,
	-1, 130,
	1, 101,
	8, 101,
	47, 101,
	48, 101,
	61, 101,
	62, 101,
	63, 101,
	76, 101,
	77, 101,
	79, 101,
	80, 101,
	81, 101,
	85, 101,
	86, 101,
	-2, 94,
	-1, 132,
	4, 183,
	51, 183,
	58, 183,
	59, 183,
	-2, 111,
	-1, 257,
	79, 174,
	83, 174,
	-2, 194,
	-1, 286,
	63, 6,
	-2, 90,
	-1, 296,
	77, 208,
	85, 208,
	-2, 200,
	-1, 310,
	77, 208,
	-2, 200,
	-1, 317,
	1, 93,
	8, 93,
	47, 93,
	48, 93,
	61, 93,
	62, 93,
	63, 93,
	77, 93,
	79, 93,
	80, 93,
	81, 93,
	85, 93,
	86, 93,
	-2, 94,
	-1, 362,
	1, 22,
	47, 22,
	48, 22,
	63, 22,
	77, 22,
	80, 22,
	86, 22,
	-2, 142,
	-1, 364,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	77, 24,
	80, 24,
	86, 24,
	-2, 144,
	-1, 366,
	1, 26,
	47, 26,
	48, 26,
	63, 26,
	77, 26,
	80, 26,
	86, 26,
	-2, 142,
	-1, 368,
	1, 28,
	47, 28,
	48, 28,
	63, 28,
	77, 28,
	80, 28,
	86, 28,
	-2, 144,
	-1, 372,
	77, 206,
	85, 206,
	-2, 201,
	-1, 418,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	77, 21,
	80, 21,
	86, 21,
	-2, 141,
	-1, 419,
	1, 23,
	47, 23,
	48, 23,
	63, 23,
	77, 23,
	80, 23,
	86, 23,
	-2, 143,
	-1, 420,
	1, 25,
	47, 25,
	48, 25,
	63, 25,
	77, 25,
	80, 25,
	86, 25,
	-2, 141,
	-1, 421,
	1, 27,
	47, 27,
	48, 27,
	63, 27,
	77, 27,
	80, 27,
	86, 27,
	-2, 143,
}

const yyPrivate = 57344

const yyLast = 4286

var yyAct = [...]int16{
	2, 297, 250, 385, 236, 247, 352, 283, 284, 353,
	245, 6, 244, 10, 35, 310, 8, 9, 355, 354,
	9, 9, 426, 373, 69, 286, 285, 9, 136, 229,
	296, 132, 9, 223, 109, 9, 124, 223, 71, 442,
	147, 223, 24, 375, 223, 328, 308, 329, 327, 223,
	208, 142, 149, 226, 72, 128, 130, 9, 100, 101,
	85, 86, 87, 85, 9, 474, 147, 110, 113, 223,
	118, 62, 121, 123, 148, 140, 125, 126, 127, 129,
	131, 162, 139, 141, 203, 69, 70, 429, 143, 82,
	83, 84, 104, 395, 223, 137, 106, 150, 367, 106,
	133, 79, 107, 136, 79, 107, 24, 136, 142, 436,
	157, 421, 201, 223, 166, 167, 168, 169, 209, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 320,
	365, 191, 192, 193, 194, 222, 196, 198, 199, 204,
	140, 69, 223, 207, 140, 325, 306, 139, 141, 223,
	223, 139, 141, 216, 261, 468, 263, 469, 136, 368,
	137, 157, 211, 420, 137, 419, 460, 387, 195, 136,
	363, 48, 440, 142, 232, 240, 418, 142, 237, 391,
	238, 239, 155, 156, 157, 361, 378, 335, 303, 253,
	234, 270, 144, 262, 204, 221, 274, 265, 318, 159,
	243, 366, 157, 157, 251, 140, 231, 214, 386, 69,
	212, 161, 139, 141, 160, 152, 140, 241, 242, 260,
	138, 151, 146, 139, 141, 137, 269, 145, 309, 307,
	519, 407, 272, 388, 518, 276, 137, 279, 142, 417,
	516, 364, 514, 157, 512, 511, 293, 273, 317, 142,
	510, 505, 323, 281, 322, 503, 362, 135, 157, 304,
	130, 157, 109, 237, 498, 299, 343, 497, 266, 489,
	157, 302, 316, 158, 287, 288, 289, 290, 483, 480,
	358, 357, 479, 478, 131, 463, 100, 101, 85, 462,
	360, 457, 451, 334, 449, 448, 447, 336, 446, 379,
	428, 415, 315, 408, 220, 69, 346, 348, 399, 138,
	138, 381, 138, 342, 339, 24, 333, 331, 138, 7,
	138, 369, 280, 396, 106, 356, 68, 271, 164, 79,
	107, 398, 256, 138, 509, 400, 401, 507, 403, 243,
	383, 494, 492, 384, 472, 470, 224, 225, 411, 227,
	416, 410, 455, 382, 432, 233, 228, 235, 394, 163,
	119, 374, 117, 390, 412, 359, 423, 134, 508, 254,
	259, 112, 355, 354, 286, 285, 499, 134, 406, 69,
	350, 74, 435, 438, 413, 439, 437, 392, 11, 319,
	486, 165, 5, 450, 409, 452, 453, 67, 138, 456,
	3, 220, 249, 458, 377, 66, 341, 330, 461, 300,
	295, 430, 294, 170, 154, 73, 1, 414, 115, 425,
	51, 138, 376, 467, 445, 433, 248, 256, 138, 246,
	471, 202, 53, 153, 473, 301, 55, 46, 282, 134,
	21, 351, 20, 18, 17, 481, 482, 22, 23, 19,
	484, 485, 26, 27, 25, 4, 0, 0, 321, 0,
	487, 491, 0, 493, 224, 326, 0, 134, 495, 464,
	0, 0, 465, 476, 0, 0, 0, 134, 0, 501,
	138, 0, 0, 504, 0, 506, 0, 0, 0, 0,
	138, 138, 0, 0, 237, 488, 0, 0, 513, 138,
	515, 0, 0, 0, 0, 517, 0, 0, 0, 0,
	0, 0, 490, 0, 0, 0, 0, 380, 0, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 389, 0,
	134, 0, 0, 0, 0, 0, 393, 0, 0, 0,
	0, 298, 134, 0, 0, 0, 0, 138, 134, 138,
	0, 0, 0, 0, 0, 0, 298, 0, 0, 138,
	138, 0, 0, 138, 138, 0, 0, 0, 0, 50,
	36, 42, 0, 0, 63, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 424, 0, 427, 0, 54, 43,
	44, 45, 0, 0, 0, 202, 434, 0, 0, 0,
	0, 441, 134, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 138, 0, 138, 0, 372, 65, 58, 0,
	52, 60, 59, 56, 0, 64, 0, 298, 0, 0,
	372, 0, 0, 37, 0, 39, 41, 0, 0, 40,
	134, 57, 0, 49, 0, 0, 138, 38, 0, 47,
	370, 475, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 138, 0, 0, 202, 0, 202, 0, 0,
	0, 134, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 36, 42, 0, 0, 63, 14, 61, 15,
	28, 0, 29, 0, 298, 500, 134, 0, 0, 502,
	54, 43, 44, 45, 0, 16, 30, 0, 0, 0,
	0, 0, 0, 0, 0, 12, 13, 0, 0, 0,
	0, 0, 31, 32, 0, 202, 33, 34, 0, 65,
	58, 0, 52, 60, 59, 56, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 37, 134, 39, 41, 134,
	0, 40, 0, 57, 0, 49, 0, 0, 0, 38,
	0, 47, 0, 0, 0, 0, 109, 88, 89, 91,
	93, 103, 105, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 94, 95, 96, 97, 98, 99, 0, 134,
	100, 101, 85, 86, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 298, 0, 0,
	0, 0, 0, 292, 77, 92, 90, 80, 81, 102,
	0, 82, 83, 84, 104, 0, 0, 0, 106, 0,
	0, 0, 0, 79, 107, 291, 109, 88, 89, 91,
	93, 103, 105, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 94, 95, 96, 97, 98, 99, 0, 0,
	100, 101, 85, 86, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 268, 77, 92, 90, 80, 81, 102,
	0, 82, 83, 84, 104, 0, 0, 0, 106, 0,
	0, 0, 0, 79, 107, 267, 109, 88, 89, 91,
	93, 103, 105, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 94, 95, 96, 97, 98, 99, 0, 0,
	100, 101, 85, 86, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 75, 76, 0, 77, 92, 90, 80, 81, 102,
	0, 82, 83, 84, 104, 0, 205, 0, 106, 0,
	0, 0, 0, 79, 107, 109, 88, 89, 91, 93,
	103, 105, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 94, 95, 96, 97, 98, 99, 0, 0, 100,
	101, 85, 86, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 92, 90, 80, 81, 102, 0,
	82, 83, 84, 104, 0, 0, 0, 106, 443, 0,
	444, 0, 79, 107, 109, 88, 89, 91, 93, 103,
	105, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	94, 95, 96, 97, 98, 99, 0, 0, 100, 101,
	85, 86, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 92, 90, 80, 81, 102, 0, 82,
	83, 84, 104, 0, 0, 0, 106, 0, 0, 0,
	0, 79, 107, 422, 109, 88, 89, 91, 93, 103,
	105, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	94, 95, 96, 97, 98, 99, 0, 0, 100, 101,
	85, 86, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 92, 90, 80, 81, 102, 0, 82,
	83, 84, 104, 0, 0, 0, 106, 0, 0, 0,
	0, 79, 107, 397, 109, 88, 89, 91, 93, 103,
	105, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	94, 95, 96, 97, 98, 99, 0, 0, 100, 101,
	85, 86, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 92, 90, 80, 81, 102, 0, 82,
	83, 84, 104, 0, 0, 0, 106, 0, 0, 0,
	0, 79, 107, 371, 109, 88, 89, 91, 93, 103,
	105, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	94, 95, 96, 97, 98, 99, 0, 0, 100, 101,
	85, 86, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 92, 90, 80, 81, 102, 0, 82,
	83, 84, 104, 0, 0, 0, 106, 0, 0, 0,
	0, 79, 107, 338, 109, 88, 89, 91, 93, 103,
	105, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	94, 95, 96, 97, 98, 99, 0, 0, 100, 101,
	85, 86, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 92, 90, 80, 81, 102, 0, 82,
	83, 84, 104, 0, 0, 0, 106, 313, 0, 314,
	0, 79, 107, 109, 88, 89, 91, 93, 103, 105,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 94,
	95, 96, 97, 98, 99, 0, 0, 100, 101, 85,
	86, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 75, 76,
	0, 77, 92, 90, 80, 81, 102, 0, 82, 83,
	84, 104, 0, 0, 0, 106, 0, 0, 0, 0,
	79, 107, 109, 88, 89, 91, 93, 103, 105, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 94, 95,
	96, 97, 98, 99, 0, 0, 100, 101, 85, 86,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 92, 90, 80, 81, 102, 0, 82, 83, 84,
	104, 0, 0, 0, 106, 496, 0, 0, 0, 79,
	107, 109, 88, 89, 91, 93, 103, 105, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 94, 95, 96,
	97, 98, 99, 0, 0, 100, 101, 85, 86, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	92, 90, 80, 81, 102, 0, 82, 83, 84, 104,
	0, 0, 0, 106, 477, 0, 0, 0, 79, 107,
	109, 88, 89, 91, 93, 103, 105, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 94, 95, 96, 97,
	98, 99, 0, 0, 100, 101, 85, 86, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 466, 77, 92,
	90, 80, 81, 102, 0, 82, 83, 84, 104, 0,
	0, 0, 106, 0, 0, 0, 0, 79, 107, 109,
	88, 89, 91, 93, 103, 105, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 94, 95, 96, 97, 98,
	99, 0, 0, 100, 101, 85, 86, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 459, 77, 92, 90,
	80, 81, 102, 0, 82, 83, 84, 104, 0, 0,
	0, 106, 0, 0, 0, 0, 79, 107, 109, 88,
	89, 91, 93, 103, 105, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 94, 95, 96, 97, 98, 99,
	0, 0, 100, 101, 85, 86, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 92, 90, 80,
	81, 102, 0, 82, 83, 84, 104, 0, 454, 0,
	106, 0, 0, 0, 0, 79, 107, 109, 88, 89,
	91, 93, 103, 105, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 94, 95, 96, 97, 98, 99, 0,
	0, 100, 101, 85, 86, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 92, 90, 80, 81,
	102, 0, 82, 83, 84, 104, 0, 0, 0, 106,
	431, 0, 0, 0, 79, 107, 109, 88, 89, 91,
	93, 103, 105, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 94, 95, 96, 97, 98, 99, 0, 0,
	100, 101, 85, 86, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 92, 90, 80, 81, 102,
	0, 82, 83, 84, 104, 0, 404, 0, 106, 0,
	0, 0, 0, 79, 107, 109, 88, 89, 91, 93,
	103, 105, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 94, 95, 96, 97, 98, 99, 0, 0, 100,
	101, 85, 86, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 92, 90, 80, 81, 102, 0,
	82, 83, 84, 104, 0, 402, 0, 106, 0, 0,
	0, 0, 79, 107, 109, 88, 89, 91, 93, 103,
	105, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	94, 95, 96, 97, 98, 99, 0, 0, 100, 101,
	85, 86, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 92, 90, 80, 81, 102, 0, 82,
	83, 84, 104, 0, 0, 0, 106, 0, 349, 0,
	0, 79, 107, 109, 88, 89, 91, 93, 103, 105,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 94,
	95, 96, 97, 98, 99, 0, 0, 100, 101, 85,
	86, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 92, 90, 80, 81, 102, 0, 82, 83,
	84, 104, 0, 344, 0, 106, 0, 0, 0, 0,
	79, 107, 109, 88, 89, 91, 93, 103, 105, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 94, 95,
	96, 97, 98, 99, 0, 0, 100, 101, 85, 86,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 92, 90, 80, 81, 102, 0, 82, 83, 84,
	104, 0, 340, 0, 106, 0, 0, 0, 0, 79,
	107, 109, 88, 89, 91, 93, 103, 105, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 94, 95, 96,
	97, 98, 99, 0, 0, 100, 101, 85, 86, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	92, 90, 80, 81, 102, 0, 82, 83, 84, 104,
	0, 332, 0, 106, 0, 0, 0, 0, 79, 107,
	109, 88, 89, 91, 93, 103, 105, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 94, 95, 96, 97,
	98, 99, 0, 0, 100, 101, 85, 86, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 92,
	90, 80, 81, 102, 0, 82, 83, 84, 104, 0,
	0, 0, 106, 324, 0, 0, 0, 79, 107, 109,
	88, 89, 91, 93, 103, 105, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 94, 95, 96, 97, 98,
	99, 0, 0, 100, 101, 85, 86, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 92, 90,
	80, 81, 102, 0, 82, 83, 84, 104, 0, 0,
	0, 106, 312, 0, 0, 0, 79, 107, 109, 88,
	89, 91, 93, 103, 105, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 94, 95, 96, 97, 98, 99,
	0, 0, 100, 101, 85, 86, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 311, 77, 92, 90, 80,
	81, 102, 0, 82, 83, 84, 104, 0, 0, 0,
	106, 0, 0, 0, 0, 79, 107, 109, 88, 89,
	91, 93, 103, 105, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 94, 95, 96, 97, 98, 99, 0,
	0, 100, 101, 85, 86, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 92, 90, 80, 81,
	102, 0, 82, 83, 84, 104, 0, 0, 0, 106,
	305, 0, 0, 0, 79, 107, 109, 88, 89, 91,
	93, 103, 105, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 94, 95, 96, 97, 98, 99, 0, 0,
	100, 101, 85, 86, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 92, 90, 80, 81, 102,
	0, 82, 83, 84, 104, 0, 0, 0, 106, 0,
	277, 0, 0, 79, 107, 109, 88, 89, 91, 93,
	103, 105, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 94, 95, 96, 97, 98, 99, 0, 0, 100,
	101, 85, 86, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 108, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 264, 77, 92, 90, 80, 81, 102, 0,
	82, 83, 84, 104, 0, 0, 0, 106, 0, 0,
	0, 0, 79, 107, 109, 88, 89, 91, 93, 103,
	105, 0, 0, 0, 0, 78, 0, 0, 0, 0,
	94, 95, 96, 97, 98, 99, 0, 0, 100, 101,
	85, 86, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 77, 92, 90, 80, 81, 102, 0, 82,
	83, 84, 104, 0, 0, 0, 106, 230, 0, 0,
	0, 79, 107, 109, 88, 89, 91, 93, 103, 105,
	0, 0, 0, 0, 78, 0, 0, 0, 0, 94,
	95, 96, 97, 98, 99, 0, 0, 100, 101, 85,
	86, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 77, 92, 90, 80, 81, 102, 0, 82, 83,
	84, 104, 0, 210, 0, 106, 0, 0, 0, 0,
	79, 107, 109, 88, 89, 91, 93, 103, 105, 0,
	0, 0, 0, 78, 0, 0, 0, 0, 94, 95,
	96, 97, 98, 99, 0, 0, 100, 101, 85, 86,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 108,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	77, 92, 90, 80, 81, 102, 0, 82, 83, 84,
	104, 0, 200, 0, 106, 0, 0, 0, 0, 79,
	107, 109, 88, 89, 91, 93, 103, 105, 0, 0,
	0, 0, 78, 0, 0, 0, 0, 94, 95, 96,
	97, 98, 99, 0, 0, 100, 101, 85, 86, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 108, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
	92, 90, 80, 81, 102, 0, 82, 83, 84, 104,
	0, 0, 0, 106, 0, 0, 0, 0, 79, 107,
	109, 88, 89, 91, 93, 103, 105, 0, 0, 0,
	0, 78, 0, 0, 0, 0, 94, 95, 96, 97,
	98, 99, 0, 0, 100, 101, 85, 86, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 108, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 77, 92,
	90, 80, 81, 102, 0, 82, 83, 84, 104, 0,
	0, 0, 106, 0, 0, 0, 0, 219, 107, 109,
	88, 89, 91, 93, 103, 105, 0, 0, 0, 0,
	78, 0, 0, 0, 0, 94, 95, 96, 97, 98,
	99, 0, 0, 100, 101, 85, 86, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 108, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 77, 92, 90,
	80, 81, 102, 0, 82, 83, 84, 104, 0, 0,
	0, 106, 0, 0, 0, 0, 218, 107, 109, 88,
	89, 91, 93, 103, 105, 0, 0, 0, 0, 78,
	0, 0, 0, 0, 94, 95, 96, 97, 98, 99,
	0, 0, 100, 101, 85, 86, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 92, 90, 80,
	81, 102, 0, 82, 83, 84, 104, 0, 0, 0,
	215, 0, 0, 0, 0, 79, 107, 109, 88, 89,
	91, 93, 103, 105, 0, 0, 0, 0, 78, 0,
	0, 0, 0, 94, 95, 96, 97, 98, 99, 0,
	0, 100, 101, 85, 86, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 108, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 77, 92, 90, 80, 81,
	102, 0, 82, 83, 84, 104, 0, 0, 0, 213,
	0, 0, 0, 0, 79, 107, 109, 88, 89, 91,
	93, 103, 105, 0, 0, 0, 0, 78, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	100, 101, 85, 86, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 108, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 77, 92, 90, 80, 81, 102,
	0, 82, 83, 84, 104, 0, 0, 0, 106, 0,
	0, 0, 0, 79, 107, 109, 88, 89, 91, 93,
	103, 105, 0, 0, 0, 0, 78, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 100,
	101, 85, 86, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 77, 92, 90, 80, 81, 102, 0,
	82, 83, 84, 104, 257, 36, 42, 106, 0, 63,
	0, 0, 79, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 43, 44, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 36, 42, 0, 0, 63, 0, 0,
	0, 140, 65, 58, 0, 52, 60, 59, 258, 141,
	64, 54, 43, 44, 45, 0, 0, 0, 37, 0,
	39, 255, 0, 0, 40, 0, 57, 0, 49, 252,
	0, 0, 38, 0, 47, 0, 0, 0, 0, 0,
	65, 58, 0, 52, 60, 59, 56, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 37, 0, 39, 41,
	0, 0, 40, 0, 57, 0, 49, 0, 0, 0,
	38, 0, 47, 337, 257, 36, 42, 0, 0, 63,
	0, 0, 0, 116, 36, 42, 0, 0, 63, 0,
	61, 0, 0, 54, 43, 44, 45, 0, 0, 0,
	0, 0, 54, 43, 44, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 140, 65, 58, 0, 52, 60, 59, 258, 141,
	64, 65, 58, 0, 52, 60, 59, 56, 37, 64,
	39, 255, 0, 0, 40, 0, 57, 37, 49, 39,
	41, 0, 38, 40, 47, 111, 0, 49, 0, 114,
	0, 38, 0, 47, 50, 36, 42, 0, 0, 63,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 43, 44, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 36, 42, 0, 0, 63, 0, 0,
	0, 0, 65, 58, 0, 52, 60, 59, 56, 0,
	64, 54, 43, 44, 45, 0, 0, 0, 37, 0,
	39, 41, 0, 0, 40, 0, 57, 0, 49, 0,
	278, 0, 38, 0, 47, 0, 0, 0, 0, 0,
	65, 58, 0, 52, 60, 59, 56, 0, 64, 0,
	0, 217, 0, 0, 0, 0, 37, 0, 39, 41,
	0, 0, 40, 0, 57, 0, 49, 0, 0, 0,
	38, 0, 47, 50, 36, 42, 0, 0, 63, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 43, 44, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 36, 42, 0, 0, 63, 0, 0, 0,
	0, 65, 58, 0, 52, 60, 59, 56, 0, 64,
	54, 43, 44, 45, 0, 0, 0, 37, 0, 39,
	41, 0, 0, 40, 0, 57, 0, 49, 0, 206,
	0, 38, 0, 47, 0, 0, 0, 0, 0, 65,
	58, 0, 52, 60, 59, 56, 0, 64, 0, 0,
	197, 0, 0, 0, 0, 37, 0, 39, 41, 0,
	0, 40, 0, 57, 0, 49, 0, 0, 0, 38,
	0, 47, 50, 36, 42, 0, 0, 63, 0, 0,
	0, 50, 36, 42, 0, 0, 63, 0, 0, 0,
	0, 54, 43, 44, 45, 0, 0, 0, 0, 0,
	54, 43, 44, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 58, 0, 52, 60, 59, 56, 0, 64, 65,
	58, 0, 52, 60, 59, 56, 37, 64, 39, 41,
	0, 0, 40, 0, 57, 37, 49, 39, 41, 0,
	38, 40, 47, 405, 0, 49, 0, 0, 0, 38,
	0, 47, 50, 36, 42, 0, 0, 63, 0, 0,
	0, 50, 36, 42, 0, 0, 63, 0, 0, 0,
	0, 54, 43, 44, 45, 0, 0, 0, 0, 0,
	54, 43, 44, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 58, 0, 52, 60, 59, 56, 0, 64, 65,
	58, 0, 52, 60, 59, 56, 37, 64, 39, 41,
	0, 0, 40, 0, 347, 37, 49, 39, 41, 0,
	38, 40, 47, 345, 0, 49, 0, 0, 0, 38,
	0, 47, 50, 36, 42, 0, 0, 63, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 43, 44, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 88, 89, 91, 93,
	0, 105, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 58, 0, 52, 60, 59, 56, 0, 64, 100,
	101, 85, 86, 87, 0, 0, 37, 0, 39, 41,
	0, 0, 40, 0, 275, 0, 49, 0, 0, 0,
	38, 0, 47, 0, 92, 90, 80, 81, 102, 0,
	82, 83, 84, 104, 122, 36, 42, 106, 0, 63,
	0, 0, 79, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 43, 44, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 120, 36, 42, 0, 0, 63, 0, 0,
	0, 0, 65, 58, 0, 52, 60, 59, 56, 0,
	64, 54, 43, 44, 45, 0, 0, 0, 37, 0,
	39, 41, 0, 0, 40, 0, 57, 0, 49, 0,
	0, 0, 38, 0, 47, 0, 0, 0, 0, 0,
	65, 58, 0, 52, 60, 59, 56, 0, 64, 109,
	88, 89, 91, 93, 0, 0, 37, 109, 39, 41,
	0, 0, 40, 0, 57, 0, 49, 0, 0, 0,
	38, 0, 47, 100, 101, 85, 86, 87, 0, 0,
	0, 100, 101, 85, 86, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 90,
	80, 81, 102, 0, 82, 83, 84, 104, 80, 81,
	102, 106, 82, 83, 84, 104, 79, 107, 0, 106,
	0, 0, 0, 0, 79, 107,
}

var yyPact = [...]int16{
	-69, -1000, -1000, 687, -69, -1000, -65, -65, -1000, -1000,
	-1000, -1000, -1000, -1000, 3838, 3838, 421, 377, -1000, -1000,
	-1000, -1000, -1000, -1000, 1387, -1000, -1000, -1000, 3838, 3519,
	296, 3838, 294, 4148, 4110, -48, -1000, 3838, 3838, 3838,
	3838, 3838, -1000, -1000, -1000, -1000, -1000, -54, 24, 3838,
	124, -1000, 159, -1000, 154, -1000, -10, -65, 3838, 153,
	147, 420, 131, 205, 146, 143, -1000, 687, -65, -1000,
	29, 2905, 2905, 293, 325, 3838, 3838, 3838, 3838, 419,
	3838, 3838, 3838, 3838, 3838, 3838, 3838, 3838, 3838, 3838,
	3838, 3838, 3838, 3838, 3838, 3838, 3838, 3838, 3838, 3838,
	-1000, -1000, 3838, 3838, 3838, 3838, 3838, 3757, 3838, 3838,
	2836, -69, 68, 900, 3719, -30, 124, -69, 2767, -65,
	142, 3181, 139, 3112, 3638, 21, 21, 21, -48, 3043,
	-48, 2974, -33, 3838, -65, 69, -1000, 24, 24, -31,
	24, 290, -56, 2698, 3838, 3838, 24, -65, 24, 3838,
	3250, 3838, 3838, 123, -1000, 3838, 3838, -65, 408, 136,
	3390, 175, -1000, -69, 3838, -69, 2905, 2905, 2629, 3319,
	-1000, 18, 18, 256, 256, 256, 2905, 256, 256, 4201,
	4201, 4201, 4201, 4201, 4201, 2905, 2905, 2905, 2905, 2905,
	2905, 18, 4039, 256, 4193, 199, 830, 3838, 3250, 256,
	-69, 260, -65, 3838, -65, -69, 4018, 2560, 3600, 255,
	-65, 337, 3838, 3838, 3838, 3838, 760, 3838, 418, 416,
	-1000, -51, -65, 415, -50, -50, 24, -50, -65, -33,
	-1000, 190, 2491, 77, 3838, -39, -66, 2422, 2353, 1318,
	3838, 29, 29, 3838, 129, 391, 58, -1000, -1000, 24,
	-1000, 408, -1000, 2284, 76, 3510, 24, 124, -36, -34,
	413, 250, 2215, 249, 3838, 118, -1000, -1000, 3428, 1248,
	247, -1000, 2146, 412, 246, -69, 2077, 3937, 3928, 2008,
	360, 335, -22, -1000, -1000, 312, 687, 187, 172, 132,
	90, -1000, 575, 1178, -1000, -1000, -65, -62, -65, 3838,
	-1000, -42, 410, 117, -1000, -1000, -1000, -66, 24, 244,
	-65, 3838, -1000, -1000, 3838, 29, 2905, -48, 99, 164,
	-65, -50, 110, 389, -1000, -1000, 69, 24, -1000, 3838,
	12, -1000, -69, -1000, 3250, -1000, 1108, -1000, -1000, -1000,
	-69, -1000, -1000, 241, -69, -69, 1939, -69, 1870, 3847,
	237, -29, -1000, -1000, 311, 3838, 234, -1000, -1000, -69,
	186, 107, -1000, 96, -1000, 94, -1000, 32, -1000, 1038,
	-1000, -1000, -65, -1000, -51, 24, -59, 24, -1000, 233,
	11, -1000, 3838, 2905, 1801, 288, -50, 24, 99, 30,
	408, 99, 103, -46, 969, 3838, 231, -1000, 229, -1000,
	228, 227, -69, 225, -69, -69, 1732, 286, -69, 224,
	-1000, -1000, -69, 1663, 113, -1000, -1000, -69, -1000, -1000,
	-1000, -1000, -1000, 222, -50, 218, -65, -50, -1000, -65,
	1594, -1000, -69, 86, -50, 279, 99, -1000, -1000, 278,
	99, -14, 24, -1000, 3838, 1525, -1000, -1000, -1000, -1000,
	216, -1000, 215, 212, -69, -69, 211, -1000, -1000, -69,
	-69, -1000, -1000, -1000, 396, 3838, 3838, 202, -1000, -65,
	-69, 276, -69, 275, 99, 11, 1456, -1000, -1000, -1000,
	-1000, 200, 197, 355, -1000, -1000, 24, -66, 2905, -1000,
	24, 188, -69, 184, -69, 271, -1000, -1000, 347, 268,
	-50, 183, -50, -1000, 178, -1000, 177, -69, 176, -69,
	-1000, -1000, -1000, 173, -69, 167, -1000, 163, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 0, 465, 13, 398, 464, 463, 462, 459, 458,
	457, 454, 453, 452, 451, 9, 6, 450, 448, 8,
	7, 71, 38, 447, 446, 442, 381, 12, 439, 5,
	2, 10, 436, 3, 435, 218, 432, 181, 4, 430,
	14, 426, 410, 402, 52, 1, 329, 16,
}

var yyR1 = [...]int8{
	0, 41, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 10, 10, 10, 10, 9, 9, 9, 9, 8,
	8, 8, 8, 4, 4, 4, 5, 7, 7, 6,
	6, 11, 11, 11, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 17, 18, 18, 18, 18,
	18, 19, 20, 13, 14, 14, 14, 14, 14, 15,
	15, 16, 26, 26, 33, 33, 33, 34, 34, 34,
	27, 27, 28, 28, 29, 30, 31, 31, 32, 32,
	21, 21, 21, 21, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 25, 25, 25, 23, 23, 23, 23, 23, 23,
	24, 24, 24, 24, 35, 35, 35, 35, 35, 35,
	35, 36, 36, 37, 37, 38, 38, 38, 39, 39,
	39, 39, 39, 39, 40, 42, 42, 43, 43, 43,
	44, 44, 46, 46, 47, 45, 45, 45, 45,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 3, 0, 1, 1, 1,
	2, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 5, 6, 5, 6, 5, 6, 5, 13,
	12, 9, 8, 1, 1, 1, 4, 3, 3, 3,
	3, 5, 7, 5, 4, 7, 5, 6, 7, 7,
	8, 7, 8, 8, 9, 6, 0, 1, 1, 2,
	2, 4, 3, 7, 0, 1, 1, 2, 2, 4,
	4, 3, 1, 4, 0, 1, 3, 0, 1, 4,
	0, 1, 1, 1, 1, 2, 1, 4, 1, 4,
	0, 1, 4, 4, 1, 1, 2, 2, 2, 2,
	4, 2, 4, 1, 1, 1, 1, 5, 3, 3,
	1, 2, 5, 7, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 3, 3,
	3, 5, 4, 5, 4, 4, 4, 1, 4, 1,
	4, 1, 6, 10, 5, 3, 2, 4, 4, 6,
	3, 3, 4, 4, 8, 9, 10, 9, 10, 11,
	4, 6, 8, 7, 1, 3, 2, 2, 5, 2,
	6, 2, 5, 2, 3, 0, 3, 6, 6, 5,
	5, 6, 5, 5, 1, 0, 1, 2, 1, 1,
	0, 1, 1, 2, 1, 0, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -41, -1, -42, -2, -43, 80, -46, -47, 86,
	-3, -4, 38, 39, 10, 12, 28, -11, -12, -8,
	-13, -17, -10, -9, -22, -5, -7, -6, 13, 15,
	29, 45, 46, 49, 50, -40, 5, 68, 82, 70,
	74, 71, 6, 24, 25, 26, -23, 84, -37, 78,
	4, -39, 55, -25, 23, -24, 58, 76, 53, 57,
	56, 11, -21, 9, 60, 52, -42, -43, -46, -47,
	-21, -22, -22, 4, 14, 61, 62, 64, 27, 83,
	67, 68, 71, 72, 73, 42, 43, 44, 17, 18,
	66, 19, 65, 20, 32, 33, 34, 35, 36, 37,
	40, 41, 69, 21, 74, 22, 78, 84, 53, 16,
	-22, 76, -26, -22, 80, -4, 4, 76, -22, 76,
	4, -22, 4, -22, 84, -22, -22, -22, -40, -22,
	-40, -22, 85, -44, -46, -35, 4, 71, -37, 58,
	51, 59, 84, -22, 78, 78, 78, 76, 84, -44,
	-22, 78, 78, -26, 4, 61, 62, 81, 78, 4,
	78, 78, -3, 76, 13, 76, -22, -22, -22, -22,
	4, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -21, -22, 63, -22, -22,
	76, -1, -46, 16, 81, 76, 80, -22, 80, -1,
	76, -44, 78, 78, 78, 78, -22, 63, 83, 83,
	-37, -21, 76, 83, -35, -35, 84, -35, 76, 85,
	79, -21, -22, -35, -44, -35, -38, -22, -22, -22,
	62, -21, -21, -44, -27, -31, -28, -29, -32, 4,
	-30, 78, 79, -22, -35, 71, -37, 4, 58, -35,
	54, -1, -22, -1, 63, 8, 79, 85, 63, -22,
	-1, 77, -22, -44, -1, 76, -22, 80, 80, -22,
	77, -44, -18, -20, -19, 48, 47, -21, -21, -21,
	-21, 85, 63, -22, 4, 4, 81, -45, -46, -44,
	4, -35, -44, 8, 79, 79, 79, -38, 85, -45,
	81, 63, 79, 79, 81, -21, -22, -40, 79, 8,
	81, -35, -27, -31, 79, 79, -35, 84, 79, 81,
	4, 77, 76, 77, -22, 79, -22, 85, 85, 77,
	76, 4, 77, -1, 76, 76, -22, 76, -22, 80,
	30, -14, -16, -15, 48, 47, -44, -19, -20, 63,
	-3, 8, 79, 8, 79, 8, 79, 8, 79, -22,
	85, 85, -46, 85, -21, 85, -36, 4, 79, -45,
	-35, 77, -44, -22, -22, -33, -35, 78, 79, -35,
	-44, 79, 8, -35, -22, 81, -1, 85, -1, 77,
	-1, -1, 76, -1, 76, 76, -22, 4, 76, -44,
	-15, -16, 63, -22, -21, 77, -1, 63, 79, 79,
	79, 79, 85, -45, -35, -44, 81, -35, 77, 76,
	-22, 79, 76, -34, -35, -33, 79, -29, -30, -33,
	79, -35, 85, 79, 81, -22, 77, 77, 77, 77,
	-1, 77, -1, -1, 76, 76, -1, 77, -1, 63,
	63, -1, 77, 77, -44, -44, 63, -1, 79, 81,
	76, -33, 76, -33, 79, -35, -22, 79, 77, 77,
	77, -1, -1, 77, -1, -1, 4, -38, -22, 77,
	-44, -1, 76, -1, 76, -33, 79, 77, 77, 31,
	-35, -45, -35, 77, -1, 77, -1, 76, 31, 76,
	77, 77, 77, -1, 76, -1, 77, -1, 77, 77,
}

var yyDef = [...]int16{
	195, -2, 1, -2, 195, 196, 199, 198, 202, 204,
	4, 7, 8, 9, 90, 0, 0, 13, 14, 15,
	16, 17, 18, 19, -2, 33, 34, 35, 0, 90,
	0, 0, 0, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 110, 200, 0, 0,
	194, 147, 0, 149, 0, 151, 0, 200, 0, 0,
	0, 0, 0, 0, 0, 0, 3, -2, 197, 203,
	10, 91, 11, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	135, 136, 0, 0, 0, 0, 90, 0, 0, 0,
	0, 195, 0, 91, 0, 0, -2, 195, 0, 200,
	194, 0, 194, 0, 0, 96, 97, 98, -2, 0,
	-2, 0, -2, 90, 201, 0, 174, 0, 0, 0,
	0, 0, 0, 0, 90, 0, 0, 200, 0, 185,
	156, 0, 0, 0, 72, 90, 90, 200, 80, 0,
	0, 0, 5, 195, 0, 195, 37, 39, 0, 108,
	109, 115, 116, 117, 118, 119, 120, 121, 122, 123,
	124, 125, 126, 127, 128, 129, 130, 131, 132, 133,
	134, 137, 138, 139, 140, 0, 0, 0, 155, 160,
	195, 0, 198, 0, 200, 195, 0, 0, 0, 0,
	200, 56, 90, 90, 90, 90, 0, 0, 0, 0,
	184, 205, 200, 0, 176, 177, 0, 179, 200, 183,
	114, 0, 0, 0, 185, 0, 205, 0, 0, 0,
	90, 38, 40, 0, 0, 82, 81, 86, 83, 84,
	88, 80, 161, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 144, 146, 0, 0,
	0, 44, 0, 0, 0, 195, 0, 0, 0, 0,
	0, 64, 200, 57, 58, 0, -2, 0, 0, 0,
	0, 145, 0, 0, 100, 102, -2, 0, 207, 90,
	175, 0, 0, 0, 142, 148, 150, 205, 0, 0,
	-2, 0, 157, 158, 0, 36, 92, -2, 74, 0,
	200, 85, 0, 82, 162, 163, 177, 0, 170, 0,
	0, 12, 195, 43, 107, 143, 0, 192, 193, 41,
	195, 73, 46, 0, 195, 195, 0, 195, 0, 0,
	0, 200, 65, 66, 0, 90, 0, 59, 60, 195,
	0, 0, -2, 0, -2, 0, -2, 0, -2, 0,
	189, 190, -2, 112, 205, 0, 200, 0, 141, 0,
	0, 154, 0, 186, 0, 0, 75, 77, 74, 0,
	0, 74, 0, 0, 0, 0, 0, 191, 0, 47,
	0, 0, 195, 0, 195, 195, 0, 0, 195, 0,
	67, 68, 195, 91, 0, 55, 62, 195, -2, -2,
	-2, -2, 188, 0, 178, 0, 200, 181, 152, 200,
	0, 159, 195, 0, 78, 0, 74, 87, 89, 0,
	74, 0, 0, 171, 0, 0, 42, 45, 48, 49,
	0, 51, 0, 0, 195, 195, 0, 63, 71, 195,
	195, 61, 113, 180, 0, 185, 0, 0, 76, 200,
	195, 0, 195, 0, 74, 178, 0, 173, 50, 52,
	53, 0, 0, 32, 69, 70, 0, 205, 187, 164,
	0, 0, 195, 0, 195, 0, 172, 54, 31, 0,
	182, 0, 79, 165, 0, 167, 0, 195, 0, 195,
	153, 166, 168, 0, 195, 0, 169, 0, 30, 29,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 73, 74, 3,
	78, 79, 71, 67, 81, 68, 83, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 80,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 84, 3, 85, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:118
		{
			yyVAL.compstmt = nil
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:122
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:128
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:137
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:153
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:154
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:156
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:161
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:166
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:171
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:176
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:181
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:185
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.stmt = yyDollar[1].stmt_try
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:188
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:189
		{
			yyVAL.stmt = yyDollar[1].stmt_go
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.stmt = yyDollar[1].stmt_defer
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:199
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:204
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:209
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].expr.Position())
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:214
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:221
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:226
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:231
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr.Position())
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:236
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:243
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:248
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:253
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:258
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:264
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:265
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:270
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:277
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:281
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:298
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:302
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:319
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:324
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:329
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:344
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:355
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:360
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:365
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:370
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:375
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:380
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:385
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:390
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:395
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:402
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:409
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:413
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:417
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:421
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:426
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:437
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:444
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 63:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:450
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:459
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:463
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:467
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:471
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:477
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:488
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:493
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:500
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:506
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:510
		{
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:515
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:519
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:523
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:527
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:531
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:535
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:543
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:546
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:549
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:550
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:554
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:560
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:566
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:570
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:576
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:580
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:585
		{
			yyVAL.exprs = nil
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:589
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:593
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:600
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:608
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:610
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:615
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:620
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:625
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:630
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:635
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:640
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:645
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:650
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:655
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:660
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:665
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:670
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:675
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:680
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:685
		{
			yyVAL.expr = yyDollar[1].expr_func
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:689
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:694
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 113:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:699
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:704
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:709
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:714
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:719
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:724
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:729
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:734
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:739
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:744
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:749
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:754
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:759
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:764
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:769
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:774
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:779
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:784
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:789
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:794
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:799
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:804
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:809
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:814
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:819
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:824
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:829
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:834
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:839
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:844
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:849
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:854
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:859
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:864
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:869
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:874
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:878
		{
			yyVAL.expr = yyDollar[1].expr_dbg
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:880
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:889
		{
			yyVAL.expr = yyDollar[1].expr_make
		}
	case 152:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:891
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 153:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:897
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 154:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:903
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:908
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:913
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:918
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:923
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:928
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:933
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:940
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 162:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:945
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 163:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:950
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 164:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:957
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 165:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:962
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 166:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:967
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 167:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:973
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 168:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:978
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 169:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:983
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 170:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:991
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 171:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:996
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 172:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:1001
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 173:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:1006
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1013
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 175:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1017
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1026
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1035
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1045
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1049
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 180:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1058
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1064
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1068
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1078
		{
			yyVAL.slice_count = 1
		}
	case 184:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1082
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 185:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1089
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1093
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1097
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1107
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1111
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1115
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1119
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1123
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1127
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1133
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
