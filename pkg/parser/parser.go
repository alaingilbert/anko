// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:45
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             ast.Stmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	exprs                         []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const EQOPCHAN = 57404
const UNARY = 57405

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"EQOPCHAN",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"','",
	"'!'",
	"'.'",
	"'['",
	"']'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1170

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	61, 87,
	62, 87,
	81, 5,
	82, 87,
	-2, 1,
	-1, 23,
	82, 88,
	-2, 28,
	-1, 28,
	61, 87,
	62, 87,
	-2, 68,
	-1, 60,
	61, 87,
	62, 87,
	82, 87,
	-2, 5,
	-1, 114,
	16, 69,
	82, 69,
	-2, 188,
	-1, 121,
	1, 96,
	8, 96,
	47, 96,
	48, 96,
	61, 96,
	62, 96,
	64, 96,
	77, 96,
	78, 96,
	80, 96,
	81, 96,
	82, 96,
	86, 96,
	87, 96,
	-2, 91,
	-1, 123,
	1, 98,
	8, 98,
	47, 98,
	48, 98,
	61, 98,
	62, 98,
	64, 98,
	77, 98,
	78, 98,
	80, 98,
	81, 98,
	82, 98,
	86, 98,
	87, 98,
	-2, 91,
	-1, 127,
	4, 177,
	51, 177,
	58, 177,
	59, 177,
	-2, 113,
	-1, 239,
	80, 168,
	84, 168,
	-2, 188,
	-1, 283,
	64, 5,
	-2, 87,
	-1, 295,
	78, 202,
	86, 202,
	-2, 194,
	-1, 316,
	78, 202,
	-2, 194,
	-1, 323,
	1, 90,
	8, 90,
	47, 90,
	48, 90,
	61, 90,
	62, 90,
	64, 90,
	78, 90,
	80, 90,
	81, 90,
	82, 90,
	86, 90,
	87, 90,
	-2, 91,
	-1, 329,
	1, 21,
	47, 21,
	48, 21,
	64, 21,
	78, 21,
	81, 21,
	87, 21,
	-2, 144,
	-1, 331,
	1, 23,
	47, 23,
	48, 23,
	64, 23,
	78, 23,
	81, 23,
	87, 23,
	-2, 146,
	-1, 333,
	1, 25,
	47, 25,
	48, 25,
	64, 25,
	78, 25,
	81, 25,
	87, 25,
	-2, 144,
	-1, 335,
	1, 27,
	47, 27,
	48, 27,
	64, 27,
	78, 27,
	81, 27,
	87, 27,
	-2, 146,
	-1, 373,
	78, 200,
	86, 200,
	-2, 195,
	-1, 392,
	1, 20,
	47, 20,
	48, 20,
	64, 20,
	78, 20,
	81, 20,
	87, 20,
	-2, 143,
	-1, 393,
	1, 22,
	47, 22,
	48, 22,
	64, 22,
	78, 22,
	81, 22,
	87, 22,
	-2, 145,
	-1, 394,
	1, 24,
	47, 24,
	48, 24,
	64, 24,
	78, 24,
	81, 24,
	87, 24,
	-2, 143,
	-1, 395,
	1, 26,
	47, 26,
	48, 26,
	64, 26,
	78, 26,
	81, 26,
	87, 26,
	-2, 145,
}

const yyPrivate = 57344

const yyLast = 4314

var yyAct = [...]int16{
	64, 219, 296, 23, 365, 7, 353, 354, 246, 9,
	216, 280, 62, 214, 281, 65, 213, 83, 5, 8,
	31, 374, 70, 72, 8, 356, 355, 146, 108, 111,
	115, 127, 8, 144, 118, 119, 120, 122, 124, 316,
	429, 308, 295, 224, 8, 8, 138, 8, 224, 230,
	431, 1, 117, 137, 104, 147, 436, 121, 123, 77,
	105, 23, 131, 224, 58, 8, 224, 62, 376, 462,
	155, 128, 131, 224, 164, 165, 166, 167, 63, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 107,
	227, 189, 190, 191, 192, 131, 194, 196, 197, 135,
	154, 283, 282, 205, 144, 382, 134, 136, 209, 135,
	159, 223, 145, 98, 99, 83, 134, 136, 224, 224,
	132, 314, 310, 131, 311, 62, 224, 367, 291, 395,
	132, 233, 235, 137, 208, 453, 206, 247, 424, 248,
	249, 8, 135, 137, 394, 393, 152, 153, 255, 134,
	136, 199, 104, 154, 250, 131, 420, 77, 105, 193,
	224, 309, 244, 132, 306, 224, 201, 154, 224, 392,
	135, 368, 253, 243, 202, 6, 137, 134, 136, 379,
	334, 61, 371, 222, 332, 337, 267, 330, 328, 44,
	289, 132, 270, 126, 232, 274, 62, 277, 254, 302,
	256, 286, 135, 263, 137, 139, 220, 251, 252, 134,
	136, 456, 162, 457, 160, 258, 259, 260, 261, 129,
	271, 149, 148, 132, 294, 278, 143, 293, 124, 129,
	390, 142, 202, 141, 133, 247, 137, 140, 512, 315,
	268, 298, 511, 313, 322, 272, 509, 301, 123, 506,
	414, 504, 335, 336, 154, 503, 333, 338, 154, 331,
	329, 154, 154, 496, 323, 494, 348, 350, 125, 409,
	492, 303, 490, 154, 23, 264, 362, 154, 479, 475,
	474, 359, 473, 361, 358, 200, 472, 464, 463, 450,
	446, 444, 129, 62, 443, 442, 439, 357, 435, 412,
	398, 385, 381, 391, 507, 321, 383, 344, 387, 370,
	341, 388, 326, 253, 324, 345, 269, 221, 257, 502,
	129, 157, 133, 133, 498, 133, 484, 482, 460, 458,
	129, 238, 133, 133, 386, 133, 440, 416, 229, 156,
	116, 68, 405, 360, 501, 110, 491, 410, 327, 408,
	407, 356, 355, 375, 283, 282, 67, 10, 372, 290,
	486, 218, 422, 419, 378, 343, 423, 389, 426, 62,
	406, 421, 312, 434, 299, 288, 287, 437, 129, 168,
	151, 66, 47, 129, 397, 158, 113, 377, 399, 400,
	4, 402, 2, 417, 60, 428, 59, 217, 297, 129,
	215, 279, 413, 150, 20, 129, 352, 19, 133, 17,
	16, 411, 25, 26, 24, 459, 3, 133, 0, 461,
	221, 0, 297, 0, 467, 0, 0, 238, 133, 0,
	0, 0, 0, 441, 0, 0, 0, 0, 0, 366,
	0, 0, 0, 445, 0, 447, 448, 465, 0, 200,
	0, 451, 0, 0, 469, 129, 454, 485, 455, 0,
	247, 489, 0, 0, 0, 0, 0, 129, 488, 0,
	0, 373, 0, 0, 0, 480, 0, 0, 0, 133,
	133, 500, 471, 0, 130, 0, 0, 0, 0, 297,
	0, 476, 373, 0, 477, 478, 0, 0, 133, 0,
	481, 0, 483, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 200, 495, 200, 497, 0, 129, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	505, 0, 0, 0, 508, 0, 0, 0, 0, 510,
	0, 297, 0, 129, 0, 0, 0, 133, 133, 0,
	0, 133, 133, 0, 0, 0, 133, 0, 133, 0,
	0, 0, 225, 226, 0, 228, 0, 0, 0, 0,
	200, 236, 241, 242, 0, 245, 0, 0, 0, 0,
	0, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 129, 0, 0, 0, 0,
	133, 0, 129, 0, 133, 98, 99, 83, 84, 85,
	0, 133, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 133, 0, 104, 0, 0, 0, 292, 77,
	105, 0, 0, 0, 297, 0, 0, 300, 0, 0,
	133, 0, 0, 0, 0, 0, 133, 225, 307, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 32, 38, 0, 0, 42, 13, 57, 14, 27,
	0, 28, 0, 0, 0, 0, 0, 0, 0, 50,
	39, 40, 41, 0, 15, 18, 0, 0, 0, 0,
	0, 0, 0, 0, 11, 12, 0, 0, 0, 0,
	369, 29, 30, 0, 0, 21, 22, 0, 51, 54,
	0, 48, 56, 55, 52, 0, 49, 0, 380, 0,
	0, 0, 0, 0, 384, 33, 0, 35, 37, 0,
	0, 36, 0, 53, 0, 45, 0, 0, 0, 34,
	0, 43, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 418, 0, 106,
	0, 0, 425, 0, 0, 0, 427, 0, 430, 0,
	285, 75, 90, 88, 78, 79, 100, 0, 80, 81,
	82, 102, 0, 0, 0, 104, 0, 0, 0, 0,
	77, 105, 284, 0, 0, 0, 0, 0, 107, 86,
	87, 89, 91, 101, 103, 0, 107, 0, 0, 76,
	0, 0, 0, 0, 92, 93, 94, 95, 96, 97,
	0, 466, 98, 99, 83, 84, 85, 0, 0, 0,
	98, 99, 83, 84, 85, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 266, 75, 90, 88,
	78, 79, 100, 0, 80, 81, 82, 102, 78, 79,
	100, 104, 80, 81, 82, 102, 77, 105, 265, 104,
	493, 0, 0, 0, 77, 105, 499, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 73, 74, 0, 0, 75, 90, 88, 78,
	79, 100, 0, 80, 81, 82, 102, 0, 203, 0,
	104, 0, 0, 0, 0, 77, 105, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 90, 88, 78,
	79, 100, 0, 80, 81, 82, 102, 0, 0, 0,
	104, 432, 0, 433, 0, 77, 105, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 90, 88, 78,
	79, 100, 0, 80, 81, 82, 102, 0, 0, 0,
	104, 0, 0, 0, 0, 77, 105, 415, 107, 86,
	87, 89, 91, 101, 103, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 92, 93, 94, 95, 96, 97,
	0, 0, 98, 99, 83, 84, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 90, 88,
	78, 79, 100, 0, 80, 81, 82, 102, 0, 0,
	0, 104, 0, 0, 0, 0, 77, 105, 396, 107,
	86, 87, 89, 91, 101, 103, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 92, 93, 94, 95, 96,
	97, 0, 0, 98, 99, 83, 84, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 90,
	88, 78, 79, 100, 0, 80, 81, 82, 102, 0,
	0, 0, 104, 0, 0, 0, 0, 77, 105, 364,
	107, 86, 87, 89, 91, 101, 103, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 92, 93, 94, 95,
	96, 97, 0, 0, 98, 99, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	90, 88, 78, 79, 100, 0, 80, 81, 82, 102,
	0, 0, 0, 104, 0, 0, 0, 0, 77, 105,
	340, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 319, 0, 320, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 73, 74, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 487, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 470,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 468, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 452,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 449, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 438, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 403, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 401, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 0, 351, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 346, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 342, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 325, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 318, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 317,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 305, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 304, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 0, 275, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 231, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 207, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 198, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 0, 0, 0, 0, 212,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 0, 0, 0, 0, 211,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 163, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 161, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 99, 83, 84, 85, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 239, 32, 38, 104, 0, 42, 0, 0, 77,
	105, 0, 80, 81, 82, 102, 0, 0, 0, 104,
	50, 39, 40, 41, 77, 105, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	32, 38, 0, 0, 42, 0, 0, 0, 135, 51,
	54, 0, 48, 56, 55, 240, 136, 49, 50, 39,
	40, 41, 0, 0, 0, 0, 33, 0, 35, 237,
	0, 0, 36, 0, 53, 0, 45, 234, 0, 0,
	34, 0, 43, 0, 0, 0, 0, 51, 54, 0,
	48, 56, 55, 52, 0, 49, 0, 0, 0, 0,
	0, 0, 0, 0, 33, 0, 35, 37, 0, 0,
	36, 0, 53, 0, 45, 0, 0, 0, 34, 0,
	43, 363, 46, 32, 38, 0, 0, 42, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 39, 40, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	239, 32, 38, 0, 0, 42, 0, 0, 0, 0,
	51, 54, 0, 48, 56, 55, 52, 0, 49, 50,
	39, 40, 41, 0, 0, 0, 0, 33, 0, 35,
	37, 0, 0, 36, 0, 53, 0, 45, 0, 0,
	0, 34, 0, 43, 339, 0, 0, 135, 51, 54,
	0, 48, 56, 55, 240, 136, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 33, 0, 35, 237, 0,
	0, 36, 0, 53, 0, 45, 0, 0, 0, 34,
	0, 43, 114, 32, 38, 0, 0, 42, 0, 57,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 39, 40, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	46, 32, 38, 0, 0, 42, 0, 0, 0, 0,
	51, 54, 0, 48, 56, 55, 52, 0, 49, 50,
	39, 40, 41, 0, 0, 0, 0, 33, 0, 35,
	37, 0, 0, 36, 0, 109, 0, 45, 0, 112,
	0, 34, 0, 43, 0, 0, 0, 0, 51, 54,
	0, 48, 56, 55, 52, 0, 49, 0, 0, 0,
	0, 0, 0, 0, 0, 33, 0, 35, 37, 0,
	0, 36, 0, 53, 0, 45, 0, 276, 0, 34,
	0, 43, 46, 32, 38, 0, 0, 42, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 39, 40, 41, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 46, 32, 38, 0, 0, 42,
	51, 54, 0, 48, 56, 55, 52, 0, 49, 0,
	0, 0, 210, 50, 39, 40, 41, 33, 0, 35,
	37, 0, 0, 36, 0, 53, 0, 45, 0, 0,
	0, 34, 0, 43, 46, 32, 38, 0, 0, 42,
	0, 0, 51, 54, 0, 48, 56, 55, 52, 0,
	49, 0, 0, 50, 39, 40, 41, 0, 0, 33,
	0, 35, 37, 0, 0, 36, 0, 53, 0, 45,
	0, 204, 0, 34, 0, 43, 46, 32, 38, 0,
	0, 42, 51, 54, 0, 48, 56, 55, 52, 0,
	49, 0, 0, 0, 195, 50, 39, 40, 41, 33,
	0, 35, 37, 0, 0, 36, 0, 53, 0, 45,
	0, 0, 0, 34, 0, 43, 46, 32, 38, 0,
	0, 42, 0, 0, 51, 54, 0, 48, 56, 55,
	52, 0, 49, 0, 0, 50, 39, 40, 41, 0,
	0, 33, 0, 35, 37, 0, 0, 36, 0, 53,
	0, 45, 0, 0, 0, 34, 0, 43, 46, 32,
	38, 0, 0, 42, 51, 54, 0, 48, 56, 55,
	52, 0, 49, 0, 0, 0, 0, 50, 39, 40,
	41, 33, 0, 35, 37, 0, 0, 36, 0, 404,
	0, 45, 0, 0, 0, 34, 0, 43, 46, 32,
	38, 0, 0, 42, 0, 0, 51, 54, 0, 48,
	56, 55, 52, 0, 49, 0, 0, 50, 39, 40,
	41, 0, 0, 33, 0, 35, 37, 0, 0, 36,
	0, 349, 0, 45, 0, 0, 0, 34, 0, 43,
	46, 32, 38, 0, 0, 42, 51, 54, 0, 48,
	56, 55, 52, 0, 49, 0, 0, 0, 0, 50,
	39, 40, 41, 33, 0, 35, 37, 0, 0, 36,
	0, 347, 0, 45, 0, 0, 0, 34, 0, 43,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 54,
	0, 48, 56, 55, 52, 0, 49, 0, 107, 86,
	87, 89, 91, 0, 103, 33, 0, 35, 37, 0,
	0, 36, 0, 273, 0, 45, 0, 0, 0, 34,
	0, 43, 98, 99, 83, 84, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 88,
	78, 79, 100, 0, 80, 81, 82, 102, 71, 32,
	38, 104, 0, 42, 0, 0, 77, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 50, 39, 40,
	41, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 32, 38, 0,
	0, 42, 0, 0, 0, 0, 51, 54, 0, 48,
	56, 55, 52, 0, 49, 50, 39, 40, 41, 0,
	0, 0, 0, 33, 0, 35, 37, 0, 0, 36,
	0, 53, 0, 45, 0, 0, 0, 34, 0, 43,
	0, 0, 0, 0, 51, 54, 0, 48, 56, 55,
	52, 0, 49, 0, 107, 86, 87, 89, 91, 0,
	0, 33, 0, 35, 37, 0, 0, 36, 0, 53,
	0, 45, 0, 0, 0, 34, 0, 43, 98, 99,
	83, 84, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 90, 88, 78, 79, 100, 0,
	80, 81, 82, 102, 0, 0, 0, 104, 0, 0,
	0, 0, 77, 105,
}

var yyPact = [...]int16{
	-63, -1000, 696, -63, -1000, -68, -68, -1000, -1000, -1000,
	-1000, -1000, -1000, 3862, 3862, 387, 352, -1000, 274, -1000,
	-1000, 4182, 4144, 1415, -1000, -1000, -1000, 3862, 3618, 3862,
	273, -33, -1000, 3862, 3862, 3862, 3862, 3862, -1000, -1000,
	-1000, -1000, 199, -55, 161, 3862, 136, -1000, 168, 164,
	162, 157, 37, -68, 3862, 153, 152, 386, 95, -1000,
	696, -68, -1000, 28, 2955, 2955, 272, 318, -63, 145,
	3235, 143, 3165, 3862, 3862, 3862, 3862, 385, 3862, 3862,
	3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862,
	3862, 3862, 3862, 3862, 3862, 3862, 3862, 3862, -1000, -1000,
	3862, 3862, 3862, 3862, 3862, 3820, 3862, 3862, 2885, -63,
	160, 921, 3780, 65, 136, 2815, -68, 3738, -25, -25,
	-25, -33, 3095, -33, 3025, 367, 137, -32, 3862, -68,
	44, -1000, 161, 161, 15, 161, 271, -37, 2745, 3862,
	3862, 3377, 161, 129, -68, 161, 3862, 585, 3862, 3862,
	102, -1000, 3862, 3862, -68, -1000, -63, 3862, -63, 250,
	3862, 3862, 3862, 3862, 2955, 2955, 2675, 3305, -1000, 3320,
	3320, 83, 83, 83, 2955, 83, 83, 850, 850, 850,
	850, 850, 850, 2955, 2955, 2955, 2955, 2955, 2955, 3320,
	4072, 83, 4228, 205, 842, 3862, 585, 83, -63, 248,
	-68, 3862, -68, -63, 4026, 2605, 3656, -68, 317, 766,
	3862, 382, 381, 120, 361, 56, -1000, -1000, 161, -1000,
	367, -1000, -40, -68, 380, -41, -41, 161, -41, -68,
	-32, -1000, 201, 2535, -1000, 2465, 94, 3536, 161, 136,
	-44, 91, 52, 378, 3862, 45, -43, 2395, 2325, 1345,
	3862, 28, 28, 3862, 246, 2255, 244, 328, 190, 189,
	186, 182, 3862, 115, -1000, -1000, 3498, 1274, 242, -1000,
	2185, 371, 239, -63, 2115, 3984, 3944, 2045, 314, 64,
	-1000, -1000, 289, 696, -1000, 3415, 1203, -1000, -1000, 58,
	101, -68, -41, 112, 360, -68, -65, -68, 3862, -1000,
	-18, 370, 109, -1000, -1000, -1000, -1000, 44, 161, -1000,
	-1000, 3862, 33, -43, 161, 233, -68, 3862, -1000, -1000,
	3862, 28, 2955, -33, -1000, -63, -1000, 236, 99, -1000,
	75, -1000, 74, -1000, 59, -1000, 585, -1000, 1132, -1000,
	-1000, -1000, -63, -1000, -1000, 232, -63, -63, 1975, -63,
	1905, 3902, -22, -1000, -1000, 215, 3862, 231, -1000, -1000,
	-63, 196, 1061, -1000, -1000, 270, -41, 161, 58, 86,
	367, 58, 68, -68, -1000, -40, 161, -42, 161, -1000,
	-36, 991, 3862, 230, -21, -1000, 3862, 2955, 1835, 228,
	269, -63, -1000, -1000, -1000, -1000, -1000, 227, -1000, 226,
	223, -63, 222, -63, -63, 1765, 221, -1000, -1000, -63,
	1695, 81, -1000, -1000, -63, -1000, -63, 141, -41, 262,
	58, -1000, -1000, 261, 58, -11, 220, -41, 219, -68,
	-41, 161, -1000, 3862, 1625, -1000, -68, 1555, -1000, -1000,
	-63, 218, -1000, -1000, -1000, 214, -1000, 212, 211, -63,
	-1000, -1000, -63, -63, -1000, 210, -1000, -68, -63, 260,
	-63, 259, 58, -1000, -1000, 366, -21, 1485, -1000, 3862,
	3862, 204, 325, -1000, -1000, -1000, 202, -1000, -1000, -1000,
	161, 197, -63, 195, -63, 257, 161, -1000, -43, 2955,
	323, 252, -1000, -41, -1000, 187, -1000, 183, -63, -41,
	181, 237, -63, -1000, -1000, 178, -1000, -63, 174, -1000,
	170, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 51, 426, 9, 367, 424, 423, 422, 420, 419,
	417, 416, 7, 6, 414, 411, 14, 11, 64, 0,
	355, 16, 410, 10, 1, 13, 407, 4, 403, 449,
	397, 199, 8, 392, 20, 402, 400, 27, 2, 185,
	5,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 5, 7, 7, 6, 6, 8, 8, 8,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 14, 15, 15, 15, 15, 15, 16, 17, 10,
	11, 11, 11, 11, 11, 12, 12, 13, 20, 20,
	20, 27, 27, 27, 28, 28, 28, 21, 21, 22,
	22, 23, 24, 25, 25, 26, 26, 18, 18, 18,
	18, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 29, 29,
	29, 29, 29, 29, 29, 30, 30, 31, 31, 32,
	32, 32, 33, 33, 33, 33, 33, 33, 34, 35,
	35, 36, 36, 36, 37, 37, 39, 39, 40, 38,
	38, 38, 38,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 1, 1, 13, 12, 9, 8, 1, 1,
	6, 5, 6, 5, 6, 5, 6, 5, 1, 1,
	1, 1, 4, 3, 3, 3, 3, 5, 7, 5,
	4, 7, 5, 6, 7, 7, 8, 7, 8, 8,
	9, 6, 0, 1, 1, 2, 2, 4, 3, 7,
	0, 1, 1, 2, 2, 4, 4, 3, 0, 1,
	4, 0, 1, 3, 0, 1, 4, 0, 1, 1,
	1, 1, 2, 1, 4, 1, 4, 0, 1, 4,
	4, 1, 1, 2, 2, 2, 2, 4, 2, 4,
	1, 1, 1, 1, 5, 3, 3, 8, 9, 10,
	9, 10, 11, 2, 5, 7, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	3, 3, 3, 5, 4, 5, 4, 4, 4, 1,
	4, 3, 4, 4, 4, 4, 6, 8, 7, 6,
	10, 5, 3, 2, 4, 4, 6, 3, 1, 3,
	2, 2, 5, 2, 6, 2, 5, 2, 3, 0,
	3, 6, 6, 5, 5, 6, 5, 5, 1, 0,
	1, 2, 1, 1, 0, 1, 1, 2, 1, 0,
	2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -35, -2, -36, 81, -39, -40, 87, -3,
	-4, 38, 39, 10, 12, 28, -8, -9, 29, -10,
	-14, 49, 50, -19, -5, -7, -6, 13, 15, 45,
	46, -34, 5, 69, 83, 71, 75, 72, 6, 24,
	25, 26, 9, 85, -31, 79, 4, -33, 55, 60,
	23, 52, 58, 77, 53, 57, 56, 11, -18, -35,
	-36, -39, -40, -18, -19, -19, 4, 14, 77, 4,
	-19, 4, -19, 61, 62, 65, 27, 84, 68, 69,
	72, 73, 74, 42, 43, 44, 17, 18, 67, 19,
	66, 20, 32, 33, 34, 35, 36, 37, 40, 41,
	70, 21, 75, 22, 79, 85, 53, 16, -19, 77,
	-20, -19, 81, -4, 4, -19, 77, 85, -19, -19,
	-19, -34, -19, -34, -19, 79, 4, 86, -37, -39,
	-29, 4, 72, -31, 58, 51, 59, 85, -19, 79,
	79, 79, 79, 79, 77, 85, -37, -19, 79, 79,
	-20, 4, 61, 62, 82, -3, 77, 13, 77, -1,
	79, 79, 79, 79, -19, -19, -19, -19, 4, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -18, -19, 64, -19, -19, 77, -1,
	-39, 16, 82, 77, 81, -19, 81, 77, -37, -19,
	64, 84, 84, -21, -25, -22, -23, -26, 4, -24,
	79, -31, -18, 77, 84, -29, -29, 85, -29, 77,
	86, 80, -18, -19, 80, -19, -29, 72, -31, 4,
	58, -29, -29, 54, -37, -29, -32, -19, -19, -19,
	62, -18, -18, -37, -1, -19, -1, 78, -18, -18,
	-18, -18, 64, 8, 80, 86, 64, -19, -1, 78,
	-19, -37, -1, 77, -19, 81, 81, -19, -37, -15,
	-17, -16, 48, 47, 86, 64, -19, 4, 4, 80,
	8, 82, -29, -21, -25, 82, -38, -39, -37, 4,
	-29, -37, 8, 80, 80, 80, 80, -29, 85, 80,
	80, 82, 4, -32, 86, -38, 82, 64, 80, 80,
	82, -18, -19, -34, 78, 77, 78, 30, 8, 80,
	8, 80, 8, 80, 8, 80, -19, 80, -19, 86,
	86, 78, 77, 4, 78, -1, 77, 77, -19, 77,
	-19, 81, -11, -13, -12, 48, 47, -37, -16, -17,
	64, -3, -19, 86, 86, -27, -29, 79, 80, -29,
	-37, 80, 8, -39, 86, -18, 86, -30, 4, 80,
	-29, -19, 82, -38, -29, 78, -37, -19, -19, -1,
	4, 77, 80, 80, 80, 80, 86, -1, 78, -1,
	-1, 77, -1, 77, 77, -19, -37, -12, -13, 64,
	-19, -18, 78, -1, 64, 86, 77, -28, -29, -27,
	80, -23, -24, -27, 80, -29, -38, -29, -37, 82,
	-29, 86, 80, 82, -19, 78, 77, -19, 80, 78,
	77, -1, 78, 78, 78, -1, 78, -1, -1, 77,
	78, -1, 64, 64, -1, -1, 80, 82, 77, -27,
	77, -27, 80, 78, 78, -37, -29, -19, 80, -37,
	64, -1, 78, 78, 78, 78, -1, -1, -1, 78,
	-37, -1, 77, -1, 77, -27, 4, 80, -32, -19,
	78, 31, 78, -29, 78, -1, 78, -1, 77, -29,
	-38, 31, 77, 78, 78, -1, 78, 77, -1, 78,
	-1, 78, 78,
}

var yyDef = [...]int16{
	189, -2, -2, 189, 190, 193, 192, 196, 198, 3,
	6, 7, 8, 87, 0, 0, 12, 13, 0, 18,
	19, 0, 0, -2, 29, 30, 31, 0, -2, 0,
	0, 91, 92, 0, 0, 0, 0, 0, 100, 101,
	102, 103, 0, 194, 0, 0, 188, 149, 0, 0,
	0, 0, 0, 194, 0, 0, 0, 68, 0, 2,
	-2, 191, 197, 9, 88, 10, 0, 0, 189, 188,
	0, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 138,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 189,
	0, 88, 0, 0, -2, 0, 194, 0, 93, 94,
	95, -2, 0, -2, 0, 77, 0, -2, 87, 195,
	0, 168, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 194, 0, 179, 163, 0, 0,
	0, 69, 87, 87, 194, 4, 189, 0, 189, 0,
	87, 87, 87, 87, 33, 35, 0, 105, 106, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 133, 134, 135, 136, 139,
	140, 141, 142, 0, 0, 0, 162, 167, 189, 0,
	192, 0, 194, 189, 0, 0, 0, 194, 52, 0,
	0, 0, 0, 0, 79, 78, 83, 80, 81, 85,
	77, 178, 199, 194, 0, 170, 171, 0, 173, 194,
	177, 116, 0, 0, 151, 0, 0, 0, 0, -2,
	0, 0, 0, 0, 179, 0, 199, 0, 0, 0,
	87, 34, 36, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 146, 148, 0, 0, 0, 40,
	0, 0, 0, 189, 0, 0, 0, 0, 60, 194,
	53, 54, 0, -2, 147, 0, 0, 97, 99, 71,
	0, 194, 82, 0, 79, -2, 0, 201, 87, 169,
	0, 0, 0, 144, 150, 152, 153, 171, 0, 154,
	155, 0, 0, 199, 0, 0, -2, 0, 164, 165,
	0, 32, 89, -2, 11, 189, 39, 0, 0, -2,
	0, -2, 0, -2, 0, -2, 104, 145, 0, 186,
	187, 37, 189, 70, 42, 0, 189, 189, 0, 189,
	0, 0, 194, 61, 62, 0, 87, 0, 55, 56,
	189, 0, 0, 183, 184, 0, 72, 74, 71, 0,
	0, 71, 0, -2, 114, 199, 0, 194, 0, 143,
	0, 0, 0, 0, 0, 161, 0, 180, 0, 0,
	0, 189, -2, -2, -2, -2, 185, 0, 43, 0,
	0, 189, 0, 189, 189, 0, 0, 63, 64, 189,
	88, 0, 51, 58, 189, 182, 189, 0, 75, 0,
	71, 84, 86, 0, 71, 0, 0, 172, 0, 194,
	175, 0, 156, 0, 0, 159, 194, 0, 166, 38,
	189, 0, 41, 44, 45, 0, 47, 0, 0, 189,
	59, 67, 189, 189, 57, 0, 73, 194, 189, 0,
	189, 0, 71, 115, 174, 0, 172, 0, 158, 179,
	0, 0, 17, 46, 48, 49, 0, 65, 66, 107,
	0, 0, 189, 0, 189, 0, 0, 157, 199, 181,
	16, 0, 50, 76, 108, 0, 110, 0, 189, 176,
	0, 0, 189, 109, 111, 0, 160, 189, 0, 112,
	0, 15, 14,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	87, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 83, 3, 3, 3, 74, 75, 3,
	79, 80, 72, 68, 82, 69, 84, 73, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 64, 81,
	66, 62, 67, 65, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 85, 3, 86, 71, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 70, 78,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	63, 76,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:105
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:109
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:115
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:124
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:140
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:144
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:148
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:153
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:158
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:163
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:168
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:173
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:177
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 14:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:181
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:191
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:201
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:205
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:209
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:214
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:219
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:224
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:229
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:234
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:239
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:244
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:249
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:256
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:260
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:264
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:270
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:277
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:281
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:298
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:302
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:319
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:324
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:329
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:344
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:355
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:360
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:365
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:370
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:375
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:380
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:385
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:390
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:395
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:402
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:409
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:413
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:417
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:421
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:426
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:437
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:444
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:450
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:459
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:463
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:467
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:471
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:477
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:488
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:493
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:500
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 68:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:505
		{
			yyVAL.expr_idents = []string{}
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:509
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:513
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:521
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:525
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:529
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:533
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:537
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:541
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:549
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:553
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:559
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:563
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:569
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:575
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:581
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:585
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:591
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:595
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 87:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:600
		{
			yyVAL.exprs = nil
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:604
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:608
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:615
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:624
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:628
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:633
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:638
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:643
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:648
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 97:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:653
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:658
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:663
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:668
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:673
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:678
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:683
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:688
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:693
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:698
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 107:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:703
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 108:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:708
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 109:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:713
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 110:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:719
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:724
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 112:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:729
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:735
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 114:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:740
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 115:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:745
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:750
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:755
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:760
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:765
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:770
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:775
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:780
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:785
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:790
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:795
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:800
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:805
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:810
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:815
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:820
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:825
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:830
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:835
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:840
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:845
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:850
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:855
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:860
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:865
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:870
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:875
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:880
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:885
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:890
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:895
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:900
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:905
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:910
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:915
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:920
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:925
		{
			yyVAL.expr = &ast.DbgExpr{}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:930
		{
			yyVAL.expr = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:935
		{
			yyVAL.expr = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:940
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:950
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 156:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:955
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 157:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:960
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 158:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:965
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:970
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 160:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:976
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:982
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:987
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:992
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:997
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1002
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 166:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1007
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1012
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 168:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1020
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1024
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1033
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1042
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 172:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1052
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1056
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1065
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1071
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 176:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1075
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1085
		{
			yyVAL.slice_count = 1
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1089
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 179:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1096
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1100
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 181:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1104
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 182:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1114
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 183:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1118
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1122
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1126
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1130
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1134
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 188:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1140
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
