// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                 int
	stmtsStmt           *ast.StmtsStmt
	stmt                ast.Stmt
	expr                ast.Expr
	exprs               []ast.Expr
	else_if_list        []ast.Stmt
	stmt_switch_cases   *ast.SwitchStmt
	stmt_select_content *ast.SelectBodyStmt
	expr_call_helper    struct {
		Exprs  []ast.Expr
		VarArg bool
	}
	expr_idents           []string
	func_expr_idents      []*ast.ParamExpr
	func_expr_typed_ident *ast.ParamExpr
	func_expr_args        struct {
		Params   []*ast.ParamExpr
		VarArg   bool
		TypeData *ast.TypeStruct
	}
	expr_typed_ident struct {
		Name     string
		TypeData *ast.TypeStruct
	}
	opt_func_return_expr_idents []*ast.FuncReturnValuesExpr
	expr_map_content            *ast.MapExpr
	type_data                   *ast.TypeStruct
	slice_count                 int
	tok                         ast.Token
	opt_ident                   *ast.Token
	str                         string
	op_lets                     bool
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57406
	yyEofCode   = 57344
	ANDAND      = 57365
	ANDEQ       = 57379
	ARRAY       = 57349
	BREAK       = 57381
	CASE        = 57390
	CATCH       = 57373
	CHAN        = 57394
	CLOSE       = 57400
	CONTINUE    = 57382
	DBG         = 57403
	DEFAULT     = 57391
	DEFER       = 57393
	DELETE      = 57399
	DIVEQ       = 57378
	ELSE        = 57356
	EQEQ        = 57360
	FALSE       = 57368
	FINALLY     = 57374
	FOR         = 57357
	FUNC        = 57351
	GE          = 57362
	GO          = 57392
	IDENT       = 57346
	IF          = 57355
	IN          = 57359
	LE          = 57363
	LEN         = 57398
	LOOP        = 57358
	MAKE        = 57395
	MAP         = 57401
	MINUSEQ     = 57376
	MINUSMINUS  = 57384
	MODULE      = 57371
	MULEQ       = 57377
	NEQ         = 57361
	NEW         = 57366
	NIL         = 57369
	NILCOALESCE = 57370
	NUMBER      = 57347
	OPCHAN      = 57396
	OREQ        = 57380
	OROR        = 57364
	PLUSEQ      = 57375
	PLUSPLUS    = 57383
	POW         = 57385
	RETURN      = 57352
	SELECT      = 57389
	SHIFTLEFT   = 57386
	SHIFTRIGHT  = 57387
	STRING      = 57348
	STRUCT      = 57402
	SWITCH      = 57388
	THROW       = 57354
	TRUE        = 57367
	TRY         = 57372
	TYPE        = 57397
	UNARY       = 57405
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57404
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -240
)

var (
	yyPrec = map[int]int{
		POW:         0,
		'=':         1,
		PLUSEQ:      1,
		MINUSEQ:     1,
		DIVEQ:       1,
		MULEQ:       1,
		ANDEQ:       1,
		OREQ:        1,
		':':         2,
		OPCHAN:      3,
		'?':         4,
		NILCOALESCE: 4,
		OROR:        5,
		ANDAND:      6,
		EQEQ:        7,
		NEQ:         7,
		'<':         7,
		LE:          7,
		'>':         7,
		GE:          7,
		'+':         8,
		'-':         8,
		'|':         8,
		'^':         8,
		'*':         9,
		'/':         9,
		'%':         9,
		SHIFTLEFT:   9,
		SHIFTRIGHT:  9,
		'&':         9,
		IN:          10,
		PLUSPLUS:    11,
		MINUSMINUS:  11,
		UNARY:       12,
	}

	yyXLAT = map[int]int{
		91:    0,   // '[' (222x)
		42:    1,   // '*' (219x)
		40:    2,   // '(' (210x)
		125:   3,   // '}' (208x)
		123:   4,   // '{' (207x)
		38:    5,   // '&' (200x)
		45:    6,   // '-' (200x)
		57396: 7,   // OPCHAN (200x)
		10:    8,   // '\n' (176x)
		57391: 9,   // DEFAULT (145x)
		57390: 10,  // CASE (144x)
		57346: 11,  // IDENT (141x)
		59:    12,  // ';' (135x)
		57344: 13,  // $end (127x)
		57401: 14,  // MAP (127x)
		58:    15,  // ':' (120x)
		44:    16,  // ',' (118x)
		41:    17,  // ')' (116x)
		46:    18,  // '.' (116x)
		33:    19,  // '!' (106x)
		94:    20,  // '^' (106x)
		57400: 21,  // CLOSE (106x)
		57403: 22,  // DBG (106x)
		57399: 23,  // DELETE (106x)
		57368: 24,  // FALSE (106x)
		57351: 25,  // FUNC (106x)
		57398: 26,  // LEN (106x)
		57395: 27,  // MAKE (106x)
		57366: 28,  // NEW (106x)
		57369: 29,  // NIL (106x)
		57347: 30,  // NUMBER (106x)
		57348: 31,  // STRING (106x)
		57367: 32,  // TRUE (106x)
		93:    33,  // ']' (97x)
		57359: 34,  // IN (96x)
		37:    35,  // '%' (94x)
		43:    36,  // '+' (94x)
		47:    37,  // '/' (94x)
		60:    38,  // '<' (94x)
		62:    39,  // '>' (94x)
		63:    40,  // '?' (94x)
		124:   41,  // '|' (94x)
		57365: 42,  // ANDAND (94x)
		57379: 43,  // ANDEQ (94x)
		57378: 44,  // DIVEQ (94x)
		57360: 45,  // EQEQ (94x)
		57362: 46,  // GE (94x)
		57363: 47,  // LE (94x)
		57376: 48,  // MINUSEQ (94x)
		57384: 49,  // MINUSMINUS (94x)
		57377: 50,  // MULEQ (94x)
		57361: 51,  // NEQ (94x)
		57370: 52,  // NILCOALESCE (94x)
		57380: 53,  // OREQ (94x)
		57364: 54,  // OROR (94x)
		57375: 55,  // PLUSEQ (94x)
		57383: 56,  // PLUSPLUS (94x)
		57385: 57,  // POW (94x)
		57386: 58,  // SHIFTLEFT (94x)
		57387: 59,  // SHIFTRIGHT (94x)
		61:    60,  // '=' (72x)
		57350: 61,  // VARARG (71x)
		57404: 62,  // WALRUS (69x)
		57477: 63,  // slice_count (61x)
		57511: 64,  // typed_slice_count (59x)
		57428: 65,  // expr_ident (48x)
		57411: 66,  // const_expr (42x)
		57415: 67,  // expr (42x)
		57416: 68,  // expr_anon_call (42x)
		57417: 69,  // expr_array (42x)
		57418: 70,  // expr_assoc (42x)
		57419: 71,  // expr_binary (42x)
		57420: 72,  // expr_call (42x)
		57423: 73,  // expr_close (42x)
		57424: 74,  // expr_dbg (42x)
		57425: 75,  // expr_delete (42x)
		57427: 76,  // expr_func (42x)
		57430: 77,  // expr_item_or_slice (42x)
		57431: 78,  // expr_iterable (42x)
		57432: 79,  // expr_len (42x)
		57433: 80,  // expr_literals (42x)
		57434: 81,  // expr_literals_helper (42x)
		57435: 82,  // expr_make (42x)
		57436: 83,  // expr_map (42x)
		57440: 84,  // expr_member (42x)
		57441: 85,  // expr_member_or_ident (42x)
		57442: 86,  // expr_new (42x)
		57443: 87,  // expr_opchan (42x)
		57444: 88,  // expr_paren (42x)
		57445: 89,  // expr_ternary (42x)
		57447: 90,  // expr_unary (42x)
		57512: 91,  // unary_op (42x)
		57458: 92,  // newline (33x)
		57421: 93,  // expr_call_helper (32x)
		57407: 94,  // bin_op (31x)
		57459: 95,  // newlines (31x)
		57460: 96,  // op_assoc1 (31x)
		57394: 97,  // CHAN (29x)
		57402: 98,  // STRUCT (29x)
		57355: 99,  // IF (28x)
		57353: 100, // VAR (28x)
		57381: 101, // BREAK (27x)
		57382: 102, // CONTINUE (27x)
		57393: 103, // DEFER (27x)
		57357: 104, // FOR (27x)
		57392: 105, // GO (27x)
		57358: 106, // LOOP (27x)
		57371: 107, // MODULE (27x)
		57352: 108, // RETURN (27x)
		57389: 109, // SELECT (27x)
		57388: 110, // SWITCH (27x)
		57354: 111, // THROW (27x)
		57372: 112, // TRY (27x)
		57509: 113, // type_data (18x)
		57475: 114, // opt_term (17x)
		57508: 115, // term (17x)
		57410: 116, // compstmt (16x)
		57470: 117, // opt_newlines (14x)
		57408: 118, // comma_opt_newlines (11x)
		57448: 119, // exprs (10x)
		57356: 120, // ELSE (4x)
		57446: 121, // expr_typed_ident (4x)
		57464: 122, // opt_exprs (4x)
		57487: 123, // stmt_lets (4x)
		57504: 124, // stmt_var (4x)
		57505: 125, // stmt_var_or_lets (4x)
		57437: 126, // expr_map_content (3x)
		57463: 127, // opt_expr (3x)
		57479: 128, // stmt (3x)
		57480: 129, // stmt_break (3x)
		57481: 130, // stmt_continue (3x)
		57482: 131, // stmt_defer (3x)
		57483: 132, // stmt_expr (3x)
		57484: 133, // stmt_for (3x)
		57485: 134, // stmt_go (3x)
		57486: 135, // stmt_if (3x)
		57488: 136, // stmt_loop (3x)
		57489: 137, // stmt_module (3x)
		57490: 138, // stmt_return (3x)
		57491: 139, // stmt_select (3x)
		57497: 140, // stmt_switch (3x)
		57502: 141, // stmt_throw (3x)
		57503: 142, // stmt_try (3x)
		57409: 143, // comma_separated_exprs (2x)
		57422: 144, // expr_callable (2x)
		57439: 145, // expr_map_key_value (2x)
		57454: 146, // func_expr_typed_ident (2x)
		57456: 147, // func_expr_untyped_ident (2x)
		57462: 148, // opt_comma_opt_newlines (2x)
		57469: 149, // opt_ident (2x)
		57492: 150, // stmt_select_case (2x)
		57498: 151, // stmt_switch_case (2x)
		57501: 152, // stmt_switch_default (2x)
		57373: 153, // CATCH (1x)
		57412: 154, // dbg_content (1x)
		57413: 155, // else_if (1x)
		57414: 156, // else_if_list (1x)
		57426: 157, // expr_for_idents (1x)
		57429: 158, // expr_idents (1x)
		57438: 159, // expr_map_content_helper (1x)
		57374: 160, // FINALLY (1x)
		57449: 161, // for_content (1x)
		57450: 162, // func_expr_args (1x)
		57451: 163, // func_expr_idents (1x)
		57452: 164, // func_expr_idents_last_untyped (1x)
		57453: 165, // func_expr_idents_not_empty (1x)
		57455: 166, // func_expr_typed_idents (1x)
		57457: 167, // maybe_else (1x)
		57461: 168, // op_lets (1x)
		57465: 169, // opt_finally (1x)
		57466: 170, // opt_func_return_expr_idents (1x)
		57467: 171, // opt_func_return_expr_idents1 (1x)
		57468: 172, // opt_func_return_expr_idents2 (1x)
		57471: 173, // opt_stmt_select_cases (1x)
		57473: 174, // opt_stmt_var_or_lets (1x)
		57474: 175, // opt_switch_content (1x)
		57476: 176, // slice (1x)
		57478: 177, // start (1x)
		57493: 178, // stmt_select_cases (1x)
		57494: 179, // stmt_select_content (1x)
		57495: 180, // stmt_select_default (1x)
		57496: 181, // stmt_select_opt_default (1x)
		57499: 182, // stmt_switch_cases (1x)
		57500: 183, // stmt_switch_cases_helper (1x)
		57506: 184, // stmtsStmt (1x)
		57507: 185, // switch_content (1x)
		57397: 186, // TYPE (1x)
		57510: 187, // type_data_struct (1x)
		57406: 188, // $default (0x)
		57349: 189, // ARRAY (0x)
		57345: 190, // error (0x)
		57472: 191, // opt_stmt_select_content (0x)
		57405: 192, // UNARY (0x)
	}

	yySymNames = []string{
		"'['",
		"'*'",
		"'('",
		"'}'",
		"'{'",
		"'&'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"DEFAULT",
		"CASE",
		"IDENT",
		"';'",
		"$end",
		"MAP",
		"':'",
		"','",
		"')'",
		"'.'",
		"'!'",
		"'^'",
		"CLOSE",
		"DBG",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"']'",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"'='",
		"VARARG",
		"WALRUS",
		"slice_count",
		"typed_slice_count",
		"expr_ident",
		"const_expr",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_dbg",
		"expr_delete",
		"expr_func",
		"expr_item_or_slice",
		"expr_iterable",
		"expr_len",
		"expr_literals",
		"expr_literals_helper",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"unary_op",
		"newline",
		"expr_call_helper",
		"bin_op",
		"newlines",
		"op_assoc1",
		"CHAN",
		"STRUCT",
		"IF",
		"VAR",
		"BREAK",
		"CONTINUE",
		"DEFER",
		"FOR",
		"GO",
		"LOOP",
		"MODULE",
		"RETURN",
		"SELECT",
		"SWITCH",
		"THROW",
		"TRY",
		"type_data",
		"opt_term",
		"term",
		"compstmt",
		"opt_newlines",
		"comma_opt_newlines",
		"exprs",
		"ELSE",
		"expr_typed_ident",
		"opt_exprs",
		"stmt_lets",
		"stmt_var",
		"stmt_var_or_lets",
		"expr_map_content",
		"opt_expr",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_if",
		"stmt_loop",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"comma_separated_exprs",
		"expr_callable",
		"expr_map_key_value",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"opt_comma_opt_newlines",
		"opt_ident",
		"stmt_select_case",
		"stmt_switch_case",
		"stmt_switch_default",
		"CATCH",
		"dbg_content",
		"else_if",
		"else_if_list",
		"expr_for_idents",
		"expr_idents",
		"expr_map_content_helper",
		"FINALLY",
		"for_content",
		"func_expr_args",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"maybe_else",
		"op_lets",
		"opt_finally",
		"opt_func_return_expr_idents",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"opt_stmt_select_cases",
		"opt_stmt_var_or_lets",
		"opt_switch_content",
		"slice",
		"start",
		"stmt_select_cases",
		"stmt_select_content",
		"stmt_select_default",
		"stmt_select_opt_default",
		"stmt_switch_cases",
		"stmt_switch_cases_helper",
		"stmtsStmt",
		"switch_content",
		"TYPE",
		"type_data_struct",
		"$default",
		"ARRAY",
		"error",
		"opt_stmt_select_content",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {177, 1},
		2:   {116, 1},
		3:   {116, 3},
		4:   {184, 1},
		5:   {184, 3},
		6:   {128, 1},
		7:   {128, 1},
		8:   {128, 1},
		9:   {128, 1},
		10:  {128, 1},
		11:  {128, 1},
		12:  {128, 1},
		13:  {128, 1},
		14:  {128, 1},
		15:  {128, 1},
		16:  {128, 1},
		17:  {128, 1},
		18:  {128, 1},
		19:  {128, 1},
		20:  {128, 1},
		21:  {67, 1},
		22:  {67, 1},
		23:  {67, 1},
		24:  {67, 1},
		25:  {67, 1},
		26:  {67, 1},
		27:  {67, 1},
		28:  {67, 1},
		29:  {67, 1},
		30:  {67, 1},
		31:  {67, 1},
		32:  {67, 1},
		33:  {78, 1},
		34:  {78, 1},
		35:  {78, 1},
		36:  {78, 1},
		37:  {78, 1},
		38:  {78, 1},
		39:  {78, 1},
		40:  {78, 1},
		41:  {129, 1},
		42:  {130, 1},
		43:  {138, 2},
		44:  {141, 2},
		45:  {137, 5},
		46:  {132, 1},
		47:  {134, 2},
		48:  {131, 2},
		49:  {142, 10},
		50:  {169, 0},
		51:  {169, 4},
		52:  {174, 0},
		53:  {174, 1},
		54:  {125, 1},
		55:  {125, 1},
		56:  {124, 4},
		57:  {123, 3},
		58:  {168, 1},
		59:  {168, 1},
		60:  {135, 7},
		61:  {156, 0},
		62:  {156, 2},
		63:  {155, 6},
		64:  {167, 0},
		65:  {167, 4},
		66:  {136, 4},
		67:  {133, 5},
		68:  {161, 1},
		69:  {161, 3},
		70:  {161, 5},
		71:  {157, 1},
		72:  {157, 3},
		73:  {139, 4},
		74:  {191, 0},
		75:  {191, 1},
		76:  {179, 3},
		77:  {173, 0},
		78:  {173, 1},
		79:  {178, 1},
		80:  {178, 2},
		81:  {150, 4},
		82:  {181, 0},
		83:  {181, 1},
		84:  {180, 3},
		85:  {140, 5},
		86:  {175, 0},
		87:  {175, 1},
		88:  {185, 3},
		89:  {182, 1},
		90:  {183, 1},
		91:  {183, 1},
		92:  {183, 2},
		93:  {183, 2},
		94:  {151, 4},
		95:  {151, 4},
		96:  {152, 3},
		97:  {170, 0},
		98:  {170, 1},
		99:  {170, 3},
		100: {171, 0},
		101: {171, 1},
		102: {172, 1},
		103: {172, 3},
		104: {163, 0},
		105: {163, 1},
		106: {165, 1},
		107: {165, 1},
		108: {147, 1},
		109: {146, 1},
		110: {164, 1},
		111: {164, 3},
		112: {166, 1},
		113: {166, 3},
		114: {122, 0},
		115: {122, 1},
		116: {119, 1},
		117: {119, 3},
		118: {127, 0},
		119: {127, 1},
		120: {74, 4},
		121: {154, 1},
		122: {154, 1},
		123: {79, 4},
		124: {88, 3},
		125: {69, 2},
		126: {69, 3},
		127: {69, 4},
		128: {143, 3},
		129: {89, 5},
		130: {86, 4},
		131: {87, 2},
		132: {75, 4},
		133: {75, 6},
		134: {73, 4},
		135: {80, 1},
		136: {81, 1},
		137: {81, 1},
		138: {81, 1},
		139: {66, 1},
		140: {66, 1},
		141: {66, 1},
		142: {85, 1},
		143: {85, 1},
		144: {65, 1},
		145: {121, 2},
		146: {149, 0},
		147: {149, 1},
		148: {84, 3},
		149: {144, 1},
		150: {144, 1},
		151: {72, 2},
		152: {68, 2},
		153: {93, 4},
		154: {93, 3},
		155: {91, 1},
		156: {91, 1},
		157: {91, 1},
		158: {91, 1},
		159: {91, 1},
		160: {90, 2},
		161: {94, 1},
		162: {94, 1},
		163: {94, 1},
		164: {94, 1},
		165: {94, 1},
		166: {94, 1},
		167: {94, 1},
		168: {94, 1},
		169: {94, 1},
		170: {94, 1},
		171: {94, 1},
		172: {94, 1},
		173: {94, 1},
		174: {94, 1},
		175: {94, 1},
		176: {94, 1},
		177: {94, 1},
		178: {94, 1},
		179: {94, 1},
		180: {94, 1},
		181: {94, 1},
		182: {94, 1},
		183: {94, 1},
		184: {94, 1},
		185: {94, 1},
		186: {71, 3},
		187: {71, 3},
		188: {71, 3},
		189: {71, 1},
		190: {96, 1},
		191: {96, 1},
		192: {70, 2},
		193: {76, 9},
		194: {162, 3},
		195: {162, 2},
		196: {162, 1},
		197: {82, 4},
		198: {82, 6},
		199: {82, 8},
		200: {82, 7},
		201: {113, 1},
		202: {113, 3},
		203: {113, 2},
		204: {113, 1},
		205: {113, 5},
		206: {113, 2},
		207: {113, 6},
		208: {187, 1},
		209: {187, 3},
		210: {64, 2},
		211: {63, 2},
		212: {63, 3},
		213: {83, 4},
		214: {83, 8},
		215: {83, 3},
		216: {126, 1},
		217: {126, 3},
		218: {159, 1},
		219: {159, 3},
		220: {145, 3},
		221: {77, 4},
		222: {176, 3},
		223: {176, 2},
		224: {176, 2},
		225: {176, 1},
		226: {158, 1},
		227: {158, 3},
		228: {114, 0},
		229: {114, 1},
		230: {115, 1},
		231: {115, 2},
		232: {117, 0},
		233: {117, 1},
		234: {95, 1},
		235: {95, 2},
		236: {92, 1},
		237: {118, 2},
		238: {148, 1},
		239: {148, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [410][]uint16{
		// 0
		{12, 12, 12, 4: 12, 12, 12, 12, 248, 11: 12, 246, 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 242, 177: 241},
		{13: 240},
		{13: 239},
		{310, 329, 309, 238, 337, 330, 326, 313, 238, 238, 238, 325, 13: 238, 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 294, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 99: 302, 300, 289, 290, 296, 304, 295, 303, 293, 291, 305, 306, 292, 297, 119: 301, 123: 299, 298, 254, 128: 253, 255, 256, 267, 268, 262, 266, 260, 261, 259, 257, 265, 264, 258, 263, 184: 252},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13: 11, 11, 19: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 99: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		// 5
		{10, 10, 10, 10, 10, 10, 10, 10, 248, 10, 10, 10, 13: 10, 10, 19: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 92: 251, 99: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{8, 8, 8, 8, 8, 8, 8, 8, 248, 8, 8, 8, 13: 8, 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 92: 247, 95: 250, 99: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 117: 249},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 13: 6, 6, 16: 6, 19: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 97: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 13: 4, 4, 16: 4, 19: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 97: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 13: 9, 9, 19: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 99: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		// 10
		{7, 7, 7, 7, 7, 7, 7, 7, 248, 7, 7, 7, 13: 7, 7, 16: 7, 19: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 92: 251, 97: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13: 5, 5, 16: 5, 19: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 97: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{3: 12, 8: 248, 12, 12, 12: 246, 12, 92: 247, 95: 245, 114: 647, 648},
		{3: 236, 8: 236, 236, 236, 12: 236, 236},
		{3: 234, 8: 234, 234, 234, 12: 234, 234, 15: 234},
		// 15
		{3: 233, 8: 233, 233, 233, 12: 233, 233, 15: 233},
		{3: 232, 8: 232, 232, 232, 12: 232, 232, 15: 232},
		{3: 231, 8: 231, 231, 231, 12: 231, 231, 15: 231},
		{3: 230, 8: 230, 230, 230, 12: 230, 230, 15: 230},
		{3: 229, 8: 229, 229, 229, 12: 229, 229, 15: 229},
		// 20
		{3: 228, 8: 228, 228, 228, 12: 228, 228, 15: 228},
		{3: 227, 8: 227, 227, 227, 12: 227, 227, 15: 227},
		{3: 226, 8: 226, 226, 226, 12: 226, 226, 15: 226},
		{3: 225, 8: 225, 225, 225, 12: 225, 225, 15: 225},
		{3: 224, 8: 224, 224, 224, 12: 224, 224, 15: 224},
		// 25
		{3: 223, 8: 223, 223, 223, 12: 223, 223, 15: 223},
		{3: 222, 8: 222, 222, 222, 12: 222, 222, 15: 222},
		{3: 221, 8: 221, 221, 221, 12: 221, 221, 15: 221},
		{3: 220, 8: 220, 220, 220, 12: 220, 220, 15: 220},
		{219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 12: 219, 219, 15: 219, 219, 219, 219, 33: 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219},
		// 30
		{218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 12: 218, 218, 15: 218, 218, 218, 218, 33: 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218},
		{217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 12: 217, 217, 15: 217, 217, 217, 217, 33: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217},
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 12: 216, 216, 15: 216, 216, 216, 216, 33: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 12: 215, 215, 15: 215, 215, 215, 215, 33: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215},
		{214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 12: 214, 214, 15: 214, 214, 214, 214, 33: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214},
		// 35
		{213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 12: 213, 213, 15: 213, 213, 213, 213, 33: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
		{212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 12: 212, 212, 15: 212, 212, 212, 212, 33: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 12: 211, 211, 15: 211, 211, 211, 211, 33: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211},
		{210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 12: 210, 210, 15: 210, 210, 210, 210, 33: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
		{209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 12: 209, 209, 15: 209, 209, 209, 209, 33: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
		// 40
		{208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 12: 208, 208, 15: 208, 208, 208, 208, 33: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208},
		{207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 12: 207, 207, 15: 207, 207, 207, 207, 33: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
		{206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 12: 206, 206, 15: 206, 206, 206, 206, 33: 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206},
		{205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 12: 205, 205, 15: 205, 205, 205, 205, 33: 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
		{204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 12: 204, 204, 15: 204, 204, 204, 204, 33: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204},
		// 45
		{203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 12: 203, 203, 15: 203, 203, 203, 203, 33: 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203},
		{202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 12: 202, 202, 15: 202, 202, 202, 202, 33: 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202},
		{201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 12: 201, 201, 15: 201, 201, 201, 201, 33: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201},
		{200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 12: 200, 200, 15: 200, 200, 200, 200, 33: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
		{3: 199, 8: 199, 199, 199, 12: 199, 199, 15: 199},
		// 50
		{3: 198, 8: 198, 198, 198, 12: 198, 198, 15: 198},
		{310, 329, 309, 126, 337, 330, 326, 313, 126, 126, 126, 325, 126, 126, 336, 126, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 398, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 119: 510, 122: 646},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 645, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{11: 641},
		{385, 355, 352, 194, 5: 363, 354, 377, 194, 194, 194, 12: 194, 194, 15: 194, 124, 18: 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 124, 62: 124, 93: 351, 378, 96: 383},
		// 55
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 591, 637, 283, 332, 273, 638, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 144: 640},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 591, 637, 283, 332, 273, 638, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 144: 639},
		{4: 624},
		{3: 186, 8: 186, 186, 186, 12: 186, 186, 15: 186},
		{3: 185, 8: 185, 185, 185, 12: 185, 185, 15: 185},
		// 60
		{11: 325, 65: 619, 158: 618},
		{16: 345, 60: 616, 62: 615, 118: 401, 168: 614},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 598, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{4: 595},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 582, 188, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 579, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 100: 300, 119: 301, 123: 299, 298, 577, 157: 580, 161: 578, 174: 581},
		// 65
		{4: 560},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 537, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{2: 523},
		{2: 520},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 518, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		// 70
		{8, 8, 8, 4: 8, 8, 8, 8, 248, 11: 8, 14: 8, 16: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 515, 92: 247, 95: 250, 117: 509, 143: 516},
		{4: 507},
		{2: 504},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 503, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{2: 497},
		// 75
		{2: 494},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 12: 105, 105, 15: 105, 105, 105, 105, 33: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105},
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 12: 104, 104, 15: 104, 104, 104, 104, 33: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 12: 103, 103, 15: 103, 103, 103, 103, 33: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 12: 102, 102, 15: 102, 102, 102, 102, 33: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		// 80
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 12: 101, 101, 15: 101, 101, 101, 101, 33: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 12: 100, 100, 15: 100, 100, 100, 100, 33: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 12: 99, 99, 15: 99, 99, 99, 99, 33: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{98, 98, 352, 98, 98, 98, 98, 98, 98, 98, 98, 12: 98, 98, 15: 98, 98, 98, 98, 33: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 93: 493},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 12: 97, 97, 15: 97, 97, 97, 97, 33: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		// 85
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 33: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 97: 96, 96},
		{85, 85, 85, 4: 85, 85, 85, 85, 11: 85, 14: 85, 19: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{84, 84, 84, 4: 84, 84, 84, 84, 11: 84, 14: 84, 19: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{83, 83, 83, 4: 83, 83, 83, 83, 11: 83, 14: 83, 19: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 82, 4: 82, 82, 82, 82, 11: 82, 14: 82, 19: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		// 90
		{81, 81, 81, 4: 81, 81, 81, 81, 11: 81, 14: 81, 19: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 492, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 12: 51, 51, 15: 51, 51, 51, 51, 33: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{2: 94, 11: 462, 149: 463},
		{2: 448},
		// 95
		{419, 414, 11: 412, 14: 416, 63: 335, 415, 97: 417, 418, 113: 447},
		{411, 4: 410},
		{8, 8, 8, 8, 8, 8, 8, 8, 248, 11: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 92: 247, 95: 250, 117: 339, 126: 338},
		{3: 409},
		{310, 329, 309, 24, 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 340, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 145: 342, 159: 341},
		// 100
		{385, 355, 352, 5: 363, 354, 377, 15: 384, 18: 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{3: 8, 8: 248, 16: 345, 92: 247, 95: 250, 117: 346, 344, 148: 343},
		{3: 22, 8: 22, 16: 22},
		{3: 23},
		{310, 329, 309, 2, 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 340, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 145: 348},
		// 105
		{8, 8, 8, 8, 8, 8, 8, 8, 248, 11: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 92: 247, 95: 250, 97: 8, 8, 117: 347},
		{3: 1, 33: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 11: 3, 14: 3, 19: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 97: 3, 3},
		{3: 21, 8: 21, 16: 21},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 406, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		// 110
		{11: 405},
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 12: 88, 88, 15: 88, 88, 88, 88, 33: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 17: 126, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 398, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 119: 397, 122: 399},
		{79, 79, 79, 4: 79, 79, 79, 79, 11: 79, 14: 79, 19: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{78, 78, 78, 4: 78, 78, 78, 78, 11: 78, 14: 78, 19: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		// 115
		{77, 77, 77, 4: 77, 77, 77, 77, 11: 77, 14: 77, 19: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 4: 76, 76, 76, 76, 11: 76, 14: 76, 19: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		{75, 75, 75, 4: 75, 75, 75, 75, 11: 75, 14: 75, 19: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{74, 74, 74, 4: 74, 74, 74, 74, 11: 74, 14: 74, 19: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{73, 73, 73, 4: 73, 73, 73, 73, 11: 73, 14: 73, 19: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		// 120
		{72, 72, 72, 4: 72, 72, 72, 72, 11: 72, 14: 72, 19: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		{71, 71, 71, 4: 71, 71, 71, 71, 11: 71, 14: 71, 19: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		{70, 70, 70, 4: 70, 70, 70, 70, 11: 70, 14: 70, 19: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{69, 69, 69, 4: 69, 69, 69, 69, 11: 69, 14: 69, 19: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{68, 68, 68, 4: 68, 68, 68, 68, 11: 68, 14: 68, 19: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		// 125
		{67, 67, 67, 4: 67, 67, 67, 67, 11: 67, 14: 67, 19: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{66, 66, 66, 4: 66, 66, 66, 66, 11: 66, 14: 66, 19: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{65, 65, 65, 4: 65, 65, 65, 65, 11: 65, 14: 65, 19: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		{64, 64, 64, 4: 64, 64, 64, 64, 11: 64, 14: 64, 19: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{63, 63, 63, 4: 63, 63, 63, 63, 11: 63, 14: 63, 19: 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		// 130
		{62, 62, 62, 4: 62, 62, 62, 62, 11: 62, 14: 62, 19: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 4: 61, 61, 61, 61, 11: 61, 14: 61, 19: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{60, 60, 60, 4: 60, 60, 60, 60, 11: 60, 14: 60, 19: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 4: 59, 59, 59, 59, 11: 59, 14: 59, 19: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{58, 58, 58, 4: 58, 58, 58, 58, 11: 58, 14: 58, 19: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		// 135
		{57, 57, 57, 4: 57, 57, 57, 57, 11: 57, 14: 57, 19: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{56, 56, 56, 4: 56, 56, 56, 56, 11: 56, 14: 56, 19: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{55, 55, 55, 4: 55, 55, 55, 55, 11: 55, 14: 55, 19: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 396, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 395, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		// 140
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 394, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 12: 50, 50, 15: 50, 50, 50, 50, 33: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 12: 49, 49, 15: 49, 49, 49, 49, 33: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 12: 48, 48, 15: 48, 48, 48, 48, 33: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 393, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		// 145
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 388, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 386, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 176: 387},
		{385, 355, 352, 5: 363, 354, 377, 15: 391, 18: 350, 33: 15, 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{33: 390},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 389, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{385, 355, 352, 5: 363, 354, 377, 18: 350, 33: 16, 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		// 150
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 12: 19, 19, 15: 19, 19, 19, 19, 33: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 17, 63: 335, 311, 323, 319, 392, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{385, 355, 352, 5: 363, 354, 377, 18: 350, 33: 18, 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{385, 355, 352, 20, 5: 363, 354, 377, 20, 16: 20, 18: 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{385, 52, 352, 52, 52, 52, 52, 52, 52, 52, 52, 12: 52, 52, 15: 52, 52, 52, 350, 33: 52, 380, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 382, 52, 52, 52, 52, 52, 52, 381, 52, 52, 52, 52, 52, 52, 93: 351, 378, 96: 383},
		// 155
		{385, 355, 352, 53, 53, 363, 354, 53, 53, 53, 53, 12: 53, 53, 15: 53, 53, 53, 350, 33: 53, 380, 358, 353, 356, 53, 53, 53, 361, 53, 53, 53, 53, 53, 53, 53, 382, 53, 53, 53, 53, 53, 53, 381, 53, 359, 360, 53, 53, 53, 93: 351, 378, 96: 383},
		{385, 355, 352, 54, 54, 363, 354, 377, 54, 54, 54, 12: 54, 54, 15: 54, 54, 54, 350, 33: 54, 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 54, 54, 54, 93: 351, 378, 96: 383},
		{16: 345, 125, 61: 402, 118: 401},
		{385, 355, 352, 124, 5: 363, 354, 377, 124, 124, 124, 12: 124, 124, 15: 124, 124, 124, 350, 33: 124, 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 61: 124, 93: 351, 378, 96: 383},
		{17: 400},
		// 160
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 12: 86, 86, 15: 86, 86, 86, 86, 33: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 404, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{17: 403},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 12: 87, 87, 15: 87, 87, 87, 87, 33: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{385, 355, 352, 123, 5: 363, 354, 377, 123, 123, 123, 12: 123, 123, 15: 123, 123, 123, 350, 33: 123, 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 123, 123, 123, 93: 351, 378, 96: 383},
		// 165
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 12: 92, 92, 15: 92, 92, 92, 92, 33: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{385, 355, 352, 5: 363, 354, 377, 15: 407, 18: 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 408, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{385, 355, 352, 111, 111, 363, 354, 377, 111, 111, 111, 12: 111, 111, 15: 111, 111, 111, 350, 33: 111, 380, 358, 353, 356, 368, 366, 349, 361, 364, 111, 111, 379, 367, 369, 111, 382, 111, 365, 370, 111, 362, 111, 381, 111, 359, 360, 111, 111, 111, 93: 351, 378, 96: 383},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 12: 25, 25, 15: 25, 25, 25, 25, 33: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		// 170
		{8, 8, 8, 8, 8, 8, 8, 8, 248, 11: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 92: 247, 95: 250, 117: 339, 126: 445},
		{419, 414, 11: 412, 14: 416, 63: 335, 415, 97: 417, 418, 113: 413},
		{3: 39, 39, 8: 39, 16: 39, 39, 39, 33: 39},
		{18: 432, 33: 440},
		{419, 414, 11: 412, 14: 416, 63: 335, 415, 97: 417, 418, 113: 439},
		// 175
		{3: 36, 36, 8: 36, 16: 36, 36, 36, 33: 36},
		{435},
		{419, 414, 11: 412, 14: 416, 63: 335, 415, 97: 417, 418, 113: 434},
		{4: 422},
		{33: 420},
		// 180
		{419, 29, 11: 29, 14: 29, 63: 421, 97: 29, 29},
		{28, 28, 11: 28, 14: 28, 97: 28, 28},
		{8: 248, 11: 8, 92: 247, 95: 250, 117: 423},
		{11: 325, 65: 424, 121: 426, 187: 425},
		{419, 414, 11: 412, 14: 416, 63: 335, 415, 97: 417, 418, 113: 431},
		// 185
		{3: 8, 8: 248, 16: 345, 92: 247, 95: 250, 117: 427, 428},
		{3: 32, 8: 32, 16: 32},
		{3: 430},
		{11: 325, 65: 424, 121: 429},
		{3: 31, 8: 31, 16: 31},
		// 190
		{3: 33, 33, 8: 33, 16: 33, 33, 33, 33: 33},
		{3: 95, 8: 95, 16: 95, 95, 432},
		{11: 433},
		{3: 38, 38, 8: 38, 16: 38, 38, 38, 33: 38},
		{3: 34, 34, 8: 34, 16: 34, 34, 432, 33: 34},
		// 195
		{419, 414, 11: 412, 14: 416, 63: 335, 415, 97: 417, 418, 113: 436},
		{18: 432, 33: 437},
		{419, 414, 11: 412, 14: 416, 63: 335, 415, 97: 417, 418, 113: 438},
		{3: 35, 35, 8: 35, 16: 35, 35, 432, 33: 35},
		{3: 37, 37, 8: 37, 16: 37, 37, 432, 33: 37},
		// 200
		{419, 414, 11: 412, 14: 416, 63: 335, 415, 97: 417, 418, 113: 441},
		{4: 442, 18: 432},
		{8, 8, 8, 8, 8, 8, 8, 8, 248, 11: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 92: 247, 95: 250, 117: 339, 126: 443},
		{3: 444},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12: 26, 26, 15: 26, 26, 26, 26, 33: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		// 205
		{3: 446},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 12: 27, 27, 15: 27, 27, 27, 27, 33: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{3: 30, 30, 8: 30, 16: 30, 30, 432, 33: 30},
		{419, 414, 11: 412, 14: 416, 63: 335, 415, 97: 417, 418, 113: 449, 186: 450},
		{16: 456, 455, 432},
		// 210
		{11: 451},
		{16: 452},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 453, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{385, 355, 352, 5: 363, 354, 377, 17: 454, 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 12: 40, 40, 15: 40, 40, 40, 40, 33: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		// 215
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 12: 43, 43, 15: 43, 43, 43, 43, 33: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 457, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{385, 355, 352, 5: 363, 354, 377, 16: 459, 458, 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 12: 42, 42, 15: 42, 42, 42, 42, 33: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 460, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		// 220
		{385, 355, 352, 5: 363, 354, 377, 17: 461, 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 12: 41, 41, 15: 41, 41, 41, 41, 33: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{2: 93, 4: 93},
		{2: 464},
		{11: 468, 17: 136, 65: 424, 121: 469, 146: 471, 470, 162: 472, 473, 466, 465, 467},
		// 225
		{16: 345, 135, 118: 489},
		{16: 134, 134, 61: 487},
		{16: 133, 133},
		{96, 96, 11: 96, 14: 96, 16: 132, 132, 61: 132, 97: 96, 96},
		{16: 131, 131},
		// 230
		{16: 130, 130, 61: 130},
		{16: 128, 128},
		{17: 474},
		{17: 44},
		{419, 414, 476, 4: 143, 11: 412, 14: 416, 63: 335, 415, 97: 417, 418, 113: 475, 170: 477},
		// 235
		{4: 142, 18: 432},
		{419, 414, 11: 412, 14: 416, 17: 140, 63: 335, 415, 97: 417, 418, 113: 483, 171: 481, 482},
		{4: 478},
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 11: 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 479},
		{3: 480},
		// 240
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 12: 47, 47, 15: 47, 47, 47, 47, 33: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{17: 486},
		{16: 345, 139, 118: 484},
		{16: 138, 138, 432},
		{419, 414, 11: 412, 14: 416, 63: 335, 415, 97: 417, 418, 113: 485},
		// 245
		{16: 137, 137, 432},
		{4: 141},
		{419, 414, 11: 412, 14: 416, 17: 45, 63: 335, 415, 97: 417, 418, 113: 488},
		{17: 46, 432},
		{11: 468, 65: 424, 121: 469, 146: 491, 490},
		// 250
		{16: 129, 129, 61: 129},
		{16: 127, 127},
		{385, 80, 352, 80, 80, 80, 80, 80, 80, 80, 80, 12: 80, 80, 15: 80, 80, 80, 350, 33: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 93: 351, 378, 96: 383},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 12: 89, 89, 15: 89, 89, 89, 89, 33: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 495, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		// 255
		{385, 355, 352, 5: 363, 354, 377, 17: 496, 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 12: 106, 106, 15: 106, 106, 106, 106, 33: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 498, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{385, 355, 352, 5: 363, 354, 377, 16: 500, 499, 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 12: 108, 108, 15: 108, 108, 108, 108, 33: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108},
		// 260
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 501, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{385, 355, 352, 5: 363, 354, 377, 17: 502, 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 12: 107, 107, 15: 107, 107, 107, 107, 33: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{385, 355, 352, 109, 109, 363, 354, 377, 109, 109, 109, 12: 109, 109, 15: 109, 109, 109, 350, 33: 109, 380, 358, 353, 356, 368, 366, 349, 361, 364, 109, 109, 379, 367, 369, 109, 382, 109, 365, 370, 109, 362, 109, 381, 109, 359, 360, 109, 109, 109, 93: 351, 378, 96: 383},
		{419, 414, 11: 412, 14: 416, 63: 335, 415, 97: 417, 418, 113: 505},
		// 265
		{17: 506, 432},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 12: 110, 110, 15: 110, 110, 110, 110, 33: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		{8, 8, 8, 8, 8, 8, 8, 8, 248, 11: 8, 14: 8, 16: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 92: 247, 95: 250, 117: 509, 143: 508},
		{3: 514},
		{310, 329, 309, 126, 337, 330, 326, 313, 126, 11: 325, 14: 336, 16: 126, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 126, 63: 335, 311, 323, 319, 398, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 119: 510, 122: 511},
		// 270
		{3: 125, 8: 125, 125, 125, 12: 125, 125, 15: 125, 345, 33: 125, 118: 401},
		{3: 8, 8: 248, 16: 345, 33: 8, 92: 247, 95: 250, 117: 346, 513, 148: 512},
		{3: 112, 33: 112},
		{3: 2, 33: 2},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12: 113, 113, 15: 113, 113, 113, 113, 33: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113},
		// 275
		{419, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 29, 115, 115, 29, 115, 115, 115, 115, 33: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 421, 97: 29, 29},
		{33: 517},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 12: 114, 114, 15: 114, 114, 114, 114, 33: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114},
		{385, 355, 352, 5: 363, 354, 377, 17: 519, 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 12: 116, 116, 15: 116, 116, 116, 116, 33: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
		// 280
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 521, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{385, 355, 352, 5: 363, 354, 377, 17: 522, 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 12: 117, 117, 15: 117, 117, 117, 117, 33: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{310, 530, 309, 4: 337, 330, 326, 313, 11: 529, 14: 531, 17: 122, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 528, 323, 319, 524, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 97: 417, 418, 113: 527, 127: 526, 154: 525},
		{385, 355, 352, 4: 121, 363, 354, 377, 12: 121, 17: 121, 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		// 285
		{17: 536},
		{17: 119},
		{17: 118, 432},
		{4: 507, 17: 36, 36},
		{96, 96, 96, 5: 96, 96, 96, 17: 96, 96, 34: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		// 290
		{419, 82, 82, 4: 82, 82, 82, 82, 11: 412, 14: 416, 19: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 63: 335, 415, 97: 417, 418, 113: 439},
		{532, 4: 410},
		{419, 414, 11: 412, 14: 416, 63: 335, 415, 97: 417, 418, 113: 533},
		{18: 432, 33: 534},
		{419, 414, 11: 412, 14: 416, 63: 335, 415, 97: 417, 418, 113: 535},
		// 295
		{4: 442, 17: 35, 432},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 12: 120, 120, 15: 120, 120, 120, 120, 33: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{385, 355, 352, 4: 538, 363, 354, 377, 18: 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{3: 154, 8: 248, 8, 8, 92: 247, 95: 250, 117: 541, 175: 539, 185: 540},
		{3: 559},
		// 300
		{3: 153},
		{9: 547, 546, 151: 545, 544, 182: 542, 543},
		{3: 8, 8: 248, 92: 247, 95: 250, 117: 558},
		{3: 151, 8: 151, 547, 546, 151: 556, 557},
		{3: 150, 8: 150, 150, 150},
		// 305
		{3: 149, 8: 149, 149, 149},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 126, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 550, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 119: 510, 122: 551},
		{15: 548},
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 12, 12, 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 549},
		{3: 144, 8: 144, 144, 144},
		// 310
		{385, 355, 352, 5: 363, 354, 377, 15: 554, 124, 18: 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{15: 552},
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 12, 12, 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 553},
		{3: 145, 8: 145, 145, 145},
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 12, 12, 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 555},
		// 315
		{3: 146, 8: 146, 146, 146},
		{3: 148, 8: 148, 148, 148},
		{3: 147, 8: 147, 147, 147},
		{3: 152},
		{3: 155, 8: 155, 155, 155, 12: 155, 155, 15: 155},
		// 320
		{3: 8, 8: 248, 8, 8, 92: 247, 95: 250, 117: 562, 179: 561},
		{3: 576},
		{3: 163, 9: 163, 566, 150: 565, 173: 563, 178: 564},
		{3: 158, 9: 573, 180: 572, 571},
		{3: 162, 9: 162, 566, 150: 570},
		// 325
		{3: 161, 9: 161, 161},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 294, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 99: 302, 300, 289, 290, 296, 304, 295, 303, 293, 291, 305, 306, 292, 297, 119: 301, 123: 299, 298, 254, 128: 567, 255, 256, 267, 268, 262, 266, 260, 261, 259, 257, 265, 264, 258, 263},
		{15: 568},
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 12, 12, 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 569},
		{3: 159, 9: 159, 159},
		// 330
		{3: 160, 9: 160, 160},
		{3: 164},
		{3: 157},
		{15: 574},
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 11: 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 575},
		// 335
		{3: 156},
		{3: 167, 8: 167, 167, 167, 12: 167, 167, 15: 167},
		{12: 187},
		{4: 592},
		{385, 355, 352, 4: 172, 363, 354, 377, 16: 124, 18: 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 124, 62: 124, 93: 351, 378, 96: 383},
		// 340
		{34: 589},
		{12: 585},
		{96, 96, 96, 4: 96, 96, 96, 96, 16: 583, 18: 96, 34: 169, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 62: 96},
		{11: 584},
		{34: 168},
		// 345
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 122, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 524, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 127: 586},
		{12: 587},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 524, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 127: 588},
		{4: 170},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 591, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 590, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		// 350
		{219, 219, 219, 4: 171, 219, 219, 219, 18: 219, 34: 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219},
		{385, 355, 352, 5: 363, 354, 377, 18: 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 11: 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 593},
		{3: 594},
		{3: 173, 8: 173, 173, 173, 12: 173, 173, 15: 173},
		// 355
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 11: 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 596},
		{3: 597},
		{3: 174, 8: 174, 174, 174, 12: 174, 174, 15: 174},
		{385, 355, 352, 4: 599, 363, 354, 377, 18: 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 11: 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 600},
		// 360
		{3: 601},
		{3: 179, 8: 179, 179, 179, 12: 179, 179, 15: 179, 120: 179, 156: 602},
		{3: 176, 8: 176, 176, 176, 12: 176, 176, 15: 176, 120: 605, 155: 604, 167: 603},
		{3: 180, 8: 180, 180, 180, 12: 180, 180, 15: 180},
		{3: 178, 8: 178, 178, 178, 12: 178, 178, 15: 178, 120: 178},
		// 365
		{4: 607, 99: 606},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 610, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331},
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 11: 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 608},
		{3: 609},
		{3: 175, 8: 175, 175, 175, 12: 175, 175, 15: 175},
		// 370
		{385, 355, 352, 4: 611, 363, 354, 377, 18: 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 11: 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 612},
		{3: 613},
		{3: 177, 8: 177, 177, 177, 12: 177, 177, 15: 177, 120: 177},
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 398, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 119: 617},
		// 375
		{182, 182, 182, 4: 182, 182, 182, 182, 11: 182, 14: 182, 19: 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182},
		{181, 181, 181, 4: 181, 181, 181, 181, 11: 181, 14: 181, 19: 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181},
		{3: 183, 8: 183, 183, 183, 12: 183, 183, 15: 183, 345, 118: 401},
		{16: 345, 60: 620, 118: 621},
		{16: 14, 60: 14},
		// 380
		{310, 329, 309, 4: 337, 330, 326, 313, 11: 325, 14: 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 398, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 119: 623},
		{11: 325, 65: 622},
		{16: 13, 60: 13},
		{3: 184, 8: 184, 184, 184, 12: 184, 184, 15: 184, 345, 118: 401},
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 11: 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 625},
		// 385
		{3: 626},
		{153: 627},
		{4: 94, 11: 462, 149: 628},
		{4: 629},
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 11: 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 630},
		// 390
		{3: 631},
		{3: 190, 8: 190, 190, 190, 12: 190, 190, 15: 190, 160: 633, 169: 632},
		{3: 191, 8: 191, 191, 191, 12: 191, 191, 15: 191},
		{4: 634},
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 11: 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 635},
		// 395
		{3: 636},
		{3: 189, 8: 189, 189, 189, 12: 189, 189, 15: 189},
		{204, 204, 204, 90, 5: 204, 204, 204, 90, 90, 90, 12: 90, 90, 15: 90, 18: 204, 34: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204},
		{203, 203, 203, 91, 5: 203, 203, 203, 91, 91, 91, 12: 91, 91, 15: 91, 18: 203, 34: 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203},
		{3: 192, 8: 192, 192, 192, 12: 192, 192, 15: 192},
		// 400
		{3: 193, 8: 193, 193, 193, 12: 193, 193, 15: 193},
		{4: 642},
		{12, 12, 12, 12, 12, 12, 12, 12, 248, 11: 12, 246, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 92: 247, 95: 245, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 243, 244, 643},
		{3: 644},
		{3: 195, 8: 195, 195, 195, 12: 195, 195, 15: 195},
		// 405
		{385, 355, 352, 196, 5: 363, 354, 377, 196, 196, 196, 12: 196, 196, 15: 196, 18: 350, 34: 380, 358, 353, 356, 368, 366, 349, 361, 364, 375, 374, 379, 367, 369, 372, 382, 373, 365, 370, 376, 362, 371, 381, 357, 359, 360, 93: 351, 378, 96: 383},
		{3: 197, 8: 197, 197, 197, 12: 197, 197, 15: 197},
		{3: 237, 8: 237, 237, 237, 13: 237},
		{310, 329, 309, 11, 337, 330, 326, 313, 11, 11, 11, 325, 13: 11, 336, 19: 327, 328, 315, 307, 314, 321, 333, 308, 334, 312, 322, 317, 318, 320, 63: 335, 311, 323, 319, 294, 284, 283, 332, 273, 285, 279, 275, 280, 272, 287, 269, 274, 270, 316, 277, 281, 324, 286, 276, 278, 282, 288, 271, 331, 99: 302, 300, 289, 290, 296, 304, 295, 303, 293, 291, 305, 306, 292, 297, 119: 301, 123: 299, 298, 254, 128: 649, 255, 256, 267, 268, 262, 266, 260, 261, 259, 257, 265, 264, 258, 263},
		{3: 235, 8: 235, 235, 235, 12: 235, 235},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 190

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmt
			}
		}
	case 2:
		{
			yyVAL.stmt = nil
		}
	case 3:
		{
			yyVAL.stmt = yyS[yypt-1].stmtsStmt
		}
	case 4:
		{
			yyVAL.stmtsStmt = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 5:
		{
			yyS[yypt-2].stmtsStmt.Stmts = append(yyS[yypt-2].stmtsStmt.Stmts, yyS[yypt-0].stmt)
		}
	case 41:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 42:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 43:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 44:
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 45:
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyS[yypt-3].tok.Lit, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 46:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 47:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Go = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Go = true
			}
			yyVAL.stmt = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 48:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Defer = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Defer = true
			}
			yyVAL.stmt = &ast.DeferStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 49:
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyS[yypt-7].stmt, Var: yyS[yypt-4].opt_ident.Lit, Catch: yyS[yypt-2].stmt, Finally: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 50:
		{
			yyVAL.stmt = nil
		}
	case 51:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 52:
		{
			yyVAL.stmt = nil
		}
	case 53:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 56:
		{
			isItem := false
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					arr := []ast.Expr{}
					for _, el := range yyS[yypt-2].expr_idents {
						arr = append(arr, &ast.IdentExpr{Lit: el})
					}
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: arr, Rhs: yyS[yypt-0].exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 57:
		{
			isItem := false
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: yyS[yypt-1].op_lets}
				if len(yyS[yypt-2].exprs) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].exprs) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-2].exprs[0].Position())
		}
	case 58:
		{
			yyVAL.op_lets = true
		}
	case 59:
		{
			yyVAL.op_lets = false
		}
	case 60:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-5].expr, Then: yyS[yypt-3].stmt, ElseIf: yyS[yypt-1].else_if_list, Else: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 61:
		{
			yyVAL.else_if_list = []ast.Stmt{}
		}
	case 62:
		{
			yyS[yypt-1].else_if_list = append(yyS[yypt-1].else_if_list, yyS[yypt-0].stmt)
			yyVAL.else_if_list = yyS[yypt-1].else_if_list
		}
	case 63:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmt}
		}
	case 64:
		{
			yyVAL.stmt = nil
		}
	case 65:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 66:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 67:
		{
			if el, ok := yyS[yypt-3].stmt.(*ast.LoopStmt); ok {
				el.Stmt = yyS[yypt-1].stmt
			} else if el, ok := yyS[yypt-3].stmt.(*ast.ForStmt); ok {
				el.Stmt = yyS[yypt-1].stmt
			} else if el, ok := yyS[yypt-3].stmt.(*ast.CForStmt); ok {
				el.Stmt = yyS[yypt-1].stmt
			}
			yyVAL.stmt = yyS[yypt-3].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 68:
		{
			yyVAL.stmt = &ast.LoopStmt{Expr: yyS[yypt-0].expr}
		}
	case 69:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: yyS[yypt-2].expr_idents, Value: yyS[yypt-0].expr}
		}
	case 70:
		{
			yyVAL.stmt = &ast.CForStmt{Stmt1: yyS[yypt-4].stmt, Expr2: yyS[yypt-2].expr, Expr3: yyS[yypt-0].expr}
		}
	case 71:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 72:
		{
			yyVAL.expr_idents = []string{yyS[yypt-2].tok.Lit, yyS[yypt-0].tok.Lit}
		}
	case 73:
		{
			yyVAL.stmt = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 74:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{}
		}
	case 75:
		{
			yyVAL.stmt_select_content = yyS[yypt-0].stmt_select_content
		}
	case 76:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{Cases: yyS[yypt-1].else_if_list, Default: yyS[yypt-0].stmt}
		}
	case 77:
		{
			yyVAL.else_if_list = nil
		}
	case 78:
		{
			yyVAL.else_if_list = yyS[yypt-0].else_if_list
		}
	case 79:
		{
			yyVAL.else_if_list = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 80:
		{
			yyVAL.else_if_list = append(yyVAL.else_if_list, yyS[yypt-0].stmt)
		}
	case 81:
		{
			yyVAL.stmt = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 82:
		{
			yyVAL.stmt = nil
		}
	case 83:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 84:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 85:
		{
			yyS[yypt-1].stmt_switch_cases.Expr = yyS[yypt-3].expr
			yyVAL.stmt = yyS[yypt-1].stmt_switch_cases
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 86:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 87:
		{
			yyVAL.stmt_switch_cases = yyS[yypt-0].stmt_switch_cases
		}
	case 88:
		{
			yyVAL.stmt_switch_cases = yyS[yypt-1].stmt_switch_cases
		}
	case 89:
		{
			yyVAL.stmt_switch_cases = yyS[yypt-0].stmt_switch_cases
		}
	case 90:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyS[yypt-0].stmt}
		}
	case 91:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 92:
		{
			yyS[yypt-1].stmt_switch_cases.Cases = append(yyS[yypt-1].stmt_switch_cases.Cases, yyS[yypt-0].stmt)
			yyVAL.stmt_switch_cases = yyS[yypt-1].stmt_switch_cases
		}
	case 93:
		{
			if yyS[yypt-1].stmt_switch_cases.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyS[yypt-1].stmt_switch_cases.Default = yyS[yypt-0].stmt
		}
	case 94:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyS[yypt-2].expr}, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 95:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].exprs, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 96:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 97:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 98:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 99:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents
		}
	case 100:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{}
		}
	case 101:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-0].opt_func_return_expr_idents
		}
	case 102:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 103:
		{
			yyVAL.opt_func_return_expr_idents = append(yyS[yypt-2].opt_func_return_expr_idents, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 104:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 105:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents
		}
	case 108:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 109:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].expr_typed_ident.Name, TypeData: yyS[yypt-0].expr_typed_ident.TypeData}
		}
	case 110:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 111:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 112:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 113:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 114:
		{
			yyVAL.exprs = nil
		}
	case 115:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 116:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 117:
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 118:
		{
			yyVAL.expr = nil
		}
	case 119:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 120:
		{
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 121:
		{
			yyVAL.expr = &ast.DbgExpr{Expr: yyS[yypt-0].expr}
		}
	case 122:
		{
			yyVAL.expr = &ast.DbgExpr{TypeData: yyS[yypt-0].type_data}
		}
	case 123:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 124:
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 125:
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 126:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 127:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprs, TypeData: yyS[yypt-3].type_data}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 128:
		{
			yyVAL.exprs = yyS[yypt-1].exprs
		}
	case 129:
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 130:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 131:
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 132:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 133:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 134:
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 135:
		{
			yyVAL.expr = yyS[yypt-0].expr
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 136:
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 137:
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 138:
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 144:
		{
			yyVAL.expr = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 145:
		{
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: yyS[yypt-0].type_data}
		}
	case 146:
		{
			yyVAL.opt_ident = nil
		}
	case 147:
		{
			yyVAL.opt_ident = &yyS[yypt-0].tok
		}
	case 148:
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 151:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 152:
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyS[yypt-1].expr, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 153:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-2].exprs, VarArg: true}
		}
	case 154:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-1].exprs}
		}
	case 155:
		{
			yyVAL.str = "-"
		}
	case 156:
		{
			yyVAL.str = "!"
		}
	case 157:
		{
			yyVAL.str = "^"
		}
	case 158:
		{
			yyVAL.str = "*"
		}
	case 159:
		{
			yyVAL.str = "&"
		}
	case 160:
		{
			if yyS[yypt-1].str == "&" {
				if el, ok := yyS[yypt-0].expr.(*ast.IdentExpr); ok {
					yyVAL.expr = &ast.AddrExpr{Expr: el}
				} else if el, ok := yyS[yypt-0].expr.(*ast.MemberExpr); ok {
					yyVAL.expr = el
				}
			} else if yyS[yypt-1].str == "*" {
				yyVAL.expr = &ast.DerefExpr{Expr: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.UnaryExpr{Operator: yyS[yypt-1].str, Expr: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 161:
		{
			yyVAL.str = "+"
		}
	case 162:
		{
			yyVAL.str = "-"
		}
	case 163:
		{
			yyVAL.str = "*"
		}
	case 164:
		{
			yyVAL.str = "/"
		}
	case 165:
		{
			yyVAL.str = "**"
		}
	case 166:
		{
			yyVAL.str = "%"
		}
	case 167:
		{
			yyVAL.str = "<<"
		}
	case 168:
		{
			yyVAL.str = ">>"
		}
	case 169:
		{
			yyVAL.str = "|"
		}
	case 170:
		{
			yyVAL.str = "||"
		}
	case 171:
		{
			yyVAL.str = "&"
		}
	case 172:
		{
			yyVAL.str = "&&"
		}
	case 173:
		{
			yyVAL.str = "!="
		}
	case 174:
		{
			yyVAL.str = ">"
		}
	case 175:
		{
			yyVAL.str = ">="
		}
	case 176:
		{
			yyVAL.str = "<"
		}
	case 177:
		{
			yyVAL.str = "<="
		}
	case 178:
		{
			yyVAL.str = "??"
		}
	case 179:
		{
			yyVAL.str = "+="
		}
	case 180:
		{
			yyVAL.str = "-="
		}
	case 181:
		{
			yyVAL.str = "*="
		}
	case 182:
		{
			yyVAL.str = "/="
		}
	case 183:
		{
			yyVAL.str = "&="
		}
	case 184:
		{
			yyVAL.str = "|="
		}
	case 185:
		{
			yyVAL.str = "<-"
		}
	case 186:
		{
			if yyS[yypt-1].str == "??" {
				yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "<-" {
				yyVAL.expr = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "+=" ||
				yyS[yypt-1].str == "-=" ||
				yyS[yypt-1].str == "*=" ||
				yyS[yypt-1].str == "/=" ||
				yyS[yypt-1].str == "&=" ||
				yyS[yypt-1].str == "|=" {
				yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 187:
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 188:
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 190:
		{
			yyVAL.str = "++"
		}
	case 191:
		{
			yyVAL.str = "--"
		}
	case 192:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: yyS[yypt-0].str}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 193:
		{
			f := &ast.FuncExpr{Params: yyS[yypt-5].func_expr_args.Params, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].stmt, VarArg: yyS[yypt-5].func_expr_args.VarArg}
			if yyS[yypt-5].func_expr_args.TypeData != nil {
				f.Params[len(f.Params)-1].TypeData = yyS[yypt-5].func_expr_args.TypeData
			}
			if yyS[yypt-7].opt_ident != nil {
				f.Name = yyS[yypt-7].opt_ident.Lit
			}
			yyVAL.expr = f
			yyVAL.expr.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 194:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-2].func_expr_idents, VarArg: true, TypeData: yyS[yypt-0].type_data}
		}
	case 195:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-1].func_expr_idents, VarArg: true, TypeData: nil}
		}
	case 196:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-0].func_expr_idents, VarArg: false, TypeData: nil}
		}
	case 197:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 198:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 199:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 200:
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 201:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 202:
		{
			if yyS[yypt-2].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyS[yypt-2].type_data.Env = append(yyS[yypt-2].type_data.Env, yyS[yypt-2].type_data.Name)
				yyS[yypt-2].type_data.Name = yyS[yypt-0].tok.Lit
			}
		}
	case 203:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 204:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 205:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 206:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 207:
		{
			yyVAL.type_data = yyS[yypt-2].type_data
		}
	case 208:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-0].expr_typed_ident.Name}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].expr_typed_ident.TypeData}}
		}
	case 209:
		{
			if yyS[yypt-2].type_data == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data.StructNames = append(yyVAL.type_data.StructNames, yyS[yypt-0].expr_typed_ident.Name)
			yyVAL.type_data.StructTypes = append(yyVAL.type_data.StructTypes, yyS[yypt-0].expr_typed_ident.TypeData)
		}
	case 210:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 211:
		{
			yyVAL.slice_count = 1
		}
	case 212:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 213:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyS[yypt-1].expr_map_content
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 214:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-5].type_data, SubType: yyS[yypt-3].type_data}
			yyVAL.expr = yyS[yypt-1].expr_map_content
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 215:
		{
			yyVAL.expr = yyS[yypt-1].expr_map_content
			yyVAL.expr.SetPosition(yyS[yypt-1].expr_map_content.Position())
		}
	case 216:
		{
			yyVAL.expr_map_content = &ast.MapExpr{}
		}
	case 217:
		{
			yyVAL.expr_map_content = yyS[yypt-1].expr_map_content
		}
	case 218:
		{
			yyVAL.expr_map_content = &ast.MapExpr{Keys: []ast.Expr{yyS[yypt-0].exprs[0]}, Values: []ast.Expr{yyS[yypt-0].exprs[1]}}
		}
	case 219:
		{
			yyVAL.expr_map_content.Keys = append(yyVAL.expr_map_content.Keys, yyS[yypt-0].exprs[0])
			yyVAL.expr_map_content.Values = append(yyVAL.expr_map_content.Values, yyS[yypt-0].exprs[1])
		}
	case 220:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 221:
		{
			if el, ok := yyS[yypt-1].expr.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-3].expr
			} else if el, ok := yyS[yypt-1].expr.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-3].expr
			}
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 222:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: yyS[yypt-0].expr}
		}
	case 223:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-1].expr, End: nil}
		}
	case 224:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: nil, End: yyS[yypt-0].expr}
		}
	case 225:
		{
			yyVAL.expr = &ast.ItemExpr{Index: yyS[yypt-0].expr}
		}
	case 226:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].expr.(*ast.IdentExpr).Lit}
		}
	case 227:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].expr.(*ast.IdentExpr).Lit)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
