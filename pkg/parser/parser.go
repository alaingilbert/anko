// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:61
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_cases_helper      ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_body              *ast.SelectBodyStmt
	stmt_select_cases             *ast.SelectBodyStmt
	stmt_select_cases_helper      *ast.SelectBodyStmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_literals                 ast.Expr
	expr_unary                    ast.Expr
	expr_binary                   ast.Expr
	expr_member_or_ident          ast.Expr
	expr_call                     *ast.CallExpr
	expr_anon_call                *ast.AnonCallExpr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	opt_exprs                     []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"';'",
	"','",
	"'('",
	"')'",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1204

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	78, 6,
	-2, 2,
	-1, 24,
	79, 91,
	-2, 20,
	-1, 118,
	79, 206,
	-2, 201,
	-1, 123,
	16, 71,
	79, 71,
	-2, 200,
	-1, 127,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	77, 21,
	78, 21,
	86, 21,
	-2, 105,
	-1, 128,
	1, 22,
	47, 22,
	48, 22,
	63, 22,
	77, 22,
	78, 22,
	86, 22,
	-2, 106,
	-1, 130,
	1, 23,
	47, 23,
	48, 23,
	63, 23,
	77, 23,
	78, 23,
	86, 23,
	-2, 105,
	-1, 131,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	77, 24,
	78, 24,
	86, 24,
	-2, 106,
	-1, 132,
	4, 189,
	51, 189,
	58, 189,
	59, 189,
	-2, 100,
	-1, 161,
	1, 140,
	8, 140,
	47, 140,
	48, 140,
	61, 140,
	62, 140,
	63, 140,
	76, 140,
	77, 140,
	78, 140,
	79, 140,
	81, 140,
	83, 140,
	86, 140,
	-2, 131,
	-1, 163,
	1, 142,
	8, 142,
	47, 142,
	48, 142,
	61, 142,
	62, 142,
	63, 142,
	76, 142,
	77, 142,
	78, 142,
	79, 142,
	81, 142,
	83, 142,
	86, 142,
	-2, 131,
	-1, 211,
	79, 207,
	-2, 204,
	-1, 263,
	81, 180,
	84, 180,
	-2, 200,
	-1, 281,
	79, 206,
	-2, 201,
	-1, 310,
	77, 214,
	-2, 206,
	-1, 317,
	1, 93,
	8, 93,
	47, 93,
	48, 93,
	61, 93,
	62, 93,
	63, 93,
	77, 93,
	78, 93,
	79, 93,
	81, 93,
	83, 93,
	86, 93,
	-2, 131,
	-1, 318,
	1, 141,
	8, 141,
	47, 141,
	48, 141,
	61, 141,
	62, 141,
	63, 141,
	76, 141,
	77, 141,
	78, 141,
	79, 141,
	81, 141,
	83, 141,
	86, 141,
	-2, 132,
	-1, 319,
	1, 143,
	8, 143,
	47, 143,
	48, 143,
	61, 143,
	62, 143,
	63, 143,
	76, 143,
	77, 143,
	78, 143,
	79, 143,
	81, 143,
	83, 143,
	86, 143,
	-2, 132,
	-1, 349,
	79, 206,
	-2, 201,
	-1, 351,
	79, 206,
	-2, 201,
	-1, 379,
	77, 212,
	-2, 207,
	-1, 403,
	79, 206,
	-2, 201,
}

const yyPrivate = 57344

const yyLast = 4070

var yyAct = [...]int16{
	2, 238, 382, 357, 254, 251, 295, 358, 45, 6,
	9, 310, 419, 296, 249, 8, 248, 9, 9, 9,
	9, 57, 224, 75, 10, 88, 76, 132, 366, 423,
	9, 291, 292, 333, 230, 332, 77, 224, 224, 468,
	436, 224, 224, 430, 223, 144, 224, 369, 224, 111,
	112, 96, 224, 329, 308, 224, 224, 306, 390, 147,
	224, 142, 69, 58, 59, 331, 147, 68, 14, 56,
	15, 28, 148, 29, 227, 161, 163, 463, 388, 462,
	342, 49, 60, 61, 62, 327, 16, 30, 320, 90,
	75, 86, 136, 89, 275, 96, 12, 13, 170, 166,
	167, 255, 326, 31, 32, 155, 156, 33, 34, 169,
	71, 53, 183, 47, 55, 54, 51, 184, 70, 210,
	274, 168, 152, 157, 242, 218, 63, 212, 65, 67,
	151, 146, 66, 90, 52, 86, 145, 89, 41, 140,
	39, 213, 393, 64, 157, 322, 139, 141, 217, 513,
	75, 512, 510, 506, 505, 77, 88, 504, 499, 137,
	222, 497, 492, 491, 483, 405, 477, 474, 384, 473,
	142, 172, 267, 157, 269, 165, 472, 243, 244, 457,
	111, 112, 96, 97, 98, 136, 456, 451, 502, 256,
	213, 157, 445, 443, 257, 442, 441, 440, 422, 413,
	397, 78, 377, 346, 343, 24, 337, 91, 92, 113,
	276, 93, 94, 95, 115, 280, 335, 79, 286, 277,
	90, 508, 86, 503, 89, 501, 488, 75, 486, 466,
	117, 120, 140, 125, 173, 129, 129, 406, 307, 139,
	141, 464, 449, 143, 426, 309, 229, 171, 126, 124,
	454, 415, 137, 410, 317, 150, 364, 360, 359, 294,
	293, 493, 434, 142, 315, 158, 159, 160, 162, 164,
	325, 119, 324, 163, 354, 24, 81, 136, 389, 321,
	480, 253, 347, 371, 174, 175, 176, 177, 178, 180,
	181, 345, 334, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 75, 375, 205, 206, 207, 208, 365,
	77, 363, 362, 216, 140, 368, 11, 266, 153, 319,
	136, 139, 141, 7, 44, 318, 5, 394, 3, 299,
	74, 73, 182, 72, 137, 396, 232, 234, 154, 398,
	399, 239, 401, 240, 241, 142, 122, 80, 1, 40,
	409, 46, 370, 427, 408, 414, 252, 250, 128, 131,
	259, 43, 42, 134, 268, 416, 37, 140, 36, 48,
	50, 273, 77, 75, 139, 141, 134, 412, 429, 38,
	149, 433, 432, 431, 35, 75, 289, 137, 288, 290,
	138, 444, 21, 446, 447, 127, 130, 450, 142, 356,
	355, 452, 20, 18, 278, 17, 455, 282, 22, 285,
	23, 19, 26, 27, 25, 4, 0, 461, 0, 0,
	133, 0, 383, 465, 0, 304, 0, 467, 239, 0,
	0, 0, 0, 0, 0, 0, 0, 316, 0, 475,
	476, 0, 211, 0, 478, 479, 136, 0, 0, 0,
	134, 481, 0, 0, 0, 485, 164, 487, 0, 0,
	0, 489, 338, 135, 339, 0, 0, 0, 0, 0,
	0, 134, 0, 0, 0, 350, 352, 498, 495, 500,
	0, 134, 221, 0, 0, 0, 24, 138, 138, 0,
	138, 0, 507, 140, 509, 372, 138, 0, 138, 511,
	139, 141, 0, 380, 0, 0, 381, 220, 0, 0,
	0, 0, 0, 137, 0, 0, 0, 0, 261, 138,
	0, 0, 0, 385, 142, 392, 0, 0, 236, 0,
	0, 88, 0, 0, 0, 0, 0, 134, 245, 0,
	0, 0, 0, 134, 0, 404, 297, 134, 0, 0,
	0, 0, 411, 134, 0, 111, 112, 96, 97, 98,
	225, 226, 297, 228, 0, 0, 0, 0, 0, 235,
	424, 237, 0, 0, 0, 0, 0, 138, 0, 0,
	221, 0, 0, 0, 0, 439, 93, 94, 95, 115,
	0, 260, 265, 0, 279, 90, 0, 86, 0, 89,
	287, 0, 0, 138, 298, 211, 0, 0, 0, 0,
	301, 138, 134, 0, 261, 0, 0, 0, 0, 0,
	367, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	470, 297, 0, 0, 379, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 134, 0, 0, 0,
	300, 239, 482, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 361,
	138, 138, 0, 211, 0, 211, 323, 0, 0, 134,
	0, 138, 0, 0, 330, 0, 0, 225, 0, 0,
	0, 378, 297, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 0, 387, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 138, 0, 0, 0, 0, 0, 211, 0, 0,
	0, 376, 0, 0, 138, 138, 407, 0, 138, 138,
	0, 0, 0, 134, 386, 0, 0, 134, 0, 0,
	0, 418, 0, 0, 391, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 138, 0, 138, 134, 0, 0,
	0, 0, 417, 0, 420, 0, 0, 0, 0, 0,
	458, 0, 0, 0, 459, 297, 0, 428, 0, 0,
	0, 0, 435, 0, 0, 0, 0, 0, 138, 0,
	0, 88, 99, 100, 102, 104, 114, 116, 0, 0,
	138, 0, 85, 0, 138, 0, 0, 105, 106, 107,
	108, 109, 110, 0, 484, 111, 112, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 469,
	0, 0, 0, 0, 0, 0, 82, 83, 0, 84,
	103, 101, 91, 92, 113, 0, 93, 94, 95, 115,
	0, 214, 0, 0, 0, 90, 0, 86, 0, 89,
	0, 0, 0, 88, 99, 100, 102, 104, 114, 116,
	0, 0, 0, 494, 85, 0, 0, 496, 0, 105,
	106, 107, 108, 109, 110, 0, 0, 111, 112, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 103, 101, 91, 92, 113, 0, 93, 94,
	95, 115, 0, 0, 0, 0, 438, 90, 437, 86,
	0, 89, 88, 99, 100, 102, 104, 114, 116, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 105, 106,
	107, 108, 109, 110, 0, 0, 111, 112, 96, 97,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 103, 101, 91, 92, 113, 0, 93, 94, 95,
	115, 0, 0, 0, 0, 314, 90, 313, 86, 0,
	89, 88, 99, 100, 102, 104, 114, 116, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 105, 106, 107,
	108, 109, 110, 0, 0, 111, 112, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 303, 84,
	103, 101, 91, 92, 113, 0, 93, 94, 95, 115,
	0, 0, 0, 0, 0, 90, 0, 86, 302, 89,
	88, 99, 100, 102, 104, 114, 116, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 105, 106, 107, 108,
	109, 110, 0, 0, 111, 112, 96, 97, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 272, 84, 103,
	101, 91, 92, 113, 0, 93, 94, 95, 115, 0,
	0, 0, 0, 0, 90, 0, 86, 271, 89, 88,
	99, 100, 102, 104, 114, 116, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 105, 106, 107, 108, 109,
	110, 0, 0, 111, 112, 96, 97, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 82, 83, 0, 84, 103, 101,
	91, 92, 113, 0, 93, 94, 95, 115, 0, 0,
	0, 0, 0, 90, 0, 86, 0, 89, 88, 99,
	100, 102, 104, 114, 116, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 105, 106, 107, 108, 109, 110,
	0, 0, 111, 112, 96, 97, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 103, 101, 91,
	92, 113, 0, 93, 94, 95, 115, 0, 0, 0,
	0, 0, 90, 490, 86, 0, 89, 88, 99, 100,
	102, 104, 114, 116, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 105, 106, 107, 108, 109, 110, 0,
	0, 111, 112, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 103, 101, 91, 92,
	113, 0, 93, 94, 95, 115, 0, 0, 0, 0,
	0, 90, 471, 86, 0, 89, 88, 99, 100, 102,
	104, 114, 116, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 105, 106, 107, 108, 109, 110, 0, 0,
	111, 112, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 460, 84, 103, 101, 91, 92, 113,
	0, 93, 94, 95, 115, 0, 0, 0, 0, 0,
	90, 0, 86, 0, 89, 88, 99, 100, 102, 104,
	114, 116, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 105, 106, 107, 108, 109, 110, 0, 0, 111,
	112, 96, 97, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 453, 84, 103, 101, 91, 92, 113, 0,
	93, 94, 95, 115, 0, 0, 0, 0, 0, 90,
	0, 86, 0, 89, 88, 99, 100, 102, 104, 114,
	116, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	105, 106, 107, 108, 109, 110, 0, 0, 111, 112,
	96, 97, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 103, 101, 91, 92, 113, 0, 93,
	94, 95, 115, 0, 448, 0, 0, 0, 90, 0,
	86, 0, 89, 88, 99, 100, 102, 104, 114, 116,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 105,
	106, 107, 108, 109, 110, 0, 0, 111, 112, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 103, 101, 91, 92, 113, 0, 93, 94,
	95, 115, 0, 0, 0, 0, 0, 90, 425, 86,
	0, 89, 88, 99, 100, 102, 104, 114, 116, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 105, 106,
	107, 108, 109, 110, 0, 0, 111, 112, 96, 97,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 103, 101, 91, 92, 113, 0, 93, 94, 95,
	115, 0, 0, 0, 0, 0, 90, 0, 86, 421,
	89, 88, 99, 100, 102, 104, 114, 116, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 105, 106, 107,
	108, 109, 110, 0, 0, 111, 112, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	103, 101, 91, 92, 113, 0, 93, 94, 95, 115,
	0, 402, 0, 0, 0, 90, 0, 86, 0, 89,
	88, 99, 100, 102, 104, 114, 116, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 105, 106, 107, 108,
	109, 110, 0, 0, 111, 112, 96, 97, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 103,
	101, 91, 92, 113, 0, 93, 94, 95, 115, 0,
	400, 0, 0, 0, 90, 0, 86, 0, 89, 88,
	99, 100, 102, 104, 114, 116, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 105, 106, 107, 108, 109,
	110, 0, 0, 111, 112, 96, 97, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 103, 101,
	91, 92, 113, 0, 93, 94, 95, 115, 0, 0,
	0, 0, 0, 90, 0, 86, 395, 89, 88, 99,
	100, 102, 104, 114, 116, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 105, 106, 107, 108, 109, 110,
	0, 0, 111, 112, 96, 97, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 103, 101, 91,
	92, 113, 0, 93, 94, 95, 115, 0, 0, 0,
	0, 0, 90, 0, 86, 374, 89, 88, 99, 100,
	102, 104, 114, 116, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 105, 106, 107, 108, 109, 110, 0,
	0, 111, 112, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 103, 101, 91, 92,
	113, 0, 93, 94, 95, 115, 0, 0, 0, 353,
	0, 90, 0, 86, 0, 89, 88, 99, 100, 102,
	104, 114, 116, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 105, 106, 107, 108, 109, 110, 0, 0,
	111, 112, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 103, 101, 91, 92, 113,
	0, 93, 94, 95, 115, 0, 348, 0, 0, 0,
	90, 0, 86, 0, 89, 88, 99, 100, 102, 104,
	114, 116, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 105, 106, 107, 108, 109, 110, 0, 0, 111,
	112, 96, 97, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 103, 101, 91, 92, 113, 0,
	93, 94, 95, 115, 0, 344, 0, 0, 0, 90,
	0, 86, 0, 89, 88, 99, 100, 102, 104, 114,
	116, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	105, 106, 107, 108, 109, 110, 0, 0, 111, 112,
	96, 97, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 103, 101, 91, 92, 113, 0, 93,
	94, 95, 115, 0, 0, 0, 0, 0, 90, 0,
	86, 341, 89, 88, 99, 100, 102, 104, 114, 116,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 105,
	106, 107, 108, 109, 110, 0, 0, 111, 112, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 103, 101, 91, 92, 113, 0, 93, 94,
	95, 115, 0, 336, 0, 0, 0, 90, 0, 86,
	0, 89, 88, 99, 100, 102, 104, 114, 116, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 105, 106,
	107, 108, 109, 110, 0, 0, 111, 112, 96, 97,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 103, 101, 91, 92, 113, 0, 93, 94, 95,
	115, 0, 0, 0, 0, 0, 90, 328, 86, 0,
	89, 88, 99, 100, 102, 104, 114, 116, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 105, 106, 107,
	108, 109, 110, 0, 0, 111, 112, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	103, 101, 91, 92, 113, 0, 93, 94, 95, 115,
	0, 0, 0, 0, 0, 90, 312, 86, 0, 89,
	88, 99, 100, 102, 104, 114, 116, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 105, 106, 107, 108,
	109, 110, 0, 0, 111, 112, 96, 97, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 311, 84, 103,
	101, 91, 92, 113, 0, 93, 94, 95, 115, 0,
	0, 0, 0, 0, 90, 0, 86, 0, 89, 88,
	99, 100, 102, 104, 114, 116, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 105, 106, 107, 108, 109,
	110, 0, 0, 111, 112, 96, 97, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 103, 101,
	91, 92, 113, 0, 93, 94, 95, 115, 0, 0,
	0, 0, 0, 90, 305, 86, 0, 89, 88, 99,
	100, 102, 104, 114, 116, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 105, 106, 107, 108, 109, 110,
	0, 0, 111, 112, 96, 97, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 103, 101, 91,
	92, 113, 0, 93, 94, 95, 115, 0, 0, 0,
	283, 0, 90, 0, 86, 0, 89, 88, 99, 100,
	102, 104, 114, 116, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 105, 106, 107, 108, 109, 110, 0,
	0, 111, 112, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 270, 84, 103, 101, 91, 92,
	113, 0, 93, 94, 95, 115, 0, 0, 0, 0,
	0, 90, 0, 86, 0, 89, 88, 99, 100, 102,
	104, 114, 116, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 105, 106, 107, 108, 109, 110, 0, 0,
	111, 112, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 103, 101, 91, 92, 113,
	0, 93, 94, 95, 115, 0, 0, 0, 0, 0,
	90, 231, 86, 0, 89, 88, 99, 100, 102, 104,
	114, 116, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 105, 106, 107, 108, 109, 110, 0, 0, 111,
	112, 96, 97, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 103, 101, 91, 92, 113, 0,
	93, 94, 95, 115, 0, 219, 0, 0, 0, 90,
	0, 86, 0, 89, 88, 99, 100, 102, 104, 114,
	116, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	105, 106, 107, 108, 109, 110, 0, 0, 111, 112,
	96, 97, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 103, 101, 91, 92, 113, 0, 93,
	94, 95, 115, 0, 209, 0, 0, 0, 90, 0,
	86, 0, 89, 88, 99, 100, 102, 104, 114, 116,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 105,
	106, 107, 108, 109, 110, 0, 0, 111, 112, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 103, 101, 91, 92, 113, 0, 93, 94,
	95, 115, 0, 0, 0, 0, 0, 90, 0, 86,
	0, 89, 88, 99, 100, 102, 104, 114, 116, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 105, 106,
	107, 108, 109, 110, 0, 0, 111, 112, 96, 97,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 103, 101, 91, 92, 113, 0, 93, 94, 95,
	115, 0, 0, 0, 0, 0, 90, 0, 86, 0,
	247, 88, 99, 100, 102, 104, 114, 116, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 105, 106, 107,
	108, 109, 110, 0, 0, 111, 112, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	103, 101, 91, 92, 113, 0, 93, 94, 95, 115,
	0, 0, 0, 0, 0, 90, 0, 86, 0, 246,
	88, 99, 100, 102, 104, 114, 116, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 112, 96, 97, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	263, 58, 59, 0, 0, 68, 0, 0, 84, 103,
	101, 91, 92, 113, 0, 93, 94, 95, 115, 49,
	60, 61, 62, 0, 90, 0, 86, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 263, 58,
	59, 0, 0, 68, 0, 0, 0, 140, 71, 53,
	0, 47, 55, 54, 262, 141, 70, 49, 60, 61,
	62, 0, 0, 0, 63, 0, 65, 264, 0, 0,
	66, 0, 52, 0, 0, 0, 41, 258, 39, 0,
	0, 64, 0, 0, 0, 140, 71, 53, 0, 47,
	55, 54, 262, 141, 70, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 65, 264, 0, 0, 66, 0,
	52, 0, 0, 0, 41, 0, 39, 0, 0, 64,
	88, 99, 100, 102, 104, 114, 116, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 111, 112, 96, 97, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	123, 58, 59, 0, 0, 68, 0, 56, 84, 103,
	101, 91, 92, 113, 0, 93, 94, 95, 115, 49,
	60, 61, 62, 0, 90, 0, 86, 0, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 58,
	59, 0, 0, 68, 0, 0, 0, 0, 71, 53,
	0, 47, 55, 54, 51, 0, 70, 49, 60, 61,
	62, 0, 0, 0, 63, 0, 65, 67, 0, 0,
	66, 0, 118, 0, 121, 0, 41, 0, 39, 0,
	0, 64, 0, 0, 0, 0, 71, 53, 0, 47,
	55, 54, 51, 0, 70, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 65, 67, 0, 0, 66, 0,
	52, 0, 0, 0, 41, 0, 39, 373, 0, 64,
	69, 58, 59, 0, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	60, 61, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 58,
	59, 0, 0, 68, 0, 0, 0, 0, 71, 53,
	0, 47, 55, 54, 51, 0, 70, 49, 60, 61,
	62, 0, 0, 0, 63, 0, 65, 67, 0, 0,
	66, 0, 52, 0, 0, 0, 41, 0, 39, 340,
	0, 64, 0, 0, 0, 0, 71, 53, 0, 47,
	55, 54, 51, 0, 70, 0, 0, 0, 0, 0,
	0, 0, 63, 0, 65, 67, 0, 0, 66, 0,
	52, 0, 284, 0, 41, 0, 39, 0, 0, 64,
	69, 58, 59, 0, 0, 68, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	60, 61, 62, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 69, 58, 59, 0, 0, 68, 0, 71, 53,
	0, 47, 55, 54, 51, 0, 70, 0, 0, 233,
	49, 60, 61, 62, 63, 0, 65, 67, 0, 0,
	66, 0, 52, 0, 0, 0, 41, 0, 39, 0,
	0, 64, 69, 58, 59, 0, 0, 68, 0, 71,
	53, 0, 47, 55, 54, 51, 0, 70, 0, 0,
	0, 49, 60, 61, 62, 63, 0, 65, 67, 0,
	0, 66, 0, 52, 0, 215, 0, 41, 0, 39,
	0, 0, 64, 69, 58, 59, 0, 0, 68, 0,
	71, 53, 0, 47, 55, 54, 51, 0, 70, 0,
	0, 179, 49, 60, 61, 62, 63, 0, 65, 67,
	0, 0, 66, 0, 52, 0, 0, 0, 41, 0,
	39, 0, 0, 64, 69, 58, 59, 0, 0, 68,
	0, 71, 53, 0, 47, 55, 54, 51, 0, 70,
	0, 0, 0, 49, 60, 61, 62, 63, 0, 65,
	67, 0, 0, 66, 0, 52, 0, 0, 0, 41,
	0, 39, 0, 0, 64, 69, 58, 59, 0, 0,
	68, 0, 71, 53, 0, 47, 55, 54, 51, 0,
	70, 0, 0, 0, 49, 60, 61, 62, 63, 0,
	65, 67, 0, 0, 66, 0, 403, 0, 0, 0,
	41, 0, 39, 0, 0, 64, 69, 58, 59, 0,
	0, 68, 0, 71, 53, 0, 47, 55, 54, 51,
	0, 70, 0, 0, 0, 49, 60, 61, 62, 63,
	0, 65, 67, 0, 0, 66, 0, 351, 0, 0,
	0, 41, 0, 39, 0, 0, 64, 69, 58, 59,
	0, 0, 68, 0, 71, 53, 0, 47, 55, 54,
	51, 0, 70, 0, 0, 0, 49, 60, 61, 62,
	63, 0, 65, 67, 0, 0, 66, 0, 349, 0,
	0, 0, 41, 0, 39, 0, 0, 64, 0, 0,
	0, 0, 0, 0, 0, 71, 53, 0, 47, 55,
	54, 51, 0, 70, 0, 0, 88, 99, 100, 102,
	104, 63, 116, 65, 67, 0, 0, 66, 0, 281,
	0, 0, 0, 41, 0, 39, 0, 0, 64, 0,
	111, 112, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 88, 99, 100, 102, 104, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 101, 91, 92, 113,
	0, 93, 94, 95, 115, 111, 112, 96, 97, 98,
	90, 0, 86, 0, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	103, 101, 91, 92, 113, 0, 93, 94, 95, 115,
	0, 0, 0, 0, 0, 90, 0, 86, 0, 89,
}

var yyPact = [...]int16{
	-69, -1000, -1000, 58, -69, -1000, -76, -76, -1000, -1000,
	-1000, -1000, -1000, -1000, 3739, 3739, 353, 262, -1000, -1000,
	-1000, -1000, -1000, -1000, 1163, -1000, -1000, -1000, 3739, 3376,
	173, 3739, 172, 3739, 3739, -1000, -1000, -1000, -1000, -56,
	326, 3739, -1000, -1000, -1000, -37, -1000, 56, -1000, 51,
	-1000, -10, -76, 3739, 50, 42, 344, 44, -1000, -1000,
	-1000, -1000, -1000, 3739, 3739, 3739, 3739, 3739, 95, 20,
	41, 29, -1000, 58, -76, -1000, -1000, 65, 2957, 2957,
	171, 158, 3739, 3739, 3739, 3739, 3698, 3739, 3739, 338,
	3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739,
	3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739, 3739,
	3739, -1000, -1000, 3739, 3739, 3739, 3739, 2888, -69, 111,
	815, 3657, 70, 20, -69, 2819, -76, -1000, -1000, 2957,
	-1000, -1000, -21, 3739, -76, -32, -1000, 326, 326, -8,
	326, 170, -49, 2750, 3616, 3739, 326, -76, 326, 3739,
	3164, 3739, 3739, 62, -1000, 3739, 3739, -76, 53, 53,
	53, -37, 3095, -37, 3026, 277, 21, 3739, 3216, 273,
	-1000, -69, 3739, -69, 2957, 2957, 2681, 3324, 1094, 3739,
	3164, 9, -1000, 112, 13, 525, 525, 9, 9, 9,
	2957, 9, 9, 140, 140, 140, 140, 140, 140, 2957,
	2957, 2957, 2957, 2957, 2957, 525, 3950, 9, 3985, -69,
	142, -76, 3739, -76, -69, 3903, 2612, 3534, 141, -76,
	212, -1000, -66, -76, 335, -62, -62, 326, -62, -76,
	-21, -1000, 1025, 3739, 2543, -24, 3739, -29, -68, 2474,
	2405, 956, 3739, 65, 65, 3739, 331, 325, 7, 271,
	66, -1000, -1000, 326, -1000, 277, 94, 4, -1000, 2336,
	-28, 326, -17, 20, 3254, -46, 288, 139, 2267, 129,
	3739, -1000, 3496, 2198, -1, -1000, 127, -1000, 2129, 287,
	126, -69, 2060, 3862, 3821, 1991, 244, 210, -76, 212,
	-1000, -1000, -1000, 193, 58, -55, -76, -76, 3739, -1000,
	-36, 279, -1000, 3414, 1922, -1000, -1000, -68, 326, 125,
	-76, 3739, -1000, -1000, 3739, 65, 2957, -37, -1000, -1000,
	88, 452, -76, -62, -3, 270, -23, -1000, -1000, -1000,
	-32, 326, -1000, 3739, 63, -1000, -69, -1000, 3164, 1853,
	-1000, -1000, -1000, -1000, -69, -1000, -1000, 123, -69, -69,
	1784, -69, 1715, 3780, 161, -76, 210, -1000, -1000, 190,
	3739, 122, -1000, -1000, -69, 188, -1000, -76, -66, 326,
	-67, 326, 1646, -1000, -1000, 121, -47, -1000, 3739, -76,
	2957, 1577, 168, -62, 326, 88, -38, 277, 88, 181,
	-1000, -43, 887, 3739, 120, -1000, 119, -1000, 118, 116,
	-69, 115, -69, -69, 1508, 166, -69, 110, -1000, -1000,
	-69, 1439, 187, -1000, -1000, -69, 109, -62, 102, -76,
	-62, -1000, -1000, -76, 1370, -1000, -69, -2, -62, 165,
	88, -1000, -1000, 153, 88, -42, 326, -1000, 3739, 1301,
	-1000, -1000, -1000, -1000, 99, -1000, 92, 90, -69, -69,
	89, -1000, -1000, -69, -69, -1000, -1000, -1000, 276, 3739,
	3739, 87, -1000, -76, -69, 152, -69, 150, 88, -47,
	1232, -1000, -1000, -1000, -1000, 86, 85, 230, -1000, -1000,
	326, -68, 2957, -1000, 326, 84, -69, 81, -69, 149,
	-1000, -1000, 157, 147, -62, 80, -62, -1000, 77, -1000,
	76, -69, 145, -69, -1000, -1000, -1000, 75, -69, 74,
	-1000, 72, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 0, 425, 24, 326, 424, 423, 422, 421, 420,
	418, 415, 413, 412, 410, 409, 7, 3, 402, 399,
	398, 396, 32, 31, 21, 26, 201, 394, 371, 334,
	389, 380, 379, 378, 376, 372, 271, 16, 367, 5,
	4, 14, 366, 2, 363, 432, 362, 359, 1, 361,
	8, 358, 338, 336, 390, 6, 333, 15,
}

var yyR1 = [...]int8{
	0, 51, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 10, 10, 9, 9, 8, 8, 8, 8, 4,
	4, 4, 5, 7, 7, 6, 6, 11, 11, 11,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 18, 20, 20, 21, 21, 21, 19, 19, 22,
	23, 13, 14, 14, 15, 15, 15, 15, 16, 16,
	17, 36, 36, 43, 43, 43, 44, 44, 44, 37,
	37, 38, 38, 39, 40, 41, 41, 42, 42, 25,
	25, 24, 24, 24, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 32, 32, 32, 33, 33, 33, 33,
	33, 27, 27, 28, 28, 29, 29, 34, 34, 34,
	34, 34, 34, 34, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	30, 30, 30, 30, 30, 30, 31, 31, 31, 31,
	45, 45, 45, 45, 45, 45, 45, 46, 46, 47,
	47, 48, 48, 48, 49, 49, 49, 49, 49, 49,
	50, 52, 52, 53, 53, 53, 54, 54, 56, 56,
	57, 55, 55, 55, 55,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 3, 0, 1, 1, 1,
	2, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 13, 12, 9, 8, 1,
	1, 1, 4, 3, 3, 3, 3, 5, 7, 5,
	4, 7, 5, 6, 7, 7, 8, 7, 8, 8,
	9, 6, 0, 1, 1, 2, 2, 1, 1, 4,
	3, 7, 0, 1, 1, 1, 2, 2, 4, 4,
	3, 1, 4, 0, 1, 3, 0, 1, 4, 0,
	1, 1, 1, 1, 2, 1, 4, 1, 4, 0,
	1, 1, 4, 4, 1, 1, 1, 5, 3, 1,
	2, 5, 7, 3, 1, 1, 1, 4, 4, 1,
	4, 1, 4, 1, 6, 10, 5, 3, 2, 4,
	4, 6, 3, 3, 4, 4, 1, 1, 1, 1,
	1, 1, 3, 5, 4, 5, 4, 2, 2, 2,
	2, 4, 2, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 2, 2, 3, 3, 3, 3,
	8, 9, 10, 9, 10, 11, 4, 6, 8, 7,
	1, 3, 2, 2, 5, 2, 6, 2, 5, 2,
	3, 0, 3, 6, 6, 5, 5, 6, 5, 5,
	1, 0, 1, 2, 1, 1, 0, 1, 1, 2,
	1, 0, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -51, -1, -52, -2, -53, 78, -56, -57, 86,
	-3, -4, 38, 39, 10, 12, 28, -11, -12, -8,
	-13, -18, -10, -9, -26, -5, -7, -6, 13, 15,
	29, 45, 46, 49, 50, -27, -33, -34, -30, 82,
	-47, 80, -35, -28, -29, -50, -49, 55, -32, 23,
	-31, 58, 76, 53, 57, 56, 11, -24, 5, 6,
	24, 25, 26, 68, 85, 70, 74, 71, 9, 4,
	60, 52, -52, -53, -56, -57, -25, -24, -26, -26,
	4, 14, 61, 62, 64, 27, 82, 53, 16, 84,
	80, 67, 68, 71, 72, 73, 42, 43, 44, 17,
	18, 66, 19, 65, 20, 32, 33, 34, 35, 36,
	37, 40, 41, 69, 21, 74, 22, -26, 76, -36,
	-26, 78, -4, 4, 76, -26, 76, -28, -29, -26,
	-28, -29, 83, -54, -56, -45, 4, 71, -47, 58,
	51, 59, 82, -26, 82, 80, 80, 76, 82, -54,
	-26, 80, 80, -36, 4, 61, 62, 79, -26, -26,
	-26, -50, -26, -50, -26, 80, 4, 80, 80, 80,
	-3, 76, 13, 76, -26, -26, -26, -26, -26, 63,
	-26, -26, 4, -24, -25, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, 76,
	-1, -56, 16, 79, 76, 78, -26, 78, -1, 76,
	-54, -47, -25, 76, 84, -45, -45, 82, -45, 76,
	83, 81, -26, 63, -26, -45, -54, -45, -48, -26,
	-26, -26, 62, -24, -24, -54, 84, 84, -37, -41,
	-38, -39, -42, 4, -40, 80, -24, -25, 81, -26,
	-45, -47, 58, 4, 71, -45, 54, -1, -26, -1,
	63, 83, 63, -26, 8, 81, -1, 77, -26, -54,
	-1, 76, -26, 78, 78, -26, 77, -54, -20, -21,
	-19, -23, -22, 48, 47, -55, 79, -56, -54, 4,
	-45, -54, 83, 63, -26, 81, 81, -48, 83, -55,
	79, 63, 81, 81, 79, -24, -26, -50, 4, 4,
	81, 8, 79, -45, -37, -41, 8, 81, 81, 81,
	-45, 82, 81, 79, 4, 77, 76, 77, -26, -26,
	83, 83, 81, 77, 76, 4, 77, -1, 76, 76,
	-26, 76, -26, 78, 30, -14, -15, -17, -16, 48,
	47, -54, -22, -23, 63, -3, 83, -56, -25, 83,
	-46, 4, -26, 83, 83, -55, -45, 77, -54, -56,
	-26, -26, -43, -45, 80, 81, -45, -54, 81, 8,
	81, -45, -26, 79, -1, 83, -1, 77, -1, -1,
	76, -1, 76, 76, -26, 4, 76, -54, -16, -17,
	63, -26, -25, 77, -1, 63, -55, -45, -54, 79,
	-45, 83, 77, 76, -26, 81, 76, -44, -45, -43,
	81, -39, -40, -43, 81, -45, 83, 81, 79, -26,
	77, 77, 77, 77, -1, 77, -1, -1, 76, 76,
	-1, 77, -1, 63, 63, -1, 77, 77, -54, -54,
	63, -1, 81, 79, 76, -43, 76, -43, 81, -45,
	-26, 81, 77, 77, 77, -1, -1, 77, -1, -1,
	4, -48, -26, 77, -54, -1, 76, -1, 76, -43,
	81, 77, 77, 31, -45, -55, -45, 77, -1, 77,
	-1, 76, 31, 76, 77, 77, 77, -1, 76, -1,
	77, -1, 77, 77,
}

var yyDef = [...]int16{
	201, -2, 1, -2, 201, 202, 205, 204, 208, 210,
	4, 7, 8, 9, 89, 0, 0, 13, 14, 15,
	16, 17, 18, 19, -2, 29, 30, 31, 0, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 99, 206,
	0, 0, 104, 105, 106, 131, 109, 0, 111, 0,
	113, 0, 206, 0, 0, 0, 0, 0, 126, 127,
	128, 129, 130, 0, 0, 0, 0, 0, 0, 200,
	0, 0, 3, 6, 203, 209, 10, 90, 91, 11,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 164, 165, 0, 0, 0, 0, 0, -2, 0,
	91, 0, 0, -2, 201, 0, 206, -2, -2, 0,
	-2, -2, -2, 89, 207, 0, 180, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 206, 0, 191,
	118, 0, 0, 0, 71, 0, 0, 206, 137, 138,
	139, -2, 0, -2, 0, 79, 0, 89, 0, 0,
	5, 201, 0, 201, 33, 35, 0, 98, 0, 0,
	117, 122, 132, 90, 0, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 166, 167, 168, 169, 201,
	0, -2, 0, 206, 201, 0, 0, 0, 0, 206,
	52, 190, 211, 206, 0, 182, 183, 0, 185, 206,
	189, 103, 0, 0, 0, 0, 191, 0, 211, 0,
	0, 0, 0, 34, 36, 0, 0, 0, 0, 81,
	80, 85, 82, 83, 87, 79, 90, 0, 123, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 108, 0, 0, 0, 136, 0, 40, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 62, 206, 53,
	54, 57, 58, 0, 6, 0, 214, 213, 89, 181,
	0, 0, 107, 0, 0, 110, 112, 211, 0, 0,
	-2, 0, 119, 120, 0, 32, 92, -2, -2, -2,
	73, 0, 206, 84, 0, 81, 0, 134, 124, 125,
	183, 0, 176, 0, 0, 12, 201, 39, 97, 0,
	198, 199, 135, 37, 201, 72, 42, 0, 201, -2,
	0, -2, 0, 0, 0, 206, 63, 64, 65, 0,
	89, 0, 55, 56, 201, 0, 101, 212, 211, 0,
	206, 0, 0, 195, 196, 0, 0, 116, 0, -2,
	192, 0, 0, 74, 76, 73, 0, 0, 73, 0,
	133, 0, 0, 0, 0, 197, 0, 43, 0, 0,
	201, 0, 201, -2, 0, 0, 201, 0, 66, 67,
	201, 91, 0, 51, 60, 201, 0, 184, 0, 206,
	187, 194, 114, 206, 0, 121, 201, 0, 77, 0,
	73, 86, 88, 0, 73, 0, 0, 177, 0, 0,
	38, 41, 44, 45, 0, 47, 0, 0, 201, 201,
	0, 61, 70, 201, 201, 59, 102, 186, 0, 191,
	0, 0, 75, 206, 201, 0, 201, 0, 73, 184,
	0, 179, 46, 48, 49, 0, 0, 28, 68, 69,
	0, 211, 193, 170, 0, 0, 201, 0, 201, 0,
	178, 50, 27, 0, 188, 0, 78, 171, 0, 173,
	0, 201, 0, 201, 115, 172, 174, 0, 201, 0,
	175, 0, 26, 25,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 85, 3, 3, 3, 73, 74, 3,
	80, 81, 71, 67, 79, 68, 84, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 78,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 82, 3, 83, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:138
		{
			yyVAL.compstmt = nil
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:142
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:148
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:157
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:173
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:174
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:176
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:181
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].opt_exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:191
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:201
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:205
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.stmt = yyDollar[1].stmt_try
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:207
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:208
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:209
		{
			yyVAL.stmt = yyDollar[1].stmt_go
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:210
		{
			yyVAL.stmt = yyDollar[1].stmt_defer
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:212
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:219
		{
			callExpr := yyDollar[2].expr_call
			callExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: callExpr}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:226
		{
			anonCallExpr := yyDollar[2].expr_anon_call
			anonCallExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: anonCallExpr}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:235
		{
			callExpr := yyDollar[2].expr_call
			callExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: callExpr}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr_call.Position())
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:242
		{
			anonCallExpr := yyDollar[2].expr_anon_call
			anonCallExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: anonCallExpr}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr_anon_call.Position())
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:251
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:256
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:261
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:272
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:273
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:274
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:278
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:285
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:289
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:306
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:310
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:327
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:332
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:337
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:347
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:352
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:363
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:368
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:373
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:378
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:383
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:388
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:393
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:398
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:403
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:410
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:417
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:421
		{
			yyVAL.stmt_select_cases = yyDollar[1].stmt_select_cases_helper
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:427
		{
			yyVAL.stmt_select_cases_helper = yyDollar[1].stmt_select_body
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:431
		{
			yyVAL.stmt_select_cases_helper.Cases = append(yyVAL.stmt_select_cases_helper.Cases, yyDollar[2].stmt_select_case)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:435
		{
			if yyVAL.stmt_select_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyVAL.stmt_select_cases_helper.Default = yyDollar[2].stmt_select_default
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:444
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:448
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:454
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:461
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:467
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:476
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:480
		{
			yyVAL.stmt_switch_cases = yyDollar[1].stmt_switch_cases_helper
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:486
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:490
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:494
		{
			switchStmt := yyDollar[1].stmt_switch_cases_helper.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases_helper = switchStmt
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:500
		{
			switchStmt := yyDollar[1].stmt_switch_cases_helper.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:511
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:516
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].opt_exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:523
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:529
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:533
		{
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:538
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:542
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:546
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:550
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:554
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:558
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:566
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:569
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:572
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:573
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:577
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:583
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:589
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:593
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:599
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:603
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:608
		{
			yyVAL.opt_exprs = nil
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:611
		{
			yyVAL.opt_exprs = yyDollar[1].exprs
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:615
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:619
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:626
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:634
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:635
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:636
		{
			yyVAL.expr = yyDollar[1].expr_unary
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:638
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:643
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:647
		{
			yyVAL.expr = yyDollar[1].expr_func
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:649
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:654
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].opt_exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 102:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:659
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].opt_exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:664
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:668
		{
			yyVAL.expr = yyDollar[1].expr_binary
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:669
		{
			yyVAL.expr = yyDollar[1].expr_call
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:670
		{
			yyVAL.expr = yyDollar[1].expr_anon_call
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:672
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:677
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:682
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:687
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:691
		{
			yyVAL.expr = yyDollar[1].expr_dbg
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:693
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:702
		{
			yyVAL.expr = yyDollar[1].expr_make
		}
	case 114:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:704
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 115:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:710
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:716
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:721
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:726
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:731
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:736
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:741
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:746
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:753
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:758
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:763
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:770
		{
			yyVAL.expr_literals = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:775
		{
			yyVAL.expr_literals = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:780
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:785
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:790
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:796
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:798
		{
			yyVAL.expr_member_or_ident = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member_or_ident.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:805
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr_call.SetPosition(yyDollar[1].tok.Position())
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:810
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].opt_exprs}
			yyVAL.expr_call.SetPosition(yyDollar[1].tok.Position())
		}
	case 135:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:817
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr_anon_call.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:822
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].opt_exprs}
			yyVAL.expr_anon_call.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:829
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:834
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:839
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:844
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:849
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:854
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 143:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:859
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:866
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:871
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:876
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:881
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:886
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:891
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:896
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:901
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:906
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:911
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:916
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:921
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:926
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:931
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:936
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:941
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:946
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:951
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:956
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:961
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:966
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:971
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:976
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:981
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 168:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:986
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:991
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 170:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:998
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 171:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:1003
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 172:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:1008
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 173:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:1014
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 174:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:1019
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 175:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:1024
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1032
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1037
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 178:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:1042
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 179:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:1047
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1054
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1058
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1067
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1076
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1086
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1090
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1099
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1105
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1109
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1119
		{
			yyVAL.slice_count = 1
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1123
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1130
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1134
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1138
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1148
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1152
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1156
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1160
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 198:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1164
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 199:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1168
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1174
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
