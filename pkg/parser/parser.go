// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:36
type yySymType struct {
	yys                 int
	compstmt            []ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default []ast.Stmt
	stmt_select         ast.Stmt
	stmt_select_cases   ast.Stmt
	stmt_select_case    ast.Stmt
	stmt_select_default []ast.Stmt
	stmts               []ast.Stmt
	stmt                ast.Stmt
	expr                ast.Expr
	exprs               []ast.Expr
	expr_idents         []string
	expr_map            *ast.MapExpr
	type_data           *ast.TypeStruct
	type_data_struct    *ast.TypeStruct
	slice_count         int
	tok                 ast.Token
	expr_slice          ast.Expr
	expr_ident          ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const UNARY = 57402

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"'='",
	"'?'",
	"':'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"'!'",
	"'^'",
	"'&'",
	"'.'",
	"'['",
	"']'",
	"'|'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:975

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	60, 61,
	63, 61,
	76, 5,
	-2, 1,
	-1, 23,
	63, 62,
	-2, 28,
	-1, 27,
	60, 61,
	-2, 58,
	-1, 58,
	60, 61,
	63, 61,
	-2, 5,
	-1, 110,
	16, 59,
	63, 59,
	-2, 157,
	-1, 117,
	1, 70,
	8, 70,
	47, 70,
	48, 70,
	60, 70,
	62, 70,
	63, 70,
	72, 70,
	73, 70,
	75, 70,
	76, 70,
	82, 70,
	84, 70,
	-2, 65,
	-1, 119,
	1, 72,
	8, 72,
	47, 72,
	48, 72,
	60, 72,
	62, 72,
	63, 72,
	72, 72,
	73, 72,
	75, 72,
	76, 72,
	82, 72,
	84, 72,
	-2, 65,
	-1, 123,
	4, 146,
	51, 146,
	58, 146,
	59, 146,
	-2, 85,
	-1, 170,
	17, 0,
	18, 0,
	-2, 97,
	-1, 171,
	17, 0,
	18, 0,
	-2, 98,
	-1, 256,
	62, 5,
	-2, 61,
	-1, 265,
	73, 171,
	82, 171,
	-2, 163,
	-1, 282,
	73, 171,
	-2, 163,
	-1, 289,
	1, 64,
	8, 64,
	47, 64,
	48, 64,
	60, 64,
	62, 64,
	63, 64,
	73, 64,
	75, 64,
	76, 64,
	82, 64,
	84, 64,
	-2, 65,
	-1, 295,
	1, 21,
	47, 21,
	48, 21,
	62, 21,
	73, 21,
	76, 21,
	84, 21,
	-2, 116,
	-1, 297,
	1, 23,
	47, 23,
	48, 23,
	62, 23,
	73, 23,
	76, 23,
	84, 23,
	-2, 118,
	-1, 299,
	1, 25,
	47, 25,
	48, 25,
	62, 25,
	73, 25,
	76, 25,
	84, 25,
	-2, 116,
	-1, 301,
	1, 27,
	47, 27,
	48, 27,
	62, 27,
	73, 27,
	76, 27,
	84, 27,
	-2, 118,
	-1, 329,
	73, 169,
	82, 169,
	-2, 164,
	-1, 347,
	1, 20,
	47, 20,
	48, 20,
	62, 20,
	73, 20,
	76, 20,
	84, 20,
	-2, 115,
	-1, 348,
	1, 22,
	47, 22,
	48, 22,
	62, 22,
	73, 22,
	76, 22,
	84, 22,
	-2, 117,
	-1, 349,
	1, 24,
	47, 24,
	48, 24,
	62, 24,
	73, 24,
	76, 24,
	84, 24,
	-2, 115,
	-1, 350,
	1, 26,
	47, 26,
	48, 26,
	62, 26,
	73, 26,
	76, 26,
	84, 26,
	-2, 117,
}

const yyPrivate = 57344

const yyLast = 3323

var yyAct = [...]int16{
	62, 313, 43, 23, 224, 314, 9, 8, 266, 253,
	56, 6, 254, 316, 315, 63, 330, 59, 5, 256,
	255, 30, 68, 70, 61, 215, 8, 105, 109, 111,
	282, 371, 126, 114, 115, 116, 118, 120, 113, 265,
	1, 107, 123, 133, 8, 134, 129, 196, 7, 209,
	8, 8, 8, 142, 125, 60, 8, 117, 119, 23,
	8, 139, 209, 125, 332, 149, 209, 377, 280, 212,
	140, 367, 158, 159, 160, 209, 162, 163, 164, 165,
	166, 167, 168, 169, 170, 171, 172, 173, 174, 175,
	176, 177, 178, 179, 180, 181, 350, 145, 182, 183,
	184, 185, 349, 187, 189, 190, 348, 153, 60, 208,
	275, 141, 186, 277, 200, 209, 347, 209, 193, 335,
	326, 303, 127, 328, 125, 276, 206, 205, 127, 300,
	209, 129, 129, 298, 129, 207, 135, 218, 122, 296,
	129, 129, 225, 129, 226, 227, 217, 192, 156, 294,
	154, 125, 232, 144, 124, 143, 138, 137, 229, 136,
	125, 210, 211, 204, 213, 235, 236, 237, 238, 131,
	219, 220, 221, 223, 60, 131, 130, 132, 195, 272,
	426, 425, 130, 132, 148, 421, 128, 416, 148, 244,
	327, 231, 128, 233, 148, 247, 301, 249, 345, 133,
	299, 263, 259, 240, 148, 133, 297, 125, 121, 415,
	125, 413, 407, 406, 151, 129, 295, 402, 206, 267,
	125, 395, 394, 225, 199, 390, 125, 279, 385, 383,
	380, 288, 245, 281, 148, 376, 267, 360, 250, 287,
	302, 340, 60, 311, 304, 270, 273, 264, 307, 292,
	290, 222, 289, 246, 234, 422, 195, 23, 148, 322,
	230, 420, 319, 321, 125, 318, 346, 362, 262, 393,
	241, 381, 366, 152, 365, 325, 214, 329, 336, 331,
	150, 112, 66, 129, 342, 388, 148, 343, 338, 228,
	147, 267, 195, 148, 329, 148, 337, 194, 357, 320,
	316, 315, 256, 255, 419, 414, 293, 248, 10, 65,
	251, 353, 409, 339, 356, 334, 60, 358, 355, 309,
	268, 278, 269, 146, 125, 261, 271, 359, 260, 161,
	64, 46, 344, 333, 252, 129, 108, 129, 375, 20,
	368, 312, 378, 267, 195, 125, 4, 2, 19, 352,
	58, 57, 17, 16, 25, 24, 3, 0, 0, 0,
	0, 361, 0, 0, 317, 369, 364, 372, 0, 0,
	0, 0, 0, 0, 0, 397, 0, 230, 60, 0,
	0, 0, 0, 125, 0, 0, 0, 382, 0, 125,
	0, 0, 0, 0, 341, 0, 0, 0, 386, 0,
	225, 412, 0, 389, 411, 0, 391, 392, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	418, 0, 401, 267, 354, 403, 0, 0, 404, 405,
	0, 0, 0, 0, 408, 0, 0, 0, 0, 0,
	0, 0, 417, 0, 0, 370, 0, 0, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 423, 0, 424, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 396, 0, 103, 0, 0, 0, 399,
	0, 0, 0, 72, 0, 374, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 373, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 286, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 285, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	258, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 0, 0, 0, 0, 99, 74, 102,
	257, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 243, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 242, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 71, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 197, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 410, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 400, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 398, 0, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 387, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 384, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 379, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 363, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 0, 0, 0, 0, 99, 74, 102,
	351, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 324, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 0, 0, 101, 0,
	310, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 308, 0, 101, 0, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 306, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	291, 0, 101, 0, 0, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 284, 0, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 283, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 0, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 274, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 239, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 216, 0, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 198, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 191, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 71, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 0, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 0, 97, 45, 31, 37, 0, 0, 41,
	13, 55, 14, 26, 0, 27, 0, 0, 0, 0,
	0, 0, 0, 48, 38, 39, 40, 0, 15, 18,
	0, 0, 0, 0, 0, 0, 0, 0, 11, 12,
	0, 0, 0, 0, 0, 28, 29, 0, 0, 21,
	22, 0, 49, 52, 0, 47, 54, 53, 50, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 36, 0,
	0, 0, 51, 0, 44, 0, 0, 33, 34, 35,
	0, 42, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 0, 0, 0, 0, 99, 203, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 0, 0, 101, 0,
	0, 0, 0, 99, 202, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 157, 0, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 155, 0, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 0, 0, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 0, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 86, 88, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 0, 97, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 45, 31, 37, 0, 0, 41, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 48, 38, 39, 40, 99, 74, 102, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 31,
	37, 0, 0, 41, 0, 0, 0, 0, 0, 0,
	49, 52, 0, 47, 54, 53, 50, 48, 38, 39,
	40, 0, 0, 0, 0, 32, 36, 0, 0, 0,
	51, 0, 44, 0, 0, 33, 34, 35, 0, 42,
	323, 0, 0, 0, 0, 0, 49, 52, 0, 47,
	54, 53, 50, 0, 0, 0, 0, 0, 45, 31,
	37, 32, 36, 41, 0, 0, 51, 0, 44, 0,
	0, 33, 34, 35, 0, 42, 305, 48, 38, 39,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 31,
	37, 0, 0, 41, 0, 0, 49, 52, 0, 47,
	54, 53, 50, 0, 0, 0, 201, 48, 38, 39,
	40, 32, 36, 0, 0, 0, 51, 0, 44, 0,
	0, 33, 34, 35, 0, 42, 0, 0, 110, 31,
	37, 0, 0, 41, 0, 55, 49, 52, 0, 47,
	54, 53, 50, 0, 0, 0, 188, 48, 38, 39,
	40, 32, 36, 0, 0, 0, 51, 0, 44, 0,
	0, 33, 34, 35, 0, 42, 45, 31, 37, 0,
	0, 41, 0, 0, 0, 0, 49, 52, 0, 47,
	54, 53, 50, 0, 0, 48, 38, 39, 40, 0,
	0, 32, 36, 0, 0, 0, 106, 0, 44, 0,
	0, 33, 34, 35, 0, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 49, 52, 0, 47, 54, 53,
	50, 0, 0, 89, 90, 91, 92, 93, 94, 32,
	36, 95, 96, 80, 51, 0, 44, 0, 0, 33,
	34, 35, 0, 42, 103, 0, 0, 69, 31, 37,
	0, 0, 41, 0, 0, 0, 0, 75, 76, 77,
	78, 79, 0, 0, 0, 101, 48, 38, 39, 40,
	99, 74, 102, 0, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 67, 31, 37, 0, 0, 41, 0,
	0, 0, 0, 0, 0, 49, 52, 0, 47, 54,
	53, 50, 48, 38, 39, 40, 0, 0, 0, 0,
	32, 36, 0, 0, 0, 51, 0, 44, 0, 0,
	33, 34, 35, 0, 42, 0, 0, 0, 0, 0,
	0, 49, 52, 0, 47, 54, 53, 50, 89, 90,
	91, 92, 93, 94, 0, 0, 32, 36, 80, 0,
	0, 51, 0, 44, 0, 0, 33, 34, 35, 103,
	42, 89, 90, 91, 92, 93, 94, 0, 0, 0,
	0, 80, 0, 0, 77, 78, 79, 0, 0, 0,
	101, 0, 103, 0, 0, 99, 74, 102, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 0, 0, 0, 0, 99, 74,
	102, 0, 97,
}

var yyPact = [...]int16{
	-58, -1000, 2280, -58, -1000, -77, -77, -1000, -1000, -1000,
	-1000, -1000, -1000, 3072, 3072, 326, 295, -1000, 210, -1000,
	-1000, 3189, 3153, 2132, -1000, -1000, 3072, 3034, 3072, 209,
	-43, -1000, 3072, 3072, 3072, 3072, 3072, -1000, -1000, -1000,
	-1000, 134, -40, 124, 3072, 62, -1000, 85, 83, 82,
	-11, -77, 3072, 81, 79, 319, 230, -1000, 2280, -77,
	-1000, 232, 2200, 2200, 208, 201, -58, 76, 2550, 74,
	2482, 3072, 3072, 3072, 325, 3072, 3072, 3072, 3072, 3072,
	3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072, 3072,
	3072, 3072, 3072, 3072, 3072, -1000, -1000, 3072, 3072, 3072,
	3072, 3072, 2994, 3072, 3072, 2064, -58, 281, -29, 704,
	62, 1996, -77, 2954, 3239, 3239, 3239, -43, 2414, -43,
	2346, 319, 53, -38, 3072, -77, 37, -1000, 124, 124,
	-12, 124, 204, -57, 1928, 3072, 3072, 124, 118, -77,
	124, 3072, 2200, 3072, 3072, 229, -1000, 3072, -77, -1000,
	-58, 3072, -58, 181, 3072, 3072, 3072, 3072, 2200, 1860,
	2618, -1000, 3216, 3216, 3239, 3239, 3239, 2200, 3101, 3101,
	2806, 2806, 3101, 3101, 3101, 3101, 2200, 2200, 2200, 2200,
	2200, 2200, 2200, 2686, 2200, 2754, 195, 636, 3072, 2200,
	2754, -58, 180, -77, 3072, -77, 3072, -58, -77, 255,
	568, 3072, 324, 321, 193, 319, -1000, -24, -77, 318,
	-31, -31, 124, -31, -77, -38, -1000, 171, 1792, 35,
	50, 317, 3072, -14, -33, 1724, 1656, 500, 3072, 232,
	3072, 177, 1588, 176, 276, 141, 131, 125, 121, 3072,
	46, -1000, -1000, 2894, 1520, 175, -1000, 1452, 315, 1384,
	170, 253, -28, -1000, -1000, 237, 2280, -1000, 2858, 1316,
	-1000, -1000, 203, 45, 115, -77, -66, -77, 3072, -1000,
	-18, 311, 44, -1000, -1000, -1000, -1000, 3072, 233, -33,
	124, 168, -77, 3072, -1000, -1000, 3072, 232, 2200, -43,
	-1000, -58, -1000, 194, 41, -1000, 31, -1000, 27, -1000,
	21, -1000, 2200, -1000, 1248, -1000, -1000, -1000, -58, -1000,
	3072, -1000, -34, -1000, -1000, 236, 3072, 164, -1000, -1000,
	-58, 205, 1180, -1000, -1000, -58, 202, 200, -4, -77,
	-1000, -24, 124, -32, 124, -1000, 432, 3072, 162, -5,
	-1000, 3072, 2200, 1112, 157, 199, -58, -1000, -1000, -1000,
	-1000, -1000, 156, 1044, 155, -1000, -1000, -58, 976, 223,
	-1000, -1000, -58, -1000, 152, -58, -58, 197, 149, -31,
	148, -77, -31, -1000, 3072, 908, -1000, -77, 840, -1000,
	-1000, -58, 144, -1000, -58, -1000, -1000, -58, -58, -1000,
	-1000, 140, 139, -58, -1000, -1000, 308, 772, -1000, 3072,
	3072, 138, 274, 136, -1000, -1000, -1000, -1000, 114, 124,
	-1000, -33, 2200, 273, 189, -1000, -1000, -31, 112, 183,
	-58, -1000, -58, 108, 107, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 40, 356, 6, 308, 355, 354, 353, 352, 348,
	341, 5, 1, 339, 334, 12, 9, 10, 0, 41,
	32, 333, 2, 4, 331, 21, 347, 346, 111, 8,
	11, 48,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 5, 6, 6, 7, 7, 7, 8, 8, 8,
	8, 13, 14, 14, 14, 14, 14, 15, 16, 9,
	10, 10, 10, 10, 10, 11, 11, 12, 19, 19,
	19, 17, 17, 17, 17, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 20, 20, 20,
	20, 20, 20, 20, 21, 21, 22, 22, 23, 23,
	23, 24, 24, 24, 24, 24, 24, 25, 26, 26,
	27, 27, 27, 28, 28, 30, 30, 31, 29, 29,
	29, 29,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 1, 1, 13, 12, 9, 8, 1, 1,
	6, 5, 6, 5, 6, 5, 6, 5, 1, 1,
	1, 4, 3, 3, 5, 7, 5, 4, 7, 9,
	5, 6, 0, 1, 1, 2, 2, 4, 3, 7,
	0, 1, 1, 2, 2, 4, 4, 3, 0, 1,
	4, 0, 1, 4, 4, 1, 1, 2, 2, 2,
	2, 4, 2, 4, 1, 1, 1, 1, 5, 3,
	3, 7, 8, 8, 9, 2, 5, 7, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 3, 3, 3, 5, 4, 5, 4, 4,
	4, 1, 4, 4, 4, 6, 8, 7, 6, 10,
	5, 3, 2, 4, 4, 6, 3, 1, 3, 2,
	2, 5, 2, 6, 2, 5, 2, 3, 0, 3,
	6, 6, 5, 5, 6, 5, 5, 1, 0, 1,
	2, 1, 1, 0, 1, 1, 2, 1, 0, 2,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -26, -2, -27, 76, -30, -31, 84, -3,
	-4, 38, 39, 10, 12, 28, -7, -8, 29, -9,
	-13, 49, 50, -18, -5, -6, 13, 15, 45, 46,
	-25, 5, 67, 77, 78, 79, 68, 6, 24, 25,
	26, 9, 81, -22, 74, 4, -24, 55, 23, 52,
	58, 72, 53, 57, 56, 11, -17, -26, -27, -30,
	-31, -17, -18, -18, 4, 14, 72, 4, -18, 4,
	-18, 60, 61, 27, 80, 66, 67, 68, 69, 70,
	42, 43, 44, 17, 18, 64, 19, 65, 20, 32,
	33, 34, 35, 36, 37, 40, 41, 83, 21, 79,
	22, 74, 81, 53, 16, -18, 72, -19, -4, -18,
	4, -18, 72, 81, -18, -18, -18, -25, -18, -25,
	-18, 74, 4, 82, -28, -30, -20, 4, 68, -22,
	58, 51, 59, 81, -18, 74, 74, 74, 74, 72,
	81, -28, -18, 74, 74, -19, 4, 60, 63, -3,
	72, 13, 72, -1, 74, 74, 74, 74, -18, -18,
	-18, 4, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -17, -18, 62, -18,
	-18, 72, -1, -30, 16, 63, 76, 72, 72, -28,
	-18, 62, 80, 80, -19, 74, -22, -17, 72, 80,
	-20, -20, 81, -20, 72, 82, 75, -17, -18, -20,
	-20, 54, -28, -20, -23, -18, -18, -18, 60, -17,
	-28, -1, -18, -1, 73, -17, -17, -17, -17, 62,
	8, 75, 82, 62, -18, -1, 73, -18, -28, -18,
	-1, -28, -14, -16, -15, 48, 47, 82, 62, -18,
	4, 4, 75, 8, -19, 63, -29, -30, -28, 4,
	-20, -28, 8, 75, 75, 75, 75, 63, 4, -23,
	82, -29, 63, 62, 75, 75, 63, -17, -18, -25,
	73, 72, 73, 30, 8, 75, 8, 75, 8, 75,
	8, 75, -18, 75, -18, 82, 82, 73, 72, 4,
	76, 73, -10, -12, -11, 48, 47, -28, -15, -16,
	62, -3, -18, 82, 82, 72, 75, 75, 8, -30,
	82, -17, 82, -21, 4, 75, -18, 63, -29, -20,
	73, -28, -18, -18, -1, 4, 72, 75, 75, 75,
	75, 82, -1, -18, -28, -11, -12, 62, -18, -17,
	73, -1, 62, 82, -1, 72, 72, 75, -29, -20,
	-28, 63, -20, 75, 63, -18, 73, 72, -18, 75,
	73, 72, -1, 73, 72, 73, -1, 62, 62, -1,
	73, -1, -1, 72, 73, 73, -28, -18, 75, -28,
	62, -1, 73, -1, -1, -1, 73, 73, -1, 4,
	75, -23, -18, 73, 31, 73, 73, -20, -29, 31,
	72, 73, 72, -1, -1, 73, 73,
}

var yyDef = [...]int16{
	158, -2, -2, 158, 159, 162, 161, 165, 167, 3,
	6, 7, 8, 61, 0, 0, 12, 13, 0, 18,
	19, 0, 0, -2, 29, 30, 0, -2, 0, 0,
	65, 66, 0, 0, 0, 0, 0, 74, 75, 76,
	77, 0, 163, 0, 0, 157, 121, 0, 0, 0,
	0, 163, 0, 0, 0, 58, 0, 2, -2, 160,
	166, 9, 62, 10, 0, 0, 158, 157, 0, 157,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 110, 0, 0, 0,
	0, 61, 0, 0, 0, 0, 158, 0, 0, 62,
	-2, 0, 163, 0, 67, 68, 69, -2, 0, -2,
	0, 58, 0, -2, 61, 164, 0, 137, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 0, 163,
	0, 148, 132, 0, 0, 0, 59, 61, 163, 4,
	158, 0, 158, 0, 61, 61, 61, 61, 32, 0,
	79, 80, 89, 90, 91, 92, 93, 94, 95, 96,
	-2, -2, 99, 100, 101, 102, 103, 104, 105, 106,
	107, 108, 111, 112, 113, 114, 0, 0, 0, 131,
	136, 158, 0, 161, 0, 163, 0, 158, 163, 42,
	0, 0, 0, 0, 0, 58, 147, 168, 163, 0,
	139, 140, 0, 142, 163, 146, 88, 0, 0, 0,
	0, 0, 148, 0, 168, 0, 0, 0, 61, 33,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 120, 0, 0, 0, 37, 0, 0, 0,
	0, 50, 163, 43, 44, 0, -2, 119, 0, 0,
	71, 73, 0, 0, 0, -2, 0, 170, 61, 138,
	0, 0, 0, 116, 122, 123, 124, 0, 0, 168,
	0, 0, -2, 0, 133, 134, 0, 31, 63, -2,
	11, 158, 36, 0, 0, -2, 0, -2, 0, -2,
	0, -2, 78, 117, 0, 155, 156, 34, 158, 60,
	0, 40, 163, 51, 52, 0, 61, 0, 45, 46,
	158, 0, 0, 152, 153, 158, 0, 0, 0, -2,
	86, 168, 0, 163, 0, 115, 0, 0, 0, 0,
	130, 0, 149, 0, 0, 0, 158, -2, -2, -2,
	-2, 154, 0, 0, 0, 53, 54, 158, 62, 0,
	41, 48, 158, 151, 0, 158, 158, 0, 0, 141,
	0, 163, 144, 125, 0, 0, 128, 163, 0, 135,
	35, 158, 0, 38, 158, 49, 57, 158, 158, 47,
	81, 0, 0, 158, 87, 143, 0, 0, 127, 148,
	0, 0, 17, 0, 55, 56, 82, 83, 0, 0,
	126, 168, 150, 16, 0, 39, 84, 145, 0, 0,
	158, 129, 158, 0, 0, 15, 14,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	84, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 70, 79, 3,
	74, 75, 68, 66, 63, 67, 80, 69, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 62, 76,
	65, 60, 64, 61, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 81, 3, 82, 78, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 83, 73,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 71,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:88
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:92
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:98
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = []ast.Stmt{yyDollar[2].stmt}
			} else {
				yyVAL.stmts = []ast.Stmt{}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmts = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:109
		{
			if yyDollar[3].stmt != nil {
				yyVAL.stmts = append(yyDollar[1].stmts, yyDollar[3].stmt)
				if l, ok := yylex.(*Lexer); ok {
					l.stmts = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:120
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:124
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:128
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:133
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:138
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:143
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:148
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:153
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:158
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 14:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:162
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:167
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:172
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:177
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:195
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:200
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:205
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:210
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:215
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:220
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:225
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:230
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:237
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:241
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:247
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:254
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:258
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:275
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:280
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:285
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:295
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmts: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:300
		{
			yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmts: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 39:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:305
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmts: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:310
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:316
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:323
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:327
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:331
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:335
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 46:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:340
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 47:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:351
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:358
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:364
		{
			yyVAL.stmt_switch = &ast.SwitchStmt{Expr: yyDollar[2].expr, Body: yyDollar[5].stmt_switch_cases}
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:371
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:375
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:379
		{
			yyVAL.stmt_switch_cases = &ast.SwitchBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:383
		{
			body := yyVAL.stmt_switch_cases.(*ast.SwitchBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_switch_case)
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:388
		{
			body := yyVAL.stmt_switch_cases.(*ast.SwitchBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_switch_default
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:399
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:404
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmts: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:411
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:416
		{
			yyVAL.expr_idents = []string{}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:420
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:424
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:432
		{
			yyVAL.exprs = nil
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:436
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:440
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:447
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:456
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:460
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:465
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:470
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:475
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:480
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:485
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:490
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:495
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:500
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:505
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:510
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:515
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 78:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:520
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:525
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:530
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 81:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:535
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmts: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 82:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:540
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmts: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 83:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:545
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmts: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 84:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:550
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmts: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:555
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:560
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 87:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:565
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:570
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:575
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:580
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:585
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:590
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:595
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:600
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:605
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:610
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:615
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:620
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:625
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:630
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:635
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:640
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:645
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:650
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:655
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:660
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:665
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:670
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:675
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:680
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:685
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:690
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:695
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:700
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:705
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:710
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:715
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:720
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:725
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:730
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:735
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:740
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:745
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:755
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:760
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 126:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:765
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 127:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:770
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:775
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 129:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:781
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:787
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:792
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:797
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:802
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:807
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 135:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:812
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:817
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:825
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:829
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:838
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:847
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:857
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:861
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:870
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 144:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:876
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:880
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:890
		{
			yyVAL.slice_count = 1
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:894
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:901
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:905
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:909
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:919
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 152:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:923
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:927
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 154:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:931
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:935
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 156:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:939
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:945
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
