// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:47
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             ast.Stmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	exprs                         []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"','",
	"'!'",
	"'.'",
	"'['",
	"']'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1187

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	61, 90,
	62, 90,
	80, 6,
	81, 90,
	-2, 2,
	-1, 24,
	81, 91,
	-2, 23,
	-1, 29,
	61, 90,
	62, 90,
	-2, 71,
	-1, 63,
	61, 90,
	62, 90,
	81, 90,
	-2, 6,
	-1, 114,
	16, 72,
	81, 72,
	-2, 191,
	-1, 124,
	1, 99,
	8, 99,
	47, 99,
	48, 99,
	61, 99,
	62, 99,
	63, 99,
	76, 99,
	77, 99,
	79, 99,
	80, 99,
	81, 99,
	85, 99,
	86, 99,
	-2, 94,
	-1, 126,
	1, 101,
	8, 101,
	47, 101,
	48, 101,
	61, 101,
	62, 101,
	63, 101,
	76, 101,
	77, 101,
	79, 101,
	80, 101,
	81, 101,
	85, 101,
	86, 101,
	-2, 94,
	-1, 130,
	4, 180,
	51, 180,
	58, 180,
	59, 180,
	-2, 116,
	-1, 242,
	79, 171,
	83, 171,
	-2, 191,
	-1, 284,
	63, 6,
	-2, 90,
	-1, 298,
	77, 205,
	85, 205,
	-2, 197,
	-1, 319,
	77, 205,
	-2, 197,
	-1, 326,
	1, 93,
	8, 93,
	47, 93,
	48, 93,
	61, 93,
	62, 93,
	63, 93,
	77, 93,
	79, 93,
	80, 93,
	81, 93,
	85, 93,
	86, 93,
	-2, 94,
	-1, 331,
	1, 19,
	47, 19,
	48, 19,
	63, 19,
	77, 19,
	80, 19,
	86, 19,
	-2, 147,
	-1, 333,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	77, 21,
	80, 21,
	86, 21,
	-2, 149,
	-1, 362,
	1, 25,
	47, 25,
	48, 25,
	63, 25,
	77, 25,
	80, 25,
	86, 25,
	-2, 147,
	-1, 364,
	1, 27,
	47, 27,
	48, 27,
	63, 27,
	77, 27,
	80, 27,
	86, 27,
	-2, 149,
	-1, 376,
	77, 203,
	85, 203,
	-2, 198,
	-1, 393,
	1, 18,
	47, 18,
	48, 18,
	63, 18,
	77, 18,
	80, 18,
	86, 18,
	-2, 146,
	-1, 394,
	1, 20,
	47, 20,
	48, 20,
	63, 20,
	77, 20,
	80, 20,
	86, 20,
	-2, 148,
	-1, 416,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	77, 24,
	80, 24,
	86, 24,
	-2, 146,
	-1, 417,
	1, 26,
	47, 26,
	48, 26,
	63, 26,
	77, 26,
	80, 26,
	86, 26,
	-2, 148,
}

const yyPrivate = 57344

const yyLast = 4340

var yyAct = [...]int16{
	67, 222, 219, 10, 24, 299, 249, 2, 352, 281,
	319, 353, 217, 282, 216, 9, 68, 432, 355, 354,
	6, 34, 9, 72, 284, 283, 9, 9, 298, 108,
	111, 377, 116, 9, 119, 130, 9, 121, 122, 123,
	125, 127, 227, 233, 434, 8, 227, 227, 379, 141,
	227, 147, 317, 65, 120, 157, 368, 9, 150, 311,
	140, 124, 126, 9, 24, 439, 313, 158, 314, 230,
	227, 134, 227, 83, 164, 165, 166, 167, 201, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 385,
	363, 189, 190, 191, 192, 294, 194, 196, 197, 104,
	65, 147, 465, 205, 77, 105, 227, 199, 138, 148,
	423, 212, 226, 207, 227, 137, 139, 206, 312, 227,
	134, 107, 227, 309, 459, 7, 460, 227, 135, 417,
	416, 129, 64, 202, 236, 238, 427, 361, 155, 156,
	250, 140, 251, 252, 394, 98, 99, 83, 84, 85,
	47, 258, 134, 456, 253, 393, 142, 257, 157, 259,
	382, 364, 134, 157, 374, 335, 134, 138, 65, 510,
	292, 157, 132, 202, 137, 139, 80, 81, 82, 102,
	223, 210, 132, 104, 162, 332, 267, 135, 77, 105,
	152, 151, 270, 146, 370, 274, 268, 277, 136, 138,
	140, 272, 145, 330, 289, 128, 137, 139, 362, 138,
	157, 144, 246, 138, 143, 515, 137, 139, 514, 135,
	137, 139, 512, 509, 369, 505, 297, 371, 296, 135,
	507, 127, 140, 135, 506, 200, 65, 305, 250, 107,
	499, 497, 140, 132, 316, 318, 140, 325, 263, 494,
	493, 482, 126, 334, 160, 479, 333, 336, 157, 476,
	475, 474, 467, 98, 99, 83, 346, 348, 326, 466,
	453, 343, 133, 132, 331, 24, 157, 447, 360, 365,
	358, 224, 445, 132, 357, 444, 136, 136, 443, 136,
	442, 438, 413, 397, 388, 241, 136, 136, 342, 136,
	501, 104, 339, 329, 327, 384, 77, 105, 306, 278,
	157, 390, 386, 405, 391, 269, 110, 161, 487, 264,
	485, 157, 463, 461, 451, 419, 392, 232, 132, 159,
	117, 115, 415, 410, 132, 359, 65, 504, 396, 495,
	404, 350, 398, 399, 70, 401, 411, 355, 354, 11,
	409, 300, 132, 408, 284, 283, 375, 414, 132, 293,
	228, 229, 5, 231, 489, 425, 424, 63, 221, 239,
	244, 245, 136, 248, 429, 300, 437, 153, 3, 113,
	440, 136, 381, 62, 224, 406, 341, 149, 315, 302,
	291, 241, 136, 290, 168, 154, 61, 69, 446, 200,
	448, 449, 1, 50, 452, 380, 132, 420, 454, 220,
	218, 66, 65, 457, 280, 21, 351, 458, 422, 20,
	132, 426, 18, 17, 376, 23, 19, 470, 26, 27,
	25, 4, 0, 0, 131, 0, 0, 0, 0, 0,
	0, 0, 300, 136, 136, 376, 295, 0, 477, 478,
	0, 0, 0, 480, 481, 303, 0, 0, 0, 484,
	0, 486, 136, 250, 492, 228, 310, 0, 136, 491,
	462, 200, 0, 200, 464, 0, 0, 132, 0, 0,
	0, 0, 0, 498, 0, 500, 0, 503, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 508,
	0, 193, 0, 511, 300, 209, 132, 0, 513, 0,
	0, 0, 488, 0, 0, 0, 0, 0, 372, 0,
	0, 136, 136, 0, 0, 136, 136, 0, 225, 200,
	136, 0, 136, 0, 0, 247, 383, 0, 0, 235,
	0, 0, 387, 0, 0, 256, 0, 0, 0, 0,
	0, 0, 254, 255, 0, 0, 0, 0, 132, 260,
	261, 0, 0, 0, 0, 132, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 136, 0,
	0, 0, 0, 0, 0, 136, 132, 0, 0, 0,
	271, 0, 0, 0, 0, 421, 279, 0, 0, 0,
	428, 0, 0, 0, 430, 0, 433, 285, 286, 0,
	0, 0, 0, 0, 301, 0, 136, 300, 0, 0,
	304, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 0, 0, 0,
	136, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	324, 0, 0, 0, 0, 0, 0, 0, 0, 469,
	0, 0, 0, 0, 0, 0, 0, 0, 356, 0,
	49, 35, 41, 0, 0, 45, 14, 60, 15, 28,
	0, 29, 373, 0, 0, 0, 256, 0, 0, 53,
	42, 43, 44, 0, 16, 30, 0, 0, 378, 0,
	0, 0, 0, 0, 12, 13, 0, 389, 496, 0,
	0, 31, 32, 0, 502, 22, 33, 0, 54, 57,
	0, 51, 59, 58, 55, 0, 52, 0, 0, 0,
	0, 0, 0, 0, 36, 0, 38, 40, 0, 407,
	39, 0, 56, 0, 48, 0, 0, 0, 37, 0,
	46, 0, 412, 0, 107, 86, 87, 89, 91, 101,
	103, 0, 0, 0, 0, 76, 0, 0, 431, 0,
	92, 93, 94, 95, 96, 97, 0, 0, 98, 99,
	83, 84, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 288, 75, 90, 88, 78, 79, 100, 0, 80,
	81, 82, 102, 0, 0, 0, 104, 0, 0, 0,
	468, 77, 105, 287, 0, 0, 0, 472, 0, 0,
	0, 0, 0, 107, 86, 87, 89, 91, 101, 103,
	0, 0, 0, 0, 76, 0, 0, 0, 483, 92,
	93, 94, 95, 96, 97, 0, 0, 98, 99, 83,
	84, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	266, 75, 90, 88, 78, 79, 100, 0, 80, 81,
	82, 102, 0, 0, 0, 104, 0, 0, 0, 0,
	77, 105, 265, 107, 86, 87, 89, 91, 101, 103,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 92,
	93, 94, 95, 96, 97, 0, 0, 98, 99, 83,
	84, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 73, 74,
	0, 75, 90, 88, 78, 79, 100, 0, 80, 81,
	82, 102, 0, 203, 0, 104, 0, 0, 0, 0,
	77, 105, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 435, 0, 436, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	90, 88, 78, 79, 100, 0, 80, 81, 82, 102,
	0, 0, 0, 104, 0, 0, 0, 0, 77, 105,
	418, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	90, 88, 78, 79, 100, 0, 80, 81, 82, 102,
	0, 0, 0, 104, 0, 0, 0, 0, 77, 105,
	395, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	90, 88, 78, 79, 100, 0, 80, 81, 82, 102,
	0, 0, 0, 104, 0, 0, 0, 0, 77, 105,
	367, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	90, 88, 78, 79, 100, 0, 80, 81, 82, 102,
	0, 0, 0, 104, 0, 0, 0, 0, 77, 105,
	338, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	90, 88, 78, 79, 100, 0, 80, 81, 82, 102,
	0, 0, 0, 104, 322, 0, 323, 0, 77, 105,
	107, 86, 87, 89, 91, 101, 103, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 92, 93, 94, 95,
	96, 97, 0, 0, 98, 99, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 73, 74, 0, 75, 90,
	88, 78, 79, 100, 0, 80, 81, 82, 102, 0,
	0, 0, 104, 0, 0, 0, 0, 77, 105, 107,
	86, 87, 89, 91, 101, 103, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 92, 93, 94, 95, 96,
	97, 0, 0, 98, 99, 83, 84, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 90, 88,
	78, 79, 100, 0, 80, 81, 82, 102, 0, 0,
	0, 104, 490, 0, 0, 0, 77, 105, 107, 86,
	87, 89, 91, 101, 103, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 92, 93, 94, 95, 96, 97,
	0, 0, 98, 99, 83, 84, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 473, 75, 90, 88, 78,
	79, 100, 0, 80, 81, 82, 102, 0, 0, 0,
	104, 0, 0, 0, 0, 77, 105, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 90, 88, 78, 79,
	100, 0, 80, 81, 82, 102, 0, 0, 0, 104,
	471, 0, 0, 0, 77, 105, 107, 86, 87, 89,
	91, 101, 103, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 92, 93, 94, 95, 96, 97, 0, 0,
	98, 99, 83, 84, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 455, 75, 90, 88, 78, 79, 100,
	0, 80, 81, 82, 102, 0, 0, 0, 104, 0,
	0, 0, 0, 77, 105, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 90, 88, 78, 79, 100, 0,
	80, 81, 82, 102, 0, 450, 0, 104, 0, 0,
	0, 0, 77, 105, 107, 86, 87, 89, 91, 101,
	103, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	92, 93, 94, 95, 96, 97, 0, 0, 98, 99,
	83, 84, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 90, 88, 78, 79, 100, 0, 80,
	81, 82, 102, 0, 0, 0, 104, 441, 0, 0,
	0, 77, 105, 107, 86, 87, 89, 91, 101, 103,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 92,
	93, 94, 95, 96, 97, 0, 0, 98, 99, 83,
	84, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 90, 88, 78, 79, 100, 0, 80, 81,
	82, 102, 0, 402, 0, 104, 0, 0, 0, 0,
	77, 105, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 400, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	90, 88, 78, 79, 100, 0, 80, 81, 82, 102,
	0, 0, 0, 104, 0, 349, 0, 0, 77, 105,
	107, 86, 87, 89, 91, 101, 103, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 92, 93, 94, 95,
	96, 97, 0, 0, 98, 99, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 90,
	88, 78, 79, 100, 0, 80, 81, 82, 102, 0,
	344, 0, 104, 0, 0, 0, 0, 77, 105, 107,
	86, 87, 89, 91, 101, 103, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 92, 93, 94, 95, 96,
	97, 0, 0, 98, 99, 83, 84, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 90, 88,
	78, 79, 100, 0, 80, 81, 82, 102, 0, 340,
	0, 104, 0, 0, 0, 0, 77, 105, 107, 86,
	87, 89, 91, 101, 103, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 92, 93, 94, 95, 96, 97,
	0, 0, 98, 99, 83, 84, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 90, 88, 78,
	79, 100, 0, 80, 81, 82, 102, 0, 328, 0,
	104, 0, 0, 0, 0, 77, 105, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 90, 88, 78, 79,
	100, 0, 80, 81, 82, 102, 0, 0, 0, 104,
	321, 0, 0, 0, 77, 105, 107, 86, 87, 89,
	91, 101, 103, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 92, 93, 94, 95, 96, 97, 0, 0,
	98, 99, 83, 84, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 320, 75, 90, 88, 78, 79, 100,
	0, 80, 81, 82, 102, 0, 0, 0, 104, 0,
	0, 0, 0, 77, 105, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 90, 88, 78, 79, 100, 0,
	80, 81, 82, 102, 0, 0, 0, 104, 308, 0,
	0, 0, 77, 105, 107, 86, 87, 89, 91, 101,
	103, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	92, 93, 94, 95, 96, 97, 0, 0, 98, 99,
	83, 84, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 90, 88, 78, 79, 100, 0, 80,
	81, 82, 102, 0, 0, 0, 104, 307, 0, 0,
	0, 77, 105, 107, 86, 87, 89, 91, 101, 103,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 92,
	93, 94, 95, 96, 97, 0, 0, 98, 99, 83,
	84, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 90, 88, 78, 79, 100, 0, 80, 81,
	82, 102, 0, 0, 0, 104, 0, 275, 0, 0,
	77, 105, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 0, 0, 0, 104, 0, 0, 0, 0, 77,
	105, 107, 86, 87, 89, 91, 101, 103, 0, 0,
	0, 0, 76, 0, 0, 0, 0, 92, 93, 94,
	95, 96, 97, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 106, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	90, 88, 78, 79, 100, 0, 80, 81, 82, 102,
	0, 0, 0, 104, 234, 0, 0, 0, 77, 105,
	107, 86, 87, 89, 91, 101, 103, 0, 0, 0,
	0, 76, 0, 0, 0, 0, 92, 93, 94, 95,
	96, 97, 0, 0, 98, 99, 83, 84, 85, 0,
	0, 0, 0, 0, 0, 0, 0, 106, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 75, 90,
	88, 78, 79, 100, 0, 80, 81, 82, 102, 0,
	208, 0, 104, 0, 0, 0, 0, 77, 105, 107,
	86, 87, 89, 91, 101, 103, 0, 0, 0, 0,
	76, 0, 0, 0, 0, 92, 93, 94, 95, 96,
	97, 0, 0, 98, 99, 83, 84, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 75, 90, 88,
	78, 79, 100, 0, 80, 81, 82, 102, 0, 198,
	0, 104, 0, 0, 0, 0, 77, 105, 107, 86,
	87, 89, 91, 101, 103, 0, 0, 0, 0, 76,
	0, 0, 0, 0, 92, 93, 94, 95, 96, 97,
	0, 0, 98, 99, 83, 84, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 75, 90, 88, 78,
	79, 100, 0, 80, 81, 82, 102, 0, 0, 0,
	104, 0, 0, 0, 0, 77, 105, 107, 86, 87,
	89, 91, 101, 103, 0, 0, 0, 0, 76, 0,
	0, 0, 0, 92, 93, 94, 95, 96, 97, 0,
	0, 98, 99, 83, 84, 85, 0, 0, 0, 0,
	0, 0, 0, 0, 106, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 75, 90, 88, 78, 79,
	100, 0, 80, 81, 82, 102, 0, 0, 0, 104,
	0, 0, 0, 0, 215, 105, 107, 86, 87, 89,
	91, 101, 103, 0, 0, 0, 0, 76, 0, 0,
	0, 0, 92, 93, 94, 95, 96, 97, 0, 0,
	98, 99, 83, 84, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 75, 90, 88, 78, 79, 100,
	0, 80, 81, 82, 102, 0, 0, 0, 104, 0,
	0, 0, 0, 214, 105, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 75, 90, 88, 78, 79, 100, 0,
	80, 81, 82, 102, 0, 0, 0, 211, 0, 0,
	0, 0, 77, 105, 107, 86, 87, 89, 91, 101,
	103, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	92, 93, 94, 95, 96, 97, 0, 0, 98, 99,
	83, 84, 85, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 90, 88, 78, 79, 100, 0, 80,
	81, 82, 102, 0, 0, 0, 163, 0, 0, 0,
	0, 77, 105, 107, 86, 87, 89, 91, 101, 103,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 99, 83,
	84, 85, 0, 0, 0, 0, 0, 0, 0, 0,
	106, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 75, 90, 88, 78, 79, 100, 0, 80, 81,
	82, 102, 0, 0, 0, 104, 0, 0, 0, 0,
	77, 105, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	75, 90, 88, 78, 79, 100, 0, 80, 81, 82,
	102, 242, 35, 41, 104, 0, 45, 0, 0, 77,
	105, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 42, 43, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 49,
	35, 41, 0, 0, 45, 0, 0, 0, 138, 54,
	57, 0, 51, 59, 58, 243, 139, 52, 53, 42,
	43, 44, 0, 0, 0, 36, 0, 38, 240, 0,
	0, 39, 0, 56, 0, 48, 237, 0, 0, 37,
	0, 46, 0, 0, 0, 0, 0, 54, 57, 0,
	51, 59, 58, 55, 0, 52, 0, 0, 0, 0,
	0, 0, 0, 36, 0, 38, 40, 0, 0, 39,
	0, 56, 0, 48, 0, 0, 0, 37, 0, 46,
	366, 49, 35, 41, 0, 0, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 42, 43, 44, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 242,
	35, 41, 0, 0, 45, 0, 0, 0, 0, 54,
	57, 0, 51, 59, 58, 55, 0, 52, 53, 42,
	43, 44, 0, 0, 0, 36, 0, 38, 40, 0,
	0, 39, 0, 56, 0, 48, 0, 0, 0, 37,
	0, 46, 337, 0, 0, 0, 138, 54, 57, 0,
	51, 59, 58, 243, 139, 52, 0, 0, 0, 0,
	0, 0, 0, 36, 0, 38, 240, 0, 0, 39,
	0, 56, 0, 48, 0, 0, 0, 37, 0, 46,
	114, 35, 41, 0, 0, 45, 0, 60, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 53,
	42, 43, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 49, 35,
	41, 0, 0, 45, 0, 0, 0, 0, 54, 57,
	0, 51, 59, 58, 55, 0, 52, 53, 42, 43,
	44, 0, 0, 0, 36, 0, 38, 40, 0, 0,
	39, 0, 109, 0, 48, 0, 112, 0, 37, 0,
	46, 0, 0, 0, 0, 0, 54, 57, 0, 51,
	59, 58, 55, 0, 52, 0, 0, 0, 0, 0,
	0, 0, 36, 0, 38, 40, 0, 0, 39, 0,
	56, 0, 48, 0, 276, 0, 37, 0, 46, 49,
	35, 41, 0, 0, 45, 0, 0, 0, 49, 35,
	41, 0, 0, 45, 0, 0, 0, 0, 53, 42,
	43, 44, 0, 0, 0, 0, 0, 53, 42, 43,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 57, 0,
	51, 59, 58, 55, 0, 52, 54, 57, 213, 51,
	59, 58, 55, 36, 52, 38, 40, 0, 0, 39,
	0, 56, 36, 48, 38, 40, 0, 37, 39, 46,
	56, 0, 48, 0, 204, 0, 37, 0, 46, 49,
	35, 41, 0, 0, 45, 0, 0, 0, 49, 35,
	41, 0, 0, 45, 0, 0, 0, 0, 53, 42,
	43, 44, 0, 0, 0, 0, 0, 53, 42, 43,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 57, 0,
	51, 59, 58, 55, 0, 52, 54, 57, 195, 51,
	59, 58, 55, 36, 52, 38, 40, 0, 0, 39,
	0, 56, 36, 48, 38, 40, 0, 37, 39, 46,
	56, 0, 48, 0, 0, 0, 37, 0, 46, 49,
	35, 41, 0, 0, 45, 0, 0, 0, 49, 35,
	41, 0, 0, 45, 0, 0, 0, 0, 53, 42,
	43, 44, 0, 0, 0, 0, 0, 53, 42, 43,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 57, 0,
	51, 59, 58, 55, 0, 52, 54, 57, 0, 51,
	59, 58, 55, 36, 52, 38, 40, 0, 0, 39,
	0, 403, 36, 48, 38, 40, 0, 37, 39, 46,
	347, 0, 48, 0, 0, 0, 37, 0, 46, 49,
	35, 41, 0, 0, 45, 0, 0, 0, 49, 35,
	41, 0, 0, 45, 0, 0, 0, 0, 53, 42,
	43, 44, 0, 0, 0, 0, 0, 53, 42, 43,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 54, 57, 0,
	51, 59, 58, 55, 0, 52, 54, 57, 0, 51,
	59, 58, 55, 36, 52, 38, 40, 0, 0, 39,
	0, 345, 36, 48, 38, 40, 0, 37, 39, 46,
	273, 0, 48, 0, 0, 0, 37, 0, 46, 107,
	86, 87, 89, 91, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 99, 83, 84, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 90, 88,
	78, 79, 100, 0, 80, 81, 82, 102, 118, 35,
	41, 104, 0, 45, 0, 0, 77, 105, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 53, 42, 43,
	44, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 71, 35, 41, 0,
	0, 45, 0, 0, 0, 0, 54, 57, 0, 51,
	59, 58, 55, 0, 52, 53, 42, 43, 44, 0,
	0, 0, 36, 0, 38, 40, 0, 0, 39, 0,
	56, 0, 48, 0, 0, 0, 37, 0, 46, 0,
	0, 0, 0, 0, 54, 57, 0, 51, 59, 58,
	55, 0, 52, 107, 86, 87, 89, 91, 0, 0,
	36, 107, 38, 40, 0, 0, 39, 0, 56, 0,
	48, 0, 0, 0, 37, 0, 46, 98, 99, 83,
	84, 85, 0, 0, 0, 98, 99, 83, 84, 85,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 90, 88, 78, 79, 100, 0, 80, 81,
	82, 102, 78, 79, 100, 104, 80, 81, 82, 102,
	77, 105, 0, 104, 0, 0, 0, 0, 77, 105,
}

var yyPact = [...]int16{
	-60, -1000, -1000, 676, -60, -1000, -59, -59, -1000, -1000,
	-1000, -1000, -1000, -1000, 3844, 3844, 403, 340, -1000, -1000,
	-1000, -1000, 4202, -1000, 1384, -1000, -1000, -1000, 3844, 3626,
	265, 3844, 264, 4164, -30, -1000, 3844, 3844, 3844, 3844,
	3844, -1000, -1000, -1000, -1000, 137, -50, 172, 3844, 88,
	-1000, 146, 143, 134, 125, 35, -59, 3844, 123, 122,
	401, 87, -1000, 676, -59, -1000, -26, 2902, 2902, 263,
	251, 116, 3178, 3844, 3844, 3844, 3844, 400, 3844, 3844,
	3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844,
	3844, 3844, 3844, 3844, 3844, 3844, 3844, 3844, -1000, -1000,
	3844, 3844, 3844, 3844, 3844, 3835, 3844, 3844, 2833, -60,
	62, 897, 3754, 47, 88, -60, 2764, -59, 113, 3109,
	3745, 31, 31, 31, -30, 3040, -30, 2971, 374, 112,
	-24, 3844, -59, 46, -1000, 172, 172, -15, 172, 261,
	-42, 2695, 3844, 3844, 3387, 172, 168, -59, 172, 3844,
	3247, 3844, 3844, 102, -1000, 3844, 3844, -59, -1000, -60,
	3844, -60, 3844, 3844, 2902, 2902, 2626, 3316, -1000, 115,
	115, 233, 233, 233, 2902, 233, 233, 4255, 4255, 4255,
	4255, 4255, 4255, 2902, 2902, 2902, 2902, 2902, 2902, 115,
	4093, 233, 4247, 250, 827, 3844, 3247, 233, -60, 248,
	-59, 3844, -59, -60, 4024, 2557, 3664, 242, -59, 317,
	3844, 3844, 748, 3844, 399, 396, 101, 361, 24, -1000,
	-1000, 172, -1000, 374, -1000, -53, -59, 395, -36, -36,
	172, -36, -59, -24, -1000, 239, 2488, -1000, 2419, 54,
	3545, 172, 88, -25, 49, -13, 394, 3844, -33, -71,
	2350, 2281, 1315, 3844, -26, -26, 3844, 237, 2212, 236,
	205, 187, 3844, 96, -1000, -1000, 3507, 1245, 235, -1000,
	2143, 392, 231, -60, 2074, 4015, 3934, 2005, 321, 310,
	-23, -1000, -1000, 282, 676, 139, 92, -1000, 3425, 1175,
	-1000, -1000, 126, 158, -59, -36, 95, 358, -59, -54,
	-59, 3844, -1000, -37, 388, 91, -1000, -1000, -1000, -1000,
	46, 172, -1000, -1000, 3844, 18, -71, 172, 227, -59,
	3844, -1000, -1000, 3844, -26, 2902, -30, -1000, -60, -1000,
	86, -1000, 75, -1000, 3247, -1000, 1105, -1000, -1000, -1000,
	-60, -1000, -1000, 226, -60, -60, 1936, -60, 1867, 3925,
	319, -29, -1000, -1000, 280, 3844, 225, -1000, -1000, -60,
	279, 61, -1000, 60, -1000, 1035, -1000, -1000, 259, -36,
	172, 126, 41, 374, 126, 67, -59, -1000, -53, 172,
	-64, 172, -1000, -41, 966, 3844, 224, -11, -1000, 3844,
	2902, 1798, 223, -1000, -1000, -1000, 221, -1000, 218, 215,
	-60, 210, -60, -60, 1729, 258, -60, 203, -1000, -1000,
	-60, 1660, 100, -1000, -1000, -60, -1000, -1000, -1000, -60,
	55, -36, 257, 126, -1000, -1000, 256, 126, 33, 202,
	-36, 195, -59, -36, 172, -1000, 3844, 1591, -1000, -59,
	1522, -1000, -1000, -1000, -1000, -1000, 194, -1000, 193, 192,
	-60, -60, 188, -1000, -1000, -60, -60, -1000, 184, -1000,
	-59, -60, 254, -60, 252, 126, -1000, -1000, 370, -11,
	1453, -1000, 3844, 3844, -1000, -1000, -1000, 183, 182, 318,
	-1000, -1000, -1000, 172, 174, -60, 173, -60, 234, 172,
	-1000, -71, 2902, -1000, 316, 159, -36, -1000, 167, -1000,
	163, -60, -36, 156, 103, -60, -1000, -1000, 155, -1000,
	-60, 151, -1000, 148, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 7, 441, 3, 359, 440, 439, 438, 436, 435,
	433, 432, 429, 426, 11, 8, 425, 424, 13, 9,
	406, 0, 326, 14, 420, 2, 1, 12, 419, 56,
	417, 234, 415, 160, 6, 413, 21, 412, 388, 372,
	397, 5, 135, 45,
}

var yyR1 = [...]int8{
	0, 37, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 9, 9, 9, 9, 8, 8,
	8, 8, 4, 4, 4, 5, 7, 7, 6, 6,
	10, 10, 10, 11, 11, 11, 11, 11, 11, 11,
	11, 11, 11, 11, 16, 17, 17, 17, 17, 17,
	18, 19, 12, 13, 13, 13, 13, 13, 14, 14,
	15, 22, 22, 22, 29, 29, 29, 30, 30, 30,
	23, 23, 24, 24, 25, 26, 27, 27, 28, 28,
	20, 20, 20, 20, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 31, 31, 31, 31, 31, 31, 31, 32, 32,
	33, 33, 34, 34, 34, 35, 35, 35, 35, 35,
	35, 36, 38, 38, 39, 39, 39, 40, 40, 42,
	42, 43, 41, 41, 41, 41,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 3, 0, 1, 1, 1,
	2, 2, 5, 1, 1, 1, 1, 1, 6, 5,
	6, 5, 1, 1, 6, 5, 6, 5, 13, 12,
	9, 8, 1, 1, 1, 4, 3, 3, 3, 3,
	5, 7, 5, 4, 7, 5, 6, 7, 7, 8,
	7, 8, 8, 9, 6, 0, 1, 1, 2, 2,
	4, 3, 7, 0, 1, 1, 2, 2, 4, 4,
	3, 0, 1, 4, 0, 1, 3, 0, 1, 4,
	0, 1, 1, 1, 1, 2, 1, 4, 1, 4,
	0, 1, 4, 4, 1, 1, 2, 2, 2, 2,
	4, 2, 4, 1, 1, 1, 1, 5, 3, 3,
	8, 9, 10, 9, 10, 11, 2, 5, 7, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 3, 3, 3, 5, 4, 5, 4,
	4, 4, 1, 4, 3, 4, 4, 4, 4, 6,
	8, 7, 6, 10, 5, 3, 2, 4, 4, 6,
	3, 1, 3, 2, 2, 5, 2, 6, 2, 5,
	2, 3, 0, 3, 6, 6, 5, 5, 6, 5,
	5, 1, 0, 1, 2, 1, 1, 0, 1, 1,
	2, 1, 0, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -37, -1, -38, -2, -39, 80, -42, -43, 86,
	-3, -4, 38, 39, 10, 12, 28, -10, -11, -8,
	-12, -16, 49, -9, -21, -5, -7, -6, 13, 15,
	29, 45, 46, 50, -36, 5, 68, 82, 70, 74,
	71, 6, 24, 25, 26, 9, 84, -33, 78, 4,
	-35, 55, 60, 23, 52, 58, 76, 53, 57, 56,
	11, -20, -38, -39, -42, -43, -20, -21, -21, 4,
	14, 4, -21, 61, 62, 64, 27, 83, 67, 68,
	71, 72, 73, 42, 43, 44, 17, 18, 66, 19,
	65, 20, 32, 33, 34, 35, 36, 37, 40, 41,
	69, 21, 74, 22, 78, 84, 53, 16, -21, 76,
	-22, -21, 80, -4, 4, 76, -21, 76, 4, -21,
	84, -21, -21, -21, -36, -21, -36, -21, 78, 4,
	85, -40, -42, -31, 4, 71, -33, 58, 51, 59,
	84, -21, 78, 78, 78, 78, 78, 76, 84, -40,
	-21, 78, 78, -22, 4, 61, 62, 81, -3, 76,
	13, 76, 78, 78, -21, -21, -21, -21, 4, -21,
	-21, -21, -21, -21, -21, -21, -21, -21, -21, -21,
	-21, -21, -21, -21, -21, -21, -21, -21, -21, -21,
	-21, -21, -21, -20, -21, 63, -21, -21, 76, -1,
	-42, 16, 81, 76, 80, -21, 80, -1, 76, -40,
	78, 78, -21, 63, 83, 83, -23, -27, -24, -25,
	-28, 4, -26, 78, -33, -20, 76, 83, -31, -31,
	84, -31, 76, 85, 79, -20, -21, 79, -21, -31,
	71, -33, 4, 58, -31, -31, 54, -40, -31, -34,
	-21, -21, -21, 62, -20, -20, -40, -1, -21, -1,
	-20, -20, 63, 8, 79, 85, 63, -21, -1, 77,
	-21, -40, -1, 76, -21, 80, 80, -21, 77, -40,
	-17, -19, -18, 48, 47, -20, -20, 85, 63, -21,
	4, 4, 79, 8, 81, -31, -23, -27, 81, -41,
	-42, -40, 4, -31, -40, 8, 79, 79, 79, 79,
	-31, 84, 79, 79, 81, 4, -34, 85, -41, 81,
	63, 79, 79, 81, -20, -21, -36, 77, 76, 77,
	8, 79, 8, 79, -21, 79, -21, 85, 85, 77,
	76, 4, 77, -1, 76, 76, -21, 76, -21, 80,
	30, -13, -15, -14, 48, 47, -40, -18, -19, 63,
	-3, 8, 79, 8, 79, -21, 85, 85, -29, -31,
	78, 79, -31, -40, 79, 8, -42, 85, -20, 85,
	-32, 4, 79, -31, -21, 81, -41, -31, 77, -40,
	-21, -21, -1, 79, 79, 85, -1, 77, -1, -1,
	76, -1, 76, 76, -21, 4, 76, -40, -14, -15,
	63, -21, -20, 77, -1, 63, 79, 79, 85, 76,
	-30, -31, -29, 79, -25, -26, -29, 79, -31, -41,
	-31, -40, 81, -31, 85, 79, 81, -21, 77, 76,
	-21, 79, 77, 77, 77, 77, -1, 77, -1, -1,
	76, 76, -1, 77, -1, 63, 63, -1, -1, 79,
	81, 76, -29, 76, -29, 79, 77, 77, -40, -31,
	-21, 79, -40, 63, 77, 77, 77, -1, -1, 77,
	-1, -1, 77, -40, -1, 76, -1, 76, -29, 4,
	79, -34, -21, 77, 77, 31, -31, 77, -1, 77,
	-1, 76, -31, -41, 31, 76, 77, 77, -1, 77,
	76, -1, 77, -1, 77, 77,
}

var yyDef = [...]int16{
	192, -2, 1, -2, 192, 193, 196, 195, 199, 201,
	4, 7, 8, 9, 90, 0, 0, 13, 14, 15,
	16, 17, 0, 22, -2, 32, 33, 34, 0, -2,
	0, 0, 0, 0, 94, 95, 0, 0, 0, 0,
	0, 103, 104, 105, 106, 0, 197, 0, 0, 191,
	152, 0, 0, 0, 0, 0, 197, 0, 0, 0,
	71, 0, 3, -2, 194, 200, 10, 91, 11, 0,
	0, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 141,
	0, 0, 0, 0, 90, 0, 0, 0, 0, 192,
	0, 91, 0, 0, -2, 192, 0, 197, 191, 0,
	0, 96, 97, 98, -2, 0, -2, 0, 80, 0,
	-2, 90, 198, 0, 171, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 197, 0, 182,
	166, 0, 0, 0, 72, 90, 90, 197, 5, 192,
	0, 192, 90, 90, 36, 38, 0, 108, 109, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 142,
	143, 144, 145, 0, 0, 0, 165, 170, 192, 0,
	195, 0, 197, 192, 0, 0, 0, 0, 197, 55,
	90, 90, 0, 0, 0, 0, 0, 82, 81, 86,
	83, 84, 88, 80, 181, 202, 197, 0, 173, 174,
	0, 176, 197, 180, 119, 0, 0, 154, 0, 0,
	0, 0, -2, 0, 0, 0, 0, 182, 0, 202,
	0, 0, 0, 90, 37, 39, 0, 0, 0, 0,
	0, 0, 0, 0, 149, 151, 0, 0, 0, 43,
	0, 0, 0, 192, 0, 0, 0, 0, 0, 63,
	197, 56, 57, 0, -2, 0, 0, 150, 0, 0,
	100, 102, 74, 0, 197, 85, 0, 82, -2, 0,
	204, 90, 172, 0, 0, 0, 147, 153, 155, 156,
	174, 0, 157, 158, 0, 0, 202, 0, 0, -2,
	0, 167, 168, 0, 35, 92, -2, 12, 192, 42,
	0, -2, 0, -2, 107, 148, 0, 189, 190, 40,
	192, 73, 45, 0, 192, 192, 0, 192, 0, 0,
	0, 197, 64, 65, 0, 90, 0, 58, 59, 192,
	0, 0, -2, 0, -2, 0, 186, 187, 0, 75,
	77, 74, 0, 0, 74, 0, -2, 117, 202, 0,
	197, 0, 146, 0, 0, 0, 0, 0, 164, 0,
	183, 0, 0, -2, -2, 188, 0, 46, 0, 0,
	192, 0, 192, 192, 0, 0, 192, 0, 66, 67,
	192, 91, 0, 54, 61, 192, -2, -2, 185, 192,
	0, 78, 0, 74, 87, 89, 0, 74, 0, 0,
	175, 0, 197, 178, 0, 159, 0, 0, 162, 197,
	0, 169, 41, 44, 47, 48, 0, 50, 0, 0,
	192, 192, 0, 62, 70, 192, 192, 60, 0, 76,
	197, 192, 0, 192, 0, 74, 118, 177, 0, 175,
	0, 161, 182, 0, 49, 51, 52, 0, 0, 31,
	68, 69, 110, 0, 0, 192, 0, 192, 0, 0,
	160, 202, 184, 53, 30, 0, 79, 111, 0, 113,
	0, 192, 179, 0, 0, 192, 112, 114, 0, 163,
	192, 0, 115, 0, 29, 28,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 73, 74, 3,
	78, 79, 71, 67, 81, 68, 83, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 80,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 84, 3, 85, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:110
		{
			yyVAL.compstmt = nil
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:114
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:120
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:129
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:145
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:149
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:153
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:158
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:163
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:168
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:173
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:178
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.stmt = yyDollar[1].stmt_try
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:198
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:203
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:208
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:213
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:218
		{
			yyVAL.stmt = yyDollar[1].stmt_defer
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:222
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:229
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:234
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:239
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:244
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:251
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:256
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:261
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 31:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:273
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:277
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:281
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:287
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:294
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:298
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:315
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:319
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 40:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:336
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:341
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:346
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:356
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:361
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 45:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:372
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:377
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:382
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:387
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:392
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:397
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:402
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:407
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:412
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:419
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:426
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:430
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:434
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:438
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:443
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:454
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:461
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 62:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:467
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 63:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:476
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:480
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:484
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:488
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:494
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:505
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:510
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:517
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 71:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:522
		{
			yyVAL.expr_idents = []string{}
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:526
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:530
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:538
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:542
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:546
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:550
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:554
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:558
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:566
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:570
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:576
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:580
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:586
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:592
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:598
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:602
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:608
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:612
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:617
		{
			yyVAL.exprs = nil
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:621
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:625
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:632
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:641
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:645
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:650
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:655
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:660
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:665
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:670
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:675
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:680
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:685
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:690
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:695
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:700
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:705
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:710
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:715
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 110:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:720
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:725
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 112:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:730
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:736
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 114:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:741
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 115:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:746
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:752
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:757
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 118:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:762
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:767
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:772
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:777
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:782
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:787
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:792
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:797
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:802
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:807
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:812
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:817
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:822
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:827
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:832
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:837
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:842
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:847
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:852
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:857
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:862
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:867
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:872
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:877
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:882
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:887
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:892
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:897
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:902
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:907
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:912
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:917
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:922
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:927
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:932
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:937
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:942
		{
			yyVAL.expr = &ast.DbgExpr{}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:947
		{
			yyVAL.expr = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:952
		{
			yyVAL.expr = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:957
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:967
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:972
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 160:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:977
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 161:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:982
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:987
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 163:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:993
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:999
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1004
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1009
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1014
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1019
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1024
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1029
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1037
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1041
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1050
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1059
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1069
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1073
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1082
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1088
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1092
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1102
		{
			yyVAL.slice_count = 1
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1106
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1113
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1117
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1121
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1131
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1135
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1139
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1143
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1147
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1151
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1157
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
