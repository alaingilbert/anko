// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                 int
	stmtsStmt           *ast.StmtsStmt
	exprsExpr           *ast.ExprsExpr
	stmt                ast.Stmt
	expr                ast.Expr
	exprs               []ast.Expr
	stmts               []ast.Stmt
	stmt_select_content *ast.SelectBodyStmt
	expr_call_helper    struct {
		Exprs  *ast.ExprsExpr
		VarArg bool
	}
	expr_idents           []string
	func_expr_idents      []*ast.ParamExpr
	func_expr_typed_ident *ast.ParamExpr
	func_expr_args        struct {
		Params   []*ast.ParamExpr
		VarArg   bool
		TypeData *ast.TypeStruct
	}
	expr_typed_ident struct {
		Name     string
		TypeData *ast.TypeStruct
	}
	stmt_lets_helper struct {
		Exprs1, Exprs2 *ast.ExprsExpr
		Typed, Mutable bool
	}
	opt_func_return_expr_idents []*ast.FuncReturnValuesExpr
	expr_map                    *ast.MapExpr
	type_data                   *ast.TypeStruct
	slice_count                 int
	tok                         ast.Token
	opt_ident                   *ast.Token
	str                         string
	op_lets                     bool
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57408
	yyEofCode   = 57344
	ANDAND      = 57365
	ANDEQ       = 57379
	ARRAY       = 57349
	BREAK       = 57381
	CASE        = 57390
	CATCH       = 57373
	CHAN        = 57394
	CLOSE       = 57400
	CONTINUE    = 57382
	DBG         = 57403
	DEFAULT     = 57391
	DEFER       = 57393
	DELETE      = 57399
	DIVEQ       = 57378
	ELSE        = 57356
	EMPTYARR    = 57405
	EQEQ        = 57360
	FALSE       = 57368
	FINALLY     = 57374
	FOR         = 57357
	FUNC        = 57351
	GE          = 57362
	GO          = 57392
	IDENT       = 57346
	IF          = 57355
	IN          = 57359
	LE          = 57363
	LEN         = 57398
	LOOP        = 57358
	MAKE        = 57395
	MAP         = 57401
	MINUSEQ     = 57376
	MINUSMINUS  = 57384
	MODULE      = 57371
	MULEQ       = 57377
	MUT         = 57406
	NEQ         = 57361
	NEW         = 57366
	NIL         = 57369
	NILCOALESCE = 57370
	NUMBER      = 57347
	OPCHAN      = 57396
	OREQ        = 57380
	OROR        = 57364
	PLUSEQ      = 57375
	PLUSPLUS    = 57383
	POW         = 57385
	RETURN      = 57352
	SELECT      = 57389
	SHIFTLEFT   = 57386
	SHIFTRIGHT  = 57387
	STRING      = 57348
	STRUCT      = 57402
	SWITCH      = 57388
	THROW       = 57354
	TRUE        = 57367
	TRY         = 57372
	TYPE        = 57397
	UNARY       = 57407
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57404
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -270
)

var (
	yyPrec = map[int]int{
		POW:         0,
		'=':         1,
		PLUSEQ:      1,
		MINUSEQ:     1,
		DIVEQ:       1,
		MULEQ:       1,
		ANDEQ:       1,
		OREQ:        1,
		':':         2,
		OPCHAN:      3,
		'?':         4,
		NILCOALESCE: 4,
		OROR:        5,
		ANDAND:      6,
		EQEQ:        7,
		NEQ:         7,
		'<':         7,
		LE:          7,
		'>':         7,
		GE:          7,
		'+':         8,
		'-':         8,
		'|':         8,
		'^':         8,
		'*':         9,
		'/':         9,
		'%':         9,
		SHIFTLEFT:   9,
		SHIFTRIGHT:  9,
		'&':         9,
		IN:          10,
		PLUSPLUS:    11,
		MINUSMINUS:  11,
		UNARY:       12,
	}

	yyXLAT = map[int]int{
		91:    0,   // '[' (211x)
		42:    1,   // '*' (210x)
		125:   2,   // '}' (210x)
		123:   3,   // '{' (207x)
		40:    4,   // '(' (202x)
		38:    5,   // '&' (192x)
		45:    6,   // '-' (192x)
		57396: 7,   // OPCHAN (192x)
		10:    8,   // '\n' (166x)
		57391: 9,   // DEFAULT (147x)
		57390: 10,  // CASE (145x)
		44:    11,  // ',' (135x)
		57344: 12,  // $end (134x)
		57346: 13,  // IDENT (133x)
		59:    14,  // ';' (132x)
		58:    15,  // ':' (128x)
		41:    16,  // ')' (125x)
		57405: 17,  // EMPTYARR (116x)
		57401: 18,  // MAP (116x)
		93:    19,  // ']' (101x)
		46:    20,  // '.' (98x)
		57359: 21,  // IN (97x)
		33:    22,  // '!' (96x)
		37:    23,  // '%' (96x)
		43:    24,  // '+' (96x)
		47:    25,  // '/' (96x)
		60:    26,  // '<' (96x)
		62:    27,  // '>' (96x)
		63:    28,  // '?' (96x)
		94:    29,  // '^' (96x)
		124:   30,  // '|' (96x)
		57365: 31,  // ANDAND (96x)
		57379: 32,  // ANDEQ (96x)
		57400: 33,  // CLOSE (96x)
		57399: 34,  // DELETE (96x)
		57378: 35,  // DIVEQ (96x)
		57360: 36,  // EQEQ (96x)
		57368: 37,  // FALSE (96x)
		57351: 38,  // FUNC (96x)
		57362: 39,  // GE (96x)
		57363: 40,  // LE (96x)
		57398: 41,  // LEN (96x)
		57395: 42,  // MAKE (96x)
		57376: 43,  // MINUSEQ (96x)
		57384: 44,  // MINUSMINUS (96x)
		57377: 45,  // MULEQ (96x)
		57361: 46,  // NEQ (96x)
		57366: 47,  // NEW (96x)
		57369: 48,  // NIL (96x)
		57370: 49,  // NILCOALESCE (96x)
		57347: 50,  // NUMBER (96x)
		57380: 51,  // OREQ (96x)
		57364: 52,  // OROR (96x)
		57375: 53,  // PLUSEQ (96x)
		57383: 54,  // PLUSPLUS (96x)
		57385: 55,  // POW (96x)
		57386: 56,  // SHIFTLEFT (96x)
		57387: 57,  // SHIFTRIGHT (96x)
		57348: 58,  // STRING (96x)
		57367: 59,  // TRUE (96x)
		61:    60,  // '=' (73x)
		57350: 61,  // VARARG (72x)
		57404: 62,  // WALRUS (72x)
		57471: 63,  // map_type (65x)
		57497: 64,  // slice_type (65x)
		57434: 65,  // expr_ident (54x)
		57443: 66,  // expr_map_container (48x)
		57416: 67,  // composite_lit (47x)
		57418: 68,  // const_expr (47x)
		57423: 69,  // expr (47x)
		57424: 70,  // expr_anon_call (47x)
		57425: 71,  // expr_array (47x)
		57426: 72,  // expr_assoc (47x)
		57427: 73,  // expr_binary (47x)
		57428: 74,  // expr_call (47x)
		57431: 75,  // expr_close (47x)
		57432: 76,  // expr_delete (47x)
		57433: 77,  // expr_func (47x)
		57436: 78,  // expr_item_or_slice (47x)
		57437: 79,  // expr_iterable (47x)
		57438: 80,  // expr_len (47x)
		57439: 81,  // expr_literals (47x)
		57440: 82,  // expr_literals_helper (47x)
		57441: 83,  // expr_make (47x)
		57442: 84,  // expr_map (47x)
		57447: 85,  // expr_member (47x)
		57448: 86,  // expr_member_or_ident (47x)
		57449: 87,  // expr_new (47x)
		57450: 88,  // expr_opchan (47x)
		57451: 89,  // expr_paren (47x)
		57452: 90,  // expr_ternary (47x)
		57454: 91,  // expr_unary (47x)
		57469: 92,  // literal_type (47x)
		57538: 93,  // unary_op (47x)
		57429: 94,  // expr_call_helper (33x)
		57411: 95,  // bin_op (32x)
		57475: 96,  // op_assoc1 (32x)
		57394: 97,  // CHAN (26x)
		57402: 98,  // STRUCT (26x)
		57406: 99,  // MUT (25x)
		57410: 100, // array_type (18x)
		57413: 101, // channel_type (18x)
		57355: 102, // IF (18x)
		57492: 103, // package_name (18x)
		57493: 104, // pointer_type (18x)
		57494: 105, // qualified_ident (18x)
		57496: 106, // slice_count (18x)
		57529: 107, // struct_type (18x)
		57532: 108, // type (18x)
		57534: 109, // type_lit (18x)
		57535: 110, // type_name (18x)
		57537: 111, // typed_slice_count (18x)
		57353: 112, // VAR (18x)
		57381: 113, // BREAK (17x)
		57382: 114, // CONTINUE (17x)
		57403: 115, // DBG (17x)
		57393: 116, // DEFER (17x)
		57357: 117, // FOR (17x)
		57392: 118, // GO (17x)
		57358: 119, // LOOP (17x)
		57371: 120, // MODULE (17x)
		57473: 121, // newline (17x)
		57352: 122, // RETURN (17x)
		57389: 123, // SELECT (17x)
		57388: 124, // SWITCH (17x)
		57354: 125, // THROW (17x)
		57372: 126, // TRY (17x)
		57474: 127, // newlines (15x)
		57415: 128, // comma_opt_newlines (12x)
		57455: 129, // exprs (11x)
		57412: 130, // block (9x)
		57487: 131, // opt_newlines (8x)
		57491: 132, // opt_term (7x)
		57531: 133, // term (7x)
		57417: 134, // compstmt (6x)
		57420: 135, // element (4x)
		57422: 136, // element_type (4x)
		57453: 137, // expr_typed_ident (4x)
		57507: 138, // stmt_if (4x)
		57508: 139, // stmt_lets (4x)
		57509: 140, // stmt_lets_helper (4x)
		57526: 141, // stmt_var (4x)
		57527: 142, // stmt_var_or_lets (4x)
		57464: 143, // key (3x)
		57466: 144, // keyed_element (3x)
		57481: 145, // opt_exprs (3x)
		57499: 146, // stmt (3x)
		57500: 147, // stmt_break (3x)
		57501: 148, // stmt_continue (3x)
		57502: 149, // stmt_dbg (3x)
		57503: 150, // stmt_defer (3x)
		57504: 151, // stmt_expr (3x)
		57505: 152, // stmt_for (3x)
		57506: 153, // stmt_go (3x)
		57510: 154, // stmt_loop (3x)
		57511: 155, // stmt_module (3x)
		57512: 156, // stmt_return (3x)
		57513: 157, // stmt_select (3x)
		57519: 158, // stmt_switch (3x)
		57524: 159, // stmt_throw (3x)
		57525: 160, // stmt_try (3x)
		57373: 161, // CATCH (2x)
		57421: 162, // element_list (2x)
		57356: 163, // ELSE (2x)
		57430: 164, // expr_callable (2x)
		57446: 165, // expr_map_key_value (2x)
		57374: 166, // FINALLY (2x)
		57461: 167, // func_expr_typed_ident (2x)
		57463: 168, // func_expr_untyped_ident (2x)
		57467: 169, // label (2x)
		57480: 170, // opt_expr (2x)
		57486: 171, // opt_ident (2x)
		57514: 172, // stmt_select_case (2x)
		57520: 173, // stmt_switch_case (2x)
		57409: 174, // array_length (1x)
		57414: 175, // comma (1x)
		57419: 176, // dbg_content (1x)
		57435: 177, // expr_idents (1x)
		57444: 178, // expr_map_content (1x)
		57445: 179, // expr_map_content_helper (1x)
		57456: 180, // for_content (1x)
		57457: 181, // func_expr_args (1x)
		57458: 182, // func_expr_idents (1x)
		57459: 183, // func_expr_idents_last_untyped (1x)
		57460: 184, // func_expr_idents_not_empty (1x)
		57462: 185, // func_expr_typed_idents (1x)
		57465: 186, // key_type (1x)
		57470: 187, // literal_value (1x)
		57472: 188, // maybe_else (1x)
		57476: 189, // op_lets (1x)
		57477: 190, // opt_comma (1x)
		57478: 191, // opt_comma_opt_newlines (1x)
		57479: 192, // opt_element_list (1x)
		57482: 193, // opt_finally (1x)
		57483: 194, // opt_func_return_expr_idents (1x)
		57484: 195, // opt_func_return_expr_idents1 (1x)
		57485: 196, // opt_func_return_expr_idents2 (1x)
		57488: 197, // opt_stmt_select_cases (1x)
		57489: 198, // opt_stmt_switch_cases (1x)
		57490: 199, // opt_stmt_var_or_lets (1x)
		57495: 200, // slice (1x)
		57498: 201, // start (1x)
		57515: 202, // stmt_select_cases (1x)
		57516: 203, // stmt_select_content (1x)
		57517: 204, // stmt_select_default (1x)
		57518: 205, // stmt_select_opt_default (1x)
		57521: 206, // stmt_switch_cases (1x)
		57522: 207, // stmt_switch_default (1x)
		57523: 208, // stmt_switch_opt_default (1x)
		57528: 209, // stmtsStmt (1x)
		57530: 210, // switch_content (1x)
		57397: 211, // TYPE (1x)
		57533: 212, // type_data_struct (1x)
		57536: 213, // type_struct_content (1x)
		57408: 214, // $default (0x)
		57349: 215, // ARRAY (0x)
		57345: 216, // error (0x)
		57468: 217, // labeled_stmt (0x)
		57407: 218, // UNARY (0x)
	}

	yySymNames = []string{
		"'['",
		"'*'",
		"'}'",
		"'{'",
		"'('",
		"'&'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"DEFAULT",
		"CASE",
		"','",
		"$end",
		"IDENT",
		"';'",
		"':'",
		"')'",
		"EMPTYARR",
		"MAP",
		"']'",
		"'.'",
		"IN",
		"'!'",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'^'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"CLOSE",
		"DELETE",
		"DIVEQ",
		"EQEQ",
		"FALSE",
		"FUNC",
		"GE",
		"LE",
		"LEN",
		"MAKE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NEW",
		"NIL",
		"NILCOALESCE",
		"NUMBER",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"STRING",
		"TRUE",
		"'='",
		"VARARG",
		"WALRUS",
		"map_type",
		"slice_type",
		"expr_ident",
		"expr_map_container",
		"composite_lit",
		"const_expr",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_delete",
		"expr_func",
		"expr_item_or_slice",
		"expr_iterable",
		"expr_len",
		"expr_literals",
		"expr_literals_helper",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"literal_type",
		"unary_op",
		"expr_call_helper",
		"bin_op",
		"op_assoc1",
		"CHAN",
		"STRUCT",
		"MUT",
		"array_type",
		"channel_type",
		"IF",
		"package_name",
		"pointer_type",
		"qualified_ident",
		"slice_count",
		"struct_type",
		"type",
		"type_lit",
		"type_name",
		"typed_slice_count",
		"VAR",
		"BREAK",
		"CONTINUE",
		"DBG",
		"DEFER",
		"FOR",
		"GO",
		"LOOP",
		"MODULE",
		"newline",
		"RETURN",
		"SELECT",
		"SWITCH",
		"THROW",
		"TRY",
		"newlines",
		"comma_opt_newlines",
		"exprs",
		"block",
		"opt_newlines",
		"opt_term",
		"term",
		"compstmt",
		"element",
		"element_type",
		"expr_typed_ident",
		"stmt_if",
		"stmt_lets",
		"stmt_lets_helper",
		"stmt_var",
		"stmt_var_or_lets",
		"key",
		"keyed_element",
		"opt_exprs",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_dbg",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_loop",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"CATCH",
		"element_list",
		"ELSE",
		"expr_callable",
		"expr_map_key_value",
		"FINALLY",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"label",
		"opt_expr",
		"opt_ident",
		"stmt_select_case",
		"stmt_switch_case",
		"array_length",
		"comma",
		"dbg_content",
		"expr_idents",
		"expr_map_content",
		"expr_map_content_helper",
		"for_content",
		"func_expr_args",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"key_type",
		"literal_value",
		"maybe_else",
		"op_lets",
		"opt_comma",
		"opt_comma_opt_newlines",
		"opt_element_list",
		"opt_finally",
		"opt_func_return_expr_idents",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"opt_stmt_select_cases",
		"opt_stmt_switch_cases",
		"opt_stmt_var_or_lets",
		"slice",
		"start",
		"stmt_select_cases",
		"stmt_select_content",
		"stmt_select_default",
		"stmt_select_opt_default",
		"stmt_switch_cases",
		"stmt_switch_default",
		"stmt_switch_opt_default",
		"stmtsStmt",
		"switch_content",
		"TYPE",
		"type_data_struct",
		"type_struct_content",
		"$default",
		"ARRAY",
		"error",
		"labeled_stmt",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {201, 1},
		2:   {134, 1},
		3:   {134, 3},
		4:   {209, 1},
		5:   {209, 3},
		6:   {146, 1},
		7:   {146, 1},
		8:   {146, 1},
		9:   {146, 1},
		10:  {146, 1},
		11:  {146, 1},
		12:  {146, 1},
		13:  {146, 1},
		14:  {146, 1},
		15:  {146, 1},
		16:  {146, 1},
		17:  {146, 1},
		18:  {146, 1},
		19:  {146, 1},
		20:  {146, 1},
		21:  {146, 1},
		22:  {69, 1},
		23:  {69, 1},
		24:  {69, 1},
		25:  {69, 1},
		26:  {69, 1},
		27:  {69, 1},
		28:  {69, 1},
		29:  {69, 1},
		30:  {69, 1},
		31:  {69, 1},
		32:  {69, 1},
		33:  {69, 1},
		34:  {79, 1},
		35:  {79, 1},
		36:  {79, 1},
		37:  {79, 1},
		38:  {79, 1},
		39:  {79, 1},
		40:  {79, 1},
		41:  {79, 1},
		42:  {130, 3},
		43:  {169, 1},
		44:  {217, 3},
		45:  {147, 1},
		46:  {147, 2},
		47:  {148, 1},
		48:  {148, 2},
		49:  {156, 2},
		50:  {159, 2},
		51:  {155, 3},
		52:  {151, 1},
		53:  {153, 2},
		54:  {150, 2},
		55:  {160, 6},
		56:  {193, 0},
		57:  {193, 2},
		58:  {199, 0},
		59:  {199, 1},
		60:  {142, 1},
		61:  {142, 1},
		62:  {141, 4},
		63:  {139, 1},
		64:  {140, 3},
		65:  {140, 4},
		66:  {189, 1},
		67:  {189, 1},
		68:  {138, 4},
		69:  {188, 0},
		70:  {188, 2},
		71:  {188, 2},
		72:  {154, 2},
		73:  {152, 3},
		74:  {180, 1},
		75:  {180, 3},
		76:  {180, 5},
		77:  {180, 5},
		78:  {157, 4},
		79:  {203, 3},
		80:  {197, 0},
		81:  {197, 1},
		82:  {202, 1},
		83:  {202, 2},
		84:  {172, 4},
		85:  {205, 0},
		86:  {205, 1},
		87:  {204, 3},
		88:  {158, 5},
		89:  {210, 3},
		90:  {198, 0},
		91:  {198, 1},
		92:  {206, 1},
		93:  {206, 2},
		94:  {173, 4},
		95:  {208, 0},
		96:  {208, 1},
		97:  {207, 3},
		98:  {194, 0},
		99:  {194, 1},
		100: {194, 3},
		101: {195, 0},
		102: {195, 1},
		103: {196, 1},
		104: {196, 3},
		105: {182, 0},
		106: {182, 1},
		107: {184, 1},
		108: {184, 1},
		109: {168, 1},
		110: {167, 1},
		111: {183, 1},
		112: {183, 3},
		113: {185, 1},
		114: {185, 3},
		115: {145, 0},
		116: {145, 1},
		117: {129, 1},
		118: {129, 3},
		119: {170, 0},
		120: {170, 1},
		121: {149, 3},
		122: {149, 4},
		123: {176, 1},
		124: {80, 4},
		125: {89, 3},
		126: {135, 1},
		127: {162, 1},
		128: {162, 3},
		129: {192, 0},
		130: {192, 1},
		131: {143, 1},
		132: {144, 1},
		133: {144, 3},
		134: {67, 2},
		135: {92, 1},
		136: {174, 1},
		137: {100, 4},
		138: {64, 2},
		139: {187, 4},
		140: {71, 1},
		141: {71, 3},
		142: {90, 5},
		143: {87, 4},
		144: {88, 2},
		145: {76, 4},
		146: {76, 6},
		147: {75, 4},
		148: {81, 1},
		149: {82, 1},
		150: {82, 1},
		151: {82, 1},
		152: {68, 1},
		153: {68, 1},
		154: {68, 1},
		155: {86, 1},
		156: {86, 1},
		157: {137, 2},
		158: {137, 3},
		159: {171, 0},
		160: {171, 1},
		161: {85, 3},
		162: {164, 1},
		163: {164, 1},
		164: {74, 2},
		165: {70, 2},
		166: {94, 4},
		167: {94, 3},
		168: {93, 1},
		169: {93, 1},
		170: {93, 1},
		171: {93, 1},
		172: {93, 1},
		173: {91, 2},
		174: {95, 1},
		175: {95, 1},
		176: {95, 1},
		177: {95, 1},
		178: {95, 1},
		179: {95, 1},
		180: {95, 1},
		181: {95, 1},
		182: {95, 1},
		183: {95, 1},
		184: {95, 1},
		185: {95, 1},
		186: {95, 1},
		187: {95, 1},
		188: {95, 1},
		189: {95, 1},
		190: {95, 1},
		191: {95, 1},
		192: {95, 1},
		193: {95, 1},
		194: {95, 1},
		195: {95, 1},
		196: {95, 1},
		197: {95, 1},
		198: {95, 1},
		199: {73, 3},
		200: {73, 3},
		201: {73, 3},
		202: {73, 1},
		203: {96, 1},
		204: {96, 1},
		205: {72, 2},
		206: {77, 7},
		207: {181, 3},
		208: {181, 2},
		209: {181, 1},
		210: {83, 4},
		211: {83, 6},
		212: {83, 8},
		213: {83, 7},
		214: {108, 1},
		215: {108, 1},
		216: {109, 1},
		217: {109, 1},
		218: {109, 1},
		219: {109, 1},
		220: {109, 1},
		221: {109, 1},
		222: {109, 1},
		223: {110, 1},
		224: {110, 1},
		225: {103, 1},
		226: {105, 3},
		227: {104, 2},
		228: {107, 4},
		229: {101, 2},
		230: {186, 1},
		231: {136, 1},
		232: {63, 5},
		233: {213, 3},
		234: {212, 1},
		235: {212, 3},
		236: {111, 2},
		237: {106, 1},
		238: {106, 2},
		239: {84, 2},
		240: {84, 1},
		241: {66, 3},
		242: {178, 1},
		243: {178, 3},
		244: {179, 1},
		245: {179, 3},
		246: {165, 3},
		247: {78, 4},
		248: {200, 3},
		249: {200, 2},
		250: {200, 2},
		251: {200, 1},
		252: {177, 1},
		253: {177, 3},
		254: {65, 1},
		255: {175, 1},
		256: {190, 0},
		257: {190, 1},
		258: {132, 0},
		259: {132, 1},
		260: {133, 1},
		261: {133, 2},
		262: {131, 0},
		263: {131, 1},
		264: {127, 1},
		265: {127, 2},
		266: {121, 1},
		267: {128, 2},
		268: {191, 1},
		269: {191, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [410][]uint16{
		// 0
		{12, 12, 3: 12, 12, 12, 12, 12, 278, 12: 12, 12, 276, 17: 12, 12, 22: 12, 29: 12, 33: 12, 12, 37: 12, 12, 41: 12, 12, 47: 12, 12, 50: 12, 58: 12, 12, 99: 12, 102: 12, 112: 12, 12, 12, 12, 12, 12, 12, 12, 12, 277, 12, 12, 12, 12, 12, 275, 132: 273, 274, 272, 201: 271},
		{12: 270},
		{12: 269},
		{346, 363, 268, 372, 342, 364, 360, 348, 9: 268, 268, 12: 268, 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 325, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 99: 334, 102: 335, 112: 331, 320, 321, 340, 327, 337, 326, 336, 324, 122: 322, 338, 339, 323, 328, 129: 333, 138: 290, 330, 332, 329, 284, 146: 283, 285, 286, 299, 297, 298, 292, 296, 291, 289, 287, 295, 294, 288, 293, 209: 282},
		{11, 11, 11, 11, 11, 11, 11, 11, 9: 11, 11, 12: 11, 11, 17: 11, 11, 22: 11, 29: 11, 33: 11, 11, 37: 11, 11, 41: 11, 11, 47: 11, 11, 50: 11, 58: 11, 11, 99: 11, 102: 11, 112: 11, 11, 11, 11, 11, 11, 11, 11, 11, 122: 11, 11, 11, 11, 11},
		// 5
		{10, 10, 10, 10, 10, 10, 10, 10, 278, 10, 10, 12: 10, 10, 17: 10, 10, 22: 10, 29: 10, 33: 10, 10, 37: 10, 10, 41: 10, 10, 47: 10, 10, 50: 10, 58: 10, 10, 99: 10, 102: 10, 112: 10, 10, 10, 10, 10, 10, 10, 10, 10, 281, 10, 10, 10, 10, 10},
		{8, 8, 8, 8, 8, 8, 8, 8, 278, 8, 8, 12: 8, 8, 17: 8, 8, 22: 8, 29: 8, 33: 8, 8, 37: 8, 8, 41: 8, 8, 47: 8, 8, 50: 8, 58: 8, 8, 99: 8, 102: 8, 112: 8, 8, 8, 8, 8, 8, 8, 8, 8, 277, 8, 8, 8, 8, 8, 280, 131: 279},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12: 6, 6, 17: 6, 6, 22: 6, 29: 6, 33: 6, 6, 37: 6, 6, 41: 6, 6, 47: 6, 6, 50: 6, 58: 6, 6, 97: 6, 6, 6, 102: 6, 112: 6, 6, 6, 6, 6, 6, 6, 6, 6, 122: 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12: 4, 4, 17: 4, 4, 22: 4, 29: 4, 33: 4, 4, 37: 4, 4, 41: 4, 4, 47: 4, 4, 50: 4, 58: 4, 4, 97: 4, 4, 4, 102: 4, 112: 4, 4, 4, 4, 4, 4, 4, 4, 4, 122: 4, 4, 4, 4, 4},
		{9, 9, 9, 9, 9, 9, 9, 9, 9: 9, 9, 12: 9, 9, 17: 9, 9, 22: 9, 29: 9, 33: 9, 9, 37: 9, 9, 41: 9, 9, 47: 9, 9, 50: 9, 58: 9, 9, 99: 9, 102: 9, 112: 9, 9, 9, 9, 9, 9, 9, 9, 9, 122: 9, 9, 9, 9, 9},
		// 10
		{7, 7, 7, 7, 7, 7, 7, 7, 278, 7, 7, 12: 7, 7, 17: 7, 7, 22: 7, 29: 7, 33: 7, 7, 37: 7, 7, 41: 7, 7, 47: 7, 7, 50: 7, 58: 7, 7, 97: 7, 7, 7, 102: 7, 112: 7, 7, 7, 7, 7, 7, 7, 7, 7, 281, 7, 7, 7, 7, 7},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12: 5, 5, 17: 5, 5, 22: 5, 29: 5, 33: 5, 5, 37: 5, 5, 41: 5, 5, 47: 5, 5, 50: 5, 58: 5, 5, 97: 5, 5, 5, 102: 5, 112: 5, 5, 5, 5, 5, 5, 5, 5, 5, 122: 5, 5, 5, 5, 5},
		{2: 12, 8: 278, 12, 12, 12: 12, 14: 276, 121: 277, 127: 275, 132: 677, 678},
		{2: 266, 8: 266, 266, 266, 12: 266, 14: 266},
		{2: 264, 8: 264, 264, 264, 12: 264, 14: 264, 264},
		// 15
		{2: 263, 8: 263, 263, 263, 12: 263, 14: 263, 263},
		{2: 262, 8: 262, 262, 262, 12: 262, 14: 262, 262},
		{2: 261, 8: 261, 261, 261, 12: 261, 14: 261, 261},
		{2: 260, 8: 260, 260, 260, 12: 260, 14: 260, 260},
		{2: 259, 8: 259, 259, 259, 12: 259, 14: 259, 259},
		// 20
		{2: 258, 8: 258, 258, 258, 12: 258, 14: 258, 258},
		{2: 257, 8: 257, 257, 257, 12: 257, 14: 257, 257},
		{2: 256, 8: 256, 256, 256, 12: 256, 14: 256, 256},
		{2: 255, 8: 255, 255, 255, 12: 255, 14: 255, 255},
		{2: 254, 8: 254, 254, 254, 12: 254, 14: 254, 254},
		// 25
		{2: 253, 8: 253, 253, 253, 12: 253, 14: 253, 253},
		{2: 252, 8: 252, 252, 252, 12: 252, 14: 252, 252},
		{2: 251, 8: 251, 251, 251, 12: 251, 14: 251, 251},
		{2: 250, 8: 250, 250, 250, 12: 250, 14: 250, 250},
		{2: 249, 8: 249, 249, 249, 12: 249, 14: 249, 249},
		// 30
		{248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 14: 248, 248, 248, 19: 248, 248, 248, 23: 248, 248, 248, 248, 248, 248, 30: 248, 248, 248, 35: 248, 248, 39: 248, 248, 43: 248, 248, 248, 248, 49: 248, 51: 248, 248, 248, 248, 248, 248, 248, 60: 248, 248, 248},
		{247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 14: 247, 247, 247, 19: 247, 247, 247, 23: 247, 247, 247, 247, 247, 247, 30: 247, 247, 247, 35: 247, 247, 39: 247, 247, 43: 247, 247, 247, 247, 49: 247, 51: 247, 247, 247, 247, 247, 247, 247, 60: 247, 247, 247},
		{246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 14: 246, 246, 246, 19: 246, 246, 246, 23: 246, 246, 246, 246, 246, 246, 30: 246, 246, 246, 35: 246, 246, 39: 246, 246, 43: 246, 246, 246, 246, 49: 246, 51: 246, 246, 246, 246, 246, 246, 246, 60: 246, 246, 246},
		{245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 14: 245, 245, 245, 19: 245, 245, 245, 23: 245, 245, 245, 245, 245, 245, 30: 245, 245, 245, 35: 245, 245, 39: 245, 245, 43: 245, 245, 245, 245, 49: 245, 51: 245, 245, 245, 245, 245, 245, 245, 60: 245, 245, 245},
		{244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 14: 244, 244, 244, 19: 244, 244, 244, 23: 244, 244, 244, 244, 244, 244, 30: 244, 244, 244, 35: 244, 244, 39: 244, 244, 43: 244, 244, 244, 244, 49: 244, 51: 244, 244, 244, 244, 244, 244, 244, 60: 244, 244, 244},
		// 35
		{243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 14: 243, 243, 243, 19: 243, 243, 243, 23: 243, 243, 243, 243, 243, 243, 30: 243, 243, 243, 35: 243, 243, 39: 243, 243, 43: 243, 243, 243, 243, 49: 243, 51: 243, 243, 243, 243, 243, 243, 243, 60: 243, 243, 243},
		{242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 14: 242, 242, 242, 19: 242, 242, 242, 23: 242, 242, 242, 242, 242, 242, 30: 242, 242, 242, 35: 242, 242, 39: 242, 242, 43: 242, 242, 242, 242, 49: 242, 51: 242, 242, 242, 242, 242, 242, 242, 60: 242, 242, 242},
		{241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 14: 241, 241, 241, 19: 241, 241, 241, 23: 241, 241, 241, 241, 241, 241, 30: 241, 241, 241, 35: 241, 241, 39: 241, 241, 43: 241, 241, 241, 241, 49: 241, 51: 241, 241, 241, 241, 241, 241, 241, 60: 241, 241, 241},
		{240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 14: 240, 240, 240, 19: 240, 240, 240, 23: 240, 240, 240, 240, 240, 240, 30: 240, 240, 240, 35: 240, 240, 39: 240, 240, 43: 240, 240, 240, 240, 49: 240, 51: 240, 240, 240, 240, 240, 240, 240, 60: 240, 240, 240},
		{239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 14: 239, 239, 239, 19: 239, 239, 239, 23: 239, 239, 239, 239, 239, 239, 30: 239, 239, 239, 35: 239, 239, 39: 239, 239, 43: 239, 239, 239, 239, 49: 239, 51: 239, 239, 239, 239, 239, 239, 239, 60: 239, 239, 239},
		// 40
		{238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 14: 238, 238, 238, 19: 238, 238, 238, 23: 238, 238, 238, 238, 238, 238, 30: 238, 238, 238, 35: 238, 238, 39: 238, 238, 43: 238, 238, 238, 238, 49: 238, 51: 238, 238, 238, 238, 238, 238, 238, 60: 238, 238, 238},
		{237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 14: 237, 237, 237, 19: 237, 237, 237, 23: 237, 237, 237, 237, 237, 237, 30: 237, 237, 237, 35: 237, 237, 39: 237, 237, 43: 237, 237, 237, 237, 49: 237, 51: 237, 237, 237, 237, 237, 237, 237, 60: 237, 237, 237},
		{236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 14: 236, 236, 236, 19: 236, 236, 236, 23: 236, 236, 236, 236, 236, 236, 30: 236, 236, 236, 35: 236, 236, 39: 236, 236, 43: 236, 236, 236, 236, 49: 236, 51: 236, 236, 236, 236, 236, 236, 236, 60: 236, 236, 236},
		{235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 14: 235, 235, 235, 19: 235, 235, 235, 23: 235, 235, 235, 235, 235, 235, 30: 235, 235, 235, 35: 235, 235, 39: 235, 235, 43: 235, 235, 235, 235, 49: 235, 51: 235, 235, 235, 235, 235, 235, 235, 60: 235, 235, 235},
		{234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 14: 234, 234, 234, 19: 234, 234, 234, 23: 234, 234, 234, 234, 234, 234, 30: 234, 234, 234, 35: 234, 234, 39: 234, 234, 43: 234, 234, 234, 234, 49: 234, 51: 234, 234, 234, 234, 234, 234, 234, 60: 234, 234, 234},
		// 45
		{233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 14: 233, 233, 233, 19: 233, 233, 233, 23: 233, 233, 233, 233, 233, 233, 30: 233, 233, 233, 35: 233, 233, 39: 233, 233, 43: 233, 233, 233, 233, 49: 233, 51: 233, 233, 233, 233, 233, 233, 233, 60: 233, 233, 233},
		{232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 14: 232, 232, 232, 19: 232, 232, 232, 23: 232, 232, 232, 232, 232, 232, 30: 232, 232, 232, 35: 232, 232, 39: 232, 232, 43: 232, 232, 232, 232, 49: 232, 51: 232, 232, 232, 232, 232, 232, 232, 60: 232, 232, 232},
		{231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 14: 231, 231, 231, 19: 231, 231, 231, 23: 231, 231, 231, 231, 231, 231, 30: 231, 231, 231, 35: 231, 231, 39: 231, 231, 43: 231, 231, 231, 231, 49: 231, 51: 231, 231, 231, 231, 231, 231, 231, 60: 231, 231, 231},
		{230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 14: 230, 230, 230, 19: 230, 230, 230, 23: 230, 230, 230, 230, 230, 230, 30: 230, 230, 230, 35: 230, 230, 39: 230, 230, 43: 230, 230, 230, 230, 49: 230, 51: 230, 230, 230, 230, 230, 230, 230, 60: 230, 230, 230},
		{229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 14: 229, 229, 229, 19: 229, 229, 229, 23: 229, 229, 229, 229, 229, 229, 30: 229, 229, 229, 35: 229, 229, 39: 229, 229, 43: 229, 229, 229, 229, 49: 229, 51: 229, 229, 229, 229, 229, 229, 229, 60: 229, 229, 229},
		// 50
		{2: 225, 8: 225, 225, 225, 12: 225, 674, 225, 225, 169: 676},
		{2: 223, 8: 223, 223, 223, 12: 223, 674, 223, 223, 169: 675},
		{346, 363, 155, 372, 342, 364, 360, 348, 155, 155, 155, 12: 155, 373, 155, 155, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 434, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 129: 594, 145: 673},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 672, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{13: 670},
		// 55
		{421, 391, 218, 4: 388, 399, 390, 413, 218, 218, 218, 153, 218, 14: 218, 218, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 60: 153, 62: 153, 94: 387, 414, 419},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 636, 666, 314, 366, 305, 667, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 164: 669},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 636, 666, 314, 366, 305, 667, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 164: 668},
		{3: 526, 130: 659},
		{2: 210, 8: 210, 210, 210, 12: 210, 14: 210, 210},
		// 60
		{2: 209, 8: 209, 209, 209, 12: 209, 14: 209, 209},
		{13: 373, 65: 654, 177: 653},
		{2: 207, 8: 207, 207, 207, 12: 207, 14: 207, 207},
		{11: 381, 60: 651, 62: 650, 128: 437, 189: 649},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 434, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 129: 646},
		// 65
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 640, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{3: 526, 130: 639},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 624, 212, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 623, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 99: 334, 112: 331, 129: 333, 139: 330, 332, 329, 621, 180: 622, 199: 625},
		{3: 604},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 585, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		// 70
		{4: 580},
		{4: 577},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 575, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{3: 568, 187: 567},
		{3: 135},
		// 75
		{448, 462, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 459, 130, 130, 130, 449, 369, 130, 130, 130, 23: 130, 130, 130, 130, 130, 130, 30: 130, 130, 130, 35: 130, 130, 39: 130, 130, 43: 130, 130, 130, 130, 49: 130, 51: 130, 130, 130, 130, 130, 130, 130, 60: 130, 130, 130, 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 470, 451, 450, 455, 136: 490},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 556, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 135: 559, 143: 560, 557, 162: 558},
		{4: 553},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 552, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{4: 546},
		// 80
		{4: 543},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 14: 122, 122, 122, 19: 122, 122, 122, 23: 122, 122, 122, 122, 122, 122, 30: 122, 122, 122, 35: 122, 122, 39: 122, 122, 43: 122, 122, 122, 122, 49: 122, 51: 122, 122, 122, 122, 122, 122, 122, 60: 122, 122, 122},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 14: 121, 121, 121, 19: 121, 121, 121, 23: 121, 121, 121, 121, 121, 121, 30: 121, 121, 121, 35: 121, 121, 39: 121, 121, 43: 121, 121, 121, 121, 49: 121, 51: 121, 121, 121, 121, 121, 121, 121, 60: 121, 121, 121},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 14: 120, 120, 120, 19: 120, 120, 120, 23: 120, 120, 120, 120, 120, 120, 30: 120, 120, 120, 35: 120, 120, 39: 120, 120, 43: 120, 120, 120, 120, 49: 120, 51: 120, 120, 120, 120, 120, 120, 120, 60: 120, 120, 120},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 14: 119, 119, 119, 19: 119, 119, 119, 23: 119, 119, 119, 119, 119, 119, 30: 119, 119, 119, 35: 119, 119, 39: 119, 119, 43: 119, 119, 119, 119, 49: 119, 51: 119, 119, 119, 119, 119, 119, 119, 60: 119, 119, 119},
		// 85
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 14: 118, 118, 118, 19: 118, 118, 118, 23: 118, 118, 118, 118, 118, 118, 30: 118, 118, 118, 35: 118, 118, 39: 118, 118, 43: 118, 118, 118, 118, 49: 118, 51: 118, 118, 118, 118, 118, 118, 118, 60: 118, 118, 118},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 14: 117, 117, 117, 19: 117, 117, 117, 23: 117, 117, 117, 117, 117, 117, 30: 117, 117, 117, 35: 117, 117, 39: 117, 117, 43: 117, 117, 117, 117, 49: 117, 51: 117, 117, 117, 117, 117, 117, 117, 60: 117, 117, 117},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 14: 116, 116, 116, 19: 116, 116, 116, 23: 116, 116, 116, 116, 116, 116, 30: 116, 116, 116, 35: 116, 116, 39: 116, 116, 43: 116, 116, 116, 116, 49: 116, 51: 116, 116, 116, 116, 116, 116, 116, 60: 116, 116, 116},
		{115, 115, 115, 115, 388, 115, 115, 115, 115, 115, 115, 115, 115, 14: 115, 115, 115, 19: 115, 115, 115, 23: 115, 115, 115, 115, 115, 115, 30: 115, 115, 115, 35: 115, 115, 39: 115, 115, 43: 115, 115, 115, 115, 49: 115, 51: 115, 115, 115, 115, 115, 115, 115, 60: 115, 115, 115, 94: 542},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 14: 114, 114, 114, 19: 114, 114, 114, 23: 114, 114, 114, 114, 114, 114, 30: 114, 114, 114, 35: 114, 114, 39: 114, 114, 43: 114, 114, 114, 114, 49: 114, 51: 114, 114, 114, 114, 114, 114, 114, 60: 114, 114, 114},
		// 90
		{102, 102, 3: 102, 102, 102, 102, 102, 13: 102, 17: 102, 102, 22: 102, 29: 102, 33: 102, 102, 37: 102, 102, 41: 102, 102, 47: 102, 102, 50: 102, 58: 102, 102},
		{101, 101, 3: 101, 101, 101, 101, 101, 13: 101, 17: 101, 101, 22: 101, 29: 101, 33: 101, 101, 37: 101, 101, 41: 101, 101, 47: 101, 101, 50: 101, 58: 101, 101},
		{100, 100, 3: 100, 100, 100, 100, 100, 13: 100, 17: 100, 100, 22: 100, 29: 100, 33: 100, 100, 37: 100, 100, 41: 100, 100, 47: 100, 100, 50: 100, 58: 100, 100},
		{99, 99, 3: 99, 99, 99, 99, 99, 13: 99, 17: 99, 99, 22: 99, 29: 99, 33: 99, 99, 37: 99, 99, 41: 99, 99, 47: 99, 99, 50: 99, 58: 99, 99},
		{98, 98, 3: 98, 98, 98, 98, 98, 13: 98, 17: 98, 98, 22: 98, 29: 98, 33: 98, 98, 37: 98, 98, 41: 98, 98, 47: 98, 98, 50: 98, 58: 98, 98},
		// 95
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 541, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 14: 68, 68, 68, 19: 68, 68, 68, 23: 68, 68, 68, 68, 68, 68, 30: 68, 68, 68, 35: 68, 68, 39: 68, 68, 43: 68, 68, 68, 68, 49: 68, 51: 68, 68, 68, 68, 68, 68, 68, 60: 68, 68, 68},
		{4: 111, 13: 510, 171: 511},
		{4: 496},
		{447},
		// 100
		{3: 372, 66: 446},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 14: 30, 30, 30, 19: 30, 30, 30, 23: 30, 30, 30, 30, 30, 30, 30: 30, 30, 30, 35: 30, 30, 39: 30, 30, 43: 30, 30, 30, 30, 49: 30, 51: 30, 30, 30, 30, 30, 30, 30, 60: 30, 30, 30},
		{8, 8, 8, 8, 8, 8, 8, 8, 278, 13: 8, 17: 8, 8, 22: 8, 29: 8, 33: 8, 8, 37: 8, 8, 41: 8, 8, 47: 8, 8, 50: 8, 58: 8, 8, 121: 277, 127: 280, 131: 375, 178: 374},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 23: 16, 16, 16, 16, 16, 16, 30: 16, 16, 16, 35: 16, 16, 39: 16, 16, 43: 16, 16, 16, 16, 49: 16, 51: 16, 16, 16, 16, 16, 16, 16, 60: 16, 16, 16, 97: 16, 16},
		{2: 445},
		// 105
		{346, 363, 28, 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 376, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 165: 378, 179: 377},
		{421, 391, 4: 388, 399, 390, 413, 15: 420, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{2: 8, 8: 278, 11: 381, 121: 277, 127: 280, 380, 131: 382, 191: 379},
		{2: 26, 8: 26, 11: 26},
		{2: 27},
		// 110
		{346, 363, 2, 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 376, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 165: 384},
		{8, 8, 8, 8, 8, 8, 8, 8, 278, 13: 8, 17: 8, 8, 22: 8, 29: 8, 33: 8, 8, 37: 8, 8, 41: 8, 8, 47: 8, 8, 50: 8, 58: 8, 8, 97: 8, 8, 8, 121: 277, 127: 280, 131: 383},
		{2: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 13: 3, 17: 3, 3, 22: 3, 29: 3, 33: 3, 3, 37: 3, 3, 41: 3, 3, 47: 3, 3, 50: 3, 58: 3, 3, 97: 3, 3, 3},
		{2: 25, 8: 25, 11: 25},
		// 115
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 442, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{13: 441},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 14: 105, 105, 105, 19: 105, 105, 105, 23: 105, 105, 105, 105, 105, 105, 30: 105, 105, 105, 35: 105, 105, 39: 105, 105, 43: 105, 105, 105, 105, 49: 105, 51: 105, 105, 105, 105, 105, 105, 105, 60: 105, 105, 105},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 16: 155, 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 434, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 129: 433, 145: 435},
		{96, 96, 3: 96, 96, 96, 96, 96, 13: 96, 17: 96, 96, 22: 96, 29: 96, 33: 96, 96, 37: 96, 96, 41: 96, 96, 47: 96, 96, 50: 96, 58: 96, 96},
		// 120
		{95, 95, 3: 95, 95, 95, 95, 95, 13: 95, 17: 95, 95, 22: 95, 29: 95, 33: 95, 95, 37: 95, 95, 41: 95, 95, 47: 95, 95, 50: 95, 58: 95, 95},
		{94, 94, 3: 94, 94, 94, 94, 94, 13: 94, 17: 94, 94, 22: 94, 29: 94, 33: 94, 94, 37: 94, 94, 41: 94, 94, 47: 94, 94, 50: 94, 58: 94, 94},
		{93, 93, 3: 93, 93, 93, 93, 93, 13: 93, 17: 93, 93, 22: 93, 29: 93, 33: 93, 93, 37: 93, 93, 41: 93, 93, 47: 93, 93, 50: 93, 58: 93, 93},
		{92, 92, 3: 92, 92, 92, 92, 92, 13: 92, 17: 92, 92, 22: 92, 29: 92, 33: 92, 92, 37: 92, 92, 41: 92, 92, 47: 92, 92, 50: 92, 58: 92, 92},
		{91, 91, 3: 91, 91, 91, 91, 91, 13: 91, 17: 91, 91, 22: 91, 29: 91, 33: 91, 91, 37: 91, 91, 41: 91, 91, 47: 91, 91, 50: 91, 58: 91, 91},
		// 125
		{90, 90, 3: 90, 90, 90, 90, 90, 13: 90, 17: 90, 90, 22: 90, 29: 90, 33: 90, 90, 37: 90, 90, 41: 90, 90, 47: 90, 90, 50: 90, 58: 90, 90},
		{89, 89, 3: 89, 89, 89, 89, 89, 13: 89, 17: 89, 89, 22: 89, 29: 89, 33: 89, 89, 37: 89, 89, 41: 89, 89, 47: 89, 89, 50: 89, 58: 89, 89},
		{88, 88, 3: 88, 88, 88, 88, 88, 13: 88, 17: 88, 88, 22: 88, 29: 88, 33: 88, 88, 37: 88, 88, 41: 88, 88, 47: 88, 88, 50: 88, 58: 88, 88},
		{87, 87, 3: 87, 87, 87, 87, 87, 13: 87, 17: 87, 87, 22: 87, 29: 87, 33: 87, 87, 37: 87, 87, 41: 87, 87, 47: 87, 87, 50: 87, 58: 87, 87},
		{86, 86, 3: 86, 86, 86, 86, 86, 13: 86, 17: 86, 86, 22: 86, 29: 86, 33: 86, 86, 37: 86, 86, 41: 86, 86, 47: 86, 86, 50: 86, 58: 86, 86},
		// 130
		{85, 85, 3: 85, 85, 85, 85, 85, 13: 85, 17: 85, 85, 22: 85, 29: 85, 33: 85, 85, 37: 85, 85, 41: 85, 85, 47: 85, 85, 50: 85, 58: 85, 85},
		{84, 84, 3: 84, 84, 84, 84, 84, 13: 84, 17: 84, 84, 22: 84, 29: 84, 33: 84, 84, 37: 84, 84, 41: 84, 84, 47: 84, 84, 50: 84, 58: 84, 84},
		{83, 83, 3: 83, 83, 83, 83, 83, 13: 83, 17: 83, 83, 22: 83, 29: 83, 33: 83, 83, 37: 83, 83, 41: 83, 83, 47: 83, 83, 50: 83, 58: 83, 83},
		{82, 82, 3: 82, 82, 82, 82, 82, 13: 82, 17: 82, 82, 22: 82, 29: 82, 33: 82, 82, 37: 82, 82, 41: 82, 82, 47: 82, 82, 50: 82, 58: 82, 82},
		{81, 81, 3: 81, 81, 81, 81, 81, 13: 81, 17: 81, 81, 22: 81, 29: 81, 33: 81, 81, 37: 81, 81, 41: 81, 81, 47: 81, 81, 50: 81, 58: 81, 81},
		// 135
		{80, 80, 3: 80, 80, 80, 80, 80, 13: 80, 17: 80, 80, 22: 80, 29: 80, 33: 80, 80, 37: 80, 80, 41: 80, 80, 47: 80, 80, 50: 80, 58: 80, 80},
		{79, 79, 3: 79, 79, 79, 79, 79, 13: 79, 17: 79, 79, 22: 79, 29: 79, 33: 79, 79, 37: 79, 79, 41: 79, 79, 47: 79, 79, 50: 79, 58: 79, 79},
		{78, 78, 3: 78, 78, 78, 78, 78, 13: 78, 17: 78, 78, 22: 78, 29: 78, 33: 78, 78, 37: 78, 78, 41: 78, 78, 47: 78, 78, 50: 78, 58: 78, 78},
		{77, 77, 3: 77, 77, 77, 77, 77, 13: 77, 17: 77, 77, 22: 77, 29: 77, 33: 77, 77, 37: 77, 77, 41: 77, 77, 47: 77, 77, 50: 77, 58: 77, 77},
		{76, 76, 3: 76, 76, 76, 76, 76, 13: 76, 17: 76, 76, 22: 76, 29: 76, 33: 76, 76, 37: 76, 76, 41: 76, 76, 47: 76, 76, 50: 76, 58: 76, 76},
		// 140
		{75, 75, 3: 75, 75, 75, 75, 75, 13: 75, 17: 75, 75, 22: 75, 29: 75, 33: 75, 75, 37: 75, 75, 41: 75, 75, 47: 75, 75, 50: 75, 58: 75, 75},
		{74, 74, 3: 74, 74, 74, 74, 74, 13: 74, 17: 74, 74, 22: 74, 29: 74, 33: 74, 74, 37: 74, 74, 41: 74, 74, 47: 74, 74, 50: 74, 58: 74, 74},
		{73, 73, 3: 73, 73, 73, 73, 73, 13: 73, 17: 73, 73, 22: 73, 29: 73, 33: 73, 73, 37: 73, 73, 41: 73, 73, 47: 73, 73, 50: 73, 58: 73, 73},
		{72, 72, 3: 72, 72, 72, 72, 72, 13: 72, 17: 72, 72, 22: 72, 29: 72, 33: 72, 72, 37: 72, 72, 41: 72, 72, 47: 72, 72, 50: 72, 58: 72, 72},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 432, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		// 145
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 431, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 430, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 14: 67, 67, 67, 19: 67, 67, 67, 23: 67, 67, 67, 67, 67, 67, 30: 67, 67, 67, 35: 67, 67, 39: 67, 67, 43: 67, 67, 67, 67, 49: 67, 51: 67, 67, 67, 67, 67, 67, 67, 60: 67, 67, 67},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 14: 66, 66, 66, 19: 66, 66, 66, 23: 66, 66, 66, 66, 66, 66, 30: 66, 66, 66, 35: 66, 66, 39: 66, 66, 43: 66, 66, 66, 66, 49: 66, 51: 66, 66, 66, 66, 66, 66, 66, 60: 66, 66, 66},
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 14: 65, 65, 65, 19: 65, 65, 65, 23: 65, 65, 65, 65, 65, 65, 30: 65, 65, 65, 35: 65, 65, 39: 65, 65, 43: 65, 65, 65, 65, 49: 65, 51: 65, 65, 65, 65, 65, 65, 65, 60: 65, 65, 65},
		// 150
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 429, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 15: 424, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 422, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 200: 423},
		{421, 391, 4: 388, 399, 390, 413, 15: 427, 19: 19, 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{19: 426},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 425, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		// 155
		{421, 391, 4: 388, 399, 390, 413, 19: 20, 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 14: 23, 23, 23, 19: 23, 23, 23, 23: 23, 23, 23, 23, 23, 23, 30: 23, 23, 23, 35: 23, 23, 39: 23, 23, 43: 23, 23, 23, 23, 49: 23, 51: 23, 23, 23, 23, 23, 23, 23, 60: 23, 23, 23},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 21, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 428, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{421, 391, 4: 388, 399, 390, 413, 19: 22, 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{421, 391, 24, 4: 388, 399, 390, 413, 24, 11: 24, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		// 160
		{421, 69, 69, 69, 388, 69, 69, 69, 69, 69, 69, 69, 69, 14: 69, 69, 69, 19: 69, 386, 416, 23: 69, 69, 69, 69, 69, 69, 30: 69, 69, 69, 35: 69, 69, 39: 69, 69, 43: 69, 418, 69, 69, 49: 69, 51: 69, 69, 69, 417, 69, 69, 69, 60: 69, 69, 69, 94: 387, 414, 419},
		{421, 391, 70, 70, 388, 399, 390, 70, 70, 70, 70, 70, 70, 14: 70, 70, 70, 19: 70, 386, 416, 23: 394, 389, 392, 70, 70, 70, 30: 397, 70, 70, 35: 70, 70, 39: 70, 70, 43: 70, 418, 70, 70, 49: 70, 51: 70, 70, 70, 417, 70, 395, 396, 60: 70, 70, 70, 94: 387, 414, 419},
		{421, 391, 71, 71, 388, 399, 390, 413, 71, 71, 71, 71, 71, 14: 71, 71, 71, 19: 71, 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 60: 71, 71, 71, 94: 387, 414, 419},
		{11: 381, 16: 154, 61: 438, 128: 437},
		{421, 391, 153, 4: 388, 399, 390, 413, 153, 153, 153, 153, 153, 14: 153, 153, 153, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 61: 153, 153, 94: 387, 414, 419},
		// 165
		{16: 436},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 14: 103, 103, 103, 19: 103, 103, 103, 23: 103, 103, 103, 103, 103, 103, 30: 103, 103, 103, 35: 103, 103, 39: 103, 103, 43: 103, 103, 103, 103, 49: 103, 51: 103, 103, 103, 103, 103, 103, 103, 60: 103, 103, 103},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 440, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{16: 439},
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 14: 104, 104, 104, 19: 104, 104, 104, 23: 104, 104, 104, 104, 104, 104, 30: 104, 104, 104, 35: 104, 104, 39: 104, 104, 43: 104, 104, 104, 104, 49: 104, 51: 104, 104, 104, 104, 104, 104, 104, 60: 104, 104, 104},
		// 170
		{421, 391, 152, 4: 388, 399, 390, 413, 152, 152, 152, 152, 152, 14: 152, 152, 152, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 60: 152, 152, 152, 94: 387, 414, 419},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 14: 109, 109, 109, 19: 109, 109, 109, 23: 109, 109, 109, 109, 109, 109, 30: 109, 109, 109, 35: 109, 109, 39: 109, 109, 43: 109, 109, 109, 109, 49: 109, 51: 109, 109, 109, 109, 109, 109, 109, 60: 109, 109, 109},
		{421, 391, 4: 388, 399, 390, 413, 15: 443, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 444, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{421, 391, 128, 128, 388, 399, 390, 413, 128, 128, 128, 128, 128, 14: 128, 128, 128, 19: 128, 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 128, 35: 128, 415, 39: 403, 405, 43: 128, 418, 128, 401, 49: 406, 51: 128, 398, 128, 417, 128, 395, 396, 60: 128, 128, 128, 94: 387, 414, 419},
		// 175
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14: 29, 29, 29, 19: 29, 29, 29, 23: 29, 29, 29, 29, 29, 29, 30: 29, 29, 29, 35: 29, 29, 39: 29, 29, 43: 29, 29, 29, 29, 49: 29, 51: 29, 29, 29, 29, 29, 29, 29, 60: 29, 29, 29},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 14: 31, 31, 31, 19: 31, 31, 31, 23: 31, 31, 31, 31, 31, 31, 30: 31, 31, 31, 35: 31, 31, 39: 31, 31, 43: 31, 31, 31, 31, 49: 31, 51: 31, 31, 31, 31, 31, 31, 31, 60: 31, 31, 31},
		{448, 462, 13: 459, 17: 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 465, 451, 450, 455, 186: 466},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 492, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 174: 493},
		{448, 462, 13: 459, 17: 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 491, 458, 470, 451, 450, 455, 136: 490},
		// 180
		{2: 56, 56, 8: 56, 11: 56, 16: 56, 19: 56},
		{2: 55, 55, 8: 55, 11: 55, 16: 55, 19: 55},
		{2: 54, 54, 8: 54, 11: 54, 16: 54, 19: 54},
		{2: 53, 53, 8: 53, 11: 53, 16: 53, 19: 53},
		{2: 52, 52, 8: 52, 11: 52, 16: 52, 19: 52},
		// 185
		{2: 51, 51, 8: 51, 11: 51, 16: 51, 19: 51},
		{2: 50, 50, 8: 50, 11: 50, 16: 50, 19: 50},
		{2: 49, 49, 8: 49, 11: 49, 16: 49, 19: 49},
		{2: 48, 48, 8: 48, 11: 48, 16: 48, 19: 48},
		{2: 47, 47, 8: 47, 11: 47, 16: 47, 19: 47, 45},
		// 190
		{2: 46, 46, 8: 46, 11: 46, 16: 46, 19: 46},
		{20: 488},
		{448, 462, 13: 459, 17: 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 487, 451, 450, 455},
		{3: 473},
		{448, 462, 13: 459, 17: 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 472, 451, 450, 455},
		// 195
		{19: 40},
		{19: 469},
		{448, 462, 13: 459, 17: 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 468, 451, 450, 455},
		{2: 34, 34, 8: 34, 11: 34, 16: 34, 19: 34},
		{448, 462, 13: 459, 17: 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 470, 451, 450, 455, 136: 471},
		// 200
		{2: 39, 39, 8: 39, 11: 39, 16: 39, 19: 39},
		{2: 38, 38, 8: 38, 11: 38, 16: 38, 19: 38},
		{2: 41, 41, 8: 41, 11: 41, 16: 41, 19: 41},
		{8: 278, 13: 8, 99: 8, 121: 277, 127: 280, 131: 475, 213: 474},
		{2: 486},
		// 205
		{13: 373, 65: 476, 99: 477, 137: 479, 212: 478},
		{448, 462, 13: 459, 17: 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 485, 451, 450, 455},
		{13: 373, 65: 483},
		{2: 8, 8: 278, 11: 381, 121: 277, 127: 280, 481, 131: 480},
		{2: 36, 8: 36, 11: 36},
		// 210
		{2: 37},
		{13: 373, 65: 476, 99: 477, 137: 482},
		{2: 35, 8: 35, 11: 35},
		{448, 462, 13: 459, 17: 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 484, 451, 450, 455},
		{2: 112, 8: 112, 11: 112, 16: 112},
		// 215
		{2: 113, 8: 113, 11: 113, 16: 113},
		{2: 42, 42, 8: 42, 11: 42, 16: 42, 19: 42},
		{2: 43, 43, 8: 43, 11: 43, 16: 43, 19: 43},
		{13: 489},
		{2: 44, 44, 8: 44, 11: 44, 16: 44, 19: 44},
		// 220
		{2: 132, 132, 8: 132, 11: 132, 16: 132, 19: 132},
		{448, 462, 13: 459, 17: 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 468, 451, 450, 455},
		{421, 391, 4: 388, 399, 390, 413, 19: 134, 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{19: 494},
		{448, 462, 13: 459, 17: 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 470, 451, 450, 455, 136: 495},
		// 225
		{2: 133, 133, 8: 133, 11: 133, 16: 133, 19: 133},
		{448, 462, 13: 459, 17: 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 497, 451, 450, 455, 211: 498},
		{11: 504, 16: 503},
		{13: 499},
		{11: 500},
		// 230
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 501, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{421, 391, 4: 388, 399, 390, 413, 16: 502, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 14: 57, 57, 57, 19: 57, 57, 57, 23: 57, 57, 57, 57, 57, 57, 30: 57, 57, 57, 35: 57, 57, 39: 57, 57, 43: 57, 57, 57, 57, 49: 57, 51: 57, 57, 57, 57, 57, 57, 57, 60: 57, 57, 57},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 14: 60, 60, 60, 19: 60, 60, 60, 23: 60, 60, 60, 60, 60, 60, 30: 60, 60, 60, 35: 60, 60, 39: 60, 60, 43: 60, 60, 60, 60, 49: 60, 51: 60, 60, 60, 60, 60, 60, 60, 60: 60, 60, 60},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 505, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		// 235
		{421, 391, 4: 388, 399, 390, 413, 11: 507, 16: 506, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 14: 59, 59, 59, 19: 59, 59, 59, 23: 59, 59, 59, 59, 59, 59, 30: 59, 59, 59, 35: 59, 59, 39: 59, 59, 43: 59, 59, 59, 59, 49: 59, 51: 59, 59, 59, 59, 59, 59, 59, 60: 59, 59, 59},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 508, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{421, 391, 4: 388, 399, 390, 413, 16: 509, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 14: 58, 58, 58, 19: 58, 58, 58, 23: 58, 58, 58, 58, 58, 58, 30: 58, 58, 58, 35: 58, 58, 39: 58, 58, 43: 58, 58, 58, 58, 49: 58, 51: 58, 58, 58, 58, 58, 58, 58, 60: 58, 58, 58},
		// 240
		{3: 110, 110},
		{4: 512},
		{13: 516, 16: 165, 65: 476, 99: 477, 137: 517, 167: 519, 518, 181: 520, 521, 514, 513, 515},
		{11: 381, 16: 164, 128: 538},
		{11: 163, 16: 163, 61: 536},
		// 245
		{11: 162, 16: 162},
		{16, 16, 11: 161, 13: 16, 16: 161, 16, 16, 61: 161, 97: 16, 16},
		{11: 160, 16: 160},
		{11: 159, 16: 159, 61: 159},
		{11: 157, 16: 157},
		// 250
		{16: 522},
		{16: 61},
		{448, 462, 3: 172, 524, 13: 459, 17: 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 523, 451, 450, 455, 194: 525},
		{3: 171},
		{448, 462, 13: 459, 16: 169, 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 532, 451, 450, 455, 195: 530, 531},
		// 255
		{3: 526, 130: 527},
		{12, 12, 12, 12, 12, 12, 12, 12, 278, 13: 12, 276, 17: 12, 12, 22: 12, 29: 12, 33: 12, 12, 37: 12, 12, 41: 12, 12, 47: 12, 12, 50: 12, 58: 12, 12, 99: 12, 102: 12, 112: 12, 12, 12, 12, 12, 12, 12, 12, 12, 277, 12, 12, 12, 12, 12, 275, 132: 273, 274, 528},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 14: 64, 64, 64, 19: 64, 64, 64, 23: 64, 64, 64, 64, 64, 64, 30: 64, 64, 64, 35: 64, 64, 39: 64, 64, 43: 64, 64, 64, 64, 49: 64, 51: 64, 64, 64, 64, 64, 64, 64, 60: 64, 64, 64},
		{2: 529},
		{228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 14: 228, 228, 228, 19: 228, 228, 228, 23: 228, 228, 228, 228, 228, 228, 30: 228, 228, 228, 35: 228, 228, 39: 228, 228, 43: 228, 228, 228, 228, 49: 228, 51: 228, 228, 228, 228, 228, 228, 228, 60: 228, 228, 228, 161: 228, 163: 228, 166: 228},
		// 260
		{16: 535},
		{11: 381, 16: 168, 128: 533},
		{11: 167, 16: 167},
		{448, 462, 13: 459, 17: 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 534, 451, 450, 455},
		{11: 166, 16: 166},
		// 265
		{3: 170},
		{448, 462, 13: 459, 16: 62, 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 537, 451, 450, 455},
		{16: 63},
		{13: 516, 65: 476, 99: 477, 137: 517, 167: 540, 539},
		{11: 158, 16: 158, 61: 158},
		// 270
		{11: 156, 16: 156},
		{421, 97, 97, 97, 388, 97, 97, 97, 97, 97, 97, 97, 97, 14: 97, 97, 97, 19: 97, 386, 97, 23: 97, 97, 97, 97, 97, 97, 30: 97, 97, 97, 35: 97, 97, 39: 97, 97, 43: 97, 97, 97, 97, 49: 97, 51: 97, 97, 97, 97, 97, 97, 97, 60: 97, 97, 97, 94: 387, 414, 419},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 14: 106, 106, 106, 19: 106, 106, 106, 23: 106, 106, 106, 106, 106, 106, 30: 106, 106, 106, 35: 106, 106, 39: 106, 106, 43: 106, 106, 106, 106, 49: 106, 51: 106, 106, 106, 106, 106, 106, 106, 60: 106, 106, 106},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 544, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{421, 391, 4: 388, 399, 390, 413, 16: 545, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		// 275
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 14: 123, 123, 123, 19: 123, 123, 123, 23: 123, 123, 123, 123, 123, 123, 30: 123, 123, 123, 35: 123, 123, 39: 123, 123, 43: 123, 123, 123, 123, 49: 123, 51: 123, 123, 123, 123, 123, 123, 123, 60: 123, 123, 123},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 547, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{421, 391, 4: 388, 399, 390, 413, 11: 549, 16: 548, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 14: 125, 125, 125, 19: 125, 125, 125, 23: 125, 125, 125, 125, 125, 125, 30: 125, 125, 125, 35: 125, 125, 39: 125, 125, 43: 125, 125, 125, 125, 49: 125, 51: 125, 125, 125, 125, 125, 125, 125, 60: 125, 125, 125},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 550, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		// 280
		{421, 391, 4: 388, 399, 390, 413, 16: 551, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 14: 124, 124, 124, 19: 124, 124, 124, 23: 124, 124, 124, 124, 124, 124, 30: 124, 124, 124, 35: 124, 124, 39: 124, 124, 43: 124, 124, 124, 124, 49: 124, 51: 124, 124, 124, 124, 124, 124, 124, 60: 124, 124, 124},
		{421, 391, 126, 126, 388, 399, 390, 413, 126, 126, 126, 126, 126, 14: 126, 126, 126, 19: 126, 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 126, 35: 126, 415, 39: 403, 405, 43: 126, 418, 126, 401, 49: 406, 51: 126, 398, 126, 417, 126, 395, 396, 60: 126, 126, 126, 94: 387, 414, 419},
		{448, 462, 13: 459, 17: 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 554, 451, 450, 455},
		{16: 555},
		// 285
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 14: 127, 127, 127, 19: 127, 127, 127, 23: 127, 127, 127, 127, 127, 127, 30: 127, 127, 127, 35: 127, 127, 39: 127, 127, 43: 127, 127, 127, 127, 49: 127, 51: 127, 127, 127, 127, 127, 127, 127, 60: 127, 127, 127},
		{421, 391, 144, 4: 388, 399, 390, 413, 11: 144, 15: 139, 19: 144, 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{2: 143, 11: 143, 19: 143},
		{11: 564, 19: 565},
		{2: 138, 11: 138, 19: 138},
		// 290
		{15: 561},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 562, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 135: 563},
		{421, 391, 144, 4: 388, 399, 390, 413, 11: 144, 19: 144, 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{2: 137, 11: 137, 19: 137},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 556, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 135: 559, 143: 560, 566},
		// 295
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 14: 129, 129, 129, 19: 129, 129, 129, 23: 129, 129, 129, 129, 129, 129, 30: 129, 129, 129, 35: 129, 129, 39: 129, 129, 43: 129, 129, 129, 129, 49: 129, 51: 129, 129, 129, 129, 129, 129, 129, 60: 129, 129, 129},
		{2: 142, 11: 142, 19: 142},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 14: 136, 136, 136, 19: 136, 136, 136, 23: 136, 136, 136, 136, 136, 136, 30: 136, 136, 136, 35: 136, 136, 39: 136, 136, 43: 136, 136, 136, 136, 49: 136, 51: 136, 136, 136, 136, 136, 136, 136, 60: 136, 136, 136},
		{346, 363, 141, 372, 342, 364, 360, 348, 11: 141, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 556, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 135: 559, 143: 560, 557, 162: 569, 192: 570},
		{2: 140, 11: 564},
		// 300
		{2: 14, 11: 572, 175: 573, 190: 571},
		{2: 574},
		{2: 15},
		{2: 13},
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 14: 131, 131, 131, 19: 131, 131, 131, 23: 131, 131, 131, 131, 131, 131, 30: 131, 131, 131, 35: 131, 131, 39: 131, 131, 43: 131, 131, 131, 131, 49: 131, 51: 131, 131, 131, 131, 131, 131, 131, 60: 131, 131, 131},
		// 305
		{421, 391, 4: 388, 399, 390, 413, 16: 576, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 14: 145, 145, 145, 19: 145, 145, 145, 23: 145, 145, 145, 145, 145, 145, 30: 145, 145, 145, 35: 145, 145, 39: 145, 145, 43: 145, 145, 145, 145, 49: 145, 51: 145, 145, 145, 145, 145, 145, 145, 60: 145, 145, 145},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 578, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{421, 391, 4: 388, 399, 390, 413, 16: 579, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 14: 146, 146, 146, 19: 146, 146, 146, 23: 146, 146, 146, 146, 146, 146, 30: 146, 146, 146, 35: 146, 146, 39: 146, 146, 43: 146, 146, 146, 146, 49: 146, 51: 146, 146, 146, 146, 146, 146, 146, 60: 146, 146, 146},
		// 310
		{448, 462, 13: 459, 16: 581, 449, 369, 63: 456, 454, 97: 464, 463, 100: 453, 457, 103: 461, 452, 460, 467, 458, 583, 451, 450, 455, 176: 582},
		{2: 149, 8: 149, 149, 149, 12: 149, 14: 149, 149},
		{16: 584},
		{16: 147},
		{2: 148, 8: 148, 148, 148, 12: 148, 14: 148, 148},
		// 315
		{421, 391, 3: 586, 388, 399, 390, 413, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{2: 8, 8: 278, 8, 8, 121: 277, 127: 280, 131: 588, 210: 587},
		{2: 603},
		{2: 180, 9: 180, 592, 173: 591, 198: 589, 206: 590},
		{2: 175, 9: 600, 207: 599, 598},
		// 320
		{2: 179, 9: 179, 592, 173: 597},
		{2: 178, 9: 178, 178},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 15: 155, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 434, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 129: 594, 145: 593},
		{15: 595},
		{2: 154, 8: 154, 154, 154, 381, 154, 14: 154, 154, 128: 437},
		// 325
		{12, 12, 12, 12, 12, 12, 12, 12, 278, 12, 12, 13: 12, 276, 17: 12, 12, 22: 12, 29: 12, 33: 12, 12, 37: 12, 12, 41: 12, 12, 47: 12, 12, 50: 12, 58: 12, 12, 99: 12, 102: 12, 112: 12, 12, 12, 12, 12, 12, 12, 12, 12, 277, 12, 12, 12, 12, 12, 275, 132: 273, 274, 596},
		{2: 176, 9: 176, 176},
		{2: 177, 9: 177, 177},
		{2: 181},
		{2: 174},
		// 330
		{15: 601},
		{12, 12, 12, 12, 12, 12, 12, 12, 278, 13: 12, 276, 17: 12, 12, 22: 12, 29: 12, 33: 12, 12, 37: 12, 12, 41: 12, 12, 47: 12, 12, 50: 12, 58: 12, 12, 99: 12, 102: 12, 112: 12, 12, 12, 12, 12, 12, 12, 12, 12, 277, 12, 12, 12, 12, 12, 275, 132: 273, 274, 602},
		{2: 173},
		{2: 182, 8: 182, 182, 182, 12: 182, 14: 182, 182},
		{2: 8, 8: 278, 8, 8, 121: 277, 127: 280, 131: 606, 203: 605},
		// 335
		{2: 620},
		{2: 190, 9: 190, 610, 172: 609, 197: 607, 202: 608},
		{2: 185, 9: 617, 204: 616, 615},
		{2: 189, 9: 189, 610, 172: 614},
		{2: 188, 9: 188, 188},
		// 340
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 325, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 99: 334, 102: 335, 112: 331, 320, 321, 340, 327, 337, 326, 336, 324, 122: 322, 338, 339, 323, 328, 129: 333, 138: 290, 330, 332, 329, 284, 146: 611, 285, 286, 299, 297, 298, 292, 296, 291, 289, 287, 295, 294, 288, 293},
		{15: 612},
		{12, 12, 12, 12, 12, 12, 12, 12, 278, 12, 12, 13: 12, 276, 17: 12, 12, 22: 12, 29: 12, 33: 12, 12, 37: 12, 12, 41: 12, 12, 47: 12, 12, 50: 12, 58: 12, 12, 99: 12, 102: 12, 112: 12, 12, 12, 12, 12, 12, 12, 12, 12, 277, 12, 12, 12, 12, 12, 275, 132: 273, 274, 613},
		{2: 186, 9: 186, 186},
		{2: 187, 9: 187, 187},
		// 345
		{2: 191},
		{2: 184},
		{15: 618},
		{12, 12, 12, 12, 12, 12, 12, 12, 278, 13: 12, 276, 17: 12, 12, 22: 12, 29: 12, 33: 12, 12, 37: 12, 12, 41: 12, 12, 47: 12, 12, 50: 12, 58: 12, 12, 99: 12, 102: 12, 112: 12, 12, 12, 12, 12, 12, 12, 12, 12, 277, 12, 12, 12, 12, 12, 275, 132: 273, 274, 619},
		{2: 183},
		// 350
		{2: 192, 8: 192, 192, 192, 12: 192, 14: 192, 192},
		{14: 211},
		{3: 526, 130: 638},
		{421, 391, 3: 196, 388, 399, 390, 413, 11: 153, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 60: 153, 62: 153, 94: 387, 414, 419},
		{16, 16, 3: 16, 16, 16, 16, 16, 11: 632, 20: 16, 631, 23: 16, 16, 16, 16, 16, 16, 30: 16, 16, 16, 35: 16, 16, 39: 16, 16, 43: 16, 16, 16, 16, 49: 16, 51: 16, 16, 16, 16, 16, 16, 16, 60: 16, 62: 16},
		// 355
		{14: 626},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 151, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 628, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 170: 627},
		{14: 629},
		{421, 391, 3: 150, 388, 399, 390, 413, 14: 150, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 628, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 170: 630},
		// 360
		{3: 193},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 636, 315, 314, 366, 305, 316, 310, 311, 304, 318, 637, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		{13: 633},
		{21: 634},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 636, 315, 314, 366, 305, 316, 310, 311, 304, 318, 635, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365},
		// 365
		{248, 248, 3: 194, 248, 248, 248, 248, 20: 248, 248, 23: 248, 248, 248, 248, 248, 248, 30: 248, 248, 248, 35: 248, 248, 39: 248, 248, 43: 248, 248, 248, 248, 49: 248, 51: 248, 248, 248, 248, 248, 248, 248},
		{421, 391, 4: 388, 399, 390, 413, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{248, 248, 3: 195, 248, 248, 248, 248, 20: 248, 248, 23: 248, 248, 248, 248, 248, 248, 30: 248, 248, 248, 35: 248, 248, 39: 248, 248, 43: 248, 248, 248, 248, 49: 248, 51: 248, 248, 248, 248, 248, 248, 248},
		{2: 197, 8: 197, 197, 197, 12: 197, 14: 197, 197},
		{2: 198, 8: 198, 198, 198, 12: 198, 14: 198, 198},
		// 370
		{421, 391, 3: 526, 388, 399, 390, 413, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419, 130: 641},
		{2: 201, 8: 201, 201, 201, 12: 201, 14: 201, 201, 163: 643, 188: 642},
		{2: 202, 8: 202, 202, 202, 12: 202, 14: 202, 202},
		{3: 526, 102: 335, 130: 645, 138: 644},
		{2: 200, 8: 200, 200, 200, 12: 200, 14: 200, 200},
		// 375
		{2: 199, 8: 199, 199, 199, 12: 199, 14: 199, 199},
		{11: 381, 62: 647, 128: 437},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 434, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 129: 648},
		{2: 205, 8: 205, 205, 205, 381, 205, 14: 205, 205, 128: 437},
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 434, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 129: 652},
		// 380
		{204, 204, 3: 204, 204, 204, 204, 204, 13: 204, 17: 204, 204, 22: 204, 29: 204, 33: 204, 204, 37: 204, 204, 41: 204, 204, 47: 204, 204, 50: 204, 58: 204, 204},
		{203, 203, 3: 203, 203, 203, 203, 203, 13: 203, 17: 203, 203, 22: 203, 29: 203, 33: 203, 203, 37: 203, 203, 41: 203, 203, 47: 203, 203, 50: 203, 58: 203, 203},
		{2: 206, 8: 206, 206, 206, 381, 206, 14: 206, 206, 128: 437},
		{11: 381, 60: 655, 128: 656},
		{11: 18, 60: 18},
		// 385
		{346, 363, 3: 372, 342, 364, 360, 348, 13: 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 434, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 129: 658},
		{13: 373, 65: 657},
		{11: 17, 60: 17},
		{2: 208, 8: 208, 208, 208, 381, 208, 14: 208, 208, 128: 437},
		{161: 660},
		// 390
		{3: 111, 13: 510, 171: 661},
		{3: 526, 130: 662},
		{2: 214, 8: 214, 214, 214, 12: 214, 14: 214, 214, 166: 664, 193: 663},
		{2: 215, 8: 215, 215, 215, 12: 215, 14: 215, 215},
		{3: 526, 130: 665},
		// 395
		{2: 213, 8: 213, 213, 213, 12: 213, 14: 213, 213},
		{233, 233, 107, 4: 233, 233, 233, 233, 107, 107, 107, 12: 107, 14: 107, 107, 20: 233, 233, 23: 233, 233, 233, 233, 233, 233, 30: 233, 233, 233, 35: 233, 233, 39: 233, 233, 43: 233, 233, 233, 233, 49: 233, 51: 233, 233, 233, 233, 233, 233, 233},
		{232, 232, 108, 4: 232, 232, 232, 232, 108, 108, 108, 12: 108, 14: 108, 108, 20: 232, 232, 23: 232, 232, 232, 232, 232, 232, 30: 232, 232, 232, 35: 232, 232, 39: 232, 232, 43: 232, 232, 232, 232, 49: 232, 51: 232, 232, 232, 232, 232, 232, 232},
		{2: 216, 8: 216, 216, 216, 12: 216, 14: 216, 216},
		{2: 217, 8: 217, 217, 217, 12: 217, 14: 217, 217},
		// 400
		{3: 526, 130: 671},
		{2: 219, 8: 219, 219, 219, 12: 219, 14: 219, 219},
		{421, 391, 220, 4: 388, 399, 390, 413, 220, 220, 220, 12: 220, 14: 220, 220, 20: 386, 416, 23: 394, 389, 392, 404, 402, 385, 30: 397, 400, 411, 35: 410, 415, 39: 403, 405, 43: 408, 418, 409, 401, 49: 406, 51: 412, 398, 407, 417, 393, 395, 396, 94: 387, 414, 419},
		{2: 221, 8: 221, 221, 221, 12: 221, 14: 221, 221},
		{2: 227, 8: 227, 227, 227, 12: 227, 14: 227, 227},
		// 405
		{2: 222, 8: 222, 222, 222, 12: 222, 14: 222, 222},
		{2: 224, 8: 224, 224, 224, 12: 224, 14: 224, 224},
		{2: 267, 9: 267, 267, 12: 267},
		{346, 363, 11, 372, 342, 364, 360, 348, 9: 11, 11, 12: 11, 373, 17: 345, 369, 22: 361, 29: 362, 33: 350, 349, 37: 356, 367, 41: 341, 368, 47: 347, 357, 50: 352, 58: 353, 355, 63: 370, 344, 358, 371, 301, 354, 325, 315, 314, 366, 305, 316, 310, 311, 304, 318, 300, 306, 302, 351, 308, 312, 359, 317, 307, 309, 313, 319, 303, 343, 365, 99: 334, 102: 335, 112: 331, 320, 321, 340, 327, 337, 326, 336, 324, 122: 322, 338, 339, 323, 328, 129: 333, 138: 290, 330, 332, 329, 284, 146: 679, 285, 286, 299, 297, 298, 292, 296, 291, 289, 287, 295, 294, 288, 293},
		{2: 265, 8: 265, 265, 265, 12: 265, 14: 265},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 216

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmt
			}
		}
	case 2:
		{
			yyVAL.stmt = nil
		}
	case 3:
		{
			yyVAL.stmt = yyS[yypt-1].stmtsStmt
		}
	case 4:
		{
			yyVAL.stmtsStmt = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 5:
		{
			yyS[yypt-2].stmtsStmt.Stmts = append(yyS[yypt-2].stmtsStmt.Stmts, yyS[yypt-0].stmt)
		}
	case 42:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 44:
		{
			yyVAL.stmt = &ast.LabelStmt{Name: yyS[yypt-2].tok.Lit, Stmt: yyS[yypt-0].stmt}
		}
	case 45:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 46:
		{
			yyVAL.stmt = &ast.BreakStmt{Label: yyS[yypt-0].tok.Lit}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 47:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 48:
		{
			yyVAL.stmt = &ast.ContinueStmt{Label: yyS[yypt-0].tok.Lit}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 49:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprsExpr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 50:
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 51:
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyS[yypt-1].tok.Lit, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 52:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 53:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Go = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Go = true
			}
			yyVAL.stmt = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 54:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Defer = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Defer = true
			}
			yyVAL.stmt = &ast.DeferStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 55:
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyS[yypt-4].stmt, Var: yyS[yypt-2].opt_ident.Lit, Catch: yyS[yypt-1].stmt, Finally: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 56:
		{
			yyVAL.stmt = nil
		}
	case 57:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 58:
		{
			yyVAL.stmt = nil
		}
	case 59:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 62:
		{
			isItem := false
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprsExpr.Exprs) == 1 {
				if _, ok := yyS[yypt-0].exprsExpr.Exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					arr := &ast.ExprsExpr{}
					for _, el := range yyS[yypt-2].expr_idents {
						arr.Exprs = append(arr.Exprs, &ast.IdentExpr{Lit: el})
					}
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: arr, Rhs: yyS[yypt-0].exprsExpr.Exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprsExpr.Exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprsExpr.Exprs) && !(len(yyS[yypt-0].exprsExpr.Exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprsExpr.Exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 63:
		{
			lhs := yyS[yypt-0].stmt_lets_helper.Exprs1
			rhs := yyS[yypt-0].stmt_lets_helper.Exprs2
			isItem := false
			if len(lhs.Exprs) == 2 && len(rhs.Exprs) == 1 {
				if _, ok := rhs.Exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: lhs, Rhs: rhs.Exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.LetsStmt{Lhss: lhs, Operator: "=", Rhss: rhs, Typed: yyS[yypt-0].stmt_lets_helper.Typed, Mutable: yyS[yypt-0].stmt_lets_helper.Mutable}
				if len(lhs.Exprs) != len(rhs.Exprs) && !(len(rhs.Exprs) == 1 && len(lhs.Exprs) > len(rhs.Exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(lhs.Exprs[0].Position())
		}
	case 64:
		{
			yyVAL.stmt_lets_helper = struct {
				Exprs1, Exprs2 *ast.ExprsExpr
				Typed, Mutable bool
			}{Exprs1: yyS[yypt-2].exprsExpr, Exprs2: yyS[yypt-0].exprsExpr, Typed: yyS[yypt-1].op_lets, Mutable: false}
		}
	case 65:
		{
			yyVAL.stmt_lets_helper = struct {
				Exprs1, Exprs2 *ast.ExprsExpr
				Typed, Mutable bool
			}{Exprs1: yyS[yypt-2].exprsExpr, Exprs2: yyS[yypt-0].exprsExpr, Typed: true, Mutable: true}
		}
	case 66:
		{
			yyVAL.op_lets = true
		}
	case 67:
		{
			yyVAL.op_lets = false
		}
	case 68:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-2].expr, Then: yyS[yypt-1].stmt, Else: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 69:
		{
			yyVAL.stmt = nil
		}
	case 70:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 71:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 72:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 73:
		{
			if el, ok := yyS[yypt-1].stmt.(*ast.LoopStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			} else if el, ok := yyS[yypt-1].stmt.(*ast.ForStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			} else if el, ok := yyS[yypt-1].stmt.(*ast.CForStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			}
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 74:
		{
			yyVAL.stmt = &ast.LoopStmt{Expr: yyS[yypt-0].expr}
		}
	case 75:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: []string{yyS[yypt-2].tok.Lit}, Value: yyS[yypt-0].expr}
		}
	case 76:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: []string{yyS[yypt-4].tok.Lit, yyS[yypt-2].tok.Lit}, Value: yyS[yypt-0].expr}
		}
	case 77:
		{
			yyVAL.stmt = &ast.CForStmt{Stmt1: yyS[yypt-4].stmt, Expr2: yyS[yypt-2].expr, Expr3: yyS[yypt-0].expr}
		}
	case 78:
		{
			yyVAL.stmt = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 79:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{Cases: yyS[yypt-1].stmts, Default: yyS[yypt-0].stmt}
		}
	case 80:
		{
			yyVAL.stmts = nil
		}
	case 81:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 82:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 83:
		{
			yyVAL.stmts = append(yyVAL.stmts, yyS[yypt-0].stmt)
		}
	case 84:
		{
			yyVAL.stmt = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 85:
		{
			yyVAL.stmt = nil
		}
	case 86:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 87:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 88:
		{
			yyS[yypt-1].stmt.(*ast.SwitchStmt).Expr = yyS[yypt-3].expr
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 89:
		{
			yyVAL.stmt = &ast.SwitchStmt{Cases: yyS[yypt-1].stmts, Default: yyS[yypt-0].stmt}
		}
	case 90:
		{
			yyVAL.stmts = nil
		}
	case 91:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 92:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 93:
		{
			yyVAL.stmts = append(yyVAL.stmts, yyS[yypt-0].stmt)
		}
	case 94:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].exprsExpr, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 95:
		{
			yyVAL.stmt = nil
		}
	case 96:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 97:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 98:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 99:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 100:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents
		}
	case 101:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{}
		}
	case 102:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-0].opt_func_return_expr_idents
		}
	case 103:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 104:
		{
			yyVAL.opt_func_return_expr_idents = append(yyS[yypt-2].opt_func_return_expr_idents, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 105:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 106:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents
		}
	case 109:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 110:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].expr_typed_ident.Name, TypeData: yyS[yypt-0].expr_typed_ident.TypeData}
		}
	case 111:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 112:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 113:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 114:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 115:
		{
			yyVAL.exprsExpr = &ast.ExprsExpr{Exprs: []ast.Expr{}}
		}
	case 116:
		{
			yyVAL.exprsExpr = yyS[yypt-0].exprsExpr
		}
	case 117:
		{
			yyVAL.exprsExpr = &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 118:
		{
			yyS[yypt-2].exprsExpr.Exprs = append(yyS[yypt-2].exprsExpr.Exprs, yyS[yypt-0].expr)
		}
	case 119:
		{
			yyVAL.expr = nil
		}
	case 120:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 121:
		{
			yyVAL.stmt = &ast.DbgStmt{Expr: nil}
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 122:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 123:
		{
			yyVAL.stmt = &ast.DbgStmt{TypeData: yyS[yypt-0].type_data}
		}
	case 124:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 125:
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 127:
		{
			yyVAL.exprsExpr = &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 128:
		{
			yyS[yypt-2].exprsExpr.Exprs = append(yyS[yypt-2].exprsExpr.Exprs, yyS[yypt-0].expr)
		}
	case 129:
		{
			yyVAL.exprsExpr = nil
		}
	case 130:
		{
			yyVAL.exprsExpr = yyS[yypt-0].exprsExpr
		}
	case 132:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 133:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 134:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeSlice {
				yyVAL.expr = &ast.ArrayExpr{TypeData: yyS[yypt-1].type_data, Exprs: yyS[yypt-0].expr.(*ast.ExprsExpr)}
			} else {
				yyVAL.expr = yyS[yypt-0].expr
			}
		}
	case 137:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 138:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data}
		}
	case 139:
		{
			yyVAL.expr = yyS[yypt-2].exprsExpr
		}
	case 140:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: &ast.ExprsExpr{Exprs: []ast.Expr{}}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 141:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprsExpr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 142:
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 143:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 144:
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 145:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 146:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 147:
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 148:
		{
			yyVAL.expr = yyS[yypt-0].expr
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 149:
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 150:
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 151:
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 157:
		{
			typeData := yyS[yypt-0].type_data
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: typeData}
		}
	case 158:
		{
			typeData := yyS[yypt-0].type_data
			typeData.Mutable = true
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: typeData}
		}
	case 159:
		{
			yyVAL.opt_ident = nil
		}
	case 160:
		{
			yyVAL.opt_ident = &yyS[yypt-0].tok
		}
	case 161:
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 164:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 165:
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyS[yypt-1].expr, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 166:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  *ast.ExprsExpr
				VarArg bool
			}{Exprs: yyS[yypt-2].exprsExpr, VarArg: true}
		}
	case 167:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  *ast.ExprsExpr
				VarArg bool
			}{Exprs: yyS[yypt-1].exprsExpr}
		}
	case 168:
		{
			yyVAL.str = "-"
		}
	case 169:
		{
			yyVAL.str = "!"
		}
	case 170:
		{
			yyVAL.str = "^"
		}
	case 171:
		{
			yyVAL.str = "*"
		}
	case 172:
		{
			yyVAL.str = "&"
		}
	case 173:
		{
			if yyS[yypt-1].str == "&" {
				if el, ok := yyS[yypt-0].expr.(*ast.IdentExpr); ok {
					yyVAL.expr = &ast.AddrExpr{Expr: el}
				} else if el, ok := yyS[yypt-0].expr.(*ast.MemberExpr); ok {
					yyVAL.expr = el
				}
			} else if yyS[yypt-1].str == "*" {
				yyVAL.expr = &ast.DerefExpr{Expr: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.UnaryExpr{Operator: yyS[yypt-1].str, Expr: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 174:
		{
			yyVAL.str = "+"
		}
	case 175:
		{
			yyVAL.str = "-"
		}
	case 176:
		{
			yyVAL.str = "*"
		}
	case 177:
		{
			yyVAL.str = "/"
		}
	case 178:
		{
			yyVAL.str = "**"
		}
	case 179:
		{
			yyVAL.str = "%"
		}
	case 180:
		{
			yyVAL.str = "<<"
		}
	case 181:
		{
			yyVAL.str = ">>"
		}
	case 182:
		{
			yyVAL.str = "|"
		}
	case 183:
		{
			yyVAL.str = "||"
		}
	case 184:
		{
			yyVAL.str = "&"
		}
	case 185:
		{
			yyVAL.str = "&&"
		}
	case 186:
		{
			yyVAL.str = "!="
		}
	case 187:
		{
			yyVAL.str = ">"
		}
	case 188:
		{
			yyVAL.str = ">="
		}
	case 189:
		{
			yyVAL.str = "<"
		}
	case 190:
		{
			yyVAL.str = "<="
		}
	case 191:
		{
			yyVAL.str = "??"
		}
	case 192:
		{
			yyVAL.str = "+="
		}
	case 193:
		{
			yyVAL.str = "-="
		}
	case 194:
		{
			yyVAL.str = "*="
		}
	case 195:
		{
			yyVAL.str = "/="
		}
	case 196:
		{
			yyVAL.str = "&="
		}
	case 197:
		{
			yyVAL.str = "|="
		}
	case 198:
		{
			yyVAL.str = "<-"
		}
	case 199:
		{
			if yyS[yypt-1].str == "??" {
				yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "<-" {
				yyVAL.expr = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "+=" ||
				yyS[yypt-1].str == "-=" ||
				yyS[yypt-1].str == "*=" ||
				yyS[yypt-1].str == "/=" ||
				yyS[yypt-1].str == "&=" ||
				yyS[yypt-1].str == "|=" {
				yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 200:
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 201:
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 203:
		{
			yyVAL.str = "++"
		}
	case 204:
		{
			yyVAL.str = "--"
		}
	case 205:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: yyS[yypt-0].str}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 206:
		{
			f := &ast.FuncExpr{Params: yyS[yypt-3].func_expr_args.Params, Returns: yyS[yypt-1].opt_func_return_expr_idents, Stmt: yyS[yypt-0].stmt, VarArg: yyS[yypt-3].func_expr_args.VarArg}
			if yyS[yypt-3].func_expr_args.TypeData != nil {
				f.Params[len(f.Params)-1].TypeData = yyS[yypt-3].func_expr_args.TypeData
			}
			if yyS[yypt-5].opt_ident != nil {
				f.Name = yyS[yypt-5].opt_ident.Lit
			}
			yyVAL.expr = f
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 207:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-2].func_expr_idents, VarArg: true, TypeData: yyS[yypt-0].type_data}
		}
	case 208:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-1].func_expr_idents, VarArg: true, TypeData: nil}
		}
	case 209:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-0].func_expr_idents, VarArg: false, TypeData: nil}
		}
	case 210:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 211:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 212:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 213:
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 223:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 224:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 226:
		{
			yyVAL.type_data = &ast.TypeStruct{Env: []string{yyS[yypt-2].tok.Lit}, Name: yyS[yypt-0].tok.Lit}
		}
	case 227:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 228:
		{
			yyVAL.type_data = yyS[yypt-1].type_data
		}
	case 229:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 232:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 233:
		{
			yyVAL.type_data = yyS[yypt-1].type_data
		}
	case 234:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-0].expr_typed_ident.Name}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].expr_typed_ident.TypeData}}
		}
	case 235:
		{
			if yyS[yypt-2].type_data == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data.StructNames = append(yyVAL.type_data.StructNames, yyS[yypt-0].expr_typed_ident.Name)
			yyVAL.type_data.StructTypes = append(yyVAL.type_data.StructTypes, yyS[yypt-0].expr_typed_ident.TypeData)
		}
	case 236:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 237:
		{
			yyVAL.slice_count = 1
		}
	case 238:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 239:
		{
			yyS[yypt-0].expr_map.TypeData = yyS[yypt-1].type_data
			yyVAL.expr = yyS[yypt-0].expr_map
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_map.Position())
		}
	case 240:
		{
			yyVAL.expr = yyS[yypt-0].expr_map
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_map.Position())
		}
	case 241:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map
		}
	case 242:
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: &ast.ExprsExpr{Exprs: []ast.Expr{}}, Values: &ast.ExprsExpr{Exprs: []ast.Expr{}}}
		}
	case 243:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map
		}
	case 244:
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].exprs[0]}}, Values: &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].exprs[1]}}}
		}
	case 245:
		{
			yyVAL.expr_map.Keys.Exprs = append(yyVAL.expr_map.Keys.Exprs, yyS[yypt-0].exprs[0])
			yyVAL.expr_map.Values.Exprs = append(yyVAL.expr_map.Values.Exprs, yyS[yypt-0].exprs[1])
		}
	case 246:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 247:
		{
			if el, ok := yyS[yypt-1].expr.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-3].expr
			} else if el, ok := yyS[yypt-1].expr.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-3].expr
			}
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 248:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: yyS[yypt-0].expr}
		}
	case 249:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-1].expr, End: nil}
		}
	case 250:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: nil, End: yyS[yypt-0].expr}
		}
	case 251:
		{
			yyVAL.expr = &ast.ItemExpr{Index: yyS[yypt-0].expr}
		}
	case 252:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].expr.(*ast.IdentExpr).Lit}
		}
	case 253:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].expr.(*ast.IdentExpr).Lit)
		}
	case 254:
		{
			yyVAL.expr = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-0].tok.Position())
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
