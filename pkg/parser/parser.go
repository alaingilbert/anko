// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:53
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             ast.Stmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_unary                    ast.Expr
	expr_binary                   ast.Expr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"','",
	"'.'",
	"'['",
	"']'",
	"'!'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1173

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	61, 90,
	62, 90,
	80, 6,
	81, 90,
	-2, 2,
	-1, 24,
	81, 91,
	-2, 20,
	-1, 69,
	61, 90,
	62, 90,
	81, 90,
	-2, 6,
	-1, 118,
	16, 72,
	81, 72,
	-2, 196,
	-1, 127,
	4, 185,
	51, 185,
	58, 185,
	59, 185,
	-2, 105,
	-1, 156,
	1, 136,
	8, 136,
	47, 136,
	48, 136,
	61, 136,
	62, 136,
	63, 136,
	76, 136,
	77, 136,
	79, 136,
	80, 136,
	81, 136,
	84, 136,
	86, 136,
	-2, 94,
	-1, 158,
	1, 138,
	8, 138,
	47, 138,
	48, 138,
	61, 138,
	62, 138,
	63, 138,
	76, 138,
	77, 138,
	79, 138,
	80, 138,
	81, 138,
	84, 138,
	86, 138,
	-2, 94,
	-1, 258,
	79, 176,
	82, 176,
	-2, 196,
	-1, 288,
	63, 6,
	-2, 90,
	-1, 296,
	77, 210,
	84, 210,
	-2, 202,
	-1, 310,
	77, 210,
	-2, 202,
	-1, 317,
	1, 93,
	8, 93,
	47, 93,
	48, 93,
	61, 93,
	62, 93,
	63, 93,
	77, 93,
	79, 93,
	80, 93,
	81, 93,
	84, 93,
	86, 93,
	-2, 94,
	-1, 318,
	1, 137,
	8, 137,
	47, 137,
	48, 137,
	61, 137,
	62, 137,
	63, 137,
	76, 137,
	77, 137,
	79, 137,
	80, 137,
	81, 137,
	84, 137,
	86, 137,
	-2, 103,
	-1, 319,
	1, 139,
	8, 139,
	47, 139,
	48, 139,
	61, 139,
	62, 139,
	63, 139,
	76, 139,
	77, 139,
	79, 139,
	80, 139,
	81, 139,
	84, 139,
	86, 139,
	-2, 103,
	-1, 364,
	1, 22,
	47, 22,
	48, 22,
	63, 22,
	77, 22,
	80, 22,
	86, 22,
	-2, 111,
	-1, 366,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	77, 24,
	80, 24,
	86, 24,
	-2, 113,
	-1, 368,
	1, 26,
	47, 26,
	48, 26,
	63, 26,
	77, 26,
	80, 26,
	86, 26,
	-2, 111,
	-1, 370,
	1, 28,
	47, 28,
	48, 28,
	63, 28,
	77, 28,
	80, 28,
	86, 28,
	-2, 113,
	-1, 374,
	77, 208,
	84, 208,
	-2, 203,
	-1, 420,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	77, 21,
	80, 21,
	86, 21,
	-2, 110,
	-1, 421,
	1, 23,
	47, 23,
	48, 23,
	63, 23,
	77, 23,
	80, 23,
	86, 23,
	-2, 112,
	-1, 422,
	1, 25,
	47, 25,
	48, 25,
	63, 25,
	77, 25,
	80, 25,
	86, 25,
	-2, 110,
	-1, 423,
	1, 27,
	47, 27,
	48, 27,
	63, 27,
	77, 27,
	80, 27,
	86, 27,
	-2, 112,
}

const yyPrivate = 57344

const yyLast = 4156

var yyAct = [...]int16{
	2, 387, 236, 252, 10, 249, 354, 355, 247, 246,
	297, 6, 9, 357, 356, 35, 85, 9, 8, 288,
	287, 375, 310, 428, 296, 397, 71, 9, 9, 9,
	127, 223, 9, 444, 229, 223, 59, 377, 285, 286,
	106, 107, 91, 126, 85, 94, 95, 97, 99, 109,
	111, 72, 9, 476, 137, 80, 223, 223, 9, 308,
	100, 101, 102, 103, 104, 105, 369, 226, 106, 107,
	91, 92, 93, 330, 164, 331, 223, 91, 82, 156,
	158, 84, 81, 83, 431, 438, 223, 210, 223, 71,
	223, 294, 79, 98, 96, 86, 87, 108, 152, 88,
	89, 90, 110, 258, 36, 38, 82, 205, 65, 142,
	81, 83, 293, 82, 203, 322, 329, 81, 83, 173,
	211, 142, 51, 39, 40, 41, 222, 367, 143, 462,
	327, 365, 223, 223, 470, 423, 471, 370, 131, 152,
	363, 306, 131, 240, 223, 303, 422, 152, 71, 267,
	135, 67, 55, 421, 49, 57, 56, 259, 136, 66,
	161, 420, 206, 150, 151, 221, 263, 60, 265, 62,
	260, 393, 206, 63, 380, 54, 231, 45, 254, 337,
	320, 131, 43, 152, 61, 135, 139, 241, 242, 135,
	253, 216, 134, 136, 214, 163, 134, 136, 368, 162,
	152, 521, 366, 272, 152, 132, 147, 146, 276, 132,
	73, 364, 389, 152, 24, 409, 304, 137, 152, 520,
	268, 137, 152, 71, 141, 140, 74, 518, 135, 514,
	513, 262, 512, 516, 160, 134, 136, 307, 507, 112,
	115, 505, 120, 500, 123, 125, 499, 309, 132, 491,
	485, 289, 290, 291, 292, 482, 138, 481, 480, 317,
	137, 465, 325, 324, 464, 459, 145, 453, 451, 450,
	449, 153, 154, 155, 157, 159, 158, 315, 345, 448,
	24, 430, 417, 401, 383, 344, 341, 410, 168, 169,
	170, 171, 335, 362, 174, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 71, 381, 198,
	199, 200, 201, 360, 359, 333, 282, 209, 273, 511,
	509, 496, 494, 474, 131, 398, 376, 218, 472, 166,
	457, 434, 228, 400, 165, 121, 119, 402, 403, 419,
	405, 232, 44, 414, 361, 237, 510, 238, 239, 501,
	413, 412, 418, 114, 357, 356, 288, 287, 352, 11,
	144, 131, 76, 255, 394, 5, 321, 264, 3, 488,
	69, 135, 251, 68, 379, 343, 271, 425, 134, 136,
	332, 319, 437, 71, 416, 441, 440, 133, 439, 117,
	318, 132, 167, 300, 172, 452, 149, 454, 455, 442,
	75, 458, 1, 137, 128, 460, 274, 7, 135, 278,
	463, 281, 148, 48, 70, 134, 136, 378, 435, 250,
	295, 248, 46, 37, 50, 469, 52, 42, 132, 284,
	473, 21, 388, 353, 475, 237, 390, 20, 18, 17,
	137, 22, 23, 19, 316, 26, 27, 483, 484, 25,
	4, 129, 486, 487, 0, 0, 0, 0, 0, 0,
	489, 159, 129, 493, 0, 495, 0, 336, 497, 0,
	220, 338, 0, 0, 0, 133, 133, 130, 133, 0,
	348, 350, 213, 0, 133, 506, 133, 508, 0, 24,
	503, 0, 0, 0, 0, 371, 0, 0, 0, 0,
	515, 0, 517, 234, 0, 257, 133, 519, 0, 0,
	0, 0, 385, 243, 0, 386, 0, 0, 0, 0,
	0, 204, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 396, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 408, 0, 0, 0, 0, 0, 415, 0,
	129, 0, 0, 0, 0, 224, 225, 275, 227, 133,
	0, 0, 220, 283, 233, 0, 235, 0, 0, 0,
	0, 0, 0, 299, 0, 432, 258, 36, 38, 302,
	0, 65, 0, 0, 133, 256, 261, 0, 447, 0,
	133, 0, 0, 257, 0, 51, 39, 40, 41, 0,
	0, 0, 0, 0, 129, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 298,
	129, 0, 0, 135, 67, 55, 129, 49, 57, 56,
	259, 136, 66, 0, 298, 358, 0, 478, 0, 0,
	60, 133, 62, 260, 0, 0, 63, 243, 54, 301,
	45, 0, 0, 133, 133, 43, 0, 61, 237, 490,
	0, 384, 133, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 392, 323, 204, 0, 0, 0, 0,
	328, 0, 129, 224, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 374, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 411, 298, 0, 0, 374, 0,
	133, 0, 133, 0, 118, 36, 38, 0, 0, 65,
	129, 58, 133, 133, 0, 0, 133, 133, 0, 427,
	0, 382, 0, 51, 39, 40, 41, 0, 0, 0,
	0, 0, 0, 0, 391, 204, 0, 204, 0, 0,
	0, 129, 395, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 55, 0, 49, 57, 56, 53, 0,
	66, 133, 0, 0, 298, 133, 129, 133, 60, 466,
	62, 64, 467, 0, 63, 0, 113, 0, 45, 0,
	116, 0, 0, 43, 0, 61, 0, 0, 0, 0,
	426, 0, 429, 0, 0, 204, 0, 0, 0, 133,
	0, 0, 436, 0, 0, 0, 0, 443, 0, 0,
	0, 133, 492, 0, 0, 133, 129, 0, 0, 129,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 36, 38, 0, 0, 65, 14, 58, 15, 28,
	0, 29, 0, 0, 0, 0, 0, 0, 0, 51,
	39, 40, 41, 0, 16, 30, 0, 477, 0, 129,
	0, 0, 0, 0, 12, 13, 0, 0, 0, 0,
	0, 31, 32, 0, 0, 33, 34, 298, 67, 55,
	0, 49, 57, 56, 53, 0, 66, 0, 0, 0,
	0, 0, 0, 0, 60, 0, 62, 64, 0, 0,
	63, 502, 54, 0, 45, 504, 0, 0, 0, 43,
	0, 61, 85, 94, 95, 97, 99, 109, 111, 0,
	0, 0, 0, 80, 0, 0, 0, 0, 100, 101,
	102, 103, 104, 105, 0, 0, 106, 107, 91, 92,
	93, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 270,
	79, 98, 96, 86, 87, 108, 0, 88, 89, 90,
	110, 0, 0, 0, 82, 0, 0, 0, 81, 83,
	269, 85, 94, 95, 97, 99, 109, 111, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 100, 101, 102,
	103, 104, 105, 0, 0, 106, 107, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	98, 96, 86, 87, 108, 0, 88, 89, 90, 110,
	0, 207, 0, 82, 0, 0, 0, 81, 83, 85,
	94, 95, 97, 99, 109, 111, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 100, 101, 102, 103, 104,
	105, 0, 0, 106, 107, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 98, 96,
	86, 87, 108, 0, 88, 89, 90, 110, 0, 0,
	0, 82, 445, 0, 446, 81, 83, 85, 94, 95,
	97, 99, 109, 111, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 100, 101, 102, 103, 104, 105, 0,
	0, 106, 107, 91, 92, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 98, 96, 86, 87,
	108, 0, 88, 89, 90, 110, 0, 0, 0, 82,
	0, 0, 0, 81, 83, 424, 85, 94, 95, 97,
	99, 109, 111, 0, 0, 0, 0, 80, 0, 0,
	0, 0, 100, 101, 102, 103, 104, 105, 0, 0,
	106, 107, 91, 92, 93, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 79, 98, 96, 86, 87, 108,
	0, 88, 89, 90, 110, 0, 0, 0, 82, 0,
	0, 0, 81, 83, 399, 85, 94, 95, 97, 99,
	109, 111, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 100, 101, 102, 103, 104, 105, 0, 0, 106,
	107, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 98, 96, 86, 87, 108, 0,
	88, 89, 90, 110, 0, 0, 0, 82, 0, 0,
	0, 81, 83, 373, 85, 94, 95, 97, 99, 109,
	111, 0, 0, 0, 0, 80, 0, 0, 0, 0,
	100, 101, 102, 103, 104, 105, 0, 0, 106, 107,
	91, 92, 93, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 79, 98, 96, 86, 87, 108, 0, 88,
	89, 90, 110, 0, 0, 0, 82, 0, 0, 0,
	81, 83, 340, 85, 94, 95, 97, 99, 109, 111,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 100,
	101, 102, 103, 104, 105, 0, 0, 106, 107, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 98, 96, 86, 87, 108, 0, 88, 89,
	90, 110, 0, 0, 0, 82, 313, 0, 314, 81,
	83, 85, 94, 95, 97, 99, 109, 111, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 100, 101, 102,
	103, 104, 105, 0, 0, 106, 107, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 0, 79,
	98, 96, 86, 87, 108, 0, 88, 89, 90, 110,
	0, 0, 0, 82, 0, 0, 0, 81, 83, 85,
	94, 95, 97, 99, 109, 111, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 100, 101, 102, 103, 104,
	105, 0, 0, 106, 107, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 98, 96,
	86, 87, 108, 0, 88, 89, 90, 110, 0, 0,
	0, 82, 498, 0, 0, 81, 83, 85, 94, 95,
	97, 99, 109, 111, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 100, 101, 102, 103, 104, 105, 0,
	0, 106, 107, 91, 92, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 98, 96, 86, 87,
	108, 0, 88, 89, 90, 110, 0, 0, 0, 82,
	479, 0, 0, 81, 83, 85, 94, 95, 97, 99,
	109, 111, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 100, 101, 102, 103, 104, 105, 0, 0, 106,
	107, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 468, 79, 98, 96, 86, 87, 108, 0,
	88, 89, 90, 110, 0, 0, 0, 82, 0, 0,
	0, 81, 83, 85, 94, 95, 97, 99, 109, 111,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 100,
	101, 102, 103, 104, 105, 0, 0, 106, 107, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	461, 79, 98, 96, 86, 87, 108, 0, 88, 89,
	90, 110, 0, 0, 0, 82, 0, 0, 0, 81,
	83, 85, 94, 95, 97, 99, 109, 111, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 100, 101, 102,
	103, 104, 105, 0, 0, 106, 107, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	98, 96, 86, 87, 108, 0, 88, 89, 90, 110,
	0, 456, 0, 82, 0, 0, 0, 81, 83, 85,
	94, 95, 97, 99, 109, 111, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 100, 101, 102, 103, 104,
	105, 0, 0, 106, 107, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 98, 96,
	86, 87, 108, 0, 88, 89, 90, 110, 0, 0,
	0, 82, 433, 0, 0, 81, 83, 85, 94, 95,
	97, 99, 109, 111, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 100, 101, 102, 103, 104, 105, 0,
	0, 106, 107, 91, 92, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 98, 96, 86, 87,
	108, 0, 88, 89, 90, 110, 0, 406, 0, 82,
	0, 0, 0, 81, 83, 85, 94, 95, 97, 99,
	109, 111, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 100, 101, 102, 103, 104, 105, 0, 0, 106,
	107, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 98, 96, 86, 87, 108, 0,
	88, 89, 90, 110, 0, 404, 0, 82, 0, 0,
	0, 81, 83, 85, 94, 95, 97, 99, 109, 111,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 100,
	101, 102, 103, 104, 105, 0, 0, 106, 107, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 98, 96, 86, 87, 108, 0, 88, 89,
	90, 110, 0, 0, 0, 82, 0, 351, 0, 81,
	83, 85, 94, 95, 97, 99, 109, 111, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 100, 101, 102,
	103, 104, 105, 0, 0, 106, 107, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	98, 96, 86, 87, 108, 0, 88, 89, 90, 110,
	0, 346, 0, 82, 0, 0, 0, 81, 83, 85,
	94, 95, 97, 99, 109, 111, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 100, 101, 102, 103, 104,
	105, 0, 0, 106, 107, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 98, 96,
	86, 87, 108, 0, 88, 89, 90, 110, 0, 342,
	0, 82, 0, 0, 0, 81, 83, 85, 94, 95,
	97, 99, 109, 111, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 100, 101, 102, 103, 104, 105, 0,
	0, 106, 107, 91, 92, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 98, 96, 86, 87,
	108, 0, 88, 89, 90, 110, 0, 334, 0, 82,
	0, 0, 0, 81, 83, 85, 94, 95, 97, 99,
	109, 111, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 100, 101, 102, 103, 104, 105, 0, 0, 106,
	107, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 98, 96, 86, 87, 108, 0,
	88, 89, 90, 110, 0, 0, 0, 82, 326, 0,
	0, 81, 83, 85, 94, 95, 97, 99, 109, 111,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 100,
	101, 102, 103, 104, 105, 0, 0, 106, 107, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 98, 96, 86, 87, 108, 0, 88, 89,
	90, 110, 0, 0, 0, 82, 312, 0, 0, 81,
	83, 85, 94, 95, 97, 99, 109, 111, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 100, 101, 102,
	103, 104, 105, 0, 0, 106, 107, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 311, 79,
	98, 96, 86, 87, 108, 0, 88, 89, 90, 110,
	0, 0, 0, 82, 0, 0, 0, 81, 83, 85,
	94, 95, 97, 99, 109, 111, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 100, 101, 102, 103, 104,
	105, 0, 0, 106, 107, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 98, 96,
	86, 87, 108, 0, 88, 89, 90, 110, 0, 0,
	0, 82, 305, 0, 0, 81, 83, 85, 94, 95,
	97, 99, 109, 111, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 100, 101, 102, 103, 104, 105, 0,
	0, 106, 107, 91, 92, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 98, 96, 86, 87,
	108, 0, 88, 89, 90, 110, 0, 0, 0, 82,
	0, 279, 0, 81, 83, 85, 94, 95, 97, 99,
	109, 111, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 100, 101, 102, 103, 104, 105, 0, 0, 106,
	107, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 266, 79, 98, 96, 86, 87, 108, 0,
	88, 89, 90, 110, 0, 0, 0, 82, 0, 0,
	0, 81, 83, 85, 94, 95, 97, 99, 109, 111,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 100,
	101, 102, 103, 104, 105, 0, 0, 106, 107, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 98, 96, 86, 87, 108, 0, 88, 89,
	90, 110, 0, 0, 0, 82, 230, 0, 0, 81,
	83, 85, 94, 95, 97, 99, 109, 111, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 100, 101, 102,
	103, 104, 105, 0, 0, 106, 107, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	98, 96, 86, 87, 108, 0, 88, 89, 90, 110,
	0, 212, 0, 82, 0, 0, 0, 81, 83, 85,
	94, 95, 97, 99, 109, 111, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 100, 101, 102, 103, 104,
	105, 0, 0, 106, 107, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 98, 96,
	86, 87, 108, 0, 88, 89, 90, 110, 0, 202,
	0, 82, 0, 0, 0, 81, 83, 85, 94, 95,
	97, 99, 109, 111, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 100, 101, 102, 103, 104, 105, 0,
	0, 106, 107, 91, 92, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 98, 96, 86, 87,
	108, 0, 88, 89, 90, 110, 0, 0, 0, 82,
	0, 0, 0, 81, 83, 85, 94, 95, 97, 99,
	109, 111, 0, 0, 0, 0, 80, 0, 0, 0,
	0, 100, 101, 102, 103, 104, 105, 0, 0, 106,
	107, 91, 92, 93, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 79, 98, 96, 86, 87, 108, 0,
	88, 89, 90, 110, 0, 0, 0, 82, 0, 0,
	0, 245, 83, 85, 94, 95, 97, 99, 109, 111,
	0, 0, 0, 0, 80, 0, 0, 0, 0, 100,
	101, 102, 103, 104, 105, 0, 0, 106, 107, 91,
	92, 93, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 79, 98, 96, 86, 87, 108, 0, 88, 89,
	90, 110, 0, 0, 0, 82, 0, 0, 0, 244,
	83, 85, 94, 95, 97, 99, 109, 111, 0, 0,
	0, 0, 80, 0, 0, 0, 0, 100, 101, 102,
	103, 104, 105, 0, 0, 106, 107, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 79,
	98, 96, 86, 87, 108, 0, 88, 89, 90, 110,
	0, 0, 0, 217, 0, 0, 0, 81, 83, 85,
	94, 95, 97, 99, 109, 111, 0, 0, 0, 0,
	80, 0, 0, 0, 0, 100, 101, 102, 103, 104,
	105, 0, 0, 106, 107, 91, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 79, 98, 96,
	86, 87, 108, 0, 88, 89, 90, 110, 0, 0,
	0, 215, 0, 0, 0, 81, 83, 85, 94, 95,
	97, 99, 109, 111, 0, 0, 0, 0, 80, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 106, 107, 91, 92, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 79, 98, 96, 86, 87,
	108, 0, 88, 89, 90, 110, 47, 36, 38, 82,
	0, 65, 0, 81, 83, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 51, 39, 40, 41, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 36, 38, 0, 0, 65,
	0, 0, 0, 0, 67, 55, 0, 49, 57, 56,
	53, 0, 66, 51, 39, 40, 41, 0, 0, 0,
	60, 0, 62, 64, 0, 0, 63, 85, 54, 0,
	45, 0, 0, 0, 0, 43, 372, 61, 0, 0,
	0, 0, 67, 55, 0, 49, 57, 56, 53, 0,
	66, 106, 107, 91, 92, 93, 0, 0, 60, 0,
	62, 64, 0, 0, 63, 0, 54, 0, 45, 0,
	0, 0, 0, 43, 339, 61, 47, 36, 38, 0,
	0, 65, 88, 89, 90, 110, 0, 0, 0, 82,
	0, 0, 0, 81, 83, 51, 39, 40, 41, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 94, 95, 97, 99, 109, 111, 0, 0, 0,
	0, 80, 0, 0, 67, 55, 0, 49, 57, 56,
	53, 0, 66, 0, 106, 107, 91, 92, 93, 0,
	60, 0, 62, 64, 0, 0, 63, 0, 54, 0,
	45, 0, 280, 0, 0, 43, 0, 61, 79, 98,
	96, 86, 87, 108, 0, 88, 89, 90, 110, 47,
	36, 38, 82, 0, 65, 0, 81, 83, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 51, 39,
	40, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	47, 36, 38, 0, 0, 65, 0, 67, 55, 0,
	49, 57, 56, 53, 0, 66, 0, 0, 219, 51,
	39, 40, 41, 60, 0, 62, 64, 0, 0, 63,
	0, 54, 0, 45, 0, 0, 0, 0, 43, 0,
	61, 47, 36, 38, 0, 0, 65, 0, 67, 55,
	0, 49, 57, 56, 53, 0, 66, 0, 0, 0,
	51, 39, 40, 41, 60, 0, 62, 64, 0, 0,
	63, 0, 54, 0, 45, 0, 208, 0, 0, 43,
	0, 61, 47, 36, 38, 0, 0, 65, 0, 67,
	55, 0, 49, 57, 56, 53, 0, 66, 0, 0,
	175, 51, 39, 40, 41, 60, 0, 62, 64, 0,
	0, 63, 0, 54, 0, 45, 0, 0, 0, 0,
	43, 0, 61, 47, 36, 38, 0, 0, 65, 0,
	67, 55, 0, 49, 57, 56, 53, 0, 66, 0,
	0, 0, 51, 39, 40, 41, 60, 0, 62, 64,
	0, 0, 63, 0, 54, 0, 45, 0, 0, 0,
	0, 43, 0, 61, 47, 36, 38, 0, 0, 65,
	0, 67, 55, 0, 49, 57, 56, 53, 0, 66,
	0, 0, 0, 51, 39, 40, 41, 60, 0, 62,
	64, 0, 0, 63, 0, 407, 0, 45, 0, 0,
	0, 0, 43, 0, 61, 47, 36, 38, 0, 0,
	65, 0, 67, 55, 0, 49, 57, 56, 53, 0,
	66, 0, 0, 0, 51, 39, 40, 41, 60, 0,
	62, 64, 0, 0, 63, 0, 349, 0, 45, 0,
	0, 0, 0, 43, 0, 61, 47, 36, 38, 0,
	0, 65, 0, 67, 55, 0, 49, 57, 56, 53,
	0, 66, 0, 0, 0, 51, 39, 40, 41, 60,
	0, 62, 64, 0, 0, 63, 0, 347, 0, 45,
	0, 0, 0, 0, 43, 0, 61, 124, 36, 38,
	0, 0, 65, 0, 67, 55, 0, 49, 57, 56,
	53, 0, 66, 0, 0, 0, 51, 39, 40, 41,
	60, 0, 62, 64, 0, 0, 63, 0, 277, 0,
	45, 0, 0, 0, 0, 43, 0, 61, 122, 36,
	38, 0, 0, 65, 0, 67, 55, 0, 49, 57,
	56, 53, 0, 66, 0, 0, 0, 51, 39, 40,
	41, 60, 0, 62, 64, 0, 0, 63, 0, 54,
	0, 45, 0, 0, 0, 0, 43, 0, 61, 0,
	0, 0, 0, 0, 0, 0, 67, 55, 0, 49,
	57, 56, 53, 0, 66, 0, 0, 85, 94, 95,
	97, 99, 60, 111, 62, 64, 0, 0, 63, 0,
	54, 0, 45, 0, 0, 0, 0, 43, 0, 61,
	0, 106, 107, 91, 92, 93, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 94, 95, 97, 99, 98, 96, 86, 87,
	108, 0, 88, 89, 90, 110, 0, 0, 85, 82,
	0, 0, 0, 81, 83, 106, 107, 91, 92, 93,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 107, 91, 92, 93, 0, 0, 0,
	98, 96, 86, 87, 108, 0, 88, 89, 90, 110,
	0, 0, 0, 82, 0, 0, 0, 81, 83, 86,
	87, 108, 0, 88, 89, 90, 110, 0, 0, 0,
	82, 0, 0, 0, 81, 83,
}

var yyPact = [...]int16{
	-69, -1000, -1000, 856, -69, -1000, -74, -74, -1000, -1000,
	-1000, -1000, -1000, -1000, 3718, 3718, 406, 358, -1000, -1000,
	-1000, -1000, -1000, -1000, 1475, -1000, -1000, -1000, 3718, 730,
	270, 3718, 269, 3964, 3923, -40, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -54, 138, 3718, -1000, 108, -1000, 147,
	-1000, 146, -1000, 45, -74, 3718, 129, 128, 402, 102,
	3718, 3718, 3718, 3718, 3718, 156, 121, 117, -1000, 856,
	-74, -1000, 17, 2971, 2971, 268, 326, 3718, 3718, 3718,
	3718, 400, 3718, 3677, 3718, 3718, 3718, 3718, 3718, 3718,
	3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718, 3718,
	3718, 3718, 3718, 3718, 3718, 3718, -1000, -1000, 3718, 3718,
	3718, 3718, 2903, -69, 91, 995, 3636, 7, 108, -69,
	2835, -74, 116, 3243, 113, 3175, 3595, -29, 3718, -74,
	50, -1000, 138, 138, -16, 138, 266, -50, 2767, 3718,
	3718, 138, -74, 138, 3718, 3311, 3718, 3718, 81, -1000,
	3718, 3718, -74, 35, 35, 35, -40, 3107, -40, 3039,
	378, 112, 99, 177, -1000, -69, 3718, -69, 2971, 2971,
	2699, 3524, -1000, 141, 926, 3718, 3311, 0, 3441, 3441,
	0, 0, 0, 2971, 0, 0, 4072, 4072, 4072, 4072,
	4072, 4072, 2971, 2971, 2971, 2971, 2971, 2971, 3441, 4011,
	0, 4055, -69, 251, -74, 3718, -74, -69, 3882, 2631,
	3502, 249, -74, 319, 3718, 3718, 3718, 3718, 28, 3718,
	-1000, -57, -74, 399, 4, 4, 138, 4, -74, -29,
	-1000, 137, 2563, 62, 3718, -25, -59, 2495, 2427, 1407,
	3718, 17, 17, 3718, 396, 387, 101, 368, 34, -1000,
	-1000, 138, -1000, 378, -1000, 2359, 51, 138, 108, 33,
	592, -6, 386, 248, 2291, 215, 3718, 100, -1000, -1000,
	3420, 1338, 209, -1000, 2223, 381, 208, -69, 2155, 3841,
	3800, 2087, 338, 317, -28, -1000, -1000, 291, 856, 132,
	123, 119, 58, -1000, 3382, 1269, -74, -63, -74, 3718,
	-1000, -47, 380, 95, -1000, -1000, -1000, -59, 138, 207,
	-74, 3718, -1000, -1000, 3718, 17, 2971, -40, -1000, -1000,
	134, 367, -74, 4, 92, 366, -1000, -1000, 50, 138,
	-1000, 3718, -56, -1000, -69, -1000, 3311, -1000, 1200, -1000,
	-1000, -1000, -69, -1000, -1000, 206, -69, -69, 2019, -69,
	1951, 3759, 211, -34, -1000, -1000, 290, 3718, 205, -1000,
	-1000, -69, 286, 82, -1000, 74, -1000, 67, -1000, 56,
	-1000, 1131, -1000, -1000, -74, -1000, -57, 138, -58, 138,
	-1000, 204, 8, -1000, 3718, 2971, 1883, 265, 4, 138,
	134, 6, 378, 134, 330, -51, 1063, 3718, 202, -1000,
	193, -1000, 192, 191, -69, 190, -69, -69, 1815, 264,
	-69, 188, -1000, -1000, -69, 1747, 66, -1000, -1000, -69,
	-1000, -1000, -1000, -1000, -1000, 187, 4, 184, -74, 4,
	-1000, -74, 1679, -1000, -69, 55, 4, 262, 134, -1000,
	-1000, 257, 134, -26, 138, -1000, 3718, 1611, -1000, -1000,
	-1000, -1000, 181, -1000, 180, 178, -69, -69, 173, -1000,
	-1000, -69, -69, -1000, -1000, -1000, 375, 3718, 3718, 172,
	-1000, -74, -69, 256, -69, 255, 134, 8, 1543, -1000,
	-1000, -1000, -1000, 169, 166, 328, -1000, -1000, 138, -59,
	2971, -1000, 138, 164, -69, 161, -69, 254, -1000, -1000,
	325, 253, 4, 155, 4, -1000, 153, -1000, 152, -69,
	157, -69, -1000, -1000, -1000, 150, -69, 142, -1000, 124,
	-1000, -1000,
}

var yyPgo = [...]int16{
	0, 0, 460, 4, 369, 459, 456, 455, 453, 452,
	451, 449, 448, 447, 443, 7, 6, 441, 439, 39,
	38, 36, 210, 437, 436, 434, 433, 432, 363, 9,
	431, 5, 3, 8, 429, 1, 428, 442, 427, 352,
	2, 423, 15, 412, 378, 375, 370, 10, 417, 18,
}

var yyR1 = [...]int8{
	0, 43, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 10, 10, 10, 10, 9, 9, 9, 9, 8,
	8, 8, 8, 4, 4, 4, 5, 7, 7, 6,
	6, 11, 11, 11, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 17, 18, 18, 18, 18,
	18, 19, 20, 13, 14, 14, 14, 14, 14, 15,
	15, 16, 28, 28, 35, 35, 35, 36, 36, 36,
	29, 29, 30, 30, 31, 32, 33, 33, 34, 34,
	21, 21, 21, 21, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	25, 25, 25, 26, 26, 26, 26, 26, 26, 26,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 27, 27, 27, 27, 27, 23, 23, 23, 23,
	23, 23, 24, 24, 24, 24, 37, 37, 37, 37,
	37, 37, 37, 38, 38, 39, 39, 40, 40, 40,
	41, 41, 41, 41, 41, 41, 42, 44, 44, 45,
	45, 45, 46, 46, 48, 48, 49, 47, 47, 47,
	47,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 3, 0, 1, 1, 1,
	2, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 5, 6, 5, 6, 5, 6, 5, 13,
	12, 9, 8, 1, 1, 1, 4, 3, 3, 3,
	3, 5, 7, 5, 4, 7, 5, 6, 7, 7,
	8, 7, 8, 8, 9, 6, 0, 1, 1, 2,
	2, 4, 3, 7, 0, 1, 1, 2, 2, 4,
	4, 3, 1, 4, 0, 1, 3, 0, 1, 4,
	0, 1, 1, 1, 1, 2, 1, 4, 1, 4,
	0, 1, 4, 4, 1, 1, 1, 1, 1, 1,
	1, 5, 3, 3, 1, 2, 5, 7, 3, 1,
	5, 4, 5, 4, 4, 4, 1, 4, 1, 4,
	1, 6, 10, 5, 3, 2, 4, 4, 6, 3,
	3, 4, 4, 2, 2, 2, 2, 4, 2, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 3, 3, 3, 8, 9, 10, 9,
	10, 11, 4, 6, 8, 7, 1, 3, 2, 2,
	5, 2, 6, 2, 5, 2, 3, 0, 3, 6,
	6, 5, 5, 6, 5, 5, 1, 0, 1, 2,
	1, 1, 0, 1, 1, 2, 1, 0, 2, 1,
	1,
}

var yyChk = [...]int16{
	-1000, -43, -1, -44, -2, -45, 80, -48, -49, 86,
	-3, -4, 38, 39, 10, 12, 28, -11, -12, -8,
	-13, -17, -10, -9, -22, -5, -7, -6, 13, 15,
	29, 45, 46, 49, 50, -42, 5, -26, 6, 24,
	25, 26, -23, 83, -39, 78, -27, 4, -41, 55,
	-25, 23, -24, 58, 76, 53, 57, 56, 11, -21,
	68, 85, 70, 74, 71, 9, 60, 52, -44, -45,
	-48, -49, -21, -22, -22, 4, 14, 61, 62, 64,
	27, 82, 78, 83, 53, 16, 67, 68, 71, 72,
	73, 42, 43, 44, 17, 18, 66, 19, 65, 20,
	32, 33, 34, 35, 36, 37, 40, 41, 69, 21,
	74, 22, -22, 76, -28, -22, 80, -4, 4, 76,
	-22, 76, 4, -22, 4, -22, 83, 84, -46, -48,
	-37, 4, 71, -39, 58, 51, 59, 83, -22, 78,
	78, 78, 76, 83, -46, -22, 78, 78, -28, 4,
	61, 62, 81, -22, -22, -22, -42, -22, -42, -22,
	78, 4, 78, 78, -3, 76, 13, 76, -22, -22,
	-22, -22, 4, -21, -22, 63, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, 76, -1, -48, 16, 81, 76, 80, -22,
	80, -1, 76, -46, 78, 78, 78, 78, -22, 63,
	-39, -21, 76, 82, -37, -37, 83, -37, 76, 84,
	79, -21, -22, -37, -46, -37, -40, -22, -22, -22,
	62, -21, -21, -46, 82, 82, -29, -33, -30, -31,
	-34, 4, -32, 78, 79, -22, -37, -39, 4, 58,
	71, -37, 54, -1, -22, -1, 63, 8, 79, 84,
	63, -22, -1, 77, -22, -46, -1, 76, -22, 80,
	80, -22, 77, -46, -18, -20, -19, 48, 47, -21,
	-21, -21, -21, 84, 63, -22, 81, -47, -48, -46,
	4, -37, -46, 8, 79, 79, 79, -40, 84, -47,
	81, 63, 79, 79, 81, -21, -22, -42, 4, 4,
	79, 8, 81, -37, -29, -33, 79, 79, -37, 83,
	79, 81, 4, 77, 76, 77, -22, 79, -22, 84,
	84, 77, 76, 4, 77, -1, 76, 76, -22, 76,
	-22, 80, 30, -14, -16, -15, 48, 47, -46, -19,
	-20, 63, -3, 8, 79, 8, 79, 8, 79, 8,
	79, -22, 84, 84, -48, 84, -21, 84, -38, 4,
	79, -47, -37, 77, -46, -22, -22, -35, -37, 78,
	79, -37, -46, 79, 8, -37, -22, 81, -1, 84,
	-1, 77, -1, -1, 76, -1, 76, 76, -22, 4,
	76, -46, -15, -16, 63, -22, -21, 77, -1, 63,
	79, 79, 79, 79, 84, -47, -37, -46, 81, -37,
	77, 76, -22, 79, 76, -36, -37, -35, 79, -31,
	-32, -35, 79, -37, 84, 79, 81, -22, 77, 77,
	77, 77, -1, 77, -1, -1, 76, 76, -1, 77,
	-1, 63, 63, -1, 77, 77, -46, -46, 63, -1,
	79, 81, 76, -35, 76, -35, 79, -37, -22, 79,
	77, 77, 77, -1, -1, 77, -1, -1, 4, -40,
	-22, 77, -46, -1, 76, -1, 76, -35, 79, 77,
	77, 31, -37, -47, -37, 77, -1, 77, -1, 76,
	31, 76, 77, 77, 77, -1, 76, -1, 77, -1,
	77, 77,
}

var yyDef = [...]int16{
	197, -2, 1, -2, 197, 198, 201, 200, 204, 206,
	4, 7, 8, 9, 90, 0, 0, 13, 14, 15,
	16, 17, 18, 19, -2, 33, 34, 35, 0, 90,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 98,
	99, 100, 104, 202, 0, 0, 109, 196, 116, 0,
	118, 0, 120, 0, 202, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 3, -2,
	199, 205, 10, 91, 11, 0, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 160, 161, 0, 0,
	0, 0, 0, 197, 0, 91, 0, 0, -2, 197,
	0, 202, 196, 0, 196, 0, 0, -2, 90, 203,
	0, 176, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 202, 0, 187, 125, 0, 0, 0, 72,
	90, 90, 202, 133, 134, 135, -2, 0, -2, 0,
	80, 0, 0, 0, 5, 197, 0, 197, 37, 39,
	0, 102, 103, 0, 0, 0, 124, 129, 140, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 162, 163,
	164, 165, 197, 0, 200, 0, 202, 197, 0, 0,
	0, 0, 202, 56, 90, 90, 90, 90, 0, 0,
	186, 207, 202, 0, 178, 179, 0, 181, 202, 185,
	108, 0, 0, 0, 187, 0, 207, 0, 0, 0,
	90, 38, 40, 0, 0, 0, 0, 82, 81, 86,
	83, 84, 88, 80, 130, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 113, 115,
	0, 0, 0, 44, 0, 0, 0, 197, 0, 0,
	0, 0, 0, 64, 202, 57, 58, 0, -2, 0,
	0, 0, 0, 114, 0, 0, -2, 0, 209, 90,
	177, 0, 0, 0, 111, 117, 119, 207, 0, 0,
	-2, 0, 126, 127, 0, 36, 92, -2, -2, -2,
	74, 0, 202, 85, 0, 82, 131, 132, 179, 0,
	172, 0, 0, 12, 197, 43, 101, 112, 0, 194,
	195, 41, 197, 73, 46, 0, 197, 197, 0, 197,
	0, 0, 0, 202, 65, 66, 0, 90, 0, 59,
	60, 197, 0, 0, -2, 0, -2, 0, -2, 0,
	-2, 0, 191, 192, -2, 106, 207, 0, 202, 0,
	110, 0, 0, 123, 0, 188, 0, 0, 75, 77,
	74, 0, 0, 74, 0, 0, 0, 0, 0, 193,
	0, 47, 0, 0, 197, 0, 197, 197, 0, 0,
	197, 0, 67, 68, 197, 91, 0, 55, 62, 197,
	-2, -2, -2, -2, 190, 0, 180, 0, 202, 183,
	121, 202, 0, 128, 197, 0, 78, 0, 74, 87,
	89, 0, 74, 0, 0, 173, 0, 0, 42, 45,
	48, 49, 0, 51, 0, 0, 197, 197, 0, 63,
	71, 197, 197, 61, 107, 182, 0, 187, 0, 0,
	76, 202, 197, 0, 197, 0, 74, 180, 0, 175,
	50, 52, 53, 0, 0, 32, 69, 70, 0, 207,
	189, 166, 0, 0, 197, 0, 197, 0, 174, 54,
	31, 0, 184, 0, 79, 167, 0, 169, 0, 197,
	0, 197, 122, 168, 170, 0, 197, 0, 171, 0,
	30, 29,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 85, 3, 3, 3, 73, 74, 3,
	78, 79, 71, 67, 81, 68, 82, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 80,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 83, 3, 84, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:122
		{
			yyVAL.compstmt = nil
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:126
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:132
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:141
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:157
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:158
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:160
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:165
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:170
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:175
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:180
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:185
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:189
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.stmt = yyDollar[1].stmt_try
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:191
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:193
		{
			yyVAL.stmt = yyDollar[1].stmt_go
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.stmt = yyDollar[1].stmt_defer
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:203
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:208
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:213
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].expr.Position())
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:218
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:225
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:230
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:235
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr.Position())
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:240
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:247
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:252
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:257
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:262
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:268
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:269
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:270
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:274
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:281
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:285
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:302
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:306
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:323
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:328
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:333
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:343
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:348
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:359
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:364
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:369
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:374
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:379
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:384
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:389
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:394
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:399
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:406
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:413
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:417
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:421
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:425
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:430
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:441
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:448
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 63:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:454
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:463
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:467
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:471
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:475
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:481
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:492
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:497
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:504
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:510
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:514
		{
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:519
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:523
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:527
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:531
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:535
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:539
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:547
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:550
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:553
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:554
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:558
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:564
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:570
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:574
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:580
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:584
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:589
		{
			yyVAL.exprs = nil
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:593
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:597
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:604
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:612
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:614
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:618
		{
			yyVAL.expr = yyDollar[1].expr_unary
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:620
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:625
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:630
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:635
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:640
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:645
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:650
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:655
		{
			yyVAL.expr = yyDollar[1].expr_func
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:659
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:664
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 107:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:669
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:674
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:678
		{
			yyVAL.expr = yyDollar[1].expr_binary
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:680
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:685
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:690
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:695
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:700
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 115:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:705
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:710
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:715
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:719
		{
			yyVAL.expr = yyDollar[1].expr_dbg
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:721
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:730
		{
			yyVAL.expr = yyDollar[1].expr_make
		}
	case 121:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:732
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 122:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:738
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:744
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:749
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:754
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:759
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:764
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 128:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:769
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:774
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:781
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:786
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:791
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:798
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:803
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:808
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:813
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:818
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:823
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:828
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:835
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:840
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:845
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:850
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:855
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:860
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:865
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:870
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:875
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:880
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:885
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:890
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:895
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:900
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:905
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:910
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:915
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:920
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:925
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:930
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:935
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:940
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:945
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:950
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:955
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:960
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:967
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 167:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:972
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 168:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:977
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 169:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:983
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 170:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:988
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 171:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:993
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1001
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1006
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 174:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:1011
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 175:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:1016
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1023
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1027
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1036
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1045
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1055
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1059
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 182:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1068
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1074
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1078
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1088
		{
			yyVAL.slice_count = 1
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1092
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1099
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1103
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1107
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1117
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1121
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1125
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1129
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1133
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1137
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1143
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
