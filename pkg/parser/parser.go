// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                 int
	stmtsStmt           *ast.StmtsStmt
	stmt                ast.Stmt
	expr                ast.Expr
	exprs               []ast.Expr
	stmts               []ast.Stmt
	stmt_select_content *ast.SelectBodyStmt
	expr_call_helper    struct {
		Exprs  []ast.Expr
		VarArg bool
	}
	expr_idents           []string
	func_expr_idents      []*ast.ParamExpr
	func_expr_typed_ident *ast.ParamExpr
	func_expr_args        struct {
		Params   []*ast.ParamExpr
		VarArg   bool
		TypeData *ast.TypeStruct
	}
	expr_typed_ident struct {
		Name     string
		TypeData *ast.TypeStruct
	}
	stmt_lets_helper struct {
		Exprs1, Exprs2 []ast.Expr
		Typed, Mutable bool
	}
	opt_func_return_expr_idents []*ast.FuncReturnValuesExpr
	expr_map                    *ast.MapExpr
	type_data                   *ast.TypeStruct
	slice_count                 int
	tok                         ast.Token
	opt_ident                   *ast.Token
	str                         string
	op_lets                     bool
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57408
	yyEofCode   = 57344
	ANDAND      = 57365
	ANDEQ       = 57379
	ARRAY       = 57349
	BREAK       = 57381
	CASE        = 57390
	CATCH       = 57373
	CHAN        = 57394
	CLOSE       = 57400
	CONTINUE    = 57382
	DBG         = 57403
	DEFAULT     = 57391
	DEFER       = 57393
	DELETE      = 57399
	DIVEQ       = 57378
	ELSE        = 57356
	EMPTYARR    = 57405
	EQEQ        = 57360
	FALSE       = 57368
	FINALLY     = 57374
	FOR         = 57357
	FUNC        = 57351
	GE          = 57362
	GO          = 57392
	IDENT       = 57346
	IF          = 57355
	IN          = 57359
	LE          = 57363
	LEN         = 57398
	LOOP        = 57358
	MAKE        = 57395
	MAP         = 57401
	MINUSEQ     = 57376
	MINUSMINUS  = 57384
	MODULE      = 57371
	MULEQ       = 57377
	MUT         = 57406
	NEQ         = 57361
	NEW         = 57366
	NIL         = 57369
	NILCOALESCE = 57370
	NUMBER      = 57347
	OPCHAN      = 57396
	OREQ        = 57380
	OROR        = 57364
	PLUSEQ      = 57375
	PLUSPLUS    = 57383
	POW         = 57385
	RETURN      = 57352
	SELECT      = 57389
	SHIFTLEFT   = 57386
	SHIFTRIGHT  = 57387
	STRING      = 57348
	STRUCT      = 57402
	SWITCH      = 57388
	THROW       = 57354
	TRUE        = 57367
	TRY         = 57372
	TYPE        = 57397
	UNARY       = 57407
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57404
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -252
)

var (
	yyPrec = map[int]int{
		POW:         0,
		'=':         1,
		PLUSEQ:      1,
		MINUSEQ:     1,
		DIVEQ:       1,
		MULEQ:       1,
		ANDEQ:       1,
		OREQ:        1,
		':':         2,
		OPCHAN:      3,
		'?':         4,
		NILCOALESCE: 4,
		OROR:        5,
		ANDAND:      6,
		EQEQ:        7,
		NEQ:         7,
		'<':         7,
		LE:          7,
		'>':         7,
		GE:          7,
		'+':         8,
		'-':         8,
		'|':         8,
		'^':         8,
		'*':         9,
		'/':         9,
		'%':         9,
		SHIFTLEFT:   9,
		SHIFTRIGHT:  9,
		'&':         9,
		IN:          10,
		PLUSPLUS:    11,
		MINUSMINUS:  11,
		UNARY:       12,
	}

	yyXLAT = map[int]int{
		42:    0,   // '*' (202x)
		123:   1,   // '{' (198x)
		125:   2,   // '}' (198x)
		40:    3,   // '(' (195x)
		91:    4,   // '[' (186x)
		38:    5,   // '&' (185x)
		45:    6,   // '-' (185x)
		57396: 7,   // OPCHAN (185x)
		10:    8,   // '\n' (164x)
		57391: 9,   // DEFAULT (145x)
		57390: 10,  // CASE (143x)
		57344: 11,  // $end (132x)
		59:    12,  // ';' (130x)
		57346: 13,  // IDENT (130x)
		44:    14,  // ',' (127x)
		58:    15,  // ':' (124x)
		41:    16,  // ')' (119x)
		57405: 17,  // EMPTYARR (113x)
		57401: 18,  // MAP (113x)
		93:    19,  // ']' (102x)
		33:    20,  // '!' (94x)
		94:    21,  // '^' (94x)
		57400: 22,  // CLOSE (94x)
		57399: 23,  // DELETE (94x)
		57368: 24,  // FALSE (94x)
		57351: 25,  // FUNC (94x)
		57398: 26,  // LEN (94x)
		57395: 27,  // MAKE (94x)
		57366: 28,  // NEW (94x)
		57369: 29,  // NIL (94x)
		57347: 30,  // NUMBER (94x)
		57348: 31,  // STRING (94x)
		57367: 32,  // TRUE (94x)
		46:    33,  // '.' (93x)
		57359: 34,  // IN (92x)
		37:    35,  // '%' (91x)
		43:    36,  // '+' (91x)
		47:    37,  // '/' (91x)
		60:    38,  // '<' (91x)
		62:    39,  // '>' (91x)
		63:    40,  // '?' (91x)
		124:   41,  // '|' (91x)
		57365: 42,  // ANDAND (91x)
		57379: 43,  // ANDEQ (91x)
		57378: 44,  // DIVEQ (91x)
		57360: 45,  // EQEQ (91x)
		57362: 46,  // GE (91x)
		57363: 47,  // LE (91x)
		57376: 48,  // MINUSEQ (91x)
		57384: 49,  // MINUSMINUS (91x)
		57377: 50,  // MULEQ (91x)
		57361: 51,  // NEQ (91x)
		57370: 52,  // NILCOALESCE (91x)
		57380: 53,  // OREQ (91x)
		57364: 54,  // OROR (91x)
		57375: 55,  // PLUSEQ (91x)
		57383: 56,  // PLUSPLUS (91x)
		57385: 57,  // POW (91x)
		57386: 58,  // SHIFTLEFT (91x)
		57387: 59,  // SHIFTRIGHT (91x)
		61:    60,  // '=' (71x)
		57350: 61,  // VARARG (70x)
		57404: 62,  // WALRUS (70x)
		57485: 63,  // slice_count (59x)
		57462: 64,  // map_type (57x)
		57525: 65,  // typed_slice_count (57x)
		57429: 66,  // expr_ident (50x)
		57438: 67,  // expr_map_container (44x)
		57415: 68,  // const_expr (43x)
		57418: 69,  // expr (43x)
		57419: 70,  // expr_anon_call (43x)
		57420: 71,  // expr_array (43x)
		57421: 72,  // expr_assoc (43x)
		57422: 73,  // expr_binary (43x)
		57423: 74,  // expr_call (43x)
		57426: 75,  // expr_close (43x)
		57427: 76,  // expr_delete (43x)
		57428: 77,  // expr_func (43x)
		57431: 78,  // expr_item_or_slice (43x)
		57432: 79,  // expr_iterable (43x)
		57433: 80,  // expr_len (43x)
		57434: 81,  // expr_literals (43x)
		57435: 82,  // expr_literals_helper (43x)
		57436: 83,  // expr_make (43x)
		57437: 84,  // expr_map (43x)
		57442: 85,  // expr_member (43x)
		57443: 86,  // expr_member_or_ident (43x)
		57444: 87,  // expr_new (43x)
		57445: 88,  // expr_opchan (43x)
		57446: 89,  // expr_paren (43x)
		57447: 90,  // expr_ternary (43x)
		57449: 91,  // expr_unary (43x)
		57526: 92,  // unary_op (43x)
		57424: 93,  // expr_call_helper (30x)
		57409: 94,  // bin_op (29x)
		57466: 95,  // op_assoc1 (29x)
		57394: 96,  // CHAN (25x)
		57406: 97,  // MUT (25x)
		57402: 98,  // STRUCT (25x)
		57464: 99,  // newline (20x)
		57355: 100, // IF (18x)
		57465: 101, // newlines (18x)
		57353: 102, // VAR (18x)
		57381: 103, // BREAK (17x)
		57382: 104, // CONTINUE (17x)
		57403: 105, // DBG (17x)
		57393: 106, // DEFER (17x)
		57357: 107, // FOR (17x)
		57392: 108, // GO (17x)
		57358: 109, // LOOP (17x)
		57371: 110, // MODULE (17x)
		57352: 111, // RETURN (17x)
		57389: 112, // SELECT (17x)
		57388: 113, // SWITCH (17x)
		57354: 114, // THROW (17x)
		57372: 115, // TRY (17x)
		57411: 116, // channel_type (14x)
		57481: 117, // package_name (14x)
		57482: 118, // pointer_type (14x)
		57483: 119, // qualified_ident (14x)
		57517: 120, // struct_type (14x)
		57520: 121, // type (14x)
		57522: 122, // type_lit (14x)
		57523: 123, // type_name (14x)
		57412: 124, // comma_opt_newlines (13x)
		57450: 125, // exprs (12x)
		57476: 126, // opt_newlines (11x)
		57410: 127, // block (9x)
		57480: 128, // opt_term (7x)
		57519: 129, // term (7x)
		57414: 130, // compstmt (6x)
		57448: 131, // expr_typed_ident (4x)
		57470: 132, // opt_exprs (4x)
		57495: 133, // stmt_if (4x)
		57496: 134, // stmt_lets (4x)
		57497: 135, // stmt_lets_helper (4x)
		57514: 136, // stmt_var (4x)
		57515: 137, // stmt_var_or_lets (4x)
		57487: 138, // stmt (3x)
		57488: 139, // stmt_break (3x)
		57489: 140, // stmt_continue (3x)
		57490: 141, // stmt_dbg (3x)
		57491: 142, // stmt_defer (3x)
		57492: 143, // stmt_expr (3x)
		57493: 144, // stmt_for (3x)
		57494: 145, // stmt_go (3x)
		57498: 146, // stmt_loop (3x)
		57499: 147, // stmt_module (3x)
		57500: 148, // stmt_return (3x)
		57501: 149, // stmt_select (3x)
		57507: 150, // stmt_switch (3x)
		57512: 151, // stmt_throw (3x)
		57513: 152, // stmt_try (3x)
		57373: 153, // CATCH (2x)
		57413: 154, // comma_separated_exprs (2x)
		57356: 155, // ELSE (2x)
		57425: 156, // expr_callable (2x)
		57441: 157, // expr_map_key_value (2x)
		57374: 158, // FINALLY (2x)
		57456: 159, // func_expr_typed_ident (2x)
		57458: 160, // func_expr_untyped_ident (2x)
		57460: 161, // label (2x)
		57468: 162, // opt_comma_opt_newlines (2x)
		57469: 163, // opt_expr (2x)
		57475: 164, // opt_ident (2x)
		57502: 165, // stmt_select_case (2x)
		57508: 166, // stmt_switch_case (2x)
		57416: 167, // dbg_content (1x)
		57417: 168, // element_type (1x)
		57430: 169, // expr_idents (1x)
		57439: 170, // expr_map_content (1x)
		57440: 171, // expr_map_content_helper (1x)
		57451: 172, // for_content (1x)
		57452: 173, // func_expr_args (1x)
		57453: 174, // func_expr_idents (1x)
		57454: 175, // func_expr_idents_last_untyped (1x)
		57455: 176, // func_expr_idents_not_empty (1x)
		57457: 177, // func_expr_typed_idents (1x)
		57459: 178, // key_type (1x)
		57463: 179, // maybe_else (1x)
		57467: 180, // op_lets (1x)
		57471: 181, // opt_finally (1x)
		57472: 182, // opt_func_return_expr_idents (1x)
		57473: 183, // opt_func_return_expr_idents1 (1x)
		57474: 184, // opt_func_return_expr_idents2 (1x)
		57477: 185, // opt_stmt_select_cases (1x)
		57478: 186, // opt_stmt_switch_cases (1x)
		57479: 187, // opt_stmt_var_or_lets (1x)
		57484: 188, // slice (1x)
		57486: 189, // start (1x)
		57503: 190, // stmt_select_cases (1x)
		57504: 191, // stmt_select_content (1x)
		57505: 192, // stmt_select_default (1x)
		57506: 193, // stmt_select_opt_default (1x)
		57509: 194, // stmt_switch_cases (1x)
		57510: 195, // stmt_switch_default (1x)
		57511: 196, // stmt_switch_opt_default (1x)
		57516: 197, // stmtsStmt (1x)
		57518: 198, // switch_content (1x)
		57397: 199, // TYPE (1x)
		57521: 200, // type_data_struct (1x)
		57524: 201, // type_struct_content (1x)
		57408: 202, // $default (0x)
		57349: 203, // ARRAY (0x)
		57345: 204, // error (0x)
		57461: 205, // labeled_stmt (0x)
		57407: 206, // UNARY (0x)
	}

	yySymNames = []string{
		"'*'",
		"'{'",
		"'}'",
		"'('",
		"'['",
		"'&'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"DEFAULT",
		"CASE",
		"$end",
		"';'",
		"IDENT",
		"','",
		"':'",
		"')'",
		"EMPTYARR",
		"MAP",
		"']'",
		"'!'",
		"'^'",
		"CLOSE",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"'.'",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"'='",
		"VARARG",
		"WALRUS",
		"slice_count",
		"map_type",
		"typed_slice_count",
		"expr_ident",
		"expr_map_container",
		"const_expr",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_delete",
		"expr_func",
		"expr_item_or_slice",
		"expr_iterable",
		"expr_len",
		"expr_literals",
		"expr_literals_helper",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"unary_op",
		"expr_call_helper",
		"bin_op",
		"op_assoc1",
		"CHAN",
		"MUT",
		"STRUCT",
		"newline",
		"IF",
		"newlines",
		"VAR",
		"BREAK",
		"CONTINUE",
		"DBG",
		"DEFER",
		"FOR",
		"GO",
		"LOOP",
		"MODULE",
		"RETURN",
		"SELECT",
		"SWITCH",
		"THROW",
		"TRY",
		"channel_type",
		"package_name",
		"pointer_type",
		"qualified_ident",
		"struct_type",
		"type",
		"type_lit",
		"type_name",
		"comma_opt_newlines",
		"exprs",
		"opt_newlines",
		"block",
		"opt_term",
		"term",
		"compstmt",
		"expr_typed_ident",
		"opt_exprs",
		"stmt_if",
		"stmt_lets",
		"stmt_lets_helper",
		"stmt_var",
		"stmt_var_or_lets",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_dbg",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_loop",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"CATCH",
		"comma_separated_exprs",
		"ELSE",
		"expr_callable",
		"expr_map_key_value",
		"FINALLY",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"label",
		"opt_comma_opt_newlines",
		"opt_expr",
		"opt_ident",
		"stmt_select_case",
		"stmt_switch_case",
		"dbg_content",
		"element_type",
		"expr_idents",
		"expr_map_content",
		"expr_map_content_helper",
		"for_content",
		"func_expr_args",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"key_type",
		"maybe_else",
		"op_lets",
		"opt_finally",
		"opt_func_return_expr_idents",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"opt_stmt_select_cases",
		"opt_stmt_switch_cases",
		"opt_stmt_var_or_lets",
		"slice",
		"start",
		"stmt_select_cases",
		"stmt_select_content",
		"stmt_select_default",
		"stmt_select_opt_default",
		"stmt_switch_cases",
		"stmt_switch_default",
		"stmt_switch_opt_default",
		"stmtsStmt",
		"switch_content",
		"TYPE",
		"type_data_struct",
		"type_struct_content",
		"$default",
		"ARRAY",
		"error",
		"labeled_stmt",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {189, 1},
		2:   {130, 1},
		3:   {130, 3},
		4:   {197, 1},
		5:   {197, 3},
		6:   {138, 1},
		7:   {138, 1},
		8:   {138, 1},
		9:   {138, 1},
		10:  {138, 1},
		11:  {138, 1},
		12:  {138, 1},
		13:  {138, 1},
		14:  {138, 1},
		15:  {138, 1},
		16:  {138, 1},
		17:  {138, 1},
		18:  {138, 1},
		19:  {138, 1},
		20:  {138, 1},
		21:  {138, 1},
		22:  {69, 1},
		23:  {69, 1},
		24:  {69, 1},
		25:  {69, 1},
		26:  {69, 1},
		27:  {69, 1},
		28:  {69, 1},
		29:  {69, 1},
		30:  {69, 1},
		31:  {69, 1},
		32:  {69, 1},
		33:  {79, 1},
		34:  {79, 1},
		35:  {79, 1},
		36:  {79, 1},
		37:  {79, 1},
		38:  {79, 1},
		39:  {79, 1},
		40:  {79, 1},
		41:  {127, 3},
		42:  {161, 1},
		43:  {205, 3},
		44:  {139, 1},
		45:  {139, 2},
		46:  {140, 1},
		47:  {140, 2},
		48:  {148, 2},
		49:  {151, 2},
		50:  {147, 3},
		51:  {143, 1},
		52:  {145, 2},
		53:  {142, 2},
		54:  {152, 6},
		55:  {181, 0},
		56:  {181, 2},
		57:  {187, 0},
		58:  {187, 1},
		59:  {137, 1},
		60:  {137, 1},
		61:  {136, 4},
		62:  {134, 1},
		63:  {135, 3},
		64:  {135, 4},
		65:  {180, 1},
		66:  {180, 1},
		67:  {133, 4},
		68:  {179, 0},
		69:  {179, 2},
		70:  {179, 2},
		71:  {146, 2},
		72:  {144, 3},
		73:  {172, 1},
		74:  {172, 3},
		75:  {172, 5},
		76:  {172, 5},
		77:  {149, 4},
		78:  {191, 3},
		79:  {185, 0},
		80:  {185, 1},
		81:  {190, 1},
		82:  {190, 2},
		83:  {165, 4},
		84:  {193, 0},
		85:  {193, 1},
		86:  {192, 3},
		87:  {150, 5},
		88:  {198, 3},
		89:  {186, 0},
		90:  {186, 1},
		91:  {194, 1},
		92:  {194, 2},
		93:  {166, 4},
		94:  {196, 0},
		95:  {196, 1},
		96:  {195, 3},
		97:  {182, 0},
		98:  {182, 1},
		99:  {182, 3},
		100: {183, 0},
		101: {183, 1},
		102: {184, 1},
		103: {184, 3},
		104: {174, 0},
		105: {174, 1},
		106: {176, 1},
		107: {176, 1},
		108: {160, 1},
		109: {159, 1},
		110: {175, 1},
		111: {175, 3},
		112: {177, 1},
		113: {177, 3},
		114: {132, 0},
		115: {132, 1},
		116: {125, 1},
		117: {125, 3},
		118: {163, 0},
		119: {163, 1},
		120: {141, 3},
		121: {141, 4},
		122: {167, 1},
		123: {80, 4},
		124: {89, 3},
		125: {71, 1},
		126: {71, 3},
		127: {71, 4},
		128: {154, 3},
		129: {90, 5},
		130: {87, 4},
		131: {88, 2},
		132: {76, 4},
		133: {76, 6},
		134: {75, 4},
		135: {81, 1},
		136: {82, 1},
		137: {82, 1},
		138: {82, 1},
		139: {68, 1},
		140: {68, 1},
		141: {68, 1},
		142: {86, 1},
		143: {86, 1},
		144: {131, 2},
		145: {131, 3},
		146: {164, 0},
		147: {164, 1},
		148: {85, 3},
		149: {156, 1},
		150: {156, 1},
		151: {74, 2},
		152: {70, 2},
		153: {93, 4},
		154: {93, 3},
		155: {92, 1},
		156: {92, 1},
		157: {92, 1},
		158: {92, 1},
		159: {92, 1},
		160: {91, 2},
		161: {94, 1},
		162: {94, 1},
		163: {94, 1},
		164: {94, 1},
		165: {94, 1},
		166: {94, 1},
		167: {94, 1},
		168: {94, 1},
		169: {94, 1},
		170: {94, 1},
		171: {94, 1},
		172: {94, 1},
		173: {94, 1},
		174: {94, 1},
		175: {94, 1},
		176: {94, 1},
		177: {94, 1},
		178: {94, 1},
		179: {94, 1},
		180: {94, 1},
		181: {94, 1},
		182: {94, 1},
		183: {94, 1},
		184: {94, 1},
		185: {94, 1},
		186: {73, 3},
		187: {73, 3},
		188: {73, 3},
		189: {73, 1},
		190: {95, 1},
		191: {95, 1},
		192: {72, 2},
		193: {77, 7},
		194: {173, 3},
		195: {173, 2},
		196: {173, 1},
		197: {83, 4},
		198: {83, 6},
		199: {83, 8},
		200: {83, 7},
		201: {121, 1},
		202: {121, 1},
		203: {122, 1},
		204: {122, 1},
		205: {122, 1},
		206: {122, 1},
		207: {122, 1},
		208: {123, 1},
		209: {123, 1},
		210: {117, 1},
		211: {119, 3},
		212: {118, 2},
		213: {120, 4},
		214: {116, 2},
		215: {178, 1},
		216: {168, 1},
		217: {64, 5},
		218: {201, 3},
		219: {200, 1},
		220: {200, 3},
		221: {65, 2},
		222: {63, 1},
		223: {63, 2},
		224: {84, 2},
		225: {84, 1},
		226: {67, 3},
		227: {170, 1},
		228: {170, 3},
		229: {171, 1},
		230: {171, 3},
		231: {157, 3},
		232: {78, 4},
		233: {188, 3},
		234: {188, 2},
		235: {188, 2},
		236: {188, 1},
		237: {169, 1},
		238: {169, 3},
		239: {66, 1},
		240: {128, 0},
		241: {128, 1},
		242: {129, 1},
		243: {129, 2},
		244: {126, 0},
		245: {126, 1},
		246: {101, 1},
		247: {101, 2},
		248: {99, 1},
		249: {124, 2},
		250: {162, 1},
		251: {162, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [390][]uint16{
		// 0
		{12, 12, 3: 12, 12, 12, 12, 12, 260, 11: 12, 258, 12, 17: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 97: 12, 99: 259, 12, 257, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 128: 255, 256, 254, 189: 253},
		{11: 252},
		{11: 251},
		{343, 353, 250, 323, 325, 344, 340, 328, 9: 250, 250, 250, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 306, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 97: 315, 100: 316, 102: 312, 301, 302, 321, 308, 318, 307, 317, 305, 303, 319, 320, 304, 309, 125: 314, 133: 272, 311, 313, 310, 266, 265, 267, 268, 281, 279, 280, 274, 278, 273, 271, 269, 277, 276, 270, 275, 197: 264},
		{11, 11, 11, 11, 11, 11, 11, 11, 9: 11, 11, 11, 13: 11, 17: 11, 11, 20: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 97: 11, 100: 11, 102: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		// 5
		{10, 10, 10, 10, 10, 10, 10, 10, 260, 10, 10, 10, 13: 10, 17: 10, 10, 20: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 97: 10, 99: 263, 10, 102: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{8, 8, 8, 8, 8, 8, 8, 8, 260, 8, 8, 8, 13: 8, 17: 8, 8, 20: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 97: 8, 99: 259, 8, 262, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 126: 261},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 13: 6, 6, 17: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 96: 6, 6, 6, 100: 6, 102: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 13: 4, 4, 17: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 96: 4, 4, 4, 100: 4, 102: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{9, 9, 9, 9, 9, 9, 9, 9, 9: 9, 9, 9, 13: 9, 17: 9, 9, 20: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 97: 9, 100: 9, 102: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		// 10
		{7, 7, 7, 7, 7, 7, 7, 7, 260, 7, 7, 7, 13: 7, 7, 17: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 96: 7, 7, 7, 263, 7, 102: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13: 5, 5, 17: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 96: 5, 5, 5, 100: 5, 102: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{2: 12, 8: 260, 12, 12, 12, 258, 99: 259, 101: 257, 128: 639, 640},
		{2: 248, 8: 248, 248, 248, 248, 248},
		{2: 246, 8: 246, 246, 246, 246, 246, 15: 246},
		// 15
		{2: 245, 8: 245, 245, 245, 245, 245, 15: 245},
		{2: 244, 8: 244, 244, 244, 244, 244, 15: 244},
		{2: 243, 8: 243, 243, 243, 243, 243, 15: 243},
		{2: 242, 8: 242, 242, 242, 242, 242, 15: 242},
		{2: 241, 8: 241, 241, 241, 241, 241, 15: 241},
		// 20
		{2: 240, 8: 240, 240, 240, 240, 240, 15: 240},
		{2: 239, 8: 239, 239, 239, 239, 239, 15: 239},
		{2: 238, 8: 238, 238, 238, 238, 238, 15: 238},
		{2: 237, 8: 237, 237, 237, 237, 237, 15: 237},
		{2: 236, 8: 236, 236, 236, 236, 236, 15: 236},
		// 25
		{2: 235, 8: 235, 235, 235, 235, 235, 15: 235},
		{2: 234, 8: 234, 234, 234, 234, 234, 15: 234},
		{2: 233, 8: 233, 233, 233, 233, 233, 15: 233},
		{2: 232, 8: 232, 232, 232, 232, 232, 15: 232},
		{2: 231, 8: 231, 231, 231, 231, 231, 15: 231},
		// 30
		{230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 14: 230, 230, 230, 19: 230, 33: 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230},
		{229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 14: 229, 229, 229, 19: 229, 33: 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229},
		{228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 14: 228, 228, 228, 19: 228, 33: 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228},
		{227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 14: 227, 227, 227, 19: 227, 33: 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227},
		{226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 14: 226, 226, 226, 19: 226, 33: 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226},
		// 35
		{225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 14: 225, 225, 225, 19: 225, 33: 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225},
		{224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 14: 224, 224, 224, 19: 224, 33: 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224},
		{223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 14: 223, 223, 223, 19: 223, 33: 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223},
		{222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 14: 222, 222, 222, 19: 222, 33: 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222},
		{221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 14: 221, 221, 221, 19: 221, 33: 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221},
		// 40
		{220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 14: 220, 220, 220, 19: 220, 33: 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220},
		{219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 14: 219, 219, 219, 19: 219, 33: 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219},
		{218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 14: 218, 218, 218, 19: 218, 33: 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218},
		{217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 14: 217, 217, 217, 19: 217, 33: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217},
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 14: 216, 216, 216, 19: 216, 33: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
		// 45
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 14: 215, 215, 215, 19: 215, 33: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215},
		{214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 14: 214, 214, 214, 19: 214, 33: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214},
		{213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 14: 213, 213, 213, 19: 213, 33: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
		{212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 14: 212, 212, 212, 19: 212, 33: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
		{2: 208, 8: 208, 208, 208, 208, 208, 636, 15: 208, 161: 638},
		// 50
		{2: 206, 8: 206, 206, 206, 206, 206, 636, 15: 206, 161: 637},
		{343, 353, 138, 323, 325, 344, 340, 328, 138, 138, 138, 138, 138, 354, 15: 138, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 415, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 125: 531, 132: 635},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 634, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{13: 632},
		{372, 2: 201, 369, 402, 380, 371, 394, 201, 201, 201, 201, 201, 14: 136, 201, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 136, 62: 136, 93: 368, 395, 400},
		// 55
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 598, 628, 295, 346, 286, 629, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 156: 631},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 598, 628, 295, 346, 286, 629, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 156: 630},
		{1: 498, 127: 621},
		{2: 193, 8: 193, 193, 193, 193, 193, 15: 193},
		{2: 192, 8: 192, 192, 192, 192, 192, 15: 192},
		// 60
		{13: 354, 66: 616, 169: 615},
		{2: 190, 8: 190, 190, 190, 190, 190, 15: 190},
		{14: 362, 60: 613, 62: 612, 124: 418, 180: 611},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 415, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 125: 608},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 602, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		// 65
		{1: 498, 127: 601},
		{343, 353, 3: 323, 325, 344, 340, 328, 12: 195, 586, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 585, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 97: 315, 102: 312, 125: 314, 134: 311, 313, 310, 583, 172: 584, 187: 587},
		{1: 566},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 548, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{3: 543},
		// 70
		{3: 540},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 538, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 30, 127, 127, 127, 442, 30, 127, 33: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 443, 96: 30, 98: 30},
		{8, 8, 3: 8, 8, 8, 8, 8, 260, 13: 8, 8, 17: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 99: 259, 101: 262, 126: 530, 154: 536},
		{1: 528},
		// 75
		{3: 525},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 524, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{3: 518},
		{3: 515},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 14: 117, 117, 117, 19: 117, 33: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		// 80
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 14: 116, 116, 116, 19: 116, 33: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 14: 115, 115, 115, 19: 115, 33: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 14: 114, 114, 114, 19: 114, 33: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 14: 113, 113, 113, 19: 113, 33: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 14: 112, 112, 112, 19: 112, 33: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		// 85
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 14: 111, 111, 111, 19: 111, 33: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		{110, 110, 110, 369, 110, 110, 110, 110, 110, 110, 110, 110, 110, 14: 110, 110, 110, 19: 110, 33: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 93: 514},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 14: 109, 109, 109, 19: 109, 33: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109},
		{97, 97, 3: 97, 97, 97, 97, 97, 13: 97, 17: 97, 97, 20: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		{96, 96, 3: 96, 96, 96, 96, 96, 13: 96, 17: 96, 96, 20: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		// 90
		{95, 95, 3: 95, 95, 95, 95, 95, 13: 95, 17: 95, 95, 20: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95},
		{94, 94, 3: 94, 94, 94, 94, 94, 13: 94, 17: 94, 94, 20: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{93, 93, 3: 93, 93, 93, 93, 93, 13: 93, 17: 93, 93, 20: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 513, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 14: 63, 63, 63, 19: 63, 33: 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		// 95
		{3: 106, 13: 482, 164: 483},
		{3: 468},
		{4: 462},
		{438, 13: 435, 17: 442, 349, 63: 350, 432, 431, 96: 440, 98: 439, 116: 433, 437, 430, 436, 434, 441, 429, 428},
		{1: 353, 67: 427},
		// 100
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 14: 27, 27, 27, 19: 27, 33: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{8, 8, 8, 8, 8, 8, 8, 8, 260, 13: 8, 17: 8, 8, 20: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 99: 259, 101: 262, 126: 356, 170: 355},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 33: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 96: 13, 98: 13},
		{2: 426},
		{343, 353, 25, 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 357, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 157: 359, 171: 358},
		// 105
		{372, 3: 369, 402, 380, 371, 394, 15: 401, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{2: 8, 8: 260, 14: 362, 99: 259, 101: 262, 124: 361, 126: 363, 162: 360},
		{2: 23, 8: 23, 14: 23},
		{2: 24},
		{343, 353, 2, 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 357, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 157: 365},
		// 110
		{8, 8, 8, 8, 8, 8, 8, 8, 260, 13: 8, 17: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 96: 8, 8, 8, 259, 101: 262, 126: 364},
		{2: 1, 19: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 13: 3, 17: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 96: 3, 3, 3},
		{2: 22, 8: 22, 14: 22},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 423, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		// 115
		{13: 422},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 14: 100, 100, 100, 19: 100, 33: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 16: 138, 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 415, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 125: 414, 132: 416},
		{91, 91, 3: 91, 91, 91, 91, 91, 13: 91, 17: 91, 91, 20: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		{90, 90, 3: 90, 90, 90, 90, 90, 13: 90, 17: 90, 90, 20: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		// 120
		{89, 89, 3: 89, 89, 89, 89, 89, 13: 89, 17: 89, 89, 20: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{88, 88, 3: 88, 88, 88, 88, 88, 13: 88, 17: 88, 88, 20: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{87, 87, 3: 87, 87, 87, 87, 87, 13: 87, 17: 87, 87, 20: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{86, 86, 3: 86, 86, 86, 86, 86, 13: 86, 17: 86, 86, 20: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{85, 85, 3: 85, 85, 85, 85, 85, 13: 85, 17: 85, 85, 20: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		// 125
		{84, 84, 3: 84, 84, 84, 84, 84, 13: 84, 17: 84, 84, 20: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{83, 83, 3: 83, 83, 83, 83, 83, 13: 83, 17: 83, 83, 20: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 3: 82, 82, 82, 82, 82, 13: 82, 17: 82, 82, 20: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{81, 81, 3: 81, 81, 81, 81, 81, 13: 81, 17: 81, 81, 20: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{80, 80, 3: 80, 80, 80, 80, 80, 13: 80, 17: 80, 80, 20: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
		// 130
		{79, 79, 3: 79, 79, 79, 79, 79, 13: 79, 17: 79, 79, 20: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{78, 78, 3: 78, 78, 78, 78, 78, 13: 78, 17: 78, 78, 20: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		{77, 77, 3: 77, 77, 77, 77, 77, 13: 77, 17: 77, 77, 20: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 3: 76, 76, 76, 76, 76, 13: 76, 17: 76, 76, 20: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		{75, 75, 3: 75, 75, 75, 75, 75, 13: 75, 17: 75, 75, 20: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		// 135
		{74, 74, 3: 74, 74, 74, 74, 74, 13: 74, 17: 74, 74, 20: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{73, 73, 3: 73, 73, 73, 73, 73, 13: 73, 17: 73, 73, 20: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		{72, 72, 3: 72, 72, 72, 72, 72, 13: 72, 17: 72, 72, 20: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		{71, 71, 3: 71, 71, 71, 71, 71, 13: 71, 17: 71, 71, 20: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		{70, 70, 3: 70, 70, 70, 70, 70, 13: 70, 17: 70, 70, 20: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		// 140
		{69, 69, 3: 69, 69, 69, 69, 69, 13: 69, 17: 69, 69, 20: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{68, 68, 3: 68, 68, 68, 68, 68, 13: 68, 17: 68, 68, 20: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		{67, 67, 3: 67, 67, 67, 67, 67, 13: 67, 17: 67, 67, 20: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 413, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 412, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		// 145
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 411, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 14: 62, 62, 62, 19: 62, 33: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 14: 61, 61, 61, 19: 61, 33: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 14: 60, 60, 60, 19: 60, 33: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 410, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		// 150
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 15: 405, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 403, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 188: 404},
		{372, 3: 369, 402, 380, 371, 394, 15: 408, 19: 16, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{19: 407},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 406, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{372, 3: 369, 402, 380, 371, 394, 19: 17, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		// 155
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14: 20, 20, 20, 19: 20, 33: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 18, 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 409, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{372, 3: 369, 402, 380, 371, 394, 19: 19, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{372, 2: 21, 369, 402, 380, 371, 394, 21, 14: 21, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{64, 64, 64, 369, 402, 64, 64, 64, 64, 64, 64, 64, 64, 14: 64, 64, 64, 19: 64, 33: 367, 397, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 399, 64, 64, 64, 64, 64, 64, 398, 64, 64, 64, 64, 64, 64, 93: 368, 395, 400},
		// 160
		{372, 65, 65, 369, 402, 380, 371, 65, 65, 65, 65, 65, 65, 14: 65, 65, 65, 19: 65, 33: 367, 397, 375, 370, 373, 65, 65, 65, 378, 65, 65, 65, 65, 65, 65, 65, 399, 65, 65, 65, 65, 65, 65, 398, 65, 376, 377, 65, 65, 65, 93: 368, 395, 400},
		{372, 66, 66, 369, 402, 380, 371, 394, 66, 66, 66, 66, 66, 14: 66, 66, 66, 19: 66, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 66, 66, 66, 93: 368, 395, 400},
		{14: 362, 16: 137, 61: 419, 124: 418},
		{372, 2: 136, 369, 402, 380, 371, 394, 136, 136, 136, 136, 136, 14: 136, 136, 136, 19: 136, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 61: 136, 136, 93: 368, 395, 400},
		{16: 417},
		// 165
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 14: 98, 98, 98, 19: 98, 33: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 421, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{16: 420},
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 14: 99, 99, 99, 19: 99, 33: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{372, 2: 135, 369, 402, 380, 371, 394, 135, 135, 135, 135, 135, 14: 135, 135, 135, 19: 135, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 135, 135, 135, 93: 368, 395, 400},
		// 170
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 14: 104, 104, 104, 19: 104, 33: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		{372, 3: 369, 402, 380, 371, 394, 15: 424, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 425, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{372, 123, 123, 369, 402, 380, 371, 394, 123, 123, 123, 123, 123, 14: 123, 123, 123, 19: 123, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 123, 123, 396, 384, 386, 123, 399, 123, 382, 387, 123, 379, 123, 398, 123, 376, 377, 123, 123, 123, 93: 368, 395, 400},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 14: 26, 26, 26, 19: 26, 33: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		// 175
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 14: 28, 28, 28, 19: 28, 33: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{1: 51, 51, 8: 51, 14: 51, 16: 51, 19: 51},
		{1: 50, 50, 8: 50, 14: 50, 16: 50, 19: 50},
		{1: 49, 49, 8: 49, 14: 49, 16: 49, 19: 49},
		{1: 48, 48, 8: 48, 14: 48, 16: 48, 19: 48},
		// 180
		{1: 47, 47, 8: 47, 14: 47, 16: 47, 19: 47},
		{1: 46, 46, 8: 46, 14: 46, 16: 46, 19: 46},
		{1: 45, 45, 8: 45, 14: 45, 16: 45, 19: 45},
		{1: 44, 44, 8: 44, 14: 44, 16: 44, 19: 44, 33: 42},
		{1: 43, 43, 8: 43, 14: 43, 16: 43, 19: 43},
		// 185
		{33: 460},
		{438, 13: 435, 17: 442, 349, 63: 350, 432, 431, 96: 440, 98: 439, 116: 433, 437, 430, 436, 434, 459, 429, 428},
		{1: 445},
		{438, 13: 435, 17: 442, 349, 63: 350, 432, 431, 96: 440, 98: 439, 116: 433, 437, 430, 436, 434, 444, 429, 428},
		{1: 31, 31, 8: 31, 14: 31, 16: 31, 19: 31},
		// 190
		{30, 13: 30, 17: 442, 30, 63: 443, 96: 30, 98: 30},
		{29, 13: 29, 17: 29, 29, 96: 29, 98: 29},
		{1: 38, 38, 8: 38, 14: 38, 16: 38, 19: 38},
		{8: 260, 13: 8, 97: 8, 99: 259, 101: 262, 126: 447, 201: 446},
		{2: 458},
		// 195
		{13: 354, 66: 448, 97: 449, 131: 451, 200: 450},
		{438, 13: 435, 17: 442, 349, 63: 350, 432, 431, 96: 440, 98: 439, 116: 433, 437, 430, 436, 434, 457, 429, 428},
		{13: 354, 66: 455},
		{2: 8, 8: 260, 14: 362, 99: 259, 101: 262, 124: 453, 126: 452},
		{2: 33, 8: 33, 14: 33},
		// 200
		{2: 34},
		{13: 354, 66: 448, 97: 449, 131: 454},
		{2: 32, 8: 32, 14: 32},
		{438, 13: 435, 17: 442, 349, 63: 350, 432, 431, 96: 440, 98: 439, 116: 433, 437, 430, 436, 434, 456, 429, 428},
		{2: 107, 8: 107, 14: 107, 16: 107},
		// 205
		{2: 108, 8: 108, 14: 108, 16: 108},
		{1: 39, 39, 8: 39, 14: 39, 16: 39, 19: 39},
		{1: 40, 40, 8: 40, 14: 40, 16: 40, 19: 40},
		{13: 461},
		{1: 41, 41, 8: 41, 14: 41, 16: 41, 19: 41},
		// 210
		{438, 13: 435, 17: 442, 349, 63: 350, 432, 431, 96: 440, 98: 439, 116: 433, 437, 430, 436, 434, 463, 429, 428, 178: 464},
		{19: 37},
		{19: 465},
		{438, 13: 435, 17: 442, 349, 63: 350, 432, 431, 96: 440, 98: 439, 116: 433, 437, 430, 436, 434, 466, 429, 428, 168: 467},
		{1: 36, 36, 8: 36, 14: 36, 16: 36, 19: 36},
		// 215
		{1: 35, 35, 8: 35, 14: 35, 16: 35, 19: 35},
		{438, 13: 435, 17: 442, 349, 63: 350, 432, 431, 96: 440, 98: 439, 116: 433, 437, 430, 436, 434, 469, 429, 428, 199: 470},
		{14: 476, 16: 475},
		{13: 471},
		{14: 472},
		// 220
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 473, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{372, 3: 369, 402, 380, 371, 394, 16: 474, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 14: 52, 52, 52, 19: 52, 33: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 14: 55, 55, 55, 19: 55, 33: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 477, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		// 225
		{372, 3: 369, 402, 380, 371, 394, 14: 479, 16: 478, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 14: 54, 54, 54, 19: 54, 33: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 480, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{372, 3: 369, 402, 380, 371, 394, 16: 481, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 14: 53, 53, 53, 19: 53, 33: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		// 230
		{1: 105, 3: 105},
		{3: 484},
		{13: 488, 16: 148, 66: 448, 97: 449, 131: 489, 159: 491, 490, 173: 492, 493, 486, 485, 487},
		{14: 362, 16: 147, 124: 510},
		{14: 146, 16: 146, 61: 508},
		// 235
		{14: 145, 16: 145},
		{13, 13: 13, 144, 16: 144, 13, 13, 61: 144, 96: 13, 98: 13},
		{14: 143, 16: 143},
		{14: 142, 16: 142, 61: 142},
		{14: 140, 16: 140},
		// 240
		{16: 494},
		{16: 56},
		{438, 155, 3: 496, 13: 435, 17: 442, 349, 63: 350, 432, 431, 96: 440, 98: 439, 116: 433, 437, 430, 436, 434, 495, 429, 428, 182: 497},
		{1: 154},
		{438, 13: 435, 16: 152, 442, 349, 63: 350, 432, 431, 96: 440, 98: 439, 116: 433, 437, 430, 436, 434, 504, 429, 428, 183: 502, 503},
		// 245
		{1: 498, 127: 499},
		{12, 12, 12, 12, 12, 12, 12, 12, 260, 12: 258, 12, 17: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 97: 12, 99: 259, 12, 257, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 128: 255, 256, 500},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 14: 59, 59, 59, 19: 59, 33: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{2: 501},
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 14: 211, 211, 211, 19: 211, 33: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 153: 211, 155: 211, 158: 211},
		// 250
		{16: 507},
		{14: 362, 16: 151, 124: 505},
		{14: 150, 16: 150},
		{438, 13: 435, 17: 442, 349, 63: 350, 432, 431, 96: 440, 98: 439, 116: 433, 437, 430, 436, 434, 506, 429, 428},
		{14: 149, 16: 149},
		// 255
		{1: 153},
		{438, 13: 435, 16: 57, 442, 349, 63: 350, 432, 431, 96: 440, 98: 439, 116: 433, 437, 430, 436, 434, 509, 429, 428},
		{16: 58},
		{13: 488, 66: 448, 97: 449, 131: 489, 159: 512, 511},
		{14: 141, 16: 141, 61: 141},
		// 260
		{14: 139, 16: 139},
		{92, 92, 92, 369, 402, 92, 92, 92, 92, 92, 92, 92, 92, 14: 92, 92, 92, 19: 92, 33: 367, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93: 368, 395, 400},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 14: 101, 101, 101, 19: 101, 33: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 516, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{372, 3: 369, 402, 380, 371, 394, 16: 517, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		// 265
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 14: 118, 118, 118, 19: 118, 33: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 519, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{372, 3: 369, 402, 380, 371, 394, 14: 521, 16: 520, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 14: 120, 120, 120, 19: 120, 33: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 522, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		// 270
		{372, 3: 369, 402, 380, 371, 394, 16: 523, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 14: 119, 119, 119, 19: 119, 33: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{372, 121, 121, 369, 402, 380, 371, 394, 121, 121, 121, 121, 121, 14: 121, 121, 121, 19: 121, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 121, 121, 396, 384, 386, 121, 399, 121, 382, 387, 121, 379, 121, 398, 121, 376, 377, 121, 121, 121, 93: 368, 395, 400},
		{438, 13: 435, 17: 442, 349, 63: 350, 432, 431, 96: 440, 98: 439, 116: 433, 437, 430, 436, 434, 526, 429, 428},
		{16: 527},
		// 275
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 14: 122, 122, 122, 19: 122, 33: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		{8, 8, 8, 8, 8, 8, 8, 8, 260, 13: 8, 8, 17: 8, 8, 20: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 99: 259, 101: 262, 126: 530, 154: 529},
		{2: 535},
		{343, 353, 138, 323, 325, 344, 340, 328, 138, 13: 354, 138, 17: 324, 349, 138, 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 415, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 125: 531, 132: 532},
		{2: 137, 8: 137, 137, 137, 137, 137, 14: 362, 137, 19: 137, 124: 418},
		// 280
		{2: 8, 8: 260, 14: 362, 19: 8, 99: 259, 101: 262, 124: 534, 126: 363, 162: 533},
		{2: 124, 19: 124},
		{2: 2, 19: 2},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 14: 125, 125, 125, 19: 125, 33: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		{19: 537},
		// 285
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 14: 126, 126, 126, 19: 126, 33: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		{372, 3: 369, 402, 380, 371, 394, 16: 539, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 14: 128, 128, 128, 19: 128, 33: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 541, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{372, 3: 369, 402, 380, 371, 394, 16: 542, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		// 290
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 14: 129, 129, 129, 19: 129, 33: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
		{438, 13: 435, 16: 544, 442, 349, 63: 350, 432, 431, 96: 440, 98: 439, 116: 433, 437, 430, 436, 434, 546, 429, 428, 167: 545},
		{2: 132, 8: 132, 132, 132, 132, 132, 15: 132},
		{16: 547},
		{16: 130},
		// 295
		{2: 131, 8: 131, 131, 131, 131, 131, 15: 131},
		{372, 549, 3: 369, 402, 380, 371, 394, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{2: 8, 8: 260, 8, 8, 99: 259, 101: 262, 126: 551, 198: 550},
		{2: 565},
		{2: 163, 9: 163, 555, 166: 554, 186: 552, 194: 553},
		// 300
		{2: 158, 9: 562, 195: 561, 560},
		{2: 162, 9: 162, 555, 166: 559},
		{2: 161, 9: 161, 161},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 15: 138, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 415, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 125: 531, 132: 556},
		{15: 557},
		// 305
		{12, 12, 12, 12, 12, 12, 12, 12, 260, 12, 12, 12: 258, 12, 17: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 97: 12, 99: 259, 12, 257, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 128: 255, 256, 558},
		{2: 159, 9: 159, 159},
		{2: 160, 9: 160, 160},
		{2: 164},
		{2: 157},
		// 310
		{15: 563},
		{12, 12, 12, 12, 12, 12, 12, 12, 260, 12: 258, 12, 17: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 97: 12, 99: 259, 12, 257, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 128: 255, 256, 564},
		{2: 156},
		{2: 165, 8: 165, 165, 165, 165, 165, 15: 165},
		{2: 8, 8: 260, 8, 8, 99: 259, 101: 262, 126: 568, 191: 567},
		// 315
		{2: 582},
		{2: 173, 9: 173, 572, 165: 571, 185: 569, 190: 570},
		{2: 168, 9: 579, 192: 578, 577},
		{2: 172, 9: 172, 572, 165: 576},
		{2: 171, 9: 171, 171},
		// 320
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 306, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 97: 315, 100: 316, 102: 312, 301, 302, 321, 308, 318, 307, 317, 305, 303, 319, 320, 304, 309, 125: 314, 133: 272, 311, 313, 310, 266, 573, 267, 268, 281, 279, 280, 274, 278, 273, 271, 269, 277, 276, 270, 275},
		{15: 574},
		{12, 12, 12, 12, 12, 12, 12, 12, 260, 12, 12, 12: 258, 12, 17: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 97: 12, 99: 259, 12, 257, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 128: 255, 256, 575},
		{2: 169, 9: 169, 169},
		{2: 170, 9: 170, 170},
		// 325
		{2: 174},
		{2: 167},
		{15: 580},
		{12, 12, 12, 12, 12, 12, 12, 12, 260, 12: 258, 12, 17: 12, 12, 20: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 97: 12, 99: 259, 12, 257, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 128: 255, 256, 581},
		{2: 166},
		// 330
		{2: 175, 8: 175, 175, 175, 175, 175, 15: 175},
		{12: 194},
		{1: 498, 127: 600},
		{372, 179, 3: 369, 402, 380, 371, 394, 14: 136, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 136, 62: 136, 93: 368, 395, 400},
		{13, 13, 3: 13, 13, 13, 13, 13, 14: 594, 33: 13, 593, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 62: 13},
		// 335
		{12: 588},
		{343, 353, 3: 323, 325, 344, 340, 328, 12: 134, 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 590, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 163: 589},
		{12: 591},
		{372, 133, 3: 369, 402, 380, 371, 394, 12: 133, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 590, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 163: 592},
		// 340
		{1: 176},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 598, 296, 295, 346, 286, 297, 291, 292, 285, 299, 599, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		{13: 595},
		{34: 596},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 598, 296, 295, 346, 286, 297, 291, 292, 285, 299, 597, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345},
		// 345
		{230, 177, 3: 230, 230, 230, 230, 230, 33: 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230},
		{372, 3: 369, 402, 380, 371, 394, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{230, 178, 3: 230, 230, 230, 230, 230, 33: 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230},
		{2: 180, 8: 180, 180, 180, 180, 180, 15: 180},
		{2: 181, 8: 181, 181, 181, 181, 181, 15: 181},
		// 350
		{372, 498, 3: 369, 402, 380, 371, 394, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400, 127: 603},
		{2: 184, 8: 184, 184, 184, 184, 184, 15: 184, 155: 605, 179: 604},
		{2: 185, 8: 185, 185, 185, 185, 185, 15: 185},
		{1: 498, 100: 316, 127: 607, 133: 606},
		{2: 183, 8: 183, 183, 183, 183, 183, 15: 183},
		// 355
		{2: 182, 8: 182, 182, 182, 182, 182, 15: 182},
		{14: 362, 62: 609, 124: 418},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 415, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 125: 610},
		{2: 188, 8: 188, 188, 188, 188, 188, 14: 362, 188, 124: 418},
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 415, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 125: 614},
		// 360
		{187, 187, 3: 187, 187, 187, 187, 187, 13: 187, 17: 187, 187, 20: 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187, 187},
		{186, 186, 3: 186, 186, 186, 186, 186, 13: 186, 17: 186, 186, 20: 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186, 186},
		{2: 189, 8: 189, 189, 189, 189, 189, 14: 362, 189, 124: 418},
		{14: 362, 60: 617, 124: 618},
		{14: 15, 60: 15},
		// 365
		{343, 353, 3: 323, 325, 344, 340, 328, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 415, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 125: 620},
		{13: 354, 66: 619},
		{14: 14, 60: 14},
		{2: 191, 8: 191, 191, 191, 191, 191, 14: 362, 191, 124: 418},
		{153: 622},
		// 370
		{1: 106, 13: 482, 164: 623},
		{1: 498, 127: 624},
		{2: 197, 8: 197, 197, 197, 197, 197, 15: 197, 158: 626, 181: 625},
		{2: 198, 8: 198, 198, 198, 198, 198, 15: 198},
		{1: 498, 127: 627},
		// 375
		{2: 196, 8: 196, 196, 196, 196, 196, 15: 196},
		{216, 2: 102, 216, 216, 216, 216, 216, 102, 102, 102, 102, 102, 15: 102, 33: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
		{215, 2: 103, 215, 215, 215, 215, 215, 103, 103, 103, 103, 103, 15: 103, 33: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215},
		{2: 199, 8: 199, 199, 199, 199, 199, 15: 199},
		{2: 200, 8: 200, 200, 200, 200, 200, 15: 200},
		// 380
		{1: 498, 127: 633},
		{2: 202, 8: 202, 202, 202, 202, 202, 15: 202},
		{372, 2: 203, 369, 402, 380, 371, 394, 203, 203, 203, 203, 203, 15: 203, 33: 367, 397, 375, 370, 373, 385, 383, 366, 378, 381, 392, 391, 396, 384, 386, 389, 399, 390, 382, 387, 393, 379, 388, 398, 374, 376, 377, 93: 368, 395, 400},
		{2: 204, 8: 204, 204, 204, 204, 204, 15: 204},
		{2: 210, 8: 210, 210, 210, 210, 210, 15: 210},
		// 385
		{2: 205, 8: 205, 205, 205, 205, 205, 15: 205},
		{2: 207, 8: 207, 207, 207, 207, 207, 15: 207},
		{2: 249, 9: 249, 249, 249},
		{343, 353, 11, 323, 325, 344, 340, 328, 9: 11, 11, 11, 13: 354, 17: 324, 349, 20: 341, 342, 330, 329, 336, 347, 322, 348, 327, 337, 332, 333, 335, 63: 350, 351, 326, 338, 352, 334, 306, 296, 295, 346, 286, 297, 291, 292, 285, 299, 282, 287, 283, 331, 289, 293, 339, 298, 288, 290, 294, 300, 284, 345, 97: 315, 100: 316, 102: 312, 301, 302, 321, 308, 318, 307, 317, 305, 303, 319, 320, 304, 309, 125: 314, 133: 272, 311, 313, 310, 266, 641, 267, 268, 281, 279, 280, 274, 278, 273, 271, 269, 277, 276, 270, 275},
		{2: 247, 8: 247, 247, 247, 247, 247},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 204

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmt
			}
		}
	case 2:
		{
			yyVAL.stmt = nil
		}
	case 3:
		{
			yyVAL.stmt = yyS[yypt-1].stmtsStmt
		}
	case 4:
		{
			yyVAL.stmtsStmt = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 5:
		{
			yyS[yypt-2].stmtsStmt.Stmts = append(yyS[yypt-2].stmtsStmt.Stmts, yyS[yypt-0].stmt)
		}
	case 41:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 43:
		{
			yyVAL.stmt = &ast.LabelStmt{Name: yyS[yypt-2].tok.Lit, Stmt: yyS[yypt-0].stmt}
		}
	case 44:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 45:
		{
			yyVAL.stmt = &ast.BreakStmt{Label: yyS[yypt-0].tok.Lit}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 46:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 47:
		{
			yyVAL.stmt = &ast.ContinueStmt{Label: yyS[yypt-0].tok.Lit}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 48:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 49:
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 50:
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyS[yypt-1].tok.Lit, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 51:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 52:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Go = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Go = true
			}
			yyVAL.stmt = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 53:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Defer = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Defer = true
			}
			yyVAL.stmt = &ast.DeferStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 54:
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyS[yypt-4].stmt, Var: yyS[yypt-2].opt_ident.Lit, Catch: yyS[yypt-1].stmt, Finally: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 55:
		{
			yyVAL.stmt = nil
		}
	case 56:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 57:
		{
			yyVAL.stmt = nil
		}
	case 58:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 61:
		{
			isItem := false
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					arr := []ast.Expr{}
					for _, el := range yyS[yypt-2].expr_idents {
						arr = append(arr, &ast.IdentExpr{Lit: el})
					}
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: arr, Rhs: yyS[yypt-0].exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 62:
		{
			lhs := yyS[yypt-0].stmt_lets_helper.Exprs1
			rhs := yyS[yypt-0].stmt_lets_helper.Exprs2
			isItem := false
			if len(lhs) == 2 && len(rhs) == 1 {
				if _, ok := rhs[0].(*ast.ItemExpr); ok {
					isItem = true
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: lhs, Rhs: rhs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.LetsStmt{Lhss: lhs, Operator: "=", Rhss: rhs, Typed: yyS[yypt-0].stmt_lets_helper.Typed, Mutable: yyS[yypt-0].stmt_lets_helper.Mutable}
				if len(lhs) != len(rhs) && !(len(rhs) == 1 && len(lhs) > len(rhs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(lhs[0].Position())
		}
	case 63:
		{
			yyVAL.stmt_lets_helper = struct {
				Exprs1, Exprs2 []ast.Expr
				Typed, Mutable bool
			}{Exprs1: yyS[yypt-2].exprs, Exprs2: yyS[yypt-0].exprs, Typed: yyS[yypt-1].op_lets, Mutable: false}
		}
	case 64:
		{
			yyVAL.stmt_lets_helper = struct {
				Exprs1, Exprs2 []ast.Expr
				Typed, Mutable bool
			}{Exprs1: yyS[yypt-2].exprs, Exprs2: yyS[yypt-0].exprs, Typed: true, Mutable: true}
		}
	case 65:
		{
			yyVAL.op_lets = true
		}
	case 66:
		{
			yyVAL.op_lets = false
		}
	case 67:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-2].expr, Then: yyS[yypt-1].stmt, Else: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 68:
		{
			yyVAL.stmt = nil
		}
	case 69:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 70:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 71:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 72:
		{
			if el, ok := yyS[yypt-1].stmt.(*ast.LoopStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			} else if el, ok := yyS[yypt-1].stmt.(*ast.ForStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			} else if el, ok := yyS[yypt-1].stmt.(*ast.CForStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			}
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 73:
		{
			yyVAL.stmt = &ast.LoopStmt{Expr: yyS[yypt-0].expr}
		}
	case 74:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: []string{yyS[yypt-2].tok.Lit}, Value: yyS[yypt-0].expr}
		}
	case 75:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: []string{yyS[yypt-4].tok.Lit, yyS[yypt-2].tok.Lit}, Value: yyS[yypt-0].expr}
		}
	case 76:
		{
			yyVAL.stmt = &ast.CForStmt{Stmt1: yyS[yypt-4].stmt, Expr2: yyS[yypt-2].expr, Expr3: yyS[yypt-0].expr}
		}
	case 77:
		{
			yyVAL.stmt = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 78:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{Cases: yyS[yypt-1].stmts, Default: yyS[yypt-0].stmt}
		}
	case 79:
		{
			yyVAL.stmts = nil
		}
	case 80:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 81:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 82:
		{
			yyVAL.stmts = append(yyVAL.stmts, yyS[yypt-0].stmt)
		}
	case 83:
		{
			yyVAL.stmt = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 84:
		{
			yyVAL.stmt = nil
		}
	case 85:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 86:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 87:
		{
			yyS[yypt-1].stmt.(*ast.SwitchStmt).Expr = yyS[yypt-3].expr
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 88:
		{
			yyVAL.stmt = &ast.SwitchStmt{Cases: yyS[yypt-1].stmts, Default: yyS[yypt-0].stmt}
		}
	case 89:
		{
			yyVAL.stmts = nil
		}
	case 90:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 91:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 92:
		{
			yyVAL.stmts = append(yyVAL.stmts, yyS[yypt-0].stmt)
		}
	case 93:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].exprs, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 94:
		{
			yyVAL.stmt = nil
		}
	case 95:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 96:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 97:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 98:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 99:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents
		}
	case 100:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{}
		}
	case 101:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-0].opt_func_return_expr_idents
		}
	case 102:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 103:
		{
			yyVAL.opt_func_return_expr_idents = append(yyS[yypt-2].opt_func_return_expr_idents, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 104:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 105:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents
		}
	case 108:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 109:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].expr_typed_ident.Name, TypeData: yyS[yypt-0].expr_typed_ident.TypeData}
		}
	case 110:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 111:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 112:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 113:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 114:
		{
			yyVAL.exprs = nil
		}
	case 115:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 116:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 117:
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 118:
		{
			yyVAL.expr = nil
		}
	case 119:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 120:
		{
			yyVAL.stmt = &ast.DbgStmt{Expr: nil}
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 121:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 122:
		{
			yyVAL.stmt = &ast.DbgStmt{TypeData: yyS[yypt-0].type_data}
		}
	case 123:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 124:
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 125:
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 126:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 127:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprs, TypeData: yyS[yypt-3].type_data}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 128:
		{
			yyVAL.exprs = yyS[yypt-1].exprs
		}
	case 129:
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 130:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 131:
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 132:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 133:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 134:
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 135:
		{
			yyVAL.expr = yyS[yypt-0].expr
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 136:
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 137:
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 138:
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 144:
		{
			typeData := yyS[yypt-0].type_data
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: typeData}
		}
	case 145:
		{
			typeData := yyS[yypt-0].type_data
			typeData.Mutable = true
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: typeData}
		}
	case 146:
		{
			yyVAL.opt_ident = nil
		}
	case 147:
		{
			yyVAL.opt_ident = &yyS[yypt-0].tok
		}
	case 148:
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 151:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 152:
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyS[yypt-1].expr, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 153:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-2].exprs, VarArg: true}
		}
	case 154:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-1].exprs}
		}
	case 155:
		{
			yyVAL.str = "-"
		}
	case 156:
		{
			yyVAL.str = "!"
		}
	case 157:
		{
			yyVAL.str = "^"
		}
	case 158:
		{
			yyVAL.str = "*"
		}
	case 159:
		{
			yyVAL.str = "&"
		}
	case 160:
		{
			if yyS[yypt-1].str == "&" {
				if el, ok := yyS[yypt-0].expr.(*ast.IdentExpr); ok {
					yyVAL.expr = &ast.AddrExpr{Expr: el}
				} else if el, ok := yyS[yypt-0].expr.(*ast.MemberExpr); ok {
					yyVAL.expr = el
				}
			} else if yyS[yypt-1].str == "*" {
				yyVAL.expr = &ast.DerefExpr{Expr: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.UnaryExpr{Operator: yyS[yypt-1].str, Expr: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 161:
		{
			yyVAL.str = "+"
		}
	case 162:
		{
			yyVAL.str = "-"
		}
	case 163:
		{
			yyVAL.str = "*"
		}
	case 164:
		{
			yyVAL.str = "/"
		}
	case 165:
		{
			yyVAL.str = "**"
		}
	case 166:
		{
			yyVAL.str = "%"
		}
	case 167:
		{
			yyVAL.str = "<<"
		}
	case 168:
		{
			yyVAL.str = ">>"
		}
	case 169:
		{
			yyVAL.str = "|"
		}
	case 170:
		{
			yyVAL.str = "||"
		}
	case 171:
		{
			yyVAL.str = "&"
		}
	case 172:
		{
			yyVAL.str = "&&"
		}
	case 173:
		{
			yyVAL.str = "!="
		}
	case 174:
		{
			yyVAL.str = ">"
		}
	case 175:
		{
			yyVAL.str = ">="
		}
	case 176:
		{
			yyVAL.str = "<"
		}
	case 177:
		{
			yyVAL.str = "<="
		}
	case 178:
		{
			yyVAL.str = "??"
		}
	case 179:
		{
			yyVAL.str = "+="
		}
	case 180:
		{
			yyVAL.str = "-="
		}
	case 181:
		{
			yyVAL.str = "*="
		}
	case 182:
		{
			yyVAL.str = "/="
		}
	case 183:
		{
			yyVAL.str = "&="
		}
	case 184:
		{
			yyVAL.str = "|="
		}
	case 185:
		{
			yyVAL.str = "<-"
		}
	case 186:
		{
			if yyS[yypt-1].str == "??" {
				yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "<-" {
				yyVAL.expr = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "+=" ||
				yyS[yypt-1].str == "-=" ||
				yyS[yypt-1].str == "*=" ||
				yyS[yypt-1].str == "/=" ||
				yyS[yypt-1].str == "&=" ||
				yyS[yypt-1].str == "|=" {
				yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 187:
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 188:
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 190:
		{
			yyVAL.str = "++"
		}
	case 191:
		{
			yyVAL.str = "--"
		}
	case 192:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: yyS[yypt-0].str}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 193:
		{
			f := &ast.FuncExpr{Params: yyS[yypt-3].func_expr_args.Params, Returns: yyS[yypt-1].opt_func_return_expr_idents, Stmt: yyS[yypt-0].stmt, VarArg: yyS[yypt-3].func_expr_args.VarArg}
			if yyS[yypt-3].func_expr_args.TypeData != nil {
				f.Params[len(f.Params)-1].TypeData = yyS[yypt-3].func_expr_args.TypeData
			}
			if yyS[yypt-5].opt_ident != nil {
				f.Name = yyS[yypt-5].opt_ident.Lit
			}
			yyVAL.expr = f
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 194:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-2].func_expr_idents, VarArg: true, TypeData: yyS[yypt-0].type_data}
		}
	case 195:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-1].func_expr_idents, VarArg: true, TypeData: nil}
		}
	case 196:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-0].func_expr_idents, VarArg: false, TypeData: nil}
		}
	case 197:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 198:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 199:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 200:
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 208:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 209:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 211:
		{
			yyVAL.type_data = &ast.TypeStruct{Env: []string{yyS[yypt-2].tok.Lit}, Name: yyS[yypt-0].tok.Lit}
		}
	case 212:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 213:
		{
			yyVAL.type_data = yyS[yypt-1].type_data
		}
	case 214:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 217:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 218:
		{
			yyVAL.type_data = yyS[yypt-1].type_data
		}
	case 219:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-0].expr_typed_ident.Name}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].expr_typed_ident.TypeData}}
		}
	case 220:
		{
			if yyS[yypt-2].type_data == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data.StructNames = append(yyVAL.type_data.StructNames, yyS[yypt-0].expr_typed_ident.Name)
			yyVAL.type_data.StructTypes = append(yyVAL.type_data.StructTypes, yyS[yypt-0].expr_typed_ident.TypeData)
		}
	case 221:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 222:
		{
			yyVAL.slice_count = 1
		}
	case 223:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 224:
		{
			yyS[yypt-0].expr_map.TypeData = yyS[yypt-1].type_data
			yyVAL.expr = yyS[yypt-0].expr_map
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_map.Position())
		}
	case 225:
		{
			yyVAL.expr = yyS[yypt-0].expr_map
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_map.Position())
		}
	case 226:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map
		}
	case 227:
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 228:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map
		}
	case 229:
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyS[yypt-0].exprs[0]}, Values: []ast.Expr{yyS[yypt-0].exprs[1]}}
		}
	case 230:
		{
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyS[yypt-0].exprs[0])
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyS[yypt-0].exprs[1])
		}
	case 231:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 232:
		{
			if el, ok := yyS[yypt-1].expr.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-3].expr
			} else if el, ok := yyS[yypt-1].expr.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-3].expr
			}
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 233:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: yyS[yypt-0].expr}
		}
	case 234:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-1].expr, End: nil}
		}
	case 235:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: nil, End: yyS[yypt-0].expr}
		}
	case 236:
		{
			yyVAL.expr = &ast.ItemExpr{Index: yyS[yypt-0].expr}
		}
	case 237:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].expr.(*ast.IdentExpr).Lit}
		}
	case 238:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].expr.(*ast.IdentExpr).Lit)
		}
	case 239:
		{
			yyVAL.expr = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-0].tok.Position())
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
