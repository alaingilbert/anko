// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:64
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             *ast.SwitchStmt
	stmt_switch_cases_helper      *ast.SwitchStmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_body              *ast.SelectBodyStmt
	stmt_select_cases             *ast.SelectBodyStmt
	stmt_select_cases_helper      *ast.SelectBodyStmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_literals                 ast.Expr
	expr_unary                    ast.Expr
	expr_binary                   ast.Expr
	expr_member_or_ident          ast.Expr
	expr_call                     *ast.CallExpr
	expr_anon_call                *ast.AnonCallExpr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	opt_exprs                     []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	expr_map_content              *ast.MapExpr
	expr_map_content_helper       *ast.MapExpr
	expr_map_key_value            []ast.Expr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"';'",
	"','",
	"'('",
	"')'",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1222

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	78, 6,
	-2, 2,
	-1, 24,
	79, 91,
	-2, 20,
	-1, 119,
	79, 209,
	-2, 204,
	-1, 124,
	16, 71,
	79, 71,
	-2, 203,
	-1, 128,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	77, 21,
	78, 21,
	86, 21,
	-2, 105,
	-1, 129,
	1, 22,
	47, 22,
	48, 22,
	63, 22,
	77, 22,
	78, 22,
	86, 22,
	-2, 106,
	-1, 131,
	1, 23,
	47, 23,
	48, 23,
	63, 23,
	77, 23,
	78, 23,
	86, 23,
	-2, 105,
	-1, 132,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	77, 24,
	78, 24,
	86, 24,
	-2, 106,
	-1, 133,
	4, 187,
	51, 187,
	58, 187,
	59, 187,
	-2, 100,
	-1, 159,
	1, 138,
	8, 138,
	47, 138,
	48, 138,
	61, 138,
	62, 138,
	63, 138,
	76, 138,
	77, 138,
	78, 138,
	79, 138,
	81, 138,
	83, 138,
	86, 138,
	-2, 129,
	-1, 161,
	1, 140,
	8, 140,
	47, 140,
	48, 140,
	61, 140,
	62, 140,
	63, 140,
	76, 140,
	77, 140,
	78, 140,
	79, 140,
	81, 140,
	83, 140,
	86, 140,
	-2, 129,
	-1, 213,
	79, 210,
	-2, 207,
	-1, 260,
	81, 178,
	84, 178,
	-2, 203,
	-1, 285,
	79, 209,
	-2, 204,
	-1, 317,
	1, 93,
	8, 93,
	47, 93,
	48, 93,
	61, 93,
	62, 93,
	63, 93,
	77, 93,
	78, 93,
	79, 93,
	81, 93,
	83, 93,
	86, 93,
	-2, 129,
	-1, 318,
	1, 139,
	8, 139,
	47, 139,
	48, 139,
	61, 139,
	62, 139,
	63, 139,
	76, 139,
	77, 139,
	78, 139,
	79, 139,
	81, 139,
	83, 139,
	86, 139,
	-2, 130,
	-1, 319,
	1, 141,
	8, 141,
	47, 141,
	48, 141,
	61, 141,
	62, 141,
	63, 141,
	76, 141,
	77, 141,
	78, 141,
	79, 141,
	81, 141,
	83, 141,
	86, 141,
	-2, 130,
	-1, 354,
	79, 209,
	-2, 204,
	-1, 356,
	79, 209,
	-2, 204,
	-1, 405,
	79, 209,
	-2, 204,
}

const yyPrivate = 57344

const yyLast = 3898

var yyAct = [...]int16{
	2, 40, 362, 170, 252, 249, 79, 299, 381, 363,
	24, 10, 269, 295, 296, 300, 45, 247, 246, 6,
	137, 421, 80, 302, 97, 9, 133, 9, 9, 9,
	9, 439, 333, 226, 332, 118, 121, 226, 126, 226,
	130, 130, 139, 8, 466, 77, 225, 226, 144, 435,
	226, 76, 429, 389, 226, 226, 374, 226, 371, 148,
	336, 226, 91, 232, 87, 329, 90, 141, 226, 156,
	157, 158, 160, 162, 140, 142, 311, 387, 168, 226,
	145, 24, 159, 161, 331, 143, 172, 138, 229, 347,
	176, 177, 178, 179, 180, 182, 183, 433, 143, 187,
	188, 189, 190, 191, 192, 193, 194, 195, 196, 197,
	198, 199, 200, 201, 202, 203, 204, 205, 206, 76,
	212, 207, 208, 209, 210, 168, 220, 327, 320, 218,
	461, 169, 460, 279, 89, 223, 165, 186, 164, 89,
	139, 139, 253, 139, 326, 278, 214, 56, 167, 139,
	382, 166, 234, 236, 150, 149, 238, 239, 112, 113,
	97, 147, 78, 112, 113, 97, 98, 99, 259, 139,
	240, 139, 265, 257, 271, 146, 273, 392, 270, 76,
	224, 272, 155, 153, 154, 322, 509, 215, 277, 137,
	219, 136, 508, 506, 94, 95, 96, 116, 91, 174,
	87, 155, 90, 91, 502, 87, 501, 90, 496, 215,
	494, 255, 280, 359, 163, 155, 155, 284, 490, 489,
	488, 282, 480, 476, 286, 473, 289, 472, 471, 457,
	456, 139, 451, 445, 223, 443, 141, 442, 441, 185,
	440, 415, 309, 140, 142, 171, 399, 407, 351, 348,
	316, 342, 340, 139, 335, 290, 138, 76, 281, 267,
	317, 139, 175, 259, 504, 383, 500, 143, 162, 498,
	485, 325, 324, 483, 464, 462, 337, 449, 161, 425,
	137, 343, 78, 344, 338, 134, 352, 231, 173, 227,
	228, 127, 230, 125, 355, 357, 454, 417, 237, 412,
	369, 241, 242, 120, 7, 24, 499, 368, 367, 491,
	370, 75, 82, 254, 388, 377, 321, 258, 263, 408,
	266, 380, 139, 139, 365, 364, 11, 141, 298, 297,
	264, 5, 44, 139, 140, 142, 74, 479, 139, 251,
	391, 376, 396, 350, 135, 270, 395, 138, 43, 373,
	398, 394, 334, 319, 400, 401, 123, 403, 143, 151,
	318, 137, 304, 3, 411, 406, 129, 132, 73, 184,
	416, 410, 413, 222, 152, 81, 139, 135, 139, 1,
	305, 418, 128, 131, 46, 139, 139, 268, 315, 139,
	139, 431, 430, 428, 51, 375, 432, 426, 250, 438,
	248, 243, 323, 444, 42, 446, 447, 37, 141, 450,
	330, 414, 227, 452, 36, 140, 142, 48, 455, 50,
	38, 35, 293, 292, 213, 294, 459, 21, 138, 361,
	360, 139, 135, 20, 18, 139, 17, 139, 463, 143,
	22, 23, 465, 470, 468, 19, 26, 27, 25, 474,
	475, 78, 4, 0, 477, 478, 0, 0, 0, 0,
	135, 283, 0, 482, 0, 484, 0, 291, 139, 0,
	301, 303, 385, 135, 0, 486, 0, 306, 0, 0,
	0, 139, 390, 139, 495, 0, 497, 393, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 503,
	0, 505, 137, 0, 0, 507, 0, 0, 0, 0,
	0, 0, 0, 78, 301, 0, 0, 0, 0, 89,
	135, 0, 0, 0, 0, 419, 135, 422, 0, 135,
	135, 0, 0, 0, 427, 0, 135, 0, 366, 434,
	0, 0, 0, 112, 113, 97, 98, 99, 372, 141,
	0, 0, 0, 0, 0, 0, 140, 142, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 386, 138,
	92, 93, 114, 135, 94, 95, 96, 116, 0, 384,
	143, 0, 0, 91, 0, 87, 467, 90, 0, 0,
	213, 0, 0, 0, 0, 0, 0, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 409, 135, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 301,
	0, 420, 0, 0, 0, 0, 0, 135, 0, 0,
	492, 0, 493, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	57, 58, 0, 0, 67, 14, 55, 15, 28, 213,
	29, 213, 0, 0, 0, 135, 0, 458, 49, 59,
	60, 61, 0, 16, 30, 0, 0, 0, 135, 0,
	135, 0, 0, 12, 13, 0, 0, 0, 0, 0,
	31, 32, 0, 0, 33, 34, 0, 70, 52, 0,
	47, 54, 53, 71, 0, 69, 0, 481, 0, 0,
	213, 0, 0, 62, 0, 64, 66, 0, 0, 65,
	0, 72, 0, 0, 0, 41, 135, 39, 0, 0,
	63, 89, 100, 101, 103, 105, 115, 117, 0, 0,
	0, 0, 86, 0, 135, 0, 0, 106, 107, 108,
	109, 110, 111, 0, 0, 112, 113, 97, 98, 99,
	0, 0, 0, 0, 0, 0, 135, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 83, 84, 0, 85,
	104, 102, 92, 93, 114, 0, 94, 95, 96, 116,
	0, 216, 0, 0, 0, 91, 0, 87, 0, 90,
	89, 100, 101, 103, 105, 115, 117, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 106, 107, 108, 109,
	110, 111, 0, 0, 112, 113, 97, 98, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 104,
	102, 92, 93, 114, 0, 94, 95, 96, 116, 0,
	0, 0, 0, 437, 91, 436, 87, 0, 90, 89,
	100, 101, 103, 105, 115, 117, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 106, 107, 108, 109, 110,
	111, 0, 0, 112, 113, 97, 98, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 104, 102,
	92, 93, 114, 0, 94, 95, 96, 116, 0, 0,
	0, 0, 314, 91, 313, 87, 0, 90, 89, 100,
	101, 103, 105, 115, 117, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 106, 107, 108, 109, 110, 111,
	0, 0, 112, 113, 97, 98, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 308, 85, 104, 102, 92,
	93, 114, 0, 94, 95, 96, 116, 0, 0, 0,
	0, 0, 91, 0, 87, 307, 90, 89, 100, 101,
	103, 105, 115, 117, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 106, 107, 108, 109, 110, 111, 0,
	0, 112, 113, 97, 98, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 85, 104, 102, 92, 93,
	114, 0, 94, 95, 96, 116, 0, 0, 0, 0,
	0, 91, 0, 87, 275, 90, 89, 100, 101, 103,
	105, 115, 117, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 106, 107, 108, 109, 110, 111, 0, 0,
	112, 113, 97, 98, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 83, 84, 0, 85, 104, 102, 92, 93, 114,
	0, 94, 95, 96, 116, 0, 0, 0, 0, 0,
	91, 0, 87, 0, 90, 89, 100, 101, 103, 105,
	115, 117, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 106, 107, 108, 109, 110, 111, 0, 0, 112,
	113, 97, 98, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 104, 102, 92, 93, 114, 0,
	94, 95, 96, 116, 0, 0, 0, 0, 0, 91,
	487, 87, 0, 90, 89, 100, 101, 103, 105, 115,
	117, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	106, 107, 108, 109, 110, 111, 0, 0, 112, 113,
	97, 98, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 104, 102, 92, 93, 114, 0, 94,
	95, 96, 116, 0, 0, 0, 0, 0, 91, 469,
	87, 0, 90, 89, 100, 101, 103, 105, 115, 117,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 106,
	107, 108, 109, 110, 111, 0, 0, 112, 113, 97,
	98, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	453, 85, 104, 102, 92, 93, 114, 0, 94, 95,
	96, 116, 0, 0, 0, 0, 0, 91, 0, 87,
	0, 90, 89, 100, 101, 103, 105, 115, 117, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 0, 0, 112, 113, 97, 98,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 104, 102, 92, 93, 114, 0, 94, 95, 96,
	116, 0, 448, 0, 0, 0, 91, 0, 87, 0,
	90, 89, 100, 101, 103, 105, 115, 117, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 106, 107, 108,
	109, 110, 111, 0, 0, 112, 113, 97, 98, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	104, 102, 92, 93, 114, 0, 94, 95, 96, 116,
	0, 0, 0, 0, 0, 91, 424, 87, 0, 90,
	89, 100, 101, 103, 105, 115, 117, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 106, 107, 108, 109,
	110, 111, 0, 0, 112, 113, 97, 98, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 104,
	102, 92, 93, 114, 0, 94, 95, 96, 116, 0,
	0, 0, 0, 0, 91, 0, 87, 423, 90, 89,
	100, 101, 103, 105, 115, 117, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 106, 107, 108, 109, 110,
	111, 0, 0, 112, 113, 97, 98, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 104, 102,
	92, 93, 114, 0, 94, 95, 96, 116, 0, 404,
	0, 0, 0, 91, 0, 87, 0, 90, 89, 100,
	101, 103, 105, 115, 117, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 106, 107, 108, 109, 110, 111,
	0, 0, 112, 113, 97, 98, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 104, 102, 92,
	93, 114, 0, 94, 95, 96, 116, 0, 402, 0,
	0, 0, 91, 0, 87, 0, 90, 89, 100, 101,
	103, 105, 115, 117, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 106, 107, 108, 109, 110, 111, 0,
	0, 112, 113, 97, 98, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 104, 102, 92, 93,
	114, 0, 94, 95, 96, 116, 0, 0, 0, 0,
	0, 91, 0, 87, 397, 90, 89, 100, 101, 103,
	105, 115, 117, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 106, 107, 108, 109, 110, 111, 0, 0,
	112, 113, 97, 98, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 104, 102, 92, 93, 114,
	0, 94, 95, 96, 116, 0, 0, 0, 0, 0,
	91, 0, 87, 379, 90, 89, 100, 101, 103, 105,
	115, 117, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 106, 107, 108, 109, 110, 111, 0, 0, 112,
	113, 97, 98, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 85, 104, 102, 92, 93, 114, 0,
	94, 95, 96, 116, 0, 0, 0, 358, 0, 91,
	0, 87, 0, 90, 89, 100, 101, 103, 105, 115,
	117, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	106, 107, 108, 109, 110, 111, 0, 0, 112, 113,
	97, 98, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 104, 102, 92, 93, 114, 0, 94,
	95, 96, 116, 0, 353, 0, 0, 0, 91, 0,
	87, 0, 90, 89, 100, 101, 103, 105, 115, 117,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 106,
	107, 108, 109, 110, 111, 0, 0, 112, 113, 97,
	98, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 104, 102, 92, 93, 114, 0, 94, 95,
	96, 116, 0, 349, 0, 0, 0, 91, 0, 87,
	0, 90, 89, 100, 101, 103, 105, 115, 117, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 0, 0, 112, 113, 97, 98,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 104, 102, 92, 93, 114, 0, 94, 95, 96,
	116, 0, 0, 0, 0, 0, 91, 0, 87, 346,
	90, 89, 100, 101, 103, 105, 115, 117, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 106, 107, 108,
	109, 110, 111, 0, 0, 112, 113, 97, 98, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	104, 102, 92, 93, 114, 0, 94, 95, 96, 116,
	0, 341, 0, 0, 0, 91, 0, 87, 0, 90,
	89, 100, 101, 103, 105, 115, 117, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 106, 107, 108, 109,
	110, 111, 0, 0, 112, 113, 97, 98, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 339, 85, 104,
	102, 92, 93, 114, 0, 94, 95, 96, 116, 0,
	0, 0, 0, 0, 91, 0, 87, 0, 90, 89,
	100, 101, 103, 105, 115, 117, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 106, 107, 108, 109, 110,
	111, 0, 0, 112, 113, 97, 98, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 104, 102,
	92, 93, 114, 0, 94, 95, 96, 116, 0, 0,
	0, 0, 0, 91, 328, 87, 0, 90, 89, 100,
	101, 103, 105, 115, 117, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 106, 107, 108, 109, 110, 111,
	0, 0, 112, 113, 97, 98, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 104, 102, 92,
	93, 114, 0, 94, 95, 96, 116, 0, 0, 0,
	0, 0, 91, 312, 87, 0, 90, 89, 100, 101,
	103, 105, 115, 117, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 106, 107, 108, 109, 110, 111, 0,
	0, 112, 113, 97, 98, 99, 0, 0, 0, 0,
	0, 0, 0, 0, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 85, 104, 102, 92, 93,
	114, 0, 94, 95, 96, 116, 0, 0, 0, 0,
	0, 91, 310, 87, 0, 90, 89, 100, 101, 103,
	105, 115, 117, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 106, 107, 108, 109, 110, 111, 0, 0,
	112, 113, 97, 98, 99, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 104, 102, 92, 93, 114,
	0, 94, 95, 96, 116, 0, 0, 0, 287, 0,
	91, 0, 87, 0, 90, 89, 100, 101, 103, 105,
	115, 117, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 106, 107, 108, 109, 110, 111, 0, 0, 112,
	113, 97, 98, 99, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 274, 85, 104, 102, 92, 93, 114, 0,
	94, 95, 96, 116, 0, 0, 0, 0, 0, 91,
	0, 87, 0, 90, 89, 100, 101, 103, 105, 115,
	117, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	106, 107, 108, 109, 110, 111, 0, 0, 112, 113,
	97, 98, 99, 0, 0, 0, 0, 0, 0, 0,
	0, 88, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 104, 102, 92, 93, 114, 0, 94,
	95, 96, 116, 0, 0, 0, 0, 0, 91, 233,
	87, 0, 90, 89, 100, 101, 103, 105, 115, 117,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 106,
	107, 108, 109, 110, 111, 0, 0, 112, 113, 97,
	98, 99, 0, 0, 0, 0, 0, 0, 0, 0,
	88, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 104, 102, 92, 93, 114, 0, 94, 95,
	96, 116, 0, 221, 0, 0, 0, 91, 0, 87,
	0, 90, 89, 100, 101, 103, 105, 115, 117, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 106, 107,
	108, 109, 110, 111, 0, 0, 112, 113, 97, 98,
	99, 0, 0, 0, 0, 0, 0, 0, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 104, 102, 92, 93, 114, 0, 94, 95, 96,
	116, 0, 211, 0, 0, 0, 91, 0, 87, 0,
	90, 89, 100, 101, 103, 105, 115, 117, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 106, 107, 108,
	109, 110, 111, 0, 0, 112, 113, 97, 98, 99,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	104, 102, 92, 93, 114, 0, 94, 95, 96, 116,
	0, 0, 0, 0, 0, 91, 0, 87, 0, 90,
	89, 100, 101, 103, 105, 115, 117, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 106, 107, 108, 109,
	110, 111, 0, 0, 112, 113, 97, 98, 99, 0,
	0, 0, 0, 0, 0, 0, 0, 88, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 104,
	102, 92, 93, 114, 0, 94, 95, 96, 116, 0,
	0, 0, 0, 0, 91, 0, 87, 0, 245, 89,
	100, 101, 103, 105, 115, 117, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 106, 107, 108, 109, 110,
	111, 0, 0, 112, 113, 97, 98, 99, 0, 0,
	0, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 85, 104, 102,
	92, 93, 114, 0, 94, 95, 96, 116, 0, 0,
	0, 0, 0, 91, 0, 87, 0, 244, 89, 100,
	101, 103, 105, 115, 117, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 113, 97, 98, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 0, 0, 260, 57,
	58, 0, 0, 67, 0, 0, 85, 104, 102, 92,
	93, 114, 0, 94, 95, 96, 116, 49, 59, 60,
	61, 0, 91, 0, 87, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 260, 57, 58, 0,
	0, 67, 0, 0, 0, 141, 70, 52, 0, 47,
	54, 53, 262, 142, 69, 49, 59, 60, 61, 0,
	0, 0, 62, 0, 64, 261, 0, 0, 65, 0,
	72, 0, 0, 0, 41, 256, 39, 0, 0, 63,
	0, 0, 0, 141, 70, 52, 0, 47, 54, 53,
	262, 142, 69, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 64, 261, 0, 0, 65, 0, 72, 0,
	0, 0, 41, 0, 39, 0, 0, 63, 89, 100,
	101, 103, 105, 115, 117, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 112, 113, 97, 98, 99, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 124, 57,
	58, 0, 0, 67, 0, 55, 85, 104, 102, 92,
	93, 114, 0, 94, 95, 96, 116, 49, 59, 60,
	61, 0, 91, 0, 87, 0, 90, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 57, 58, 0,
	0, 67, 0, 0, 0, 0, 70, 52, 0, 47,
	54, 53, 71, 0, 69, 49, 59, 60, 61, 0,
	0, 0, 62, 0, 64, 66, 0, 0, 65, 0,
	119, 0, 122, 0, 41, 0, 39, 0, 0, 63,
	0, 0, 0, 0, 70, 52, 0, 47, 54, 53,
	71, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 64, 66, 0, 0, 65, 0, 72, 0,
	0, 0, 41, 0, 39, 378, 0, 63, 68, 57,
	58, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 49, 59, 60,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 57, 58, 0,
	0, 67, 0, 0, 0, 0, 70, 52, 0, 47,
	54, 53, 71, 0, 69, 49, 59, 60, 61, 0,
	0, 0, 62, 0, 64, 66, 0, 0, 65, 0,
	72, 0, 0, 0, 41, 0, 39, 345, 0, 63,
	0, 0, 0, 0, 70, 52, 0, 47, 54, 53,
	71, 0, 69, 0, 0, 0, 0, 0, 0, 0,
	62, 0, 64, 66, 0, 0, 65, 0, 72, 0,
	288, 0, 41, 0, 39, 0, 0, 63, 68, 57,
	58, 0, 0, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 49, 59, 60,
	61, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	57, 58, 0, 0, 67, 0, 70, 52, 0, 47,
	54, 53, 71, 0, 69, 0, 0, 235, 49, 59,
	60, 61, 62, 0, 64, 66, 0, 0, 65, 0,
	72, 0, 0, 0, 41, 0, 39, 0, 0, 63,
	68, 57, 58, 0, 0, 67, 0, 70, 52, 0,
	47, 54, 53, 71, 0, 69, 0, 0, 0, 49,
	59, 60, 61, 62, 0, 64, 66, 0, 0, 65,
	0, 72, 0, 217, 0, 41, 0, 39, 0, 0,
	63, 68, 57, 58, 0, 0, 67, 0, 70, 52,
	0, 47, 54, 53, 71, 0, 69, 0, 0, 181,
	49, 59, 60, 61, 62, 0, 64, 66, 0, 0,
	65, 0, 72, 0, 0, 0, 41, 0, 39, 0,
	0, 63, 68, 57, 58, 0, 0, 67, 0, 70,
	52, 0, 47, 54, 53, 71, 0, 69, 0, 0,
	0, 49, 59, 60, 61, 62, 0, 64, 66, 0,
	0, 65, 0, 72, 0, 0, 0, 41, 0, 39,
	0, 0, 63, 68, 57, 58, 0, 0, 67, 0,
	70, 52, 0, 47, 54, 53, 71, 0, 69, 0,
	0, 0, 49, 59, 60, 61, 62, 0, 64, 66,
	0, 0, 65, 0, 405, 0, 0, 0, 41, 0,
	39, 0, 0, 63, 68, 57, 58, 0, 0, 67,
	0, 70, 52, 0, 47, 54, 53, 71, 0, 69,
	0, 0, 0, 49, 59, 60, 61, 62, 0, 64,
	66, 0, 0, 65, 0, 356, 0, 0, 0, 41,
	0, 39, 0, 0, 63, 68, 57, 58, 0, 0,
	67, 0, 70, 52, 0, 47, 54, 53, 71, 0,
	69, 0, 0, 0, 49, 59, 60, 61, 62, 0,
	64, 66, 0, 0, 65, 0, 354, 0, 0, 0,
	41, 0, 39, 0, 0, 63, 0, 0, 0, 0,
	0, 0, 0, 70, 52, 0, 47, 54, 53, 71,
	0, 69, 0, 0, 89, 100, 101, 103, 105, 62,
	117, 64, 66, 0, 0, 65, 0, 285, 0, 0,
	0, 41, 0, 39, 0, 0, 63, 0, 112, 113,
	97, 98, 99, 0, 0, 0, 0, 0, 0, 89,
	100, 101, 103, 105, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 104, 102, 92, 93, 114, 0, 94,
	95, 96, 116, 112, 113, 97, 98, 99, 91, 0,
	87, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 104, 102,
	92, 93, 114, 0, 94, 95, 96, 116, 0, 0,
	0, 0, 0, 91, 0, 87, 0, 90,
}

var yyPact = [...]int16{
	-59, -1000, -1000, 645, -59, -1000, -61, -61, -1000, -1000,
	-1000, -1000, -1000, -1000, 3567, 3567, 371, 298, -1000, -1000,
	-1000, -1000, -1000, -1000, 1060, -1000, -1000, -1000, 3567, 3204,
	217, 3567, 215, 3567, 3567, -1000, -1000, -1000, -1000, -57,
	357, 3567, -1000, -1000, -1000, -2, -1000, 95, -1000, 81,
	-1000, -1000, 3567, 75, 74, 370, 122, -1000, -1000, -1000,
	-1000, -1000, 3567, 3567, 3567, 3567, 3567, 134, 56, 71,
	68, 49, -61, -1000, 645, -61, -1000, -1000, 103, 2785,
	2785, 212, 186, 3567, 3567, 3567, 3567, 3526, 3567, 3567,
	365, 3567, 3567, 3567, 3567, 3567, 3567, 3567, 3567, 3567,
	3567, 3567, 3567, 3567, 3567, 3567, 3567, 3567, 3567, 3567,
	3567, 3567, -1000, -1000, 3567, 3567, 3567, 3567, 2716, -59,
	130, 715, 3485, 112, 56, -59, 2647, -61, -1000, -1000,
	2785, -1000, -1000, 3, 3567, -61, -30, -1000, 357, 357,
	6, 357, 211, -20, 2578, 3444, 3567, 357, 2992, 3567,
	3567, 108, -1000, 3567, 3567, -61, -18, -18, -18, -2,
	2923, -2, 2854, 335, 62, 3567, 3044, 276, -61, 357,
	182, 3567, -1000, -59, 3567, -59, 2785, 2785, 2509, 3152,
	991, 3567, 2992, 118, -1000, 137, 52, 123, 123, 118,
	118, 118, 2785, 118, 118, 503, 503, 503, 503, 503,
	503, 2785, 2785, 2785, 2785, 2785, 2785, 123, 3778, 118,
	3813, -59, 181, -61, 3567, -61, -59, 3731, 2440, 3362,
	178, -61, 281, -1000, -56, -61, 358, -51, -51, 357,
	-51, -61, 3, -1000, 922, 3567, 2371, -5, 2302, 853,
	3567, 103, 103, 3567, 356, 349, 47, 308, 106, -1000,
	-1000, 357, -1000, 335, 136, 46, -1000, 2233, -16, 357,
	56, 3082, 2, -47, 348, 177, -23, -1000, -56, -1000,
	2164, 175, 2095, 174, 3567, -1000, 3324, 2026, 8, -1000,
	172, -1000, 1957, 339, 171, -59, 1888, 3690, 3649, 1819,
	183, 277, -61, 281, -1000, -1000, -1000, 237, 645, -25,
	-1000, -1000, -61, 3567, -1000, -27, 337, -1000, 3242, 1750,
	-1000, -1000, -1000, -1000, 3567, 103, 2785, -2, -1000, -1000,
	185, 498, -61, -51, -4, 306, -28, -1000, -1000, -1000,
	-30, 357, -1000, 3567, 98, -1000, 357, -1000, 3567, 3567,
	-1000, -59, -1000, 2992, 1681, -1000, -1000, -1000, -1000, -59,
	-1000, -1000, 169, -59, -59, 1612, -59, 1543, 3608, 243,
	-61, 277, -1000, -1000, 236, 3567, 164, -1000, -1000, -59,
	234, -1000, -1000, -56, 357, -58, 357, 1474, -1000, -1000,
	1405, 203, -51, 357, 185, -29, 335, 185, 16, -1000,
	-34, 784, 3567, -45, -1000, 2785, 163, -1000, 161, -1000,
	160, 158, -59, 156, -59, -59, 1336, 201, -59, 155,
	-1000, -1000, -59, 1267, 233, -1000, -1000, -59, 153, -51,
	152, -61, -51, -1000, -1000, -59, 51, -51, 199, 185,
	-1000, -1000, 198, 185, -37, 357, -1000, 3567, 1198, -61,
	-1000, -1000, -1000, -1000, 151, -1000, 150, 148, -59, -59,
	146, -1000, -1000, -59, -59, -1000, -1000, -1000, 333, 145,
	-1000, -61, -59, 197, -59, 194, 185, -45, 1129, -1000,
	143, -1000, -1000, -1000, 142, 141, 278, -1000, -1000, 357,
	-1000, 357, 133, -59, 131, -59, 193, -1000, -1000, -1000,
	275, 190, -51, -51, -1000, 129, -1000, 127, -59, 188,
	-59, -1000, -1000, 116, -59, 115, -1000, 109, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 0, 452, 11, 326, 448, 447, 446, 445, 441,
	440, 436, 434, 433, 430, 429, 9, 2, 427, 425,
	423, 422, 14, 13, 147, 45, 6, 421, 348, 332,
	420, 419, 417, 414, 407, 404, 303, 18, 400, 5,
	4, 17, 398, 8, 397, 150, 395, 1, 394, 3,
	387, 12, 384, 16, 379, 363, 331, 245, 7, 15,
	304, 43,
}

var yyR1 = [...]int8{
	0, 54, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 10, 10, 9, 9, 8, 8, 8, 8, 4,
	4, 4, 5, 7, 7, 6, 6, 11, 11, 11,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 18, 20, 20, 21, 21, 21, 19, 19, 22,
	23, 13, 14, 14, 15, 15, 15, 15, 16, 16,
	17, 36, 36, 43, 43, 43, 44, 44, 44, 37,
	37, 38, 38, 39, 40, 41, 41, 42, 42, 25,
	25, 24, 24, 24, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
	26, 32, 32, 32, 33, 33, 33, 33, 33, 27,
	27, 28, 28, 29, 29, 34, 34, 34, 34, 34,
	34, 34, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
	35, 35, 35, 35, 35, 35, 35, 35, 30, 30,
	30, 30, 30, 30, 31, 31, 31, 31, 45, 45,
	45, 45, 45, 45, 45, 46, 46, 47, 47, 48,
	48, 48, 49, 50, 50, 50, 51, 52, 52, 52,
	52, 52, 52, 53, 55, 55, 56, 56, 56, 57,
	57, 60, 60, 61, 59, 58, 58,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 3, 0, 1, 1, 1,
	2, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 13, 12, 9, 8, 1,
	1, 1, 4, 3, 3, 3, 3, 5, 7, 5,
	4, 7, 5, 6, 7, 7, 8, 7, 8, 8,
	9, 6, 0, 1, 1, 2, 2, 1, 1, 4,
	3, 7, 0, 1, 1, 1, 2, 2, 4, 4,
	3, 1, 4, 0, 1, 3, 0, 1, 4, 0,
	1, 1, 1, 1, 2, 1, 4, 1, 4, 0,
	1, 1, 4, 4, 1, 1, 1, 5, 3, 1,
	2, 5, 7, 3, 1, 1, 1, 4, 4, 1,
	4, 1, 4, 1, 1, 3, 2, 4, 4, 6,
	3, 3, 4, 4, 1, 1, 1, 1, 1, 1,
	3, 5, 4, 5, 4, 2, 2, 2, 2, 4,
	2, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 2, 2, 3, 3, 3, 3, 8, 9,
	10, 9, 10, 11, 4, 6, 8, 7, 1, 3,
	2, 2, 5, 2, 6, 2, 5, 2, 3, 4,
	8, 3, 3, 0, 1, 3, 3, 6, 5, 5,
	6, 5, 5, 1, 0, 1, 2, 1, 1, 0,
	1, 1, 2, 1, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -54, -1, -55, -2, -56, 78, -60, -61, 86,
	-3, -4, 38, 39, 10, 12, 28, -11, -12, -8,
	-13, -18, -10, -9, -26, -5, -7, -6, 13, 15,
	29, 45, 46, 49, 50, -27, -33, -34, -30, 82,
	-47, 80, -35, -28, -29, -53, -52, 55, -32, 23,
	-31, -48, 53, 57, 56, 11, -24, 5, 6, 24,
	25, 26, 68, 85, 70, 74, 71, 9, 4, 60,
	52, 58, 76, -55, -56, -60, -61, -25, -24, -26,
	-26, 4, 14, 61, 62, 64, 27, 82, 53, 16,
	84, 80, 67, 68, 71, 72, 73, 42, 43, 44,
	17, 18, 66, 19, 65, 20, 32, 33, 34, 35,
	36, 37, 40, 41, 69, 21, 74, 22, -26, 76,
	-36, -26, 78, -4, 4, 76, -26, 76, -28, -29,
	-26, -28, -29, 83, -57, -60, -45, 4, 71, -47,
	58, 51, 59, 82, -26, 82, 80, 80, -26, 80,
	80, -36, 4, 61, 62, 79, -26, -26, -26, -53,
	-26, -53, -26, 80, 4, 80, 80, 80, 76, 82,
	-49, -57, -3, 76, 13, 76, -26, -26, -26, -26,
	-26, 63, -26, -26, 4, -24, -25, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, -26, -26, -26, -26, -26, -26, -26, -26, -26,
	-26, 76, -1, -60, 16, 79, 76, 78, -26, 78,
	-1, 76, -57, -47, -25, 76, 84, -45, -45, 82,
	-45, 76, 83, 81, -26, 63, -26, -45, -26, -26,
	62, -24, -24, -57, 84, 84, -37, -41, -38, -39,
	-42, 4, -40, 80, -24, -25, 81, -26, -45, -47,
	4, 71, 58, -45, 54, -49, -45, 77, -50, -51,
	-26, -1, -26, -1, 63, 83, 63, -26, 8, 81,
	-1, 77, -26, -57, -1, 76, -26, 78, 78, -26,
	77, -57, -20, -21, -19, -23, -22, 48, 47, -58,
	-59, -57, 79, -57, 4, -45, -57, 83, 63, -26,
	81, 81, 81, 81, 79, -24, -26, -53, 4, 4,
	81, 8, 79, -45, -37, -41, 8, 81, 81, 81,
	-45, 82, 81, 79, 4, 77, 83, -58, -59, 63,
	77, 76, 77, -26, -26, 83, 83, 81, 77, 76,
	4, 77, -1, 76, 76, -26, 76, -26, 78, 30,
	-14, -15, -17, -16, 48, 47, -57, -22, -23, 63,
	-3, 83, -57, -25, 83, -46, 4, -26, 83, 83,
	-26, -43, -45, 80, 81, -45, -57, 81, 8, 81,
	-45, -26, 79, -45, -51, -26, -1, 83, -1, 77,
	-1, -1, 76, -1, 76, 76, -26, 4, 76, -57,
	-16, -17, 63, -26, -25, 77, -1, 63, -58, -45,
	-57, 79, -45, 83, 81, 76, -44, -45, -43, 81,
	-39, -40, -43, 81, -45, 83, 81, 79, -26, 76,
	77, 77, 77, 77, -1, 77, -1, -1, 76, 76,
	-1, 77, -1, 63, 63, -1, 77, 77, -57, -1,
	81, 79, 76, -43, 76, -43, 81, -45, -26, 81,
	-49, 77, 77, 77, -1, -1, 77, -1, -1, 4,
	77, -57, -1, 76, -1, 76, -43, 81, 77, 77,
	77, 31, -45, -45, 77, -1, 77, -1, 76, 31,
	76, 77, 77, -1, 76, -1, 77, -1, 77, 77,
}

var yyDef = [...]int16{
	204, -2, 1, -2, 204, 205, 208, 207, 211, 213,
	4, 7, 8, 9, 89, 0, 0, 13, 14, 15,
	16, 17, 18, 19, -2, 29, 30, 31, 0, 0,
	0, 0, 0, 0, 0, 94, 95, 96, 99, 209,
	0, 0, 104, 105, 106, 129, 109, 0, 111, 0,
	113, 114, 0, 0, 0, 0, 0, 124, 125, 126,
	127, 128, 0, 0, 0, 0, 0, 0, 203, 0,
	0, 0, 209, 3, 6, 206, 212, 10, 90, 91,
	11, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 162, 163, 0, 0, 0, 0, 0, -2,
	0, 91, 0, 0, -2, 204, 0, 209, -2, -2,
	0, -2, -2, -2, 89, 210, 0, 178, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 116, 0,
	0, 0, 71, 0, 0, 209, 135, 136, 137, -2,
	0, -2, 0, 79, 0, 89, 0, 0, 209, 0,
	0, 193, 5, 204, 0, 204, 33, 35, 0, 98,
	0, 0, 115, 120, 130, 90, 0, 142, 143, 144,
	145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
	155, 156, 157, 158, 159, 160, 161, 164, 165, 166,
	167, 204, 0, -2, 0, 209, 204, 0, 0, 0,
	0, 209, 52, 188, 209, 209, 0, 180, 181, 0,
	183, 209, 187, 103, 0, 0, 0, 0, 0, 0,
	0, 34, 36, 0, 0, 0, 0, 81, 80, 85,
	82, 83, 87, 79, 90, 0, 121, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 0, 191, 209, 194,
	0, 0, 0, 0, 0, 108, 0, 0, 0, 134,
	0, 40, 0, 0, 0, -2, 0, 0, 0, 0,
	0, 62, 209, 53, 54, 57, 58, 0, 6, 0,
	215, 216, 209, 89, 179, 0, 0, 107, 0, 0,
	110, 112, 117, 118, 0, 32, 92, -2, -2, -2,
	73, 0, 209, 84, 0, 81, 0, 132, 122, 123,
	181, 0, 174, 0, 0, 189, 0, 192, 215, 0,
	12, 204, 39, 97, 0, 201, 202, 133, 37, 204,
	72, 42, 0, 204, -2, 0, -2, 0, 0, 0,
	209, 63, 64, 65, 0, 89, 0, 55, 56, 204,
	0, 101, 214, 209, 0, 209, 0, 0, 198, 199,
	0, 0, 74, 76, 73, 0, 0, 73, 0, 131,
	0, 0, 0, 0, 195, 196, 0, 200, 0, 43,
	0, 0, 204, 0, 204, -2, 0, 0, 204, 0,
	66, 67, 204, 91, 0, 51, 60, 204, 0, 182,
	0, 209, 185, 197, 119, 204, 0, 77, 0, 73,
	86, 88, 0, 73, 0, 0, 175, 0, 0, 209,
	38, 41, 44, 45, 0, 47, 0, 0, 204, 204,
	0, 61, 70, 204, 204, 59, 102, 184, 0, 0,
	75, 209, 204, 0, 204, 0, 73, 182, 0, 177,
	0, 46, 48, 49, 0, 0, 28, 68, 69, 0,
	168, 0, 0, 204, 0, 204, 0, 176, 190, 50,
	27, 0, 186, 78, 169, 0, 171, 0, 204, 0,
	204, 170, 172, 0, 204, 0, 173, 0, 26, 25,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 85, 3, 3, 3, 73, 74, 3,
	80, 81, 71, 67, 79, 68, 84, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 78,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 82, 3, 83, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:144
		{
			yyVAL.compstmt = nil
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:148
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:154
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:163
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:179
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:180
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].opt_exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:207
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:211
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:212
		{
			yyVAL.stmt = yyDollar[1].stmt_try
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:213
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:214
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:215
		{
			yyVAL.stmt = yyDollar[1].stmt_go
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:216
		{
			yyVAL.stmt = yyDollar[1].stmt_defer
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:218
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:225
		{
			callExpr := yyDollar[2].expr_call
			callExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: callExpr}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:232
		{
			anonCallExpr := yyDollar[2].expr_anon_call
			anonCallExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: anonCallExpr}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:241
		{
			callExpr := yyDollar[2].expr_call
			callExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: callExpr}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr_call.Position())
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:248
		{
			anonCallExpr := yyDollar[2].expr_anon_call
			anonCallExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: anonCallExpr}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr_anon_call.Position())
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:257
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:262
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:267
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:272
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:278
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:279
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:280
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:284
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:291
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:295
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:312
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:316
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:333
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:338
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:343
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:353
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:358
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:369
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:374
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:379
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:384
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:389
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:394
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:399
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:404
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:409
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:416
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:423
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:427
		{
			yyVAL.stmt_select_cases = yyDollar[1].stmt_select_cases_helper
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:433
		{
			yyVAL.stmt_select_cases_helper = yyDollar[1].stmt_select_body
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:437
		{
			yyVAL.stmt_select_cases_helper.Cases = append(yyVAL.stmt_select_cases_helper.Cases, yyDollar[2].stmt_select_case)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:441
		{
			if yyVAL.stmt_select_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyVAL.stmt_select_cases_helper.Default = yyDollar[2].stmt_select_default
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:450
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:454
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:460
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:467
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:473
		{
			yyDollar[5].stmt_switch_cases.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = yyDollar[5].stmt_switch_cases
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:481
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:485
		{
			yyVAL.stmt_switch_cases = yyDollar[1].stmt_switch_cases_helper
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:491
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:495
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:499
		{
			yyDollar[1].stmt_switch_cases_helper.Cases = append(yyDollar[1].stmt_switch_cases_helper.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases_helper = yyDollar[1].stmt_switch_cases_helper
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:504
		{
			if yyDollar[1].stmt_switch_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyDollar[1].stmt_switch_cases_helper.Default = yyDollar[2].stmt_switch_default
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:514
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:519
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].opt_exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:526
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:532
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:536
		{
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:541
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:545
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:549
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:553
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:557
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:561
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:569
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:572
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:575
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:576
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:580
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:586
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:592
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:596
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:602
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:606
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:611
		{
			yyVAL.opt_exprs = nil
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:614
		{
			yyVAL.opt_exprs = yyDollar[1].exprs
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:618
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:622
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:629
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:637
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:638
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:639
		{
			yyVAL.expr = yyDollar[1].expr_unary
		}
	case 97:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:641
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:646
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:650
		{
			yyVAL.expr = yyDollar[1].expr_func
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:652
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:657
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].opt_exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 102:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:662
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].opt_exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:667
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:671
		{
			yyVAL.expr = yyDollar[1].expr_binary
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:672
		{
			yyVAL.expr = yyDollar[1].expr_call
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:673
		{
			yyVAL.expr = yyDollar[1].expr_anon_call
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:675
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:680
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:685
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:690
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:694
		{
			yyVAL.expr = yyDollar[1].expr_dbg
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:696
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:705
		{
			yyVAL.expr = yyDollar[1].expr_make
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:706
		{
			yyVAL.expr = yyDollar[1].expr_map
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:708
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:713
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:718
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:723
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:728
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:733
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:740
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:745
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 123:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:750
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:757
		{
			yyVAL.expr_literals = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:762
		{
			yyVAL.expr_literals = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:767
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:772
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:777
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:783
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:785
		{
			yyVAL.expr_member_or_ident = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member_or_ident.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:792
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr_call.SetPosition(yyDollar[1].tok.Position())
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:797
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].opt_exprs}
			yyVAL.expr_call.SetPosition(yyDollar[1].tok.Position())
		}
	case 133:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:804
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr_anon_call.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:809
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].opt_exprs}
			yyVAL.expr_anon_call.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:816
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:821
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:826
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:831
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:836
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:841
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:846
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:853
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:858
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:863
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:868
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:873
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:878
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:883
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:888
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:893
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:898
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:903
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:908
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:913
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:918
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:923
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:928
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:933
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:938
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:943
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:948
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:953
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:958
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:963
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:968
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:973
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:978
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 168:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:985
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 169:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:990
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 170:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:995
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 171:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:1001
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 172:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:1006
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 173:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:1011
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1019
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1024
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 176:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:1029
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 177:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:1034
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 178:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1041
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1045
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1054
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1063
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 182:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1073
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1077
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1086
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1092
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1096
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1106
		{
			yyVAL.slice_count = 1
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1110
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 189:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1116
		{
			yyDollar[3].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr_map = yyDollar[3].expr_map_content
			yyVAL.expr_map.SetPosition(yyDollar[1].tok.Position())
		}
	case 190:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:1122
		{
			yyDollar[7].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr_map = yyDollar[7].expr_map_content
			yyVAL.expr_map.SetPosition(yyDollar[1].tok.Position())
		}
	case 191:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1128
		{
			yyVAL.expr_map = yyDollar[2].expr_map_content
			yyVAL.expr_map.SetPosition(yyDollar[2].expr_map_content.Position())
		}
	case 192:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1135
		{
			yyVAL.expr_map_content = yyDollar[2].expr_map_content_helper
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1141
		{
			yyVAL.expr_map_content_helper = &ast.MapExpr{}
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1145
		{
			yyVAL.expr_map_content_helper = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr_map_key_value[0]}, Values: []ast.Expr{yyDollar[1].expr_map_key_value[1]}}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1149
		{
			if yyDollar[1].expr_map_content_helper.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map_content_helper.Keys = append(yyVAL.expr_map_content_helper.Keys, yyDollar[3].expr_map_key_value[0])
			yyVAL.expr_map_content_helper.Values = append(yyVAL.expr_map_content_helper.Values, yyDollar[3].expr_map_key_value[1])
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1159
		{
			yyVAL.expr_map_key_value = []ast.Expr{yyDollar[1].expr, yyDollar[3].expr}
		}
	case 197:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1165
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 198:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1169
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 199:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1173
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 200:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1177
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 201:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1181
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 202:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1185
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1191
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
