// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:46
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             ast.Stmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	exprs                         []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"','",
	"'!'",
	"'.'",
	"'['",
	"']'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1179

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	61, 89,
	62, 89,
	80, 6,
	81, 89,
	-2, 2,
	-1, 24,
	81, 90,
	-2, 26,
	-1, 29,
	61, 89,
	62, 89,
	-2, 70,
	-1, 62,
	61, 89,
	62, 89,
	81, 89,
	-2, 6,
	-1, 115,
	16, 71,
	81, 71,
	-2, 190,
	-1, 123,
	1, 98,
	8, 98,
	47, 98,
	48, 98,
	61, 98,
	62, 98,
	63, 98,
	76, 98,
	77, 98,
	79, 98,
	80, 98,
	81, 98,
	85, 98,
	86, 98,
	-2, 93,
	-1, 125,
	1, 100,
	8, 100,
	47, 100,
	48, 100,
	61, 100,
	62, 100,
	63, 100,
	76, 100,
	77, 100,
	79, 100,
	80, 100,
	81, 100,
	85, 100,
	86, 100,
	-2, 93,
	-1, 129,
	4, 179,
	51, 179,
	58, 179,
	59, 179,
	-2, 115,
	-1, 241,
	79, 170,
	83, 170,
	-2, 190,
	-1, 285,
	63, 6,
	-2, 89,
	-1, 297,
	77, 204,
	85, 204,
	-2, 196,
	-1, 318,
	77, 204,
	-2, 196,
	-1, 325,
	1, 92,
	8, 92,
	47, 92,
	48, 92,
	61, 92,
	62, 92,
	63, 92,
	77, 92,
	79, 92,
	80, 92,
	81, 92,
	85, 92,
	86, 92,
	-2, 93,
	-1, 330,
	1, 19,
	47, 19,
	48, 19,
	63, 19,
	77, 19,
	80, 19,
	86, 19,
	-2, 146,
	-1, 332,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	77, 21,
	80, 21,
	86, 21,
	-2, 148,
	-1, 334,
	1, 23,
	47, 23,
	48, 23,
	63, 23,
	77, 23,
	80, 23,
	86, 23,
	-2, 146,
	-1, 336,
	1, 25,
	47, 25,
	48, 25,
	63, 25,
	77, 25,
	80, 25,
	86, 25,
	-2, 148,
	-1, 375,
	77, 202,
	85, 202,
	-2, 197,
	-1, 392,
	1, 18,
	47, 18,
	48, 18,
	63, 18,
	77, 18,
	80, 18,
	86, 18,
	-2, 145,
	-1, 393,
	1, 20,
	47, 20,
	48, 20,
	63, 20,
	77, 20,
	80, 20,
	86, 20,
	-2, 147,
	-1, 394,
	1, 22,
	47, 22,
	48, 22,
	63, 22,
	77, 22,
	80, 22,
	86, 22,
	-2, 145,
	-1, 395,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	77, 24,
	80, 24,
	86, 24,
	-2, 147,
}

const yyPrivate = 57344

const yyLast = 4324

var yyAct = [...]int16{
	66, 10, 298, 221, 24, 248, 218, 2, 355, 356,
	282, 283, 216, 33, 215, 9, 67, 358, 357, 285,
	284, 367, 318, 71, 73, 6, 119, 9, 60, 109,
	112, 9, 117, 129, 9, 376, 120, 121, 122, 124,
	126, 431, 8, 65, 297, 226, 9, 433, 140, 9,
	64, 232, 123, 125, 252, 139, 9, 149, 9, 226,
	226, 378, 316, 24, 157, 312, 146, 313, 133, 226,
	226, 146, 229, 203, 310, 165, 166, 167, 168, 147,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	133, 156, 190, 191, 192, 193, 64, 195, 197, 198,
	438, 458, 464, 459, 206, 137, 226, 226, 200, 225,
	211, 84, 136, 138, 208, 422, 226, 311, 308, 226,
	202, 226, 226, 384, 194, 134, 293, 207, 335, 395,
	455, 394, 369, 235, 237, 393, 392, 137, 139, 249,
	381, 250, 251, 108, 136, 138, 148, 105, 156, 224,
	257, 108, 78, 106, 373, 333, 256, 134, 258, 338,
	234, 291, 331, 141, 64, 426, 128, 99, 100, 84,
	139, 154, 155, 253, 254, 99, 100, 84, 85, 86,
	259, 260, 261, 262, 133, 203, 222, 268, 416, 163,
	161, 156, 130, 271, 151, 150, 275, 269, 278, 336,
	145, 156, 273, 288, 144, 105, 81, 82, 83, 103,
	78, 106, 143, 105, 142, 329, 514, 7, 78, 106,
	513, 511, 508, 506, 63, 296, 334, 295, 156, 505,
	126, 137, 498, 332, 64, 156, 496, 249, 136, 138,
	127, 317, 315, 125, 493, 492, 324, 133, 368, 481,
	304, 134, 478, 264, 337, 475, 474, 159, 339, 325,
	473, 466, 133, 131, 139, 210, 465, 349, 351, 452,
	446, 323, 346, 131, 444, 443, 24, 363, 364, 442,
	441, 437, 361, 360, 503, 414, 330, 46, 156, 406,
	398, 387, 345, 246, 137, 132, 342, 328, 326, 279,
	270, 136, 138, 255, 383, 509, 504, 500, 385, 137,
	389, 486, 245, 390, 134, 484, 136, 138, 494, 377,
	160, 305, 370, 156, 265, 391, 156, 139, 201, 134,
	462, 460, 64, 450, 135, 418, 131, 231, 158, 118,
	116, 397, 139, 405, 411, 399, 400, 362, 402, 412,
	272, 111, 353, 410, 409, 69, 280, 358, 357, 11,
	415, 407, 285, 284, 131, 374, 424, 292, 5, 423,
	428, 3, 300, 62, 131, 436, 61, 413, 303, 439,
	488, 220, 421, 227, 228, 425, 230, 380, 344, 114,
	314, 301, 238, 243, 244, 290, 247, 289, 169, 445,
	153, 447, 448, 68, 1, 451, 49, 379, 64, 453,
	419, 152, 219, 217, 456, 281, 457, 223, 21, 354,
	20, 131, 135, 135, 18, 135, 469, 131, 359, 17,
	19, 240, 135, 135, 461, 135, 26, 27, 463, 25,
	372, 4, 299, 131, 255, 0, 0, 476, 477, 131,
	0, 0, 479, 480, 0, 0, 0, 0, 483, 0,
	485, 0, 249, 491, 0, 388, 299, 490, 0, 294,
	0, 0, 0, 0, 0, 0, 487, 0, 302, 0,
	0, 0, 497, 502, 499, 0, 0, 0, 227, 309,
	0, 0, 201, 0, 0, 0, 0, 0, 507, 131,
	0, 408, 510, 0, 0, 0, 0, 512, 135, 0,
	0, 131, 0, 0, 0, 375, 0, 135, 0, 0,
	223, 0, 0, 0, 0, 0, 430, 240, 135, 0,
	0, 0, 0, 299, 0, 0, 375, 0, 0, 0,
	0, 371, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 382,
	0, 0, 0, 0, 0, 386, 201, 0, 201, 0,
	0, 0, 131, 0, 0, 0, 0, 0, 467, 135,
	135, 0, 0, 0, 0, 471, 108, 87, 88, 90,
	92, 0, 104, 0, 0, 299, 0, 131, 135, 0,
	0, 0, 0, 0, 135, 0, 482, 0, 0, 0,
	99, 100, 84, 85, 86, 0, 0, 0, 420, 0,
	0, 0, 201, 427, 0, 0, 0, 429, 0, 432,
	0, 0, 0, 0, 0, 91, 89, 79, 80, 101,
	0, 81, 82, 83, 103, 108, 0, 0, 105, 131,
	0, 0, 0, 78, 106, 0, 131, 135, 135, 0,
	0, 135, 135, 0, 0, 0, 135, 0, 135, 99,
	100, 84, 85, 86, 0, 0, 0, 131, 0, 0,
	0, 0, 468, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 79, 80, 101, 0,
	81, 82, 83, 103, 0, 0, 0, 105, 299, 0,
	135, 0, 78, 106, 135, 0, 0, 0, 0, 0,
	0, 135, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 495, 0, 0, 0, 0, 0, 501, 48, 34,
	40, 0, 0, 44, 14, 59, 15, 28, 0, 29,
	0, 0, 135, 0, 0, 0, 0, 52, 41, 42,
	43, 0, 16, 30, 0, 0, 0, 0, 0, 0,
	135, 0, 12, 13, 0, 0, 135, 0, 0, 31,
	32, 0, 0, 22, 23, 0, 53, 56, 0, 50,
	58, 57, 54, 0, 51, 0, 0, 0, 0, 0,
	0, 0, 35, 0, 37, 39, 0, 0, 38, 0,
	55, 0, 47, 0, 0, 0, 36, 0, 45, 108,
	87, 88, 90, 92, 102, 104, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 93, 94, 95, 96, 97,
	98, 0, 0, 99, 100, 84, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 287, 76, 91, 89,
	79, 80, 101, 0, 81, 82, 83, 103, 0, 0,
	0, 105, 0, 0, 0, 0, 78, 106, 286, 108,
	87, 88, 90, 92, 102, 104, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 93, 94, 95, 96, 97,
	98, 0, 0, 99, 100, 84, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 267, 76, 91, 89,
	79, 80, 101, 0, 81, 82, 83, 103, 0, 0,
	0, 105, 0, 0, 0, 0, 78, 106, 266, 108,
	87, 88, 90, 92, 102, 104, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 93, 94, 95, 96, 97,
	98, 0, 0, 99, 100, 84, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 74, 75, 0, 76, 91, 89,
	79, 80, 101, 0, 81, 82, 83, 103, 0, 204,
	0, 105, 0, 0, 0, 0, 78, 106, 108, 87,
	88, 90, 92, 102, 104, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 93, 94, 95, 96, 97, 98,
	0, 0, 99, 100, 84, 85, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 91, 89, 79,
	80, 101, 0, 81, 82, 83, 103, 0, 0, 0,
	105, 434, 0, 435, 0, 78, 106, 108, 87, 88,
	90, 92, 102, 104, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 93, 94, 95, 96, 97, 98, 0,
	0, 99, 100, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 91, 89, 79, 80,
	101, 0, 81, 82, 83, 103, 0, 0, 0, 105,
	0, 0, 0, 0, 78, 106, 417, 108, 87, 88,
	90, 92, 102, 104, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 93, 94, 95, 96, 97, 98, 0,
	0, 99, 100, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 91, 89, 79, 80,
	101, 0, 81, 82, 83, 103, 0, 0, 0, 105,
	0, 0, 0, 0, 78, 106, 396, 108, 87, 88,
	90, 92, 102, 104, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 93, 94, 95, 96, 97, 98, 0,
	0, 99, 100, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 91, 89, 79, 80,
	101, 0, 81, 82, 83, 103, 0, 0, 0, 105,
	0, 0, 0, 0, 78, 106, 366, 108, 87, 88,
	90, 92, 102, 104, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 93, 94, 95, 96, 97, 98, 0,
	0, 99, 100, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 91, 89, 79, 80,
	101, 0, 81, 82, 83, 103, 0, 0, 0, 105,
	0, 0, 0, 0, 78, 106, 341, 108, 87, 88,
	90, 92, 102, 104, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 93, 94, 95, 96, 97, 98, 0,
	0, 99, 100, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 91, 89, 79, 80,
	101, 0, 81, 82, 83, 103, 0, 0, 0, 105,
	321, 0, 322, 0, 78, 106, 108, 87, 88, 90,
	92, 102, 104, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 93, 94, 95, 96, 97, 98, 0, 0,
	99, 100, 84, 85, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 74, 75, 0, 76, 91, 89, 79, 80, 101,
	0, 81, 82, 83, 103, 0, 0, 0, 105, 0,
	0, 0, 0, 78, 106, 108, 87, 88, 90, 92,
	102, 104, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 93, 94, 95, 96, 97, 98, 0, 0, 99,
	100, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 0, 0, 0, 105, 489, 0,
	0, 0, 78, 106, 108, 87, 88, 90, 92, 102,
	104, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	93, 94, 95, 96, 97, 98, 0, 0, 99, 100,
	84, 85, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 472, 76, 91, 89, 79, 80, 101, 0, 81,
	82, 83, 103, 0, 0, 0, 105, 0, 0, 0,
	0, 78, 106, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 0, 0, 105, 470, 0, 0, 0,
	78, 106, 108, 87, 88, 90, 92, 102, 104, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 93, 94,
	95, 96, 97, 98, 0, 0, 99, 100, 84, 85,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 454,
	76, 91, 89, 79, 80, 101, 0, 81, 82, 83,
	103, 0, 0, 0, 105, 0, 0, 0, 0, 78,
	106, 108, 87, 88, 90, 92, 102, 104, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 93, 94, 95,
	96, 97, 98, 0, 0, 99, 100, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	91, 89, 79, 80, 101, 0, 81, 82, 83, 103,
	0, 449, 0, 105, 0, 0, 0, 0, 78, 106,
	108, 87, 88, 90, 92, 102, 104, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 93, 94, 95, 96,
	97, 98, 0, 0, 99, 100, 84, 85, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 91,
	89, 79, 80, 101, 0, 81, 82, 83, 103, 0,
	0, 0, 105, 440, 0, 0, 0, 78, 106, 108,
	87, 88, 90, 92, 102, 104, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 93, 94, 95, 96, 97,
	98, 0, 0, 99, 100, 84, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 91, 89,
	79, 80, 101, 0, 81, 82, 83, 103, 0, 403,
	0, 105, 0, 0, 0, 0, 78, 106, 108, 87,
	88, 90, 92, 102, 104, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 93, 94, 95, 96, 97, 98,
	0, 0, 99, 100, 84, 85, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 91, 89, 79,
	80, 101, 0, 81, 82, 83, 103, 0, 401, 0,
	105, 0, 0, 0, 0, 78, 106, 108, 87, 88,
	90, 92, 102, 104, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 93, 94, 95, 96, 97, 98, 0,
	0, 99, 100, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 91, 89, 79, 80,
	101, 0, 81, 82, 83, 103, 0, 0, 0, 105,
	0, 352, 0, 0, 78, 106, 108, 87, 88, 90,
	92, 102, 104, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 93, 94, 95, 96, 97, 98, 0, 0,
	99, 100, 84, 85, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 91, 89, 79, 80, 101,
	0, 81, 82, 83, 103, 0, 347, 0, 105, 0,
	0, 0, 0, 78, 106, 108, 87, 88, 90, 92,
	102, 104, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 93, 94, 95, 96, 97, 98, 0, 0, 99,
	100, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 0, 343, 0, 105, 0, 0,
	0, 0, 78, 106, 108, 87, 88, 90, 92, 102,
	104, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	93, 94, 95, 96, 97, 98, 0, 0, 99, 100,
	84, 85, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 91, 89, 79, 80, 101, 0, 81,
	82, 83, 103, 0, 327, 0, 105, 0, 0, 0,
	0, 78, 106, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 0, 0, 105, 320, 0, 0, 0,
	78, 106, 108, 87, 88, 90, 92, 102, 104, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 93, 94,
	95, 96, 97, 98, 0, 0, 99, 100, 84, 85,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 319,
	76, 91, 89, 79, 80, 101, 0, 81, 82, 83,
	103, 0, 0, 0, 105, 0, 0, 0, 0, 78,
	106, 108, 87, 88, 90, 92, 102, 104, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 93, 94, 95,
	96, 97, 98, 0, 0, 99, 100, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	91, 89, 79, 80, 101, 0, 81, 82, 83, 103,
	0, 0, 0, 105, 307, 0, 0, 0, 78, 106,
	108, 87, 88, 90, 92, 102, 104, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 93, 94, 95, 96,
	97, 98, 0, 0, 99, 100, 84, 85, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 91,
	89, 79, 80, 101, 0, 81, 82, 83, 103, 0,
	0, 0, 105, 306, 0, 0, 0, 78, 106, 108,
	87, 88, 90, 92, 102, 104, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 93, 94, 95, 96, 97,
	98, 0, 0, 99, 100, 84, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 91, 89,
	79, 80, 101, 0, 81, 82, 83, 103, 0, 0,
	0, 105, 0, 276, 0, 0, 78, 106, 108, 87,
	88, 90, 92, 102, 104, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 93, 94, 95, 96, 97, 98,
	0, 0, 99, 100, 84, 85, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 263, 76, 91, 89, 79,
	80, 101, 0, 81, 82, 83, 103, 0, 0, 0,
	105, 0, 0, 0, 0, 78, 106, 108, 87, 88,
	90, 92, 102, 104, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 93, 94, 95, 96, 97, 98, 0,
	0, 99, 100, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 91, 89, 79, 80,
	101, 0, 81, 82, 83, 103, 0, 0, 0, 105,
	233, 0, 0, 0, 78, 106, 108, 87, 88, 90,
	92, 102, 104, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 93, 94, 95, 96, 97, 98, 0, 0,
	99, 100, 84, 85, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 91, 89, 79, 80, 101,
	0, 81, 82, 83, 103, 0, 209, 0, 105, 0,
	0, 0, 0, 78, 106, 108, 87, 88, 90, 92,
	102, 104, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 93, 94, 95, 96, 97, 98, 0, 0, 99,
	100, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 0, 199, 0, 105, 0, 0,
	0, 0, 78, 106, 108, 87, 88, 90, 92, 102,
	104, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	93, 94, 95, 96, 97, 98, 0, 0, 99, 100,
	84, 85, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 91, 89, 79, 80, 101, 0, 81,
	82, 83, 103, 0, 0, 0, 105, 0, 0, 0,
	0, 78, 106, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 0, 0, 105, 0, 0, 0, 0,
	214, 106, 108, 87, 88, 90, 92, 102, 104, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 93, 94,
	95, 96, 97, 98, 0, 0, 99, 100, 84, 85,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 91, 89, 79, 80, 101, 0, 81, 82, 83,
	103, 0, 0, 0, 105, 0, 0, 0, 0, 213,
	106, 108, 87, 88, 90, 92, 102, 104, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 93, 94, 95,
	96, 97, 98, 0, 0, 99, 100, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	91, 89, 79, 80, 101, 0, 81, 82, 83, 103,
	0, 0, 0, 164, 0, 0, 0, 0, 78, 106,
	108, 87, 88, 90, 92, 102, 104, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 93, 94, 95, 96,
	97, 98, 0, 0, 99, 100, 84, 85, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 91,
	89, 79, 80, 101, 0, 81, 82, 83, 103, 0,
	0, 0, 162, 0, 0, 0, 0, 78, 106, 108,
	87, 88, 90, 92, 102, 104, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 100, 84, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 91, 89,
	79, 80, 101, 0, 81, 82, 83, 103, 0, 0,
	0, 105, 0, 0, 0, 0, 78, 106, 108, 87,
	88, 90, 92, 102, 104, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 100, 84, 85, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 91, 89, 79,
	80, 101, 0, 81, 82, 83, 103, 241, 34, 40,
	105, 0, 44, 0, 0, 78, 106, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 41, 42, 43,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 48, 34, 40, 0, 0,
	44, 0, 0, 0, 137, 53, 56, 0, 50, 58,
	57, 242, 138, 51, 52, 41, 42, 43, 0, 0,
	0, 35, 0, 37, 239, 0, 0, 38, 0, 55,
	0, 47, 236, 0, 0, 36, 0, 45, 0, 0,
	0, 0, 0, 53, 56, 0, 50, 58, 57, 54,
	0, 51, 0, 0, 0, 0, 0, 0, 0, 35,
	0, 37, 39, 0, 0, 38, 0, 55, 0, 47,
	0, 0, 0, 36, 0, 45, 365, 48, 34, 40,
	0, 0, 44, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 52, 41, 42, 43,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 241, 34, 40, 0, 0,
	44, 0, 0, 0, 0, 53, 56, 0, 50, 58,
	57, 54, 0, 51, 52, 41, 42, 43, 0, 0,
	0, 35, 0, 37, 39, 0, 0, 38, 0, 55,
	0, 47, 0, 0, 0, 36, 0, 45, 340, 0,
	0, 0, 137, 53, 56, 0, 50, 58, 57, 242,
	138, 51, 0, 0, 0, 0, 0, 0, 0, 35,
	0, 37, 239, 0, 0, 38, 0, 55, 0, 47,
	0, 0, 0, 36, 0, 45, 115, 34, 40, 0,
	0, 44, 0, 59, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 52, 41, 42, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 48, 34, 40, 0, 0, 44,
	0, 0, 0, 0, 53, 56, 0, 50, 58, 57,
	54, 0, 51, 52, 41, 42, 43, 0, 0, 0,
	35, 0, 37, 39, 0, 0, 38, 0, 110, 0,
	47, 0, 113, 0, 36, 0, 45, 0, 0, 0,
	0, 0, 53, 56, 0, 50, 58, 57, 54, 0,
	51, 0, 0, 0, 0, 0, 0, 0, 35, 0,
	37, 39, 0, 0, 38, 0, 55, 0, 47, 0,
	277, 0, 36, 0, 45, 48, 34, 40, 0, 0,
	44, 0, 0, 0, 48, 34, 40, 0, 0, 44,
	0, 0, 0, 0, 52, 41, 42, 43, 0, 0,
	0, 0, 0, 52, 41, 42, 43, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 56, 0, 50, 58, 57, 54,
	0, 51, 53, 56, 212, 50, 58, 57, 54, 35,
	51, 37, 39, 0, 0, 38, 0, 55, 35, 47,
	37, 39, 0, 36, 38, 45, 55, 0, 47, 0,
	205, 0, 36, 0, 45, 48, 34, 40, 0, 0,
	44, 0, 0, 0, 48, 34, 40, 0, 0, 44,
	0, 0, 0, 0, 52, 41, 42, 43, 0, 0,
	0, 0, 0, 52, 41, 42, 43, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 56, 0, 50, 58, 57, 54,
	0, 51, 53, 56, 196, 50, 58, 57, 54, 35,
	51, 37, 39, 0, 0, 38, 0, 55, 35, 47,
	37, 39, 0, 36, 38, 45, 55, 0, 47, 0,
	0, 0, 36, 0, 45, 48, 34, 40, 0, 0,
	44, 0, 0, 0, 48, 34, 40, 0, 0, 44,
	0, 0, 0, 0, 52, 41, 42, 43, 0, 0,
	0, 0, 0, 52, 41, 42, 43, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 56, 0, 50, 58, 57, 54,
	0, 51, 53, 56, 0, 50, 58, 57, 54, 35,
	51, 37, 39, 0, 0, 38, 0, 404, 35, 47,
	37, 39, 0, 36, 38, 45, 350, 0, 47, 0,
	0, 0, 36, 0, 45, 48, 34, 40, 0, 0,
	44, 0, 0, 0, 48, 34, 40, 0, 0, 44,
	0, 0, 0, 0, 52, 41, 42, 43, 0, 0,
	0, 0, 0, 52, 41, 42, 43, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 56, 0, 50, 58, 57, 54,
	0, 51, 53, 56, 0, 50, 58, 57, 54, 35,
	51, 37, 39, 0, 0, 38, 0, 348, 35, 47,
	37, 39, 0, 36, 38, 45, 274, 0, 47, 0,
	0, 0, 36, 0, 45, 72, 34, 40, 0, 0,
	44, 0, 0, 0, 70, 34, 40, 0, 0, 44,
	0, 0, 0, 0, 52, 41, 42, 43, 0, 0,
	0, 0, 0, 52, 41, 42, 43, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 53, 56, 0, 50, 58, 57, 54,
	0, 51, 53, 56, 0, 50, 58, 57, 54, 35,
	51, 37, 39, 0, 0, 38, 0, 55, 35, 47,
	37, 39, 0, 36, 38, 45, 55, 0, 47, 0,
	0, 0, 36, 0, 45, 108, 87, 88, 90, 92,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 0, 0, 0, 105, 0, 0,
	0, 0, 78, 106,
}

var yyPact = [...]int16{
	-55, -1000, -1000, 744, -55, -1000, -71, -71, -1000, -1000,
	-1000, -1000, -1000, -1000, 3900, 3900, 409, 351, -1000, -1000,
	-1000, -1000, 4170, 4161, 1440, -1000, -1000, -1000, 3900, 3682,
	274, 3900, 273, -58, -1000, 3900, 3900, 3900, 3900, 3900,
	-1000, -1000, -1000, -1000, 172, -52, 190, 3900, 95, -1000,
	146, 144, 136, 132, -5, -71, 3900, 127, 126, 406,
	120, -1000, 744, -71, -1000, 20, 2958, 2958, 272, 254,
	122, 3234, 121, 3165, 3900, 3900, 3900, 3900, 404, 3900,
	3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900,
	3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, 3900, -1000,
	-1000, 3900, 3900, 3900, 3900, 3900, 3891, 3900, 3900, 2889,
	-55, 114, 953, 3810, 57, 95, -55, 2820, -71, 3801,
	79, 79, 79, -58, 3096, -58, 3027, 387, 118, -29,
	3900, -71, 43, -1000, 190, 190, -12, 190, 271, -34,
	2751, 3900, 3900, 3443, 190, 268, -71, 190, 3900, 3303,
	3900, 3900, -8, -1000, 3900, 3900, -71, -1000, -55, 3900,
	-55, 3900, 3900, 3900, 3900, 2958, 2958, 2682, 3372, -1000,
	145, 145, 137, 137, 137, 2958, 137, 137, 639, 639,
	639, 639, 639, 639, 2958, 2958, 2958, 2958, 2958, 2958,
	145, 580, 137, 4239, 255, 883, 3900, 3303, 137, -55,
	233, -71, 3900, -71, -55, 4080, 2613, 3720, 232, -71,
	325, 813, 3900, 403, 401, 92, 369, 55, -1000, -1000,
	190, -1000, 387, -1000, -37, -71, 397, -13, -13, 190,
	-13, -71, -29, -1000, 252, 2544, -1000, 2475, 49, 3601,
	190, 95, -10, 48, -14, 396, 3900, -23, -59, 2406,
	2337, 1371, 3900, 20, 20, 3900, 231, 2268, 230, 217,
	164, 157, 130, 3900, 90, -1000, -1000, 3563, 1301, 229,
	-1000, 2199, 394, 225, -55, 2130, 4071, 3990, 2061, 332,
	320, -28, -1000, -1000, 294, 744, -1000, 3481, 1231, -1000,
	-1000, 64, 253, -71, -13, 85, 367, -71, -50, -71,
	3900, -1000, -24, 393, 71, -1000, -1000, -1000, -1000, 43,
	190, -1000, -1000, 3900, 52, -59, 190, 224, -71, 3900,
	-1000, -1000, 3900, 20, 2958, -58, -1000, -55, -1000, 67,
	-1000, 66, -1000, 62, -1000, 60, -1000, 3303, -1000, 1161,
	-1000, -1000, -1000, -55, -1000, -1000, 223, -55, -55, 1992,
	-55, 1923, 3981, 295, -30, -1000, -1000, 291, 3900, 218,
	-1000, -1000, -55, 135, 1091, -1000, -1000, 269, -13, 190,
	64, 46, 387, 64, 96, -71, -1000, -37, 190, -40,
	190, -1000, -38, 1022, 3900, 214, 34, -1000, 3900, 2958,
	1854, 213, -1000, -1000, -1000, -1000, -1000, 212, -1000, 208,
	207, -55, 203, -55, -55, 1785, 267, -55, 202, -1000,
	-1000, -55, 1716, 77, -1000, -1000, -55, -1000, -55, 32,
	-13, 265, 64, -1000, -1000, 264, 64, 33, 199, -13,
	194, -71, -13, 190, -1000, 3900, 1647, -1000, -71, 1578,
	-1000, -1000, -1000, -1000, -1000, 193, -1000, 189, 188, -55,
	-55, 185, -1000, -1000, -55, -55, -1000, 182, -1000, -71,
	-55, 249, -55, 245, 64, -1000, -1000, 386, 34, 1509,
	-1000, 3900, 3900, -1000, -1000, -1000, 178, 177, 297, -1000,
	-1000, -1000, 190, 169, -55, 165, -55, 241, 190, -1000,
	-59, 2958, -1000, 263, 240, -13, -1000, 162, -1000, 156,
	-55, -13, 155, 239, -55, -1000, -1000, 154, -1000, -55,
	153, -1000, 149, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 7, 451, 1, 369, 449, 447, 446, 440, 439,
	434, 430, 429, 9, 8, 428, 425, 11, 10, 28,
	0, 361, 14, 423, 6, 3, 12, 422, 21, 420,
	258, 417, 297, 5, 416, 13, 414, 381, 378, 156,
	2, 227, 42,
}

var yyR1 = [...]int8{
	0, 36, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 8, 8, 8,
	8, 4, 4, 4, 5, 7, 7, 6, 6, 9,
	9, 9, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 15, 16, 16, 16, 16, 16, 17,
	18, 11, 12, 12, 12, 12, 12, 13, 13, 14,
	21, 21, 21, 28, 28, 28, 29, 29, 29, 22,
	22, 23, 23, 24, 25, 26, 26, 27, 27, 19,
	19, 19, 19, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	30, 30, 30, 30, 30, 30, 30, 31, 31, 32,
	32, 33, 33, 33, 34, 34, 34, 34, 34, 34,
	35, 37, 37, 38, 38, 38, 39, 39, 41, 41,
	42, 40, 40, 40, 40,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 3, 0, 1, 1, 1,
	2, 2, 5, 1, 1, 1, 1, 1, 6, 5,
	6, 5, 6, 5, 6, 5, 1, 13, 12, 9,
	8, 1, 1, 1, 4, 3, 3, 3, 3, 5,
	7, 5, 4, 7, 5, 6, 7, 7, 8, 7,
	8, 8, 9, 6, 0, 1, 1, 2, 2, 4,
	3, 7, 0, 1, 1, 2, 2, 4, 4, 3,
	0, 1, 4, 0, 1, 3, 0, 1, 4, 0,
	1, 1, 1, 1, 2, 1, 4, 1, 4, 0,
	1, 4, 4, 1, 1, 2, 2, 2, 2, 4,
	2, 4, 1, 1, 1, 1, 5, 3, 3, 8,
	9, 10, 9, 10, 11, 2, 5, 7, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 3, 3, 3, 3, 5, 4, 5, 4, 4,
	4, 1, 4, 3, 4, 4, 4, 4, 6, 8,
	7, 6, 10, 5, 3, 2, 4, 4, 6, 3,
	1, 3, 2, 2, 5, 2, 6, 2, 5, 2,
	3, 0, 3, 6, 6, 5, 5, 6, 5, 5,
	1, 0, 1, 2, 1, 1, 0, 1, 1, 2,
	1, 0, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -36, -1, -37, -2, -38, 80, -41, -42, 86,
	-3, -4, 38, 39, 10, 12, 28, -9, -10, -8,
	-11, -15, 49, 50, -20, -5, -7, -6, 13, 15,
	29, 45, 46, -35, 5, 68, 82, 70, 74, 71,
	6, 24, 25, 26, 9, 84, -32, 78, 4, -34,
	55, 60, 23, 52, 58, 76, 53, 57, 56, 11,
	-19, -37, -38, -41, -42, -19, -20, -20, 4, 14,
	4, -20, 4, -20, 61, 62, 64, 27, 83, 67,
	68, 71, 72, 73, 42, 43, 44, 17, 18, 66,
	19, 65, 20, 32, 33, 34, 35, 36, 37, 40,
	41, 69, 21, 74, 22, 78, 84, 53, 16, -20,
	76, -21, -20, 80, -4, 4, 76, -20, 76, 84,
	-20, -20, -20, -35, -20, -35, -20, 78, 4, 85,
	-39, -41, -30, 4, 71, -32, 58, 51, 59, 84,
	-20, 78, 78, 78, 78, 78, 76, 84, -39, -20,
	78, 78, -21, 4, 61, 62, 81, -3, 76, 13,
	76, 78, 78, 78, 78, -20, -20, -20, -20, 4,
	-20, -20, -20, -20, -20, -20, -20, -20, -20, -20,
	-20, -20, -20, -20, -20, -20, -20, -20, -20, -20,
	-20, -20, -20, -20, -19, -20, 63, -20, -20, 76,
	-1, -41, 16, 81, 76, 80, -20, 80, -1, 76,
	-39, -20, 63, 83, 83, -22, -26, -23, -24, -27,
	4, -25, 78, -32, -19, 76, 83, -30, -30, 84,
	-30, 76, 85, 79, -19, -20, 79, -20, -30, 71,
	-32, 4, 58, -30, -30, 54, -39, -30, -33, -20,
	-20, -20, 62, -19, -19, -39, -1, -20, -1, -19,
	-19, -19, -19, 63, 8, 79, 85, 63, -20, -1,
	77, -20, -39, -1, 76, -20, 80, 80, -20, 77,
	-39, -16, -18, -17, 48, 47, 85, 63, -20, 4,
	4, 79, 8, 81, -30, -22, -26, 81, -40, -41,
	-39, 4, -30, -39, 8, 79, 79, 79, 79, -30,
	84, 79, 79, 81, 4, -33, 85, -40, 81, 63,
	79, 79, 81, -19, -20, -35, 77, 76, 77, 8,
	79, 8, 79, 8, 79, 8, 79, -20, 79, -20,
	85, 85, 77, 76, 4, 77, -1, 76, 76, -20,
	76, -20, 80, 30, -12, -14, -13, 48, 47, -39,
	-17, -18, 63, -3, -20, 85, 85, -28, -30, 78,
	79, -30, -39, 79, 8, -41, 85, -19, 85, -31,
	4, 79, -30, -20, 81, -40, -30, 77, -39, -20,
	-20, -1, 79, 79, 79, 79, 85, -1, 77, -1,
	-1, 76, -1, 76, 76, -20, 4, 76, -39, -13,
	-14, 63, -20, -19, 77, -1, 63, 85, 76, -29,
	-30, -28, 79, -24, -25, -28, 79, -30, -40, -30,
	-39, 81, -30, 85, 79, 81, -20, 77, 76, -20,
	79, 77, 77, 77, 77, -1, 77, -1, -1, 76,
	76, -1, 77, -1, 63, 63, -1, -1, 79, 81,
	76, -28, 76, -28, 79, 77, 77, -39, -30, -20,
	79, -39, 63, 77, 77, 77, -1, -1, 77, -1,
	-1, 77, -39, -1, 76, -1, 76, -28, 4, 79,
	-33, -20, 77, 77, 31, -30, 77, -1, 77, -1,
	76, -30, -40, 31, 76, 77, 77, -1, 77, 76,
	-1, 77, -1, 77, 77,
}

var yyDef = [...]int16{
	191, -2, 1, -2, 191, 192, 195, 194, 198, 200,
	4, 7, 8, 9, 89, 0, 0, 13, 14, 15,
	16, 17, 0, 0, -2, 31, 32, 33, 0, -2,
	0, 0, 0, 93, 94, 0, 0, 0, 0, 0,
	102, 103, 104, 105, 0, 196, 0, 0, 190, 151,
	0, 0, 0, 0, 0, 196, 0, 0, 0, 70,
	0, 3, -2, 193, 199, 10, 90, 11, 0, 0,
	190, 0, 190, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 139,
	140, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	191, 0, 90, 0, 0, -2, 191, 0, 196, 0,
	95, 96, 97, -2, 0, -2, 0, 79, 0, -2,
	89, 197, 0, 170, 0, 0, 0, 0, 0, 0,
	0, 89, 0, 0, 0, 0, 196, 0, 181, 165,
	0, 0, 0, 71, 89, 89, 196, 5, 191, 0,
	191, 89, 89, 89, 89, 35, 37, 0, 107, 108,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	141, 142, 143, 144, 0, 0, 0, 164, 169, 191,
	0, 194, 0, 196, 191, 0, 0, 0, 0, 196,
	54, 0, 0, 0, 0, 0, 81, 80, 85, 82,
	83, 87, 79, 180, 201, 196, 0, 172, 173, 0,
	175, 196, 179, 118, 0, 0, 153, 0, 0, 0,
	0, -2, 0, 0, 0, 0, 181, 0, 201, 0,
	0, 0, 89, 36, 38, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 148, 150, 0, 0, 0,
	42, 0, 0, 0, 191, 0, 0, 0, 0, 0,
	62, 196, 55, 56, 0, -2, 149, 0, 0, 99,
	101, 73, 0, 196, 84, 0, 81, -2, 0, 203,
	89, 171, 0, 0, 0, 146, 152, 154, 155, 173,
	0, 156, 157, 0, 0, 201, 0, 0, -2, 0,
	166, 167, 0, 34, 91, -2, 12, 191, 41, 0,
	-2, 0, -2, 0, -2, 0, -2, 106, 147, 0,
	188, 189, 39, 191, 72, 44, 0, 191, 191, 0,
	191, 0, 0, 0, 196, 63, 64, 0, 89, 0,
	57, 58, 191, 0, 0, 185, 186, 0, 74, 76,
	73, 0, 0, 73, 0, -2, 116, 201, 0, 196,
	0, 145, 0, 0, 0, 0, 0, 163, 0, 182,
	0, 0, -2, -2, -2, -2, 187, 0, 45, 0,
	0, 191, 0, 191, 191, 0, 0, 191, 0, 65,
	66, 191, 90, 0, 53, 60, 191, 184, 191, 0,
	77, 0, 73, 86, 88, 0, 73, 0, 0, 174,
	0, 196, 177, 0, 158, 0, 0, 161, 196, 0,
	168, 40, 43, 46, 47, 0, 49, 0, 0, 191,
	191, 0, 61, 69, 191, 191, 59, 0, 75, 196,
	191, 0, 191, 0, 73, 117, 176, 0, 174, 0,
	160, 181, 0, 48, 50, 51, 0, 0, 30, 67,
	68, 109, 0, 0, 191, 0, 191, 0, 0, 159,
	201, 183, 52, 29, 0, 78, 110, 0, 112, 0,
	191, 178, 0, 0, 191, 111, 113, 0, 162, 191,
	0, 114, 0, 28, 27,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 73, 74, 3,
	78, 79, 71, 67, 81, 68, 83, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 80,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 84, 3, 85, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:108
		{
			yyVAL.compstmt = nil
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:112
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:118
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:127
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:143
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:147
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:151
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:156
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:161
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:166
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:171
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:176
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:180
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:184
		{
			yyVAL.stmt = yyDollar[1].stmt_try
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:188
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:201
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:211
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:216
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:221
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:226
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:231
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:236
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:243
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:248
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:253
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:258
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:265
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:269
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:273
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:279
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:286
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:290
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:307
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:311
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:328
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:333
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:338
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:348
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:353
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:364
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:369
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:374
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:379
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:384
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:389
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:394
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:399
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:404
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:411
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:418
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:422
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:426
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 57:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:430
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 58:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:435
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:446
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:453
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 61:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:459
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:468
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:472
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:476
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:480
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:486
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:497
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:502
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:509
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:514
		{
			yyVAL.expr_idents = []string{}
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:518
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:522
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:530
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:534
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:538
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:542
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:546
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:550
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 79:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:558
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:562
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:568
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:572
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:578
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:584
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:590
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:594
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:600
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:604
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:609
		{
			yyVAL.exprs = nil
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:613
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 91:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:617
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:624
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:633
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:637
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:642
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:647
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:652
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:657
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 99:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:662
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:667
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 101:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:672
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:677
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:682
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:687
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:692
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 106:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:697
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:702
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:707
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 109:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:712
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 110:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:717
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:722
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 112:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:728
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:733
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 114:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:738
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:744
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 116:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:749
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 117:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:754
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:759
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:764
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:769
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:774
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:779
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:784
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:789
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:794
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:799
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:804
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:809
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:814
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:819
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:824
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:829
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:834
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:839
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:844
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:849
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:854
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:859
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:864
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:869
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:874
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:879
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:884
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:889
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:894
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:899
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:904
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:909
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:914
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:919
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:924
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 152:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:929
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:934
		{
			yyVAL.expr = &ast.DbgExpr{}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 154:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:939
		{
			yyVAL.expr = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:944
		{
			yyVAL.expr = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:949
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:959
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 158:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:964
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 159:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:969
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 160:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:974
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 161:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:979
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 162:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:985
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:991
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:996
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1001
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1006
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1011
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1016
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1021
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1029
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 171:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1033
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1042
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1051
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 174:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1061
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1065
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1074
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1080
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1084
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1094
		{
			yyVAL.slice_count = 1
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1098
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 181:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1105
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1109
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1113
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1123
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1127
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1131
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1135
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1139
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1143
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1149
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
