// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:36
type yySymType struct {
	yys                 int
	compstmt            ast.Stmt
	stmts               ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default ast.Stmt
	stmt_select         ast.Stmt
	stmt_select_cases   ast.Stmt
	stmt_select_case    ast.Stmt
	stmt_select_default ast.Stmt
	stmt                ast.Stmt
	expr                ast.Expr
	exprs               []ast.Expr
	expr_idents         []string
	expr_map            *ast.MapExpr
	type_data           *ast.TypeStruct
	type_data_struct    *ast.TypeStruct
	slice_count         int
	tok                 ast.Token
	expr_slice          ast.Expr
	expr_ident          ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const UNARY = 57402

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"'='",
	"'?'",
	"':'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"'!'",
	"'^'",
	"'&'",
	"'.'",
	"'['",
	"']'",
	"'|'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1027

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	60, 69,
	63, 69,
	76, 5,
	-2, 1,
	-1, 23,
	63, 70,
	-2, 28,
	-1, 27,
	60, 69,
	-2, 66,
	-1, 58,
	60, 69,
	63, 69,
	-2, 5,
	-1, 111,
	16, 67,
	63, 67,
	-2, 165,
	-1, 118,
	1, 78,
	8, 78,
	47, 78,
	48, 78,
	60, 78,
	62, 78,
	63, 78,
	72, 78,
	73, 78,
	75, 78,
	76, 78,
	82, 78,
	84, 78,
	-2, 73,
	-1, 120,
	1, 80,
	8, 80,
	47, 80,
	48, 80,
	60, 80,
	62, 80,
	63, 80,
	72, 80,
	73, 80,
	75, 80,
	76, 80,
	82, 80,
	84, 80,
	-2, 73,
	-1, 124,
	4, 154,
	51, 154,
	58, 154,
	59, 154,
	-2, 93,
	-1, 171,
	17, 0,
	18, 0,
	-2, 105,
	-1, 172,
	17, 0,
	18, 0,
	-2, 106,
	-1, 263,
	62, 5,
	-2, 69,
	-1, 272,
	73, 179,
	82, 179,
	-2, 171,
	-1, 289,
	73, 179,
	-2, 171,
	-1, 296,
	1, 72,
	8, 72,
	47, 72,
	48, 72,
	60, 72,
	62, 72,
	63, 72,
	73, 72,
	75, 72,
	76, 72,
	82, 72,
	84, 72,
	-2, 73,
	-1, 302,
	1, 21,
	47, 21,
	48, 21,
	62, 21,
	73, 21,
	76, 21,
	84, 21,
	-2, 124,
	-1, 304,
	1, 23,
	47, 23,
	48, 23,
	62, 23,
	73, 23,
	76, 23,
	84, 23,
	-2, 126,
	-1, 306,
	1, 25,
	47, 25,
	48, 25,
	62, 25,
	73, 25,
	76, 25,
	84, 25,
	-2, 124,
	-1, 308,
	1, 27,
	47, 27,
	48, 27,
	62, 27,
	73, 27,
	76, 27,
	84, 27,
	-2, 126,
	-1, 342,
	73, 177,
	82, 177,
	-2, 172,
	-1, 360,
	1, 20,
	47, 20,
	48, 20,
	62, 20,
	73, 20,
	76, 20,
	84, 20,
	-2, 123,
	-1, 361,
	1, 22,
	47, 22,
	48, 22,
	62, 22,
	73, 22,
	76, 22,
	84, 22,
	-2, 125,
	-1, 362,
	1, 24,
	47, 24,
	48, 24,
	62, 24,
	73, 24,
	76, 24,
	84, 24,
	-2, 123,
	-1, 363,
	1, 26,
	47, 26,
	48, 26,
	62, 26,
	73, 26,
	76, 26,
	84, 26,
	-2, 125,
}

const yyPrivate = 57344

const yyLast = 3902

var yyAct = [...]int16{
	62, 326, 127, 23, 289, 227, 9, 327, 273, 260,
	30, 6, 261, 329, 328, 63, 5, 59, 263, 262,
	391, 272, 68, 70, 8, 8, 8, 105, 108, 112,
	124, 343, 8, 115, 116, 117, 119, 121, 218, 140,
	107, 8, 8, 114, 284, 135, 118, 120, 141, 212,
	8, 345, 282, 143, 126, 8, 283, 212, 43, 23,
	1, 212, 128, 126, 212, 150, 287, 397, 134, 215,
	212, 387, 159, 160, 161, 212, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 180, 181, 182, 146, 200, 183, 184,
	185, 186, 130, 188, 190, 191, 211, 341, 363, 132,
	199, 307, 224, 7, 212, 203, 131, 133, 194, 362,
	60, 361, 360, 348, 339, 126, 129, 154, 310, 208,
	128, 136, 213, 214, 157, 216, 123, 305, 221, 134,
	155, 222, 223, 228, 226, 229, 230, 145, 303, 144,
	139, 138, 126, 235, 301, 137, 455, 454, 450, 445,
	444, 126, 196, 207, 442, 279, 149, 193, 436, 435,
	270, 431, 451, 60, 340, 243, 152, 132, 308, 430,
	429, 428, 421, 209, 131, 133, 420, 416, 130, 130,
	247, 130, 149, 411, 129, 142, 250, 130, 130, 254,
	130, 257, 449, 149, 306, 266, 122, 134, 126, 149,
	407, 405, 234, 126, 236, 304, 404, 403, 277, 358,
	149, 302, 274, 126, 400, 196, 228, 396, 380, 126,
	149, 286, 280, 366, 295, 153, 288, 269, 125, 274,
	60, 353, 244, 309, 296, 317, 314, 311, 299, 271,
	297, 249, 237, 248, 419, 401, 321, 323, 252, 56,
	386, 385, 338, 217, 23, 194, 335, 151, 113, 332,
	334, 126, 331, 61, 130, 66, 149, 209, 414, 149,
	231, 350, 195, 196, 342, 349, 148, 359, 448, 149,
	352, 355, 382, 377, 356, 351, 333, 300, 274, 329,
	328, 342, 263, 262, 443, 65, 438, 10, 60, 202,
	347, 316, 285, 276, 318, 147, 268, 267, 89, 90,
	91, 92, 93, 94, 162, 373, 64, 376, 80, 196,
	378, 46, 194, 375, 194, 110, 225, 126, 4, 103,
	2, 346, 58, 259, 57, 233, 130, 20, 389, 325,
	392, 395, 19, 388, 17, 398, 274, 16, 126, 357,
	101, 187, 25, 24, 3, 99, 74, 102, 0, 97,
	0, 0, 0, 0, 0, 0, 365, 0, 0, 0,
	367, 368, 0, 370, 194, 210, 0, 0, 60, 0,
	0, 0, 251, 0, 381, 423, 220, 258, 0, 384,
	0, 0, 0, 126, 130, 0, 130, 275, 232, 126,
	0, 0, 0, 278, 0, 238, 239, 240, 241, 0,
	402, 0, 0, 0, 0, 0, 228, 441, 0, 0,
	406, 440, 408, 409, 0, 0, 0, 0, 412, 0,
	0, 446, 0, 415, 0, 0, 417, 418, 0, 447,
	0, 0, 274, 0, 0, 330, 60, 0, 0, 0,
	0, 0, 427, 0, 0, 0, 0, 0, 233, 0,
	0, 432, 0, 0, 433, 434, 0, 0, 0, 0,
	437, 0, 0, 0, 0, 354, 0, 0, 0, 0,
	0, 294, 0, 0, 0, 0, 0, 130, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	452, 0, 453, 104, 83, 84, 86, 88, 98, 100,
	0, 374, 0, 0, 73, 0, 0, 0, 0, 89,
	90, 91, 92, 93, 94, 344, 0, 95, 96, 80,
	81, 82, 390, 0, 0, 0, 0, 0, 0, 0,
	103, 0, 0, 0, 0, 0, 0, 0, 72, 0,
	394, 85, 87, 75, 76, 77, 78, 79, 0, 0,
	0, 101, 393, 0, 0, 0, 99, 74, 102, 0,
	97, 0, 0, 0, 0, 0, 0, 422, 0, 379,
	0, 0, 0, 425, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 293, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 292, 0, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 265, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 264, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 246, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 0, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 245, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 71, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 197, 0, 101, 0, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 439, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	426, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 0, 0, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 424, 0, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 413, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 0, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 410, 0, 101, 0, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 399, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 0, 0, 0, 0, 99, 74, 102,
	383, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 371, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 369, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 0, 0, 0,
	0, 99, 74, 102, 364, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 337, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 0, 324, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 319, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 315, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 0, 0, 0,
	0, 99, 74, 102, 313, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 298, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 291, 0, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 290, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 0, 0, 101, 281,
	0, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 0, 255, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 242, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 72,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 219, 0, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 201, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 192, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 71, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 101, 0, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 101, 0, 0, 0, 0, 99,
	74, 102, 0, 97, 45, 31, 37, 0, 0, 41,
	13, 55, 14, 26, 0, 27, 0, 0, 0, 0,
	0, 0, 0, 48, 38, 39, 40, 0, 15, 18,
	0, 0, 0, 0, 0, 0, 0, 0, 11, 12,
	0, 0, 0, 0, 0, 28, 29, 0, 0, 21,
	22, 0, 49, 52, 0, 47, 54, 53, 50, 0,
	0, 0, 0, 0, 0, 0, 0, 32, 36, 0,
	0, 0, 51, 0, 44, 0, 0, 33, 34, 35,
	0, 42, 104, 83, 84, 86, 88, 98, 100, 0,
	0, 0, 0, 73, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 72, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 0, 0, 0, 0, 99, 206, 102, 0, 97,
	104, 83, 84, 86, 88, 98, 100, 0, 0, 0,
	0, 73, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 72, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 0, 0, 0, 101, 0,
	0, 0, 0, 99, 205, 102, 0, 97, 104, 83,
	84, 86, 88, 98, 100, 0, 0, 0, 0, 73,
	0, 0, 0, 0, 89, 90, 91, 92, 93, 94,
	0, 0, 95, 96, 80, 81, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 103, 0, 0, 0, 0,
	0, 0, 0, 72, 0, 0, 85, 87, 75, 76,
	77, 78, 79, 0, 0, 0, 158, 0, 0, 0,
	0, 99, 74, 102, 0, 97, 104, 83, 84, 86,
	88, 98, 100, 0, 0, 0, 0, 73, 0, 0,
	0, 0, 89, 90, 91, 92, 93, 94, 0, 0,
	95, 96, 80, 81, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 103, 0, 0, 0, 0, 0, 0,
	0, 72, 0, 0, 85, 87, 75, 76, 77, 78,
	79, 0, 0, 0, 156, 0, 0, 0, 0, 99,
	74, 102, 0, 97, 104, 83, 84, 86, 88, 98,
	100, 0, 0, 0, 0, 73, 0, 0, 0, 0,
	89, 90, 91, 92, 93, 94, 0, 0, 95, 96,
	80, 81, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 87, 75, 76, 77, 78, 79, 0,
	0, 0, 101, 0, 0, 0, 0, 99, 74, 102,
	0, 97, 104, 83, 84, 86, 88, 0, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 0, 0, 0, 0, 99, 74, 102, 0, 97,
	104, 83, 84, 86, 88, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 89, 90, 91, 92,
	93, 94, 0, 0, 95, 96, 80, 81, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 103, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 87,
	75, 76, 77, 78, 79, 86, 88, 0, 101, 0,
	0, 0, 0, 99, 74, 102, 0, 97, 89, 90,
	91, 92, 93, 94, 0, 0, 95, 96, 80, 81,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 103,
	0, 0, 45, 31, 37, 0, 0, 41, 0, 0,
	85, 87, 75, 76, 77, 78, 79, 0, 0, 0,
	101, 48, 38, 39, 40, 99, 74, 102, 0, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 45, 31,
	37, 0, 0, 41, 0, 0, 0, 0, 0, 0,
	49, 52, 0, 47, 54, 53, 50, 48, 38, 39,
	40, 0, 0, 0, 0, 32, 36, 0, 0, 0,
	51, 0, 44, 0, 0, 33, 34, 35, 0, 42,
	336, 0, 0, 0, 0, 0, 49, 52, 0, 47,
	54, 53, 50, 0, 0, 0, 0, 0, 111, 31,
	37, 32, 36, 41, 0, 55, 51, 0, 44, 0,
	0, 33, 34, 35, 0, 42, 312, 48, 38, 39,
	40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 31, 37, 0, 0, 41,
	0, 0, 0, 0, 0, 0, 49, 52, 0, 47,
	54, 53, 50, 48, 38, 39, 40, 0, 0, 0,
	0, 32, 36, 0, 0, 0, 106, 0, 44, 0,
	109, 33, 34, 35, 0, 42, 0, 0, 0, 0,
	0, 0, 49, 52, 0, 47, 54, 53, 50, 0,
	0, 0, 0, 0, 45, 31, 37, 32, 36, 41,
	0, 0, 51, 0, 44, 0, 256, 33, 34, 35,
	0, 42, 0, 48, 38, 39, 40, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 45, 31, 37, 0, 0, 41,
	0, 0, 49, 52, 0, 47, 54, 53, 50, 0,
	0, 0, 204, 48, 38, 39, 40, 32, 36, 0,
	0, 0, 51, 0, 44, 0, 0, 33, 34, 35,
	0, 42, 45, 31, 37, 0, 0, 41, 0, 0,
	0, 0, 49, 52, 0, 47, 54, 53, 50, 0,
	0, 48, 38, 39, 40, 0, 0, 32, 36, 0,
	0, 0, 51, 0, 44, 0, 198, 33, 34, 35,
	0, 42, 45, 31, 37, 0, 0, 41, 0, 0,
	49, 52, 0, 47, 54, 53, 50, 0, 0, 0,
	189, 48, 38, 39, 40, 32, 36, 0, 0, 0,
	51, 0, 44, 0, 0, 33, 34, 35, 0, 42,
	45, 31, 37, 0, 0, 41, 0, 0, 0, 0,
	49, 52, 0, 47, 54, 53, 50, 0, 0, 48,
	38, 39, 40, 0, 0, 32, 36, 0, 0, 0,
	51, 0, 44, 0, 0, 33, 34, 35, 0, 42,
	45, 31, 37, 0, 0, 41, 0, 0, 49, 52,
	0, 47, 54, 53, 50, 0, 0, 0, 0, 48,
	38, 39, 40, 32, 36, 0, 0, 0, 372, 0,
	44, 0, 0, 33, 34, 35, 0, 42, 45, 31,
	37, 0, 0, 41, 0, 0, 0, 0, 49, 52,
	0, 47, 54, 53, 50, 0, 0, 48, 38, 39,
	40, 0, 0, 32, 36, 0, 0, 0, 322, 0,
	44, 0, 0, 33, 34, 35, 0, 42, 45, 31,
	37, 0, 0, 41, 0, 0, 49, 52, 0, 47,
	54, 53, 50, 0, 0, 0, 0, 48, 38, 39,
	40, 32, 36, 0, 0, 0, 320, 0, 44, 0,
	0, 33, 34, 35, 0, 42, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 49, 52, 0, 47,
	54, 53, 50, 0, 0, 89, 90, 91, 92, 93,
	94, 32, 36, 95, 96, 80, 253, 0, 44, 0,
	0, 33, 34, 35, 0, 42, 103, 0, 0, 69,
	31, 37, 0, 0, 41, 0, 0, 0, 0, 75,
	76, 77, 78, 79, 0, 0, 0, 101, 48, 38,
	39, 40, 99, 74, 102, 0, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 67, 31, 37, 0, 0,
	41, 0, 0, 0, 0, 0, 0, 49, 52, 0,
	47, 54, 53, 50, 48, 38, 39, 40, 0, 0,
	0, 0, 32, 36, 0, 0, 0, 51, 0, 44,
	0, 0, 33, 34, 35, 0, 42, 0, 0, 0,
	0, 0, 0, 49, 52, 0, 47, 54, 53, 50,
	89, 90, 91, 92, 93, 94, 0, 0, 32, 36,
	80, 0, 0, 51, 0, 44, 0, 0, 33, 34,
	35, 103, 42, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 77, 78, 79, 0,
	0, 0, 101, 0, 0, 0, 0, 99, 74, 102,
	0, 97,
}

var yyPact = [...]int16{
	-60, -1000, 2630, -60, -1000, -58, -58, -1000, -1000, -1000,
	-1000, -1000, -1000, 3518, 3518, 322, 291, -1000, 203, -1000,
	-1000, 3791, 3755, 2482, -1000, -1000, 3518, 3304, 3518, 196,
	-38, -1000, 3518, 3518, 3518, 3518, 3518, -1000, -1000, -1000,
	-1000, 132, -52, 126, 3518, 57, -1000, 81, 77, 76,
	-33, -58, 3518, 75, 73, 311, 226, -1000, 2630, -58,
	-1000, 213, 2550, 2550, 195, 163, -60, 66, 2900, 60,
	2832, 3518, 3518, 3518, 320, 3518, 3518, 3518, 3518, 3518,
	3518, 3518, 3518, 3518, 3518, 3518, 3518, 3518, 3518, 3518,
	3518, 3518, 3518, 3518, 3518, -1000, -1000, 3518, 3518, 3518,
	3518, 3518, 3478, 3518, 3518, 2414, -60, 266, 782, 3440,
	21, 57, 2346, -58, 3400, 286, 286, 286, -38, 2764,
	-38, 2696, 311, 55, -13, 3518, -58, 34, -1000, 126,
	126, -12, 126, 191, -44, 2278, 3518, 3518, 126, 58,
	-58, 126, 3518, 2550, 3518, 3518, 220, -1000, 3518, -58,
	-1000, -60, 3518, -60, 179, 3518, 3518, 3518, 3518, 2550,
	2210, 2968, -1000, 3818, 3818, 286, 286, 286, 2550, 3703,
	3703, 3156, 3156, 3703, 3703, 3703, 3703, 2550, 2550, 2550,
	2550, 2550, 2550, 2550, 3036, 2550, 3104, 167, 714, 3518,
	2550, 3104, -60, 178, -58, 3518, -58, -60, 3674, 2142,
	3340, -58, 255, 646, 3518, 313, 312, 162, 311, -1000,
	-42, -58, 309, -10, -10, 126, -10, -58, -13, -1000,
	157, 2074, -23, -19, 308, 3518, -16, -59, 2006, 1938,
	578, 3518, 213, 3518, 177, 1870, 175, 267, 146, 140,
	129, 103, 3518, 53, -1000, -1000, 3244, 1802, 173, -1000,
	1734, 307, 172, -60, 1666, 3634, 3596, 1598, 252, -29,
	-1000, -1000, 234, 2630, -1000, 3208, 1530, -1000, -1000, 190,
	49, 99, -58, -51, -58, 3518, -1000, -31, 306, 48,
	-1000, -1000, -1000, -1000, 3518, 218, -59, 126, 168, -58,
	3518, -1000, -1000, 3518, 213, 2550, -38, -1000, -60, -1000,
	215, 47, -1000, 46, -1000, 44, -1000, 33, -1000, 2550,
	-1000, 1462, -1000, -1000, -1000, -60, -1000, -1000, 160, -60,
	-60, 1394, -60, 1326, 3556, -34, -1000, -1000, 231, 3518,
	155, -1000, -1000, -60, 230, 1258, -1000, -1000, -60, 189,
	188, -4, -58, -1000, -42, 126, -43, 126, -1000, 497,
	3518, 154, -5, -1000, 3518, 2550, 1190, 151, 183, -60,
	-1000, -1000, -1000, -1000, -1000, 144, -1000, 143, 138, -60,
	137, -60, -60, 1122, 120, -1000, -1000, -60, 1054, 216,
	-1000, -1000, -60, -1000, 114, -60, -60, 182, 113, -10,
	109, -58, -10, -1000, 3518, 986, -1000, -58, 918, -1000,
	-1000, -60, 108, -1000, -1000, -1000, 107, -1000, 106, 98,
	-60, -1000, -1000, -60, -60, -1000, -1000, 96, 95, -60,
	-1000, -1000, 302, 850, -1000, 3518, 3518, 91, 273, -1000,
	-1000, -1000, 87, -1000, -1000, -1000, -1000, 86, 126, -1000,
	-59, 2550, 257, 130, -1000, -1000, -10, 85, 100, -60,
	-1000, -60, 84, 83, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 60, 364, 6, 307, 363, 362, 357, 354, 352,
	349, 7, 1, 347, 343, 12, 9, 259, 0, 40,
	2, 341, 58, 5, 331, 10, 340, 338, 195, 8,
	11, 113,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 5, 6, 6, 7, 7, 7, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 13, 14,
	14, 14, 14, 14, 15, 15, 16, 9, 10, 10,
	10, 10, 10, 11, 11, 12, 19, 19, 19, 17,
	17, 17, 17, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
	18, 18, 18, 18, 18, 20, 20, 20, 20, 20,
	20, 20, 21, 21, 22, 22, 23, 23, 23, 24,
	24, 24, 24, 24, 24, 25, 26, 26, 27, 27,
	27, 28, 28, 30, 30, 31, 29, 29, 29, 29,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 1, 1, 13, 12, 9, 8, 1, 1,
	6, 5, 6, 5, 6, 5, 6, 5, 1, 1,
	1, 4, 3, 3, 5, 7, 5, 4, 7, 5,
	6, 7, 7, 8, 7, 8, 8, 9, 6, 0,
	1, 1, 2, 2, 4, 4, 3, 7, 0, 1,
	1, 2, 2, 4, 4, 3, 0, 1, 4, 0,
	1, 4, 4, 1, 1, 2, 2, 2, 2, 4,
	2, 4, 1, 1, 1, 1, 5, 3, 3, 7,
	8, 8, 9, 2, 5, 7, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 3,
	3, 3, 3, 5, 4, 5, 4, 4, 4, 1,
	4, 4, 4, 6, 8, 7, 6, 10, 5, 3,
	2, 4, 4, 6, 3, 1, 3, 2, 2, 5,
	2, 6, 2, 5, 2, 3, 0, 3, 6, 6,
	5, 5, 6, 5, 5, 1, 0, 1, 2, 1,
	1, 0, 1, 1, 2, 1, 0, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -26, -2, -27, 76, -30, -31, 84, -3,
	-4, 38, 39, 10, 12, 28, -7, -8, 29, -9,
	-13, 49, 50, -18, -5, -6, 13, 15, 45, 46,
	-25, 5, 67, 77, 78, 79, 68, 6, 24, 25,
	26, 9, 81, -22, 74, 4, -24, 55, 23, 52,
	58, 72, 53, 57, 56, 11, -17, -26, -27, -30,
	-31, -17, -18, -18, 4, 14, 72, 4, -18, 4,
	-18, 60, 61, 27, 80, 66, 67, 68, 69, 70,
	42, 43, 44, 17, 18, 64, 19, 65, 20, 32,
	33, 34, 35, 36, 37, 40, 41, 83, 21, 79,
	22, 74, 81, 53, 16, -18, 72, -19, -18, 76,
	-4, 4, -18, 72, 81, -18, -18, -18, -25, -18,
	-25, -18, 74, 4, 82, -28, -30, -20, 4, 68,
	-22, 58, 51, 59, 81, -18, 74, 74, 74, 74,
	72, 81, -28, -18, 74, 74, -19, 4, 60, 63,
	-3, 72, 13, 72, -1, 74, 74, 74, 74, -18,
	-18, -18, 4, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -18, -18, -18,
	-18, -18, -18, -18, -18, -18, -18, -17, -18, 62,
	-18, -18, 72, -1, -30, 16, 63, 72, 76, -18,
	76, 72, -28, -18, 62, 80, 80, -19, 74, -22,
	-17, 72, 80, -20, -20, 81, -20, 72, 82, 75,
	-17, -18, -20, -20, 54, -28, -20, -23, -18, -18,
	-18, 60, -17, -28, -1, -18, -1, 73, -17, -17,
	-17, -17, 62, 8, 75, 82, 62, -18, -1, 73,
	-18, -28, -1, 72, -18, 76, 76, -18, -28, -14,
	-16, -15, 48, 47, 82, 62, -18, 4, 4, 75,
	8, -19, 63, -29, -30, -28, 4, -20, -28, 8,
	75, 75, 75, 75, 63, 4, -23, 82, -29, 63,
	62, 75, 75, 63, -17, -18, -25, 73, 72, 73,
	30, 8, 75, 8, 75, 8, 75, 8, 75, -18,
	75, -18, 82, 82, 73, 72, 4, 73, -1, 72,
	72, -18, 72, -18, 76, -10, -12, -11, 48, 47,
	-28, -15, -16, 62, -3, -18, 82, 82, 72, 75,
	75, 8, -30, 82, -17, 82, -21, 4, 75, -18,
	63, -29, -20, 73, -28, -18, -18, -1, 4, 72,
	75, 75, 75, 75, 82, -1, 73, -1, -1, 72,
	-1, 72, 72, -18, -28, -11, -12, 62, -18, -17,
	73, -1, 62, 82, -1, 72, 72, 75, -29, -20,
	-28, 63, -20, 75, 63, -18, 73, 72, -18, 75,
	73, 72, -1, 73, 73, 73, -1, 73, -1, -1,
	72, 73, -1, 62, 62, -1, 73, -1, -1, 72,
	73, 73, -28, -18, 75, -28, 62, -1, 73, 73,
	73, 73, -1, -1, -1, 73, 73, -1, 4, 75,
	-23, -18, 73, 31, 73, 73, -20, -29, 31, 72,
	73, 72, -1, -1, 73, 73,
}

var yyDef = [...]int16{
	166, -2, -2, 166, 167, 170, 169, 173, 175, 3,
	6, 7, 8, 69, 0, 0, 12, 13, 0, 18,
	19, 0, 0, -2, 29, 30, 0, -2, 0, 0,
	73, 74, 0, 0, 0, 0, 0, 82, 83, 84,
	85, 0, 171, 0, 0, 165, 129, 0, 0, 0,
	0, 171, 0, 0, 0, 66, 0, 2, -2, 168,
	174, 9, 70, 10, 0, 0, 166, 165, 0, 165,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 117, 118, 0, 0, 0,
	0, 69, 0, 0, 0, 0, 166, 0, 70, 0,
	0, -2, 0, 171, 0, 75, 76, 77, -2, 0,
	-2, 0, 66, 0, -2, 69, 172, 0, 145, 0,
	0, 0, 0, 0, 0, 0, 69, 0, 0, 0,
	171, 0, 156, 140, 0, 0, 0, 67, 69, 171,
	4, 166, 0, 166, 0, 69, 69, 69, 69, 32,
	0, 87, 88, 97, 98, 99, 100, 101, 102, 103,
	104, -2, -2, 107, 108, 109, 110, 111, 112, 113,
	114, 115, 116, 119, 120, 121, 122, 0, 0, 0,
	139, 144, 166, 0, 169, 0, 171, 166, 0, 0,
	0, 171, 49, 0, 0, 0, 0, 0, 66, 155,
	176, 171, 0, 147, 148, 0, 150, 171, 154, 96,
	0, 0, 0, 0, 0, 156, 0, 176, 0, 0,
	0, 69, 33, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 126, 128, 0, 0, 0, 37,
	0, 0, 0, 166, 0, 0, 0, 0, 58, 171,
	50, 51, 0, -2, 127, 0, 0, 79, 81, 0,
	0, 0, -2, 0, 178, 69, 146, 0, 0, 0,
	124, 130, 131, 132, 0, 0, 176, 0, 0, -2,
	0, 141, 142, 0, 31, 71, -2, 11, 166, 36,
	0, 0, -2, 0, -2, 0, -2, 0, -2, 86,
	125, 0, 163, 164, 34, 166, 68, 39, 0, 166,
	166, 0, 166, 0, 0, 171, 59, 60, 0, 69,
	0, 52, 53, 166, 0, 0, 160, 161, 166, 0,
	0, 0, -2, 94, 176, 0, 171, 0, 123, 0,
	0, 0, 0, 138, 0, 157, 0, 0, 0, 166,
	-2, -2, -2, -2, 162, 0, 40, 0, 0, 166,
	0, 166, 166, 0, 0, 61, 62, 166, 70, 0,
	48, 56, 166, 159, 0, 166, 166, 0, 0, 149,
	0, 171, 152, 133, 0, 0, 136, 171, 0, 143,
	35, 166, 0, 38, 41, 42, 0, 44, 0, 0,
	166, 57, 65, 166, 166, 54, 89, 0, 0, 166,
	95, 151, 0, 0, 135, 156, 0, 0, 17, 43,
	45, 46, 0, 63, 64, 90, 91, 0, 0, 134,
	176, 158, 16, 0, 47, 92, 153, 0, 0, 166,
	137, 166, 0, 0, 15, 14,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	84, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 77, 3, 3, 3, 70, 79, 3,
	74, 75, 68, 66, 63, 67, 80, 69, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 62, 76,
	65, 60, 64, 61, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 81, 3, 82, 78, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 83, 73,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 71,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:88
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:92
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:98
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:107
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:123
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:127
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:131
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:136
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:141
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:146
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:151
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:156
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:160
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 14:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:169
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:174
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:179
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:184
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:188
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:207
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:212
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:217
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:222
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:227
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:232
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:239
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:243
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 31:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:249
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:256
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:260
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:277
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:282
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:287
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:297
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:302
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:313
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:318
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:323
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:328
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:333
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:338
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:343
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:348
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:353
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:360
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:367
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:371
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:375
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:379
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:384
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:395
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:400
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:407
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 57:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:413
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 58:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:422
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:426
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:430
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:434
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:440
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:451
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 64:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:456
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:463
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:468
		{
			yyVAL.expr_idents = []string{}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:472
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:476
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:484
		{
			yyVAL.exprs = nil
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:488
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:492
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:499
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:508
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:512
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 75:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:517
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:522
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 77:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:527
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:532
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:537
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:542
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:547
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:552
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:557
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:562
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:567
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 86:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:572
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:577
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:582
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 89:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:587
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 90:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:592
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:597
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 92:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:602
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:607
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:612
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 95:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:617
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:622
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:627
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:632
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:637
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:642
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:647
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:652
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 103:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:657
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:662
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:667
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:672
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:677
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:682
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:687
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:692
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:697
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:702
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:707
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:712
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:717
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:722
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:727
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:732
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:737
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:742
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:747
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:752
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:757
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 124:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:762
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:767
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:772
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:777
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:782
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:787
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:792
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:797
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:807
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:812
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 134:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:817
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 135:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:822
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 136:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:827
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 137:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:833
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 138:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:839
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:844
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:849
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:854
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:859
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 143:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:864
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:869
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:877
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:881
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:890
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 148:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:899
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 149:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:909
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:913
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 151:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:922
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 152:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:928
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 153:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:932
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 154:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:942
		{
			yyVAL.slice_count = 1
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:946
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:953
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:957
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 158:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:961
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:971
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 160:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:975
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 161:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:979
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:983
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 163:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:987
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:991
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:997
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
