// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                 int
	stmtsStmt           *ast.StmtsStmt
	stmt                ast.Stmt
	expr                ast.Expr
	exprs               []ast.Expr
	else_if_list        []ast.Stmt
	stmt_switch_cases   *ast.SwitchStmt
	stmt_select_content *ast.SelectBodyStmt
	expr_call_helper    struct {
		Exprs  []ast.Expr
		VarArg bool
	}
	expr_idents           []string
	func_expr_idents      []*ast.ParamExpr
	func_expr_typed_ident *ast.ParamExpr
	func_expr_args        struct {
		Params   []*ast.ParamExpr
		VarArg   bool
		TypeData *ast.TypeStruct
	}
	expr_typed_ident struct {
		Name     string
		TypeData *ast.TypeStruct
	}
	opt_func_return_expr_idents []*ast.FuncReturnValuesExpr
	expr_map_content            *ast.MapExpr
	type_data                   *ast.TypeStruct
	slice_count                 int
	tok                         ast.Token
	opt_ident                   *ast.Token
	str                         string
	op_lets                     bool
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57405
	yyEofCode   = 57344
	ANDAND      = 57364
	ANDEQ       = 57378
	ARRAY       = 57349
	BREAK       = 57380
	CASE        = 57389
	CATCH       = 57372
	CHAN        = 57393
	CLOSE       = 57399
	CONTINUE    = 57381
	DBG         = 57402
	DEFAULT     = 57390
	DEFER       = 57392
	DELETE      = 57398
	DIVEQ       = 57377
	ELSE        = 57356
	EQEQ        = 57359
	FALSE       = 57367
	FINALLY     = 57373
	FOR         = 57357
	FUNC        = 57351
	GE          = 57361
	GO          = 57391
	IDENT       = 57346
	IF          = 57355
	IN          = 57358
	LE          = 57362
	LEN         = 57397
	MAKE        = 57394
	MAP         = 57400
	MINUSEQ     = 57375
	MINUSMINUS  = 57383
	MODULE      = 57370
	MULEQ       = 57376
	NEQ         = 57360
	NEW         = 57365
	NIL         = 57368
	NILCOALESCE = 57369
	NUMBER      = 57347
	OPCHAN      = 57395
	OREQ        = 57379
	OROR        = 57363
	PLUSEQ      = 57374
	PLUSPLUS    = 57382
	POW         = 57384
	RETURN      = 57352
	SELECT      = 57388
	SHIFTLEFT   = 57385
	SHIFTRIGHT  = 57386
	STRING      = 57348
	STRUCT      = 57401
	SWITCH      = 57387
	THROW       = 57354
	TRUE        = 57366
	TRY         = 57371
	TYPE        = 57396
	UNARY       = 57404
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57403
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -236
)

var (
	yyPrec = map[int]int{
		POW:         0,
		'=':         1,
		PLUSEQ:      1,
		MINUSEQ:     1,
		DIVEQ:       1,
		MULEQ:       1,
		ANDEQ:       1,
		OREQ:        1,
		':':         2,
		OPCHAN:      3,
		'?':         4,
		NILCOALESCE: 4,
		OROR:        5,
		ANDAND:      6,
		EQEQ:        7,
		NEQ:         7,
		'<':         7,
		LE:          7,
		'>':         7,
		GE:          7,
		'+':         8,
		'-':         8,
		'|':         8,
		'^':         8,
		'*':         9,
		'/':         9,
		'%':         9,
		SHIFTLEFT:   9,
		SHIFTRIGHT:  9,
		'&':         9,
		IN:          10,
		PLUSPLUS:    11,
		MINUSMINUS:  11,
		UNARY:       12,
	}

	yyXLAT = map[int]int{
		91:    0,   // '[' (230x)
		42:    1,   // '*' (227x)
		40:    2,   // '(' (218x)
		125:   3,   // '}' (217x)
		123:   4,   // '{' (213x)
		38:    5,   // '&' (208x)
		45:    6,   // '-' (208x)
		57395: 7,   // OPCHAN (208x)
		10:    8,   // '\n' (185x)
		57390: 9,   // DEFAULT (150x)
		57389: 10,  // CASE (149x)
		57346: 11,  // IDENT (145x)
		59:    12,  // ';' (142x)
		57344: 13,  // $end (132x)
		57400: 14,  // MAP (131x)
		58:    15,  // ':' (125x)
		44:    16,  // ',' (122x)
		46:    17,  // '.' (120x)
		41:    18,  // ')' (119x)
		33:    19,  // '!' (110x)
		94:    20,  // '^' (110x)
		57399: 21,  // CLOSE (110x)
		57402: 22,  // DBG (110x)
		57398: 23,  // DELETE (110x)
		57367: 24,  // FALSE (110x)
		57351: 25,  // FUNC (110x)
		57397: 26,  // LEN (110x)
		57394: 27,  // MAKE (110x)
		57365: 28,  // NEW (110x)
		57368: 29,  // NIL (110x)
		57347: 30,  // NUMBER (110x)
		57348: 31,  // STRING (110x)
		57366: 32,  // TRUE (110x)
		93:    33,  // ']' (101x)
		57358: 34,  // IN (100x)
		37:    35,  // '%' (98x)
		43:    36,  // '+' (98x)
		47:    37,  // '/' (98x)
		60:    38,  // '<' (98x)
		62:    39,  // '>' (98x)
		63:    40,  // '?' (98x)
		124:   41,  // '|' (98x)
		57364: 42,  // ANDAND (98x)
		57378: 43,  // ANDEQ (98x)
		57377: 44,  // DIVEQ (98x)
		57359: 45,  // EQEQ (98x)
		57361: 46,  // GE (98x)
		57362: 47,  // LE (98x)
		57375: 48,  // MINUSEQ (98x)
		57383: 49,  // MINUSMINUS (98x)
		57376: 50,  // MULEQ (98x)
		57360: 51,  // NEQ (98x)
		57369: 52,  // NILCOALESCE (98x)
		57379: 53,  // OREQ (98x)
		57363: 54,  // OROR (98x)
		57374: 55,  // PLUSEQ (98x)
		57382: 56,  // PLUSPLUS (98x)
		57384: 57,  // POW (98x)
		57385: 58,  // SHIFTLEFT (98x)
		57386: 59,  // SHIFTRIGHT (98x)
		61:    60,  // '=' (76x)
		57350: 61,  // VARARG (75x)
		57403: 62,  // WALRUS (73x)
		57474: 63,  // slice_count (63x)
		57506: 64,  // typed_slice_count (61x)
		57426: 65,  // expr_ident (50x)
		57410: 66,  // const_expr (44x)
		57413: 67,  // expr (44x)
		57414: 68,  // expr_anon_call (44x)
		57415: 69,  // expr_array (44x)
		57416: 70,  // expr_assoc (44x)
		57417: 71,  // expr_binary (44x)
		57418: 72,  // expr_call (44x)
		57421: 73,  // expr_close (44x)
		57422: 74,  // expr_dbg (44x)
		57423: 75,  // expr_delete (44x)
		57425: 76,  // expr_func (44x)
		57428: 77,  // expr_in (44x)
		57429: 78,  // expr_item_or_slice (44x)
		57430: 79,  // expr_iterable (44x)
		57431: 80,  // expr_len (44x)
		57432: 81,  // expr_literals (44x)
		57433: 82,  // expr_literals_helper (44x)
		57434: 83,  // expr_make (44x)
		57435: 84,  // expr_map (44x)
		57439: 85,  // expr_member (44x)
		57440: 86,  // expr_member_or_ident (44x)
		57441: 87,  // expr_new (44x)
		57442: 88,  // expr_opchan (44x)
		57443: 89,  // expr_paren (44x)
		57444: 90,  // expr_ternary (44x)
		57446: 91,  // expr_unary (44x)
		57507: 92,  // unary_op (44x)
		57456: 93,  // newline (36x)
		57419: 94,  // expr_call_helper (34x)
		57406: 95,  // bin_op (33x)
		57457: 96,  // newlines (33x)
		57458: 97,  // op_assoc (33x)
		57459: 98,  // op_assoc1 (33x)
		57355: 99,  // IF (31x)
		57353: 100, // VAR (31x)
		57380: 101, // BREAK (30x)
		57381: 102, // CONTINUE (30x)
		57392: 103, // DEFER (30x)
		57357: 104, // FOR (30x)
		57391: 105, // GO (30x)
		57370: 106, // MODULE (30x)
		57352: 107, // RETURN (30x)
		57388: 108, // SELECT (30x)
		57387: 109, // SWITCH (30x)
		57354: 110, // THROW (30x)
		57371: 111, // TRY (30x)
		57393: 112, // CHAN (29x)
		57401: 113, // STRUCT (29x)
		57472: 114, // opt_term (19x)
		57503: 115, // term (19x)
		57409: 116, // compstmt (18x)
		57504: 117, // type_data (18x)
		57469: 118, // opt_newlines (15x)
		57407: 119, // comma_opt_newlines (11x)
		57447: 120, // exprs (10x)
		57356: 121, // ELSE (4x)
		57436: 122, // expr_map_content (4x)
		57445: 123, // expr_typed_ident (4x)
		57463: 124, // opt_exprs (4x)
		57484: 125, // stmt_lets (4x)
		57500: 126, // stmt_var (4x)
		57501: 127, // stmt_var_or_lets (4x)
		57462: 128, // opt_expr (3x)
		57476: 129, // stmt (3x)
		57477: 130, // stmt_break (3x)
		57478: 131, // stmt_continue (3x)
		57479: 132, // stmt_defer (3x)
		57480: 133, // stmt_expr (3x)
		57481: 134, // stmt_for (3x)
		57482: 135, // stmt_go (3x)
		57483: 136, // stmt_if (3x)
		57485: 137, // stmt_module (3x)
		57486: 138, // stmt_return (3x)
		57487: 139, // stmt_select (3x)
		57493: 140, // stmt_switch (3x)
		57498: 141, // stmt_throw (3x)
		57499: 142, // stmt_try (3x)
		57408: 143, // comma_separated_exprs (2x)
		57420: 144, // expr_callable (2x)
		57438: 145, // expr_map_key_value (2x)
		57452: 146, // func_expr_typed_ident (2x)
		57454: 147, // func_expr_untyped_ident (2x)
		57461: 148, // opt_comma_opt_newlines (2x)
		57468: 149, // opt_ident (2x)
		57488: 150, // stmt_select_case (2x)
		57494: 151, // stmt_switch_case (2x)
		57497: 152, // stmt_switch_default (2x)
		57372: 153, // CATCH (1x)
		57411: 154, // else_if (1x)
		57412: 155, // else_if_list (1x)
		57424: 156, // expr_for_idents (1x)
		57427: 157, // expr_idents (1x)
		57437: 158, // expr_map_content_helper (1x)
		57373: 159, // FINALLY (1x)
		57448: 160, // func_expr_args (1x)
		57449: 161, // func_expr_idents (1x)
		57450: 162, // func_expr_idents_last_untyped (1x)
		57451: 163, // func_expr_idents_not_empty (1x)
		57453: 164, // func_expr_typed_idents (1x)
		57455: 165, // maybe_else (1x)
		57460: 166, // op_lets (1x)
		57464: 167, // opt_finally (1x)
		57465: 168, // opt_func_return_expr_idents (1x)
		57466: 169, // opt_func_return_expr_idents1 (1x)
		57467: 170, // opt_func_return_expr_idents2 (1x)
		57470: 171, // opt_stmt_select_cases (1x)
		57471: 172, // opt_stmt_var_or_lets (1x)
		57473: 173, // slice (1x)
		57475: 174, // start (1x)
		57489: 175, // stmt_select_cases (1x)
		57490: 176, // stmt_select_content (1x)
		57491: 177, // stmt_select_default (1x)
		57492: 178, // stmt_select_opt_default (1x)
		57495: 179, // stmt_switch_cases (1x)
		57496: 180, // stmt_switch_cases_helper (1x)
		57502: 181, // stmtsStmt (1x)
		57396: 182, // TYPE (1x)
		57505: 183, // type_data_struct (1x)
		57405: 184, // $default (0x)
		57349: 185, // ARRAY (0x)
		57345: 186, // error (0x)
		57404: 187, // UNARY (0x)
	}

	yySymNames = []string{
		"'['",
		"'*'",
		"'('",
		"'}'",
		"'{'",
		"'&'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"DEFAULT",
		"CASE",
		"IDENT",
		"';'",
		"$end",
		"MAP",
		"':'",
		"','",
		"'.'",
		"')'",
		"'!'",
		"'^'",
		"CLOSE",
		"DBG",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"']'",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"'='",
		"VARARG",
		"WALRUS",
		"slice_count",
		"typed_slice_count",
		"expr_ident",
		"const_expr",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_dbg",
		"expr_delete",
		"expr_func",
		"expr_in",
		"expr_item_or_slice",
		"expr_iterable",
		"expr_len",
		"expr_literals",
		"expr_literals_helper",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"unary_op",
		"newline",
		"expr_call_helper",
		"bin_op",
		"newlines",
		"op_assoc",
		"op_assoc1",
		"IF",
		"VAR",
		"BREAK",
		"CONTINUE",
		"DEFER",
		"FOR",
		"GO",
		"MODULE",
		"RETURN",
		"SELECT",
		"SWITCH",
		"THROW",
		"TRY",
		"CHAN",
		"STRUCT",
		"opt_term",
		"term",
		"compstmt",
		"type_data",
		"opt_newlines",
		"comma_opt_newlines",
		"exprs",
		"ELSE",
		"expr_map_content",
		"expr_typed_ident",
		"opt_exprs",
		"stmt_lets",
		"stmt_var",
		"stmt_var_or_lets",
		"opt_expr",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_if",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"comma_separated_exprs",
		"expr_callable",
		"expr_map_key_value",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"opt_comma_opt_newlines",
		"opt_ident",
		"stmt_select_case",
		"stmt_switch_case",
		"stmt_switch_default",
		"CATCH",
		"else_if",
		"else_if_list",
		"expr_for_idents",
		"expr_idents",
		"expr_map_content_helper",
		"FINALLY",
		"func_expr_args",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"maybe_else",
		"op_lets",
		"opt_finally",
		"opt_func_return_expr_idents",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"opt_stmt_select_cases",
		"opt_stmt_var_or_lets",
		"slice",
		"start",
		"stmt_select_cases",
		"stmt_select_content",
		"stmt_select_default",
		"stmt_select_opt_default",
		"stmt_switch_cases",
		"stmt_switch_cases_helper",
		"stmtsStmt",
		"TYPE",
		"type_data_struct",
		"$default",
		"ARRAY",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {174, 1},
		2:   {116, 1},
		3:   {116, 3},
		4:   {181, 1},
		5:   {181, 3},
		6:   {129, 1},
		7:   {129, 1},
		8:   {129, 1},
		9:   {129, 1},
		10:  {129, 1},
		11:  {129, 1},
		12:  {129, 1},
		13:  {129, 1},
		14:  {129, 1},
		15:  {129, 1},
		16:  {129, 1},
		17:  {129, 1},
		18:  {129, 1},
		19:  {129, 1},
		20:  {67, 1},
		21:  {67, 1},
		22:  {67, 1},
		23:  {67, 1},
		24:  {67, 1},
		25:  {67, 1},
		26:  {67, 1},
		27:  {67, 1},
		28:  {67, 1},
		29:  {67, 1},
		30:  {67, 1},
		31:  {67, 1},
		32:  {67, 1},
		33:  {79, 1},
		34:  {79, 1},
		35:  {79, 1},
		36:  {79, 1},
		37:  {79, 1},
		38:  {79, 1},
		39:  {79, 1},
		40:  {79, 1},
		41:  {130, 1},
		42:  {131, 1},
		43:  {138, 2},
		44:  {141, 2},
		45:  {137, 5},
		46:  {133, 1},
		47:  {135, 2},
		48:  {132, 2},
		49:  {142, 10},
		50:  {167, 0},
		51:  {167, 4},
		52:  {172, 0},
		53:  {172, 1},
		54:  {127, 1},
		55:  {127, 1},
		56:  {126, 4},
		57:  {125, 3},
		58:  {166, 1},
		59:  {166, 1},
		60:  {136, 7},
		61:  {155, 0},
		62:  {155, 2},
		63:  {154, 6},
		64:  {165, 0},
		65:  {165, 4},
		66:  {134, 4},
		67:  {134, 5},
		68:  {134, 7},
		69:  {134, 9},
		70:  {156, 1},
		71:  {156, 3},
		72:  {139, 4},
		73:  {176, 0},
		74:  {176, 3},
		75:  {171, 0},
		76:  {171, 1},
		77:  {175, 1},
		78:  {175, 2},
		79:  {150, 4},
		80:  {178, 0},
		81:  {178, 1},
		82:  {177, 3},
		83:  {140, 7},
		84:  {179, 0},
		85:  {179, 1},
		86:  {180, 1},
		87:  {180, 1},
		88:  {180, 2},
		89:  {180, 2},
		90:  {151, 4},
		91:  {151, 4},
		92:  {152, 3},
		93:  {168, 0},
		94:  {168, 1},
		95:  {168, 3},
		96:  {169, 0},
		97:  {169, 1},
		98:  {170, 1},
		99:  {170, 3},
		100: {161, 0},
		101: {161, 1},
		102: {163, 1},
		103: {163, 1},
		104: {147, 1},
		105: {146, 1},
		106: {162, 1},
		107: {162, 3},
		108: {164, 1},
		109: {164, 3},
		110: {124, 0},
		111: {124, 1},
		112: {120, 1},
		113: {120, 3},
		114: {128, 0},
		115: {128, 1},
		116: {74, 4},
		117: {74, 4},
		118: {80, 4},
		119: {89, 3},
		120: {69, 2},
		121: {69, 3},
		122: {69, 4},
		123: {143, 3},
		124: {90, 5},
		125: {87, 4},
		126: {88, 3},
		127: {88, 2},
		128: {77, 3},
		129: {75, 4},
		130: {75, 6},
		131: {73, 4},
		132: {81, 1},
		133: {82, 1},
		134: {82, 1},
		135: {82, 1},
		136: {66, 1},
		137: {66, 1},
		138: {66, 1},
		139: {86, 1},
		140: {86, 1},
		141: {65, 1},
		142: {123, 2},
		143: {149, 0},
		144: {149, 1},
		145: {85, 3},
		146: {144, 1},
		147: {144, 1},
		148: {72, 2},
		149: {68, 2},
		150: {94, 4},
		151: {94, 3},
		152: {92, 1},
		153: {92, 1},
		154: {92, 1},
		155: {92, 1},
		156: {92, 1},
		157: {91, 2},
		158: {95, 1},
		159: {95, 1},
		160: {95, 1},
		161: {95, 1},
		162: {95, 1},
		163: {95, 1},
		164: {95, 1},
		165: {95, 1},
		166: {95, 1},
		167: {95, 1},
		168: {95, 1},
		169: {95, 1},
		170: {95, 1},
		171: {95, 1},
		172: {95, 1},
		173: {95, 1},
		174: {95, 1},
		175: {95, 1},
		176: {71, 3},
		177: {71, 3},
		178: {71, 1},
		179: {97, 1},
		180: {97, 1},
		181: {97, 1},
		182: {97, 1},
		183: {97, 1},
		184: {97, 1},
		185: {98, 1},
		186: {98, 1},
		187: {70, 3},
		188: {70, 2},
		189: {76, 9},
		190: {160, 3},
		191: {160, 2},
		192: {160, 1},
		193: {83, 4},
		194: {83, 6},
		195: {83, 8},
		196: {83, 7},
		197: {117, 1},
		198: {117, 3},
		199: {117, 2},
		200: {117, 1},
		201: {117, 5},
		202: {117, 2},
		203: {117, 6},
		204: {183, 1},
		205: {183, 3},
		206: {64, 2},
		207: {63, 2},
		208: {63, 3},
		209: {84, 4},
		210: {84, 8},
		211: {84, 3},
		212: {122, 1},
		213: {122, 3},
		214: {158, 1},
		215: {158, 3},
		216: {145, 3},
		217: {78, 4},
		218: {173, 3},
		219: {173, 2},
		220: {173, 2},
		221: {173, 1},
		222: {157, 1},
		223: {157, 3},
		224: {114, 0},
		225: {114, 1},
		226: {115, 1},
		227: {115, 2},
		228: {118, 0},
		229: {118, 1},
		230: {96, 1},
		231: {96, 2},
		232: {93, 1},
		233: {119, 2},
		234: {148, 1},
		235: {148, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [416][]uint16{
		// 0
		{12, 12, 12, 4: 12, 12, 12, 12, 244, 11: 12, 242, 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 238, 174: 237},
		{13: 236},
		{13: 235},
		{305, 324, 304, 234, 332, 325, 321, 308, 234, 234, 234, 320, 13: 234, 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 290, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 99: 298, 296, 285, 286, 292, 299, 291, 289, 287, 300, 301, 288, 293, 120: 297, 125: 295, 294, 250, 129: 249, 251, 252, 262, 263, 257, 261, 256, 255, 253, 260, 259, 254, 258, 181: 248},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13: 11, 11, 19: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 99: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		// 5
		{10, 10, 10, 10, 10, 10, 10, 10, 244, 10, 10, 10, 13: 10, 10, 19: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 93: 247, 99: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{8, 8, 8, 8, 8, 8, 8, 8, 244, 8, 8, 8, 13: 8, 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 243, 96: 246, 99: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 118: 245},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 13: 6, 6, 16: 6, 19: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 99: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 13: 4, 4, 16: 4, 19: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 99: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 13: 9, 9, 19: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 99: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		// 10
		{7, 7, 7, 7, 7, 7, 7, 7, 244, 7, 7, 7, 13: 7, 7, 16: 7, 19: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 93: 247, 99: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13: 5, 5, 16: 5, 19: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 99: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{3: 12, 8: 244, 12, 12, 12: 242, 12, 93: 243, 96: 241, 114: 649, 650},
		{3: 232, 8: 232, 232, 232, 12: 232, 232},
		{3: 230, 8: 230, 230, 230, 12: 230, 230, 15: 230},
		// 15
		{3: 229, 8: 229, 229, 229, 12: 229, 229, 15: 229},
		{3: 228, 8: 228, 228, 228, 12: 228, 228, 15: 228},
		{3: 227, 8: 227, 227, 227, 12: 227, 227, 15: 227},
		{3: 226, 8: 226, 226, 226, 12: 226, 226, 15: 226},
		{3: 225, 8: 225, 225, 225, 12: 225, 225, 15: 225},
		// 20
		{3: 224, 8: 224, 224, 224, 12: 224, 224, 15: 224},
		{3: 223, 8: 223, 223, 223, 12: 223, 223, 15: 223},
		{3: 222, 8: 222, 222, 222, 12: 222, 222, 15: 222},
		{3: 221, 8: 221, 221, 221, 12: 221, 221, 15: 221},
		{3: 220, 8: 220, 220, 220, 12: 220, 220, 15: 220},
		// 25
		{3: 219, 8: 219, 219, 219, 12: 219, 219, 15: 219},
		{3: 218, 8: 218, 218, 218, 12: 218, 218, 15: 218},
		{3: 217, 8: 217, 217, 217, 12: 217, 217, 15: 217},
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 12: 216, 216, 15: 216, 216, 216, 216, 33: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 12: 215, 215, 15: 215, 215, 215, 215, 33: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215},
		// 30
		{214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 12: 214, 214, 15: 214, 214, 214, 214, 33: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214},
		{213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 12: 213, 213, 15: 213, 213, 213, 213, 33: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
		{212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 12: 212, 212, 15: 212, 212, 212, 212, 33: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 12: 211, 211, 15: 211, 211, 211, 211, 33: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211},
		{210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 12: 210, 210, 15: 210, 210, 210, 210, 33: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
		// 35
		{209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 12: 209, 209, 15: 209, 209, 209, 209, 33: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
		{208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 12: 208, 208, 15: 208, 208, 208, 208, 33: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208},
		{207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 12: 207, 207, 15: 207, 207, 207, 207, 33: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
		{206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 12: 206, 206, 15: 206, 206, 206, 206, 33: 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206},
		{205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 12: 205, 205, 15: 205, 205, 205, 205, 33: 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
		// 40
		{204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 12: 204, 204, 15: 204, 204, 204, 204, 33: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204},
		{203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 12: 203, 203, 15: 203, 203, 203, 203, 33: 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203},
		{202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 12: 202, 202, 15: 202, 202, 202, 202, 33: 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202},
		{201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 12: 201, 201, 15: 201, 201, 201, 201, 33: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201},
		{200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 12: 200, 200, 15: 200, 200, 200, 200, 33: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
		// 45
		{199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 12: 199, 199, 15: 199, 199, 199, 199, 33: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199},
		{198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 12: 198, 198, 15: 198, 198, 198, 198, 33: 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198},
		{197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 12: 197, 197, 15: 197, 197, 197, 197, 33: 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197},
		{196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 12: 196, 196, 15: 196, 196, 196, 196, 33: 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196},
		{3: 195, 8: 195, 195, 195, 12: 195, 195, 15: 195},
		// 50
		{3: 194, 8: 194, 194, 194, 12: 194, 194, 15: 194},
		{305, 324, 304, 126, 332, 325, 321, 308, 126, 126, 126, 320, 126, 126, 331, 126, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 394, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 120: 508, 124: 648},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 647, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{11: 643},
		{381, 352, 349, 190, 5: 360, 351, 345, 190, 190, 190, 12: 190, 190, 15: 190, 124, 347, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 124, 62: 124, 94: 348, 368, 97: 378, 379},
		// 55
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 590, 639, 279, 327, 268, 640, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 144: 642},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 590, 639, 279, 327, 268, 640, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 144: 641},
		{4: 626},
		{3: 182, 8: 182, 182, 182, 12: 182, 182, 15: 182},
		{3: 181, 8: 181, 181, 181, 12: 181, 181, 15: 181},
		// 60
		{11: 320, 65: 621, 157: 620},
		{16: 340, 60: 618, 62: 617, 119: 397, 166: 616},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 600, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{305, 324, 304, 4: 574, 325, 321, 308, 11: 578, 184, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 575, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 100: 296, 120: 297, 125: 295, 294, 573, 156: 576, 172: 577},
		{4: 556},
		// 65
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 535, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{2: 521},
		{2: 518},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 516, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{8, 8, 8, 4: 8, 8, 8, 8, 244, 11: 8, 14: 8, 16: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 513, 93: 243, 96: 246, 118: 507, 143: 514},
		// 70
		{4: 505},
		{2: 502},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 501, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{2: 495},
		{2: 492},
		// 75
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 12: 104, 104, 15: 104, 104, 104, 104, 33: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 12: 103, 103, 15: 103, 103, 103, 103, 33: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 12: 102, 102, 15: 102, 102, 102, 102, 33: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 12: 101, 101, 15: 101, 101, 101, 101, 33: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 12: 100, 100, 15: 100, 100, 100, 100, 33: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		// 80
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 12: 99, 99, 15: 99, 99, 99, 99, 33: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 12: 98, 98, 15: 98, 98, 98, 98, 33: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		{97, 97, 349, 97, 97, 97, 97, 97, 97, 97, 97, 12: 97, 97, 15: 97, 97, 97, 97, 33: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 94: 491},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 12: 96, 96, 15: 96, 96, 96, 96, 33: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 33: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 112: 95, 95},
		// 85
		{84, 84, 84, 4: 84, 84, 84, 84, 11: 84, 14: 84, 19: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{83, 83, 83, 4: 83, 83, 83, 83, 11: 83, 14: 83, 19: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 82, 4: 82, 82, 82, 82, 11: 82, 14: 82, 19: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{81, 81, 81, 4: 81, 81, 81, 81, 11: 81, 14: 81, 19: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{80, 80, 80, 4: 80, 80, 80, 80, 11: 80, 14: 80, 19: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
		// 90
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 490, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 12: 58, 58, 15: 58, 58, 58, 58, 33: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{2: 93, 11: 460, 149: 461},
		{2: 446},
		{417, 412, 11: 410, 14: 414, 63: 330, 413, 112: 415, 416, 117: 445},
		// 95
		{409, 4: 408},
		{8, 8, 8, 8, 8, 8, 8, 8, 244, 11: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 243, 96: 246, 118: 334, 122: 333},
		{3: 407},
		{305, 324, 304, 24, 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 335, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 145: 337, 158: 336},
		{381, 352, 349, 5: 360, 351, 345, 15: 380, 17: 347, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		// 100
		{3: 8, 8: 244, 16: 340, 93: 243, 96: 246, 118: 341, 339, 148: 338},
		{3: 22, 8: 22, 16: 22},
		{3: 23},
		{305, 324, 304, 2, 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 335, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 145: 343},
		{8, 8, 8, 8, 8, 8, 8, 8, 244, 11: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 243, 96: 246, 112: 8, 8, 118: 342},
		// 105
		{3: 1, 33: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 11: 3, 14: 3, 19: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 112: 3, 3},
		{3: 21, 8: 21, 16: 21},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 404, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 403, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		// 110
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 402, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{11: 401},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 12: 87, 87, 15: 87, 87, 87, 87, 33: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 18: 126, 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 394, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 120: 393, 124: 395},
		{78, 78, 78, 4: 78, 78, 78, 78, 11: 78, 14: 78, 19: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		// 115
		{77, 77, 77, 4: 77, 77, 77, 77, 11: 77, 14: 77, 19: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 4: 76, 76, 76, 76, 11: 76, 14: 76, 19: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		{75, 75, 75, 4: 75, 75, 75, 75, 11: 75, 14: 75, 19: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{74, 74, 74, 4: 74, 74, 74, 74, 11: 74, 14: 74, 19: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{73, 73, 73, 4: 73, 73, 73, 73, 11: 73, 14: 73, 19: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		// 120
		{72, 72, 72, 4: 72, 72, 72, 72, 11: 72, 14: 72, 19: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		{71, 71, 71, 4: 71, 71, 71, 71, 11: 71, 14: 71, 19: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		{70, 70, 70, 4: 70, 70, 70, 70, 11: 70, 14: 70, 19: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{69, 69, 69, 4: 69, 69, 69, 69, 11: 69, 14: 69, 19: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{68, 68, 68, 4: 68, 68, 68, 68, 11: 68, 14: 68, 19: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		// 125
		{67, 67, 67, 4: 67, 67, 67, 67, 11: 67, 14: 67, 19: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{66, 66, 66, 4: 66, 66, 66, 66, 11: 66, 14: 66, 19: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{65, 65, 65, 4: 65, 65, 65, 65, 11: 65, 14: 65, 19: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		{64, 64, 64, 4: 64, 64, 64, 64, 11: 64, 14: 64, 19: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{63, 63, 63, 4: 63, 63, 63, 63, 11: 63, 14: 63, 19: 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		// 130
		{62, 62, 62, 4: 62, 62, 62, 62, 11: 62, 14: 62, 19: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 4: 61, 61, 61, 61, 11: 61, 14: 61, 19: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 392, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 391, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{57, 57, 57, 4: 57, 57, 57, 57, 11: 57, 14: 57, 19: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		// 135
		{56, 56, 56, 4: 56, 56, 56, 56, 11: 56, 14: 56, 19: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{55, 55, 55, 4: 55, 55, 55, 55, 11: 55, 14: 55, 19: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{54, 54, 54, 4: 54, 54, 54, 54, 11: 54, 14: 54, 19: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{53, 53, 53, 4: 53, 53, 53, 53, 11: 53, 14: 53, 19: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{52, 52, 52, 4: 52, 52, 52, 52, 11: 52, 14: 52, 19: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		// 140
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 12: 51, 51, 15: 51, 51, 51, 51, 33: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 12: 50, 50, 15: 50, 50, 50, 50, 33: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 390, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 12: 48, 48, 15: 48, 48, 48, 48, 33: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 389, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		// 145
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 384, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 382, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 173: 383},
		{381, 352, 349, 5: 360, 351, 345, 15: 387, 17: 347, 33: 15, 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{33: 386},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 385, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{381, 352, 349, 5: 360, 351, 345, 17: 347, 33: 16, 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		// 150
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 12: 19, 19, 15: 19, 19, 19, 19, 33: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 17, 63: 330, 306, 318, 314, 388, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{381, 352, 349, 5: 360, 351, 345, 17: 347, 33: 18, 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{381, 352, 349, 20, 5: 360, 351, 345, 20, 16: 20, 347, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{381, 352, 349, 49, 49, 360, 351, 345, 49, 49, 49, 12: 49, 49, 15: 49, 49, 347, 49, 33: 49, 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 49, 49, 49, 94: 348, 368, 97: 378, 379},
		// 155
		{381, 352, 349, 59, 59, 360, 351, 59, 59, 59, 59, 12: 59, 59, 15: 59, 59, 347, 59, 33: 59, 346, 355, 350, 353, 59, 59, 59, 358, 59, 59, 59, 59, 59, 59, 59, 377, 59, 59, 59, 59, 59, 59, 376, 59, 356, 357, 59, 59, 59, 94: 348, 368, 97: 378, 379},
		{381, 352, 349, 60, 60, 360, 351, 345, 60, 60, 60, 12: 60, 60, 15: 60, 60, 347, 60, 33: 60, 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 60, 60, 60, 94: 348, 368, 97: 378, 379},
		{16: 340, 18: 125, 61: 398, 119: 397},
		{381, 352, 349, 124, 5: 360, 351, 345, 124, 124, 124, 12: 124, 124, 15: 124, 124, 347, 124, 33: 124, 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 61: 124, 94: 348, 368, 97: 378, 379},
		{18: 396},
		// 160
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 12: 85, 85, 15: 85, 85, 85, 85, 33: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 400, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{18: 399},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 12: 86, 86, 15: 86, 86, 86, 86, 33: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{381, 352, 349, 123, 5: 360, 351, 345, 123, 123, 123, 12: 123, 123, 15: 123, 123, 347, 123, 33: 123, 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 123, 123, 123, 94: 348, 368, 97: 378, 379},
		// 165
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 12: 91, 91, 15: 91, 91, 91, 91, 33: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		{381, 108, 349, 108, 108, 108, 108, 108, 108, 108, 108, 12: 108, 108, 15: 108, 108, 347, 108, 33: 108, 346, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 377, 108, 108, 108, 108, 108, 108, 376, 108, 108, 108, 108, 108, 108, 94: 348, 368, 97: 378, 379},
		{381, 352, 349, 110, 110, 360, 351, 345, 110, 110, 110, 12: 110, 110, 15: 110, 110, 347, 110, 33: 110, 346, 355, 350, 353, 365, 363, 344, 358, 361, 110, 110, 369, 364, 366, 110, 377, 110, 362, 367, 110, 359, 110, 376, 110, 356, 357, 110, 110, 110, 94: 348, 368, 97: 378, 379},
		{381, 352, 349, 5: 360, 351, 345, 15: 405, 17: 347, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 406, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		// 170
		{381, 352, 349, 112, 112, 360, 351, 345, 112, 112, 112, 12: 112, 112, 15: 112, 112, 347, 112, 33: 112, 346, 355, 350, 353, 365, 363, 344, 358, 361, 112, 112, 369, 364, 366, 112, 377, 112, 362, 367, 112, 359, 112, 376, 112, 356, 357, 112, 112, 112, 94: 348, 368, 97: 378, 379},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 12: 25, 25, 15: 25, 25, 25, 25, 33: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{8, 8, 8, 8, 8, 8, 8, 8, 244, 11: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 243, 96: 246, 118: 334, 122: 443},
		{417, 412, 11: 410, 14: 414, 63: 330, 413, 112: 415, 416, 117: 411},
		{3: 39, 39, 8: 39, 16: 39, 39, 39, 33: 39},
		// 175
		{17: 430, 33: 438},
		{417, 412, 11: 410, 14: 414, 63: 330, 413, 112: 415, 416, 117: 437},
		{3: 36, 36, 8: 36, 16: 36, 36, 36, 33: 36},
		{433},
		{417, 412, 11: 410, 14: 414, 63: 330, 413, 112: 415, 416, 117: 432},
		// 180
		{4: 420},
		{33: 418},
		{417, 29, 11: 29, 14: 29, 63: 419, 112: 29, 29},
		{28, 28, 11: 28, 14: 28, 112: 28, 28},
		{8: 244, 11: 8, 93: 243, 96: 246, 118: 421},
		// 185
		{11: 320, 65: 422, 123: 424, 183: 423},
		{417, 412, 11: 410, 14: 414, 63: 330, 413, 112: 415, 416, 117: 429},
		{3: 8, 8: 244, 16: 340, 93: 243, 96: 246, 118: 425, 426},
		{3: 32, 8: 32, 16: 32},
		{3: 428},
		// 190
		{11: 320, 65: 422, 123: 427},
		{3: 31, 8: 31, 16: 31},
		{3: 33, 33, 8: 33, 16: 33, 33, 33, 33: 33},
		{3: 94, 8: 94, 16: 94, 430, 94},
		{11: 431},
		// 195
		{3: 38, 38, 8: 38, 16: 38, 38, 38, 33: 38},
		{3: 34, 34, 8: 34, 16: 34, 430, 34, 33: 34},
		{417, 412, 11: 410, 14: 414, 63: 330, 413, 112: 415, 416, 117: 434},
		{17: 430, 33: 435},
		{417, 412, 11: 410, 14: 414, 63: 330, 413, 112: 415, 416, 117: 436},
		// 200
		{3: 35, 35, 8: 35, 16: 35, 430, 35, 33: 35},
		{3: 37, 37, 8: 37, 16: 37, 430, 37, 33: 37},
		{417, 412, 11: 410, 14: 414, 63: 330, 413, 112: 415, 416, 117: 439},
		{4: 440, 17: 430},
		{8, 8, 8, 8, 8, 8, 8, 8, 244, 11: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 243, 96: 246, 118: 334, 122: 441},
		// 205
		{3: 442},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12: 26, 26, 15: 26, 26, 26, 26, 33: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{3: 444},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 12: 27, 27, 15: 27, 27, 27, 27, 33: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{3: 30, 30, 8: 30, 16: 30, 430, 30, 33: 30},
		// 210
		{417, 412, 11: 410, 14: 414, 63: 330, 413, 112: 415, 416, 117: 447, 182: 448},
		{16: 454, 430, 453},
		{11: 449},
		{16: 450},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 451, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		// 215
		{381, 352, 349, 5: 360, 351, 345, 17: 347, 452, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 12: 40, 40, 15: 40, 40, 40, 40, 33: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 12: 43, 43, 15: 43, 43, 43, 43, 33: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 455, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{381, 352, 349, 5: 360, 351, 345, 16: 457, 347, 456, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		// 220
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 12: 42, 42, 15: 42, 42, 42, 42, 33: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 458, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{381, 352, 349, 5: 360, 351, 345, 17: 347, 459, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 12: 41, 41, 15: 41, 41, 41, 41, 33: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{2: 92, 4: 92},
		// 225
		{2: 462},
		{11: 466, 18: 136, 65: 422, 123: 467, 146: 469, 468, 160: 470, 471, 464, 463, 465},
		{16: 340, 18: 135, 119: 487},
		{16: 134, 18: 134, 61: 485},
		{16: 133, 18: 133},
		// 230
		{95, 95, 11: 95, 14: 95, 16: 132, 18: 132, 61: 132, 112: 95, 95},
		{16: 131, 18: 131},
		{16: 130, 18: 130, 61: 130},
		{16: 128, 18: 128},
		{18: 472},
		// 235
		{18: 44},
		{417, 412, 474, 4: 143, 11: 410, 14: 414, 63: 330, 413, 112: 415, 416, 117: 473, 168: 475},
		{4: 142, 17: 430},
		{417, 412, 11: 410, 14: 414, 18: 140, 63: 330, 413, 112: 415, 416, 117: 481, 169: 479, 480},
		{4: 476},
		// 240
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 11: 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 477},
		{3: 478},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 12: 47, 47, 15: 47, 47, 47, 47, 33: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{18: 484},
		{16: 340, 18: 139, 119: 482},
		// 245
		{16: 138, 430, 138},
		{417, 412, 11: 410, 14: 414, 63: 330, 413, 112: 415, 416, 117: 483},
		{16: 137, 430, 137},
		{4: 141},
		{417, 412, 11: 410, 14: 414, 18: 45, 63: 330, 413, 112: 415, 416, 117: 486},
		// 250
		{17: 430, 46},
		{11: 466, 65: 422, 123: 467, 146: 489, 488},
		{16: 129, 18: 129, 61: 129},
		{16: 127, 18: 127},
		{381, 79, 349, 79, 79, 79, 79, 79, 79, 79, 79, 12: 79, 79, 15: 79, 79, 347, 79, 33: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 94: 348, 368, 97: 378, 379},
		// 255
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 12: 88, 88, 15: 88, 88, 88, 88, 33: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 493, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{381, 352, 349, 5: 360, 351, 345, 17: 347, 494, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 12: 105, 105, 15: 105, 105, 105, 105, 33: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 496, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		// 260
		{381, 352, 349, 5: 360, 351, 345, 16: 498, 347, 497, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 12: 107, 107, 15: 107, 107, 107, 107, 33: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 499, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{381, 352, 349, 5: 360, 351, 345, 17: 347, 500, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 12: 106, 106, 15: 106, 106, 106, 106, 33: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106},
		// 265
		{381, 352, 349, 109, 109, 360, 351, 345, 109, 109, 109, 12: 109, 109, 15: 109, 109, 347, 109, 33: 109, 346, 355, 350, 353, 365, 363, 344, 358, 361, 109, 109, 369, 364, 366, 109, 377, 109, 362, 367, 109, 359, 109, 376, 109, 356, 357, 109, 109, 109, 94: 348, 368, 97: 378, 379},
		{417, 412, 11: 410, 14: 414, 63: 330, 413, 112: 415, 416, 117: 503},
		{17: 430, 504},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 12: 111, 111, 15: 111, 111, 111, 111, 33: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		{8, 8, 8, 8, 8, 8, 8, 8, 244, 11: 8, 14: 8, 16: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 243, 96: 246, 118: 507, 143: 506},
		// 270
		{3: 512},
		{305, 324, 304, 126, 332, 325, 321, 308, 126, 11: 320, 14: 331, 16: 126, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 126, 63: 330, 306, 318, 314, 394, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 120: 508, 124: 509},
		{3: 125, 8: 125, 125, 125, 12: 125, 125, 15: 125, 340, 33: 125, 119: 397},
		{3: 8, 8: 244, 16: 340, 33: 8, 93: 243, 96: 246, 118: 341, 511, 148: 510},
		{3: 113, 33: 113},
		// 275
		{3: 2, 33: 2},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 12: 114, 114, 15: 114, 114, 114, 114, 33: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114},
		{417, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 29, 116, 116, 29, 116, 116, 116, 116, 33: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 419, 112: 29, 29},
		{33: 515},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 12: 115, 115, 15: 115, 115, 115, 115, 33: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		// 280
		{381, 352, 349, 5: 360, 351, 345, 17: 347, 517, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 12: 117, 117, 15: 117, 117, 117, 117, 33: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 519, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{381, 352, 349, 5: 360, 351, 345, 17: 347, 520, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 12: 118, 118, 15: 118, 118, 118, 118, 33: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		// 285
		{305, 527, 304, 4: 332, 325, 321, 308, 11: 526, 14: 528, 18: 122, 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 525, 318, 314, 522, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 112: 415, 416, 117: 524, 128: 523},
		{381, 352, 349, 4: 121, 360, 351, 345, 12: 121, 17: 347, 121, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{18: 534},
		{17: 430, 533},
		{4: 505, 17: 36, 36},
		// 290
		{95, 95, 95, 5: 95, 95, 95, 17: 95, 95, 34: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95},
		{417, 81, 81, 4: 81, 81, 81, 81, 11: 410, 14: 414, 19: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 63: 330, 413, 112: 415, 416, 117: 437},
		{529, 4: 408},
		{417, 412, 11: 410, 14: 414, 63: 330, 413, 112: 415, 416, 117: 530},
		{17: 430, 33: 531},
		// 295
		{417, 412, 11: 410, 14: 414, 63: 330, 413, 112: 415, 416, 117: 532},
		{4: 440, 17: 430, 35},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 12: 119, 119, 15: 119, 119, 119, 119, 33: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 12: 120, 120, 15: 120, 120, 120, 120, 33: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{381, 352, 349, 4: 536, 360, 351, 345, 17: 347, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		// 300
		{3: 8, 8: 244, 8, 8, 93: 243, 96: 246, 118: 537},
		{3: 152, 8: 152, 543, 542, 151: 541, 540, 179: 538, 539},
		{3: 8, 8: 244, 93: 243, 96: 246, 118: 554},
		{3: 151, 8: 151, 543, 542, 151: 552, 553},
		{3: 150, 8: 150, 150, 150},
		// 305
		{3: 149, 8: 149, 149, 149},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 126, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 546, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 120: 508, 124: 547},
		{15: 544},
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 12, 12, 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 545},
		{3: 144, 8: 144, 144, 144},
		// 310
		{381, 352, 349, 5: 360, 351, 345, 15: 550, 124, 347, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{15: 548},
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 12, 12, 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 549},
		{3: 145, 8: 145, 145, 145},
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 12, 12, 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 551},
		// 315
		{3: 146, 8: 146, 146, 146},
		{3: 148, 8: 148, 148, 148},
		{3: 147, 8: 147, 147, 147},
		{3: 555},
		{3: 153, 8: 153, 153, 153, 12: 153, 153, 15: 153},
		// 320
		{3: 163, 8: 244, 8, 8, 93: 243, 96: 246, 118: 558, 176: 557},
		{3: 572},
		{3: 161, 9: 161, 562, 150: 561, 171: 559, 175: 560},
		{3: 156, 9: 569, 177: 568, 567},
		{3: 160, 9: 160, 562, 150: 566},
		// 325
		{3: 159, 9: 159, 159},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 290, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 99: 298, 296, 285, 286, 292, 299, 291, 289, 287, 300, 301, 288, 293, 120: 297, 125: 295, 294, 250, 129: 563, 251, 252, 262, 263, 257, 261, 256, 255, 253, 260, 259, 254, 258},
		{15: 564},
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 12, 12, 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 565},
		{3: 157, 9: 157, 157},
		// 330
		{3: 158, 9: 158, 158},
		{3: 162},
		{3: 155},
		{15: 570},
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 11: 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 571},
		// 335
		{3: 154},
		{3: 164, 8: 164, 164, 164, 12: 164, 164, 15: 164},
		{12: 183},
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 11: 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 598, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 597, 118: 334, 122: 333},
		{381, 352, 349, 4: 594, 360, 351, 345, 16: 124, 347, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 124, 62: 124, 94: 348, 368, 97: 378, 379},
		// 340
		{34: 588},
		{12: 581},
		{95, 95, 95, 4: 95, 95, 95, 95, 16: 579, 95, 34: 166, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 62: 95},
		{11: 580},
		{34: 165},
		// 345
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 122, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 522, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 128: 582},
		{12: 583},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 522, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 128: 584},
		{4: 585},
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 11: 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 586},
		// 350
		{3: 587},
		{3: 167, 8: 167, 167, 167, 12: 167, 167, 15: 167},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 590, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 589, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{216, 216, 216, 4: 591, 216, 216, 216, 17: 216, 34: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
		{381, 352, 349, 5: 360, 351, 345, 17: 347, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		// 355
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 11: 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 592},
		{3: 593},
		{3: 168, 8: 168, 168, 168, 12: 168, 168, 15: 168},
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 11: 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 595},
		{3: 596},
		// 360
		{3: 169, 8: 169, 169, 169, 12: 169, 169, 15: 169},
		{3: 599},
		{10, 10, 10, 10, 10, 10, 10, 10, 244, 11: 10, 14: 10, 19: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 93: 247, 99: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{3: 170, 8: 170, 170, 170, 12: 170, 170, 15: 170},
		{381, 352, 349, 4: 601, 360, 351, 345, 17: 347, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		// 365
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 11: 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 602},
		{3: 603},
		{3: 175, 8: 175, 175, 175, 12: 175, 175, 15: 175, 121: 175, 155: 604},
		{3: 172, 8: 172, 172, 172, 12: 172, 172, 15: 172, 121: 607, 154: 606, 165: 605},
		{3: 176, 8: 176, 176, 176, 12: 176, 176, 15: 176},
		// 370
		{3: 174, 8: 174, 174, 174, 12: 174, 174, 15: 174, 121: 174},
		{4: 609, 99: 608},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 612, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326},
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 11: 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 610},
		{3: 611},
		// 375
		{3: 171, 8: 171, 171, 171, 12: 171, 171, 15: 171},
		{381, 352, 349, 4: 613, 360, 351, 345, 17: 347, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 11: 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 614},
		{3: 615},
		{3: 173, 8: 173, 173, 173, 12: 173, 173, 15: 173, 121: 173},
		// 380
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 394, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 120: 619},
		{178, 178, 178, 4: 178, 178, 178, 178, 11: 178, 14: 178, 19: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178},
		{177, 177, 177, 4: 177, 177, 177, 177, 11: 177, 14: 177, 19: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177},
		{3: 179, 8: 179, 179, 179, 12: 179, 179, 15: 179, 340, 119: 397},
		{16: 340, 60: 622, 119: 623},
		// 385
		{16: 14, 60: 14},
		{305, 324, 304, 4: 332, 325, 321, 308, 11: 320, 14: 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 394, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 120: 625},
		{11: 320, 65: 624},
		{16: 13, 60: 13},
		{3: 180, 8: 180, 180, 180, 12: 180, 180, 15: 180, 340, 119: 397},
		// 390
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 11: 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 627},
		{3: 628},
		{153: 629},
		{4: 93, 11: 460, 149: 630},
		{4: 631},
		// 395
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 11: 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 632},
		{3: 633},
		{3: 186, 8: 186, 186, 186, 12: 186, 186, 15: 186, 159: 635, 167: 634},
		{3: 187, 8: 187, 187, 187, 12: 187, 187, 15: 187},
		{4: 636},
		// 400
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 11: 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 637},
		{3: 638},
		{3: 185, 8: 185, 185, 185, 12: 185, 185, 15: 185},
		{200, 200, 200, 89, 5: 200, 200, 200, 89, 89, 89, 12: 89, 89, 15: 89, 17: 200, 34: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
		{199, 199, 199, 90, 5: 199, 199, 199, 90, 90, 90, 12: 90, 90, 15: 90, 17: 199, 34: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199},
		// 405
		{3: 188, 8: 188, 188, 188, 12: 188, 188, 15: 188},
		{3: 189, 8: 189, 189, 189, 12: 189, 189, 15: 189},
		{4: 644},
		{12, 12, 12, 12, 12, 12, 12, 12, 244, 11: 12, 242, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 243, 96: 241, 99: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 114: 239, 240, 645},
		{3: 646},
		// 410
		{3: 191, 8: 191, 191, 191, 12: 191, 191, 15: 191},
		{381, 352, 349, 192, 5: 360, 351, 345, 192, 192, 192, 12: 192, 192, 15: 192, 17: 347, 34: 346, 355, 350, 353, 365, 363, 344, 358, 361, 374, 373, 369, 364, 366, 371, 377, 372, 362, 367, 375, 359, 370, 376, 354, 356, 357, 94: 348, 368, 97: 378, 379},
		{3: 193, 8: 193, 193, 193, 12: 193, 193, 15: 193},
		{3: 233, 8: 233, 233, 233, 13: 233},
		{305, 324, 304, 11, 332, 325, 321, 308, 11, 11, 11, 320, 13: 11, 331, 19: 322, 323, 310, 302, 309, 316, 328, 303, 329, 307, 317, 312, 313, 315, 63: 330, 306, 318, 314, 290, 280, 279, 327, 268, 281, 274, 270, 275, 267, 276, 283, 264, 269, 265, 311, 272, 277, 319, 282, 271, 273, 278, 284, 266, 326, 99: 298, 296, 285, 286, 292, 299, 291, 289, 287, 300, 301, 288, 293, 120: 297, 125: 295, 294, 250, 129: 651, 251, 252, 262, 263, 257, 261, 256, 255, 253, 260, 259, 254, 258},
		// 415
		{3: 231, 8: 231, 231, 231, 12: 231, 231},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 186

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmt
			}
		}
	case 2:
		{
			yyVAL.stmt = nil
		}
	case 3:
		{
			yyVAL.stmt = yyS[yypt-1].stmtsStmt
		}
	case 4:
		{
			yyVAL.stmtsStmt = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 5:
		{
			yyS[yypt-2].stmtsStmt.Stmts = append(yyS[yypt-2].stmtsStmt.Stmts, yyS[yypt-0].stmt)
		}
	case 41:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 42:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 43:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 44:
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 45:
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyS[yypt-3].tok.Lit, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 46:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 47:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Go = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Go = true
			}
			yyVAL.stmt = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 48:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Defer = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Defer = true
			}
			yyVAL.stmt = &ast.DeferStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 49:
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyS[yypt-7].stmt, Var: yyS[yypt-4].opt_ident.Lit, Catch: yyS[yypt-2].stmt, Finally: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 50:
		{
			yyVAL.stmt = nil
		}
	case 51:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 52:
		{
			yyVAL.stmt = nil
		}
	case 53:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 56:
		{
			isItem := false
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					arr := []ast.Expr{}
					for _, el := range yyS[yypt-2].expr_idents {
						arr = append(arr, &ast.IdentExpr{Lit: el})
					}
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: arr, Rhs: yyS[yypt-0].exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 57:
		{
			isItem := false
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: yyS[yypt-1].op_lets}
				if len(yyS[yypt-2].exprs) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].exprs) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-2].exprs[0].Position())
		}
	case 58:
		{
			yyVAL.op_lets = true
		}
	case 59:
		{
			yyVAL.op_lets = false
		}
	case 60:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-5].expr, Then: yyS[yypt-3].stmt, ElseIf: yyS[yypt-1].else_if_list, Else: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 61:
		{
			yyVAL.else_if_list = []ast.Stmt{}
		}
	case 62:
		{
			yyS[yypt-1].else_if_list = append(yyS[yypt-1].else_if_list, yyS[yypt-0].stmt)
			yyVAL.else_if_list = yyS[yypt-1].else_if_list
		}
	case 63:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmt}
		}
	case 64:
		{
			yyVAL.stmt = nil
		}
	case 65:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 66:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 67:
		{
			yyVAL.stmt = &ast.LoopStmt{Expr: yyS[yypt-3].expr, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 68:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: yyS[yypt-5].expr_idents, Value: yyS[yypt-3].expr, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 69:
		{
			yyVAL.stmt = &ast.CForStmt{Stmt1: yyS[yypt-7].stmt, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 70:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 71:
		{
			yyVAL.expr_idents = []string{yyS[yypt-2].tok.Lit, yyS[yypt-0].tok.Lit}
		}
	case 72:
		{
			yyVAL.stmt = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 73:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{}
		}
	case 74:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{Cases: yyS[yypt-1].else_if_list, Default: yyS[yypt-0].stmt}
		}
	case 75:
		{
			yyVAL.else_if_list = nil
		}
	case 76:
		{
			yyVAL.else_if_list = yyS[yypt-0].else_if_list
		}
	case 77:
		{
			yyVAL.else_if_list = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 78:
		{
			yyVAL.else_if_list = append(yyVAL.else_if_list, yyS[yypt-0].stmt)
		}
	case 79:
		{
			yyVAL.stmt = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 80:
		{
			yyVAL.stmt = nil
		}
	case 81:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 82:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 83:
		{
			yyS[yypt-2].stmt_switch_cases.Expr = yyS[yypt-5].expr
			yyVAL.stmt = yyS[yypt-2].stmt_switch_cases
			yyVAL.stmt.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 84:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 85:
		{
			yyVAL.stmt_switch_cases = yyS[yypt-0].stmt_switch_cases
		}
	case 86:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyS[yypt-0].stmt}
		}
	case 87:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 88:
		{
			yyS[yypt-1].stmt_switch_cases.Cases = append(yyS[yypt-1].stmt_switch_cases.Cases, yyS[yypt-0].stmt)
			yyVAL.stmt_switch_cases = yyS[yypt-1].stmt_switch_cases
		}
	case 89:
		{
			if yyS[yypt-1].stmt_switch_cases.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyS[yypt-1].stmt_switch_cases.Default = yyS[yypt-0].stmt
		}
	case 90:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyS[yypt-2].expr}, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 91:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].exprs, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 92:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 93:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 94:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 95:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents
		}
	case 96:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{}
		}
	case 97:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-0].opt_func_return_expr_idents
		}
	case 98:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 99:
		{
			yyVAL.opt_func_return_expr_idents = append(yyS[yypt-2].opt_func_return_expr_idents, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 100:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 101:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents
		}
	case 104:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 105:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].expr_typed_ident.Name, TypeData: yyS[yypt-0].expr_typed_ident.TypeData}
		}
	case 106:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 107:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 108:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 109:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 110:
		{
			yyVAL.exprs = nil
		}
	case 111:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 112:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 113:
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 114:
		{
			yyVAL.expr = nil
		}
	case 115:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 116:
		{
			yyVAL.expr = &ast.DbgExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 117:
		{
			yyVAL.expr = &ast.DbgExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 118:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 119:
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 120:
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 121:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 122:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprs, TypeData: yyS[yypt-3].type_data}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 123:
		{
			yyVAL.exprs = yyS[yypt-1].exprs
		}
	case 124:
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 125:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 126:
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 127:
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 128:
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 129:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 130:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 131:
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 132:
		{
			yyVAL.expr = yyS[yypt-0].expr
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 133:
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 134:
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 135:
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 141:
		{
			yyVAL.expr = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 142:
		{
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: yyS[yypt-0].type_data}
		}
	case 143:
		{
			yyVAL.opt_ident = nil
		}
	case 144:
		{
			yyVAL.opt_ident = &yyS[yypt-0].tok
		}
	case 145:
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 148:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 149:
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyS[yypt-1].expr, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 150:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-2].exprs, VarArg: true}
		}
	case 151:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-1].exprs}
		}
	case 152:
		{
			yyVAL.str = "-"
		}
	case 153:
		{
			yyVAL.str = "!"
		}
	case 154:
		{
			yyVAL.str = "^"
		}
	case 155:
		{
			yyVAL.str = "*"
		}
	case 156:
		{
			yyVAL.str = "&"
		}
	case 157:
		{
			if yyS[yypt-1].str == "&" {
				if el, ok := yyS[yypt-0].expr.(*ast.IdentExpr); ok {
					yyVAL.expr = &ast.AddrExpr{Expr: el}
				} else if el, ok := yyS[yypt-0].expr.(*ast.MemberExpr); ok {
					yyVAL.expr = el
				}
			} else if yyS[yypt-1].str == "*" {
				yyVAL.expr = &ast.DerefExpr{Expr: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.UnaryExpr{Operator: yyS[yypt-1].str, Expr: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 158:
		{
			yyVAL.str = "+"
		}
	case 159:
		{
			yyVAL.str = "-"
		}
	case 160:
		{
			yyVAL.str = "*"
		}
	case 161:
		{
			yyVAL.str = "/"
		}
	case 162:
		{
			yyVAL.str = "**"
		}
	case 163:
		{
			yyVAL.str = "%"
		}
	case 164:
		{
			yyVAL.str = "<<"
		}
	case 165:
		{
			yyVAL.str = ">>"
		}
	case 166:
		{
			yyVAL.str = "|"
		}
	case 167:
		{
			yyVAL.str = "||"
		}
	case 168:
		{
			yyVAL.str = "&"
		}
	case 169:
		{
			yyVAL.str = "&&"
		}
	case 170:
		{
			yyVAL.str = "!="
		}
	case 171:
		{
			yyVAL.str = ">"
		}
	case 172:
		{
			yyVAL.str = ">="
		}
	case 173:
		{
			yyVAL.str = "<"
		}
	case 174:
		{
			yyVAL.str = "<="
		}
	case 175:
		{
			yyVAL.str = "??"
		}
	case 176:
		{
			if yyS[yypt-1].str == "??" {
				yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 177:
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 179:
		{
			yyVAL.str = "+="
		}
	case 180:
		{
			yyVAL.str = "-="
		}
	case 181:
		{
			yyVAL.str = "*="
		}
	case 182:
		{
			yyVAL.str = "/="
		}
	case 183:
		{
			yyVAL.str = "&="
		}
	case 184:
		{
			yyVAL.str = "|="
		}
	case 185:
		{
			yyVAL.str = "++"
		}
	case 186:
		{
			yyVAL.str = "--"
		}
	case 187:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 188:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: yyS[yypt-0].str}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 189:
		{
			f := &ast.FuncExpr{Params: yyS[yypt-5].func_expr_args.Params, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].stmt, VarArg: yyS[yypt-5].func_expr_args.VarArg}
			if yyS[yypt-5].func_expr_args.TypeData != nil {
				f.Params[len(f.Params)-1].TypeData = yyS[yypt-5].func_expr_args.TypeData
			}
			if yyS[yypt-7].opt_ident != nil {
				f.Name = yyS[yypt-7].opt_ident.Lit
			}
			yyVAL.expr = f
			yyVAL.expr.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 190:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-2].func_expr_idents, VarArg: true, TypeData: yyS[yypt-0].type_data}
		}
	case 191:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-1].func_expr_idents, VarArg: true, TypeData: nil}
		}
	case 192:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-0].func_expr_idents, VarArg: false, TypeData: nil}
		}
	case 193:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 194:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 195:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 196:
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 197:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 198:
		{
			if yyS[yypt-2].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyS[yypt-2].type_data.Env = append(yyS[yypt-2].type_data.Env, yyS[yypt-2].type_data.Name)
				yyS[yypt-2].type_data.Name = yyS[yypt-0].tok.Lit
			}
		}
	case 199:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 200:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 201:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 202:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 203:
		{
			yyVAL.type_data = yyS[yypt-2].type_data
		}
	case 204:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-0].expr_typed_ident.Name}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].expr_typed_ident.TypeData}}
		}
	case 205:
		{
			if yyS[yypt-2].type_data == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data.StructNames = append(yyVAL.type_data.StructNames, yyS[yypt-0].expr_typed_ident.Name)
			yyVAL.type_data.StructTypes = append(yyVAL.type_data.StructTypes, yyS[yypt-0].expr_typed_ident.TypeData)
		}
	case 206:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 207:
		{
			yyVAL.slice_count = 1
		}
	case 208:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 209:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyS[yypt-1].expr_map_content
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 210:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-5].type_data, SubType: yyS[yypt-3].type_data}
			yyVAL.expr = yyS[yypt-1].expr_map_content
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 211:
		{
			yyVAL.expr = yyS[yypt-1].expr_map_content
			yyVAL.expr.SetPosition(yyS[yypt-1].expr_map_content.Position())
		}
	case 212:
		{
			yyVAL.expr_map_content = &ast.MapExpr{}
		}
	case 213:
		{
			yyVAL.expr_map_content = yyS[yypt-1].expr_map_content
		}
	case 214:
		{
			yyVAL.expr_map_content = &ast.MapExpr{Keys: []ast.Expr{yyS[yypt-0].exprs[0]}, Values: []ast.Expr{yyS[yypt-0].exprs[1]}}
		}
	case 215:
		{
			yyVAL.expr_map_content.Keys = append(yyVAL.expr_map_content.Keys, yyS[yypt-0].exprs[0])
			yyVAL.expr_map_content.Values = append(yyVAL.expr_map_content.Values, yyS[yypt-0].exprs[1])
		}
	case 216:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 217:
		{
			if el, ok := yyS[yypt-1].expr.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-3].expr
			} else if el, ok := yyS[yypt-1].expr.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-3].expr
			}
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 218:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: yyS[yypt-0].expr}
		}
	case 219:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-1].expr, End: nil}
		}
	case 220:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: nil, End: yyS[yypt-0].expr}
		}
	case 221:
		{
			yyVAL.expr = &ast.ItemExpr{Index: yyS[yypt-0].expr}
		}
	case 222:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].expr.(*ast.IdentExpr).Lit}
		}
	case 223:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].expr.(*ast.IdentExpr).Lit)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
