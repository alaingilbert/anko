// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                 int
	stmtsStmt           *ast.StmtsStmt
	stmt                ast.Stmt
	expr                ast.Expr
	exprs               []ast.Expr
	else_if_list        []ast.Stmt
	stmt_switch_cases   *ast.SwitchStmt
	stmt_select_content *ast.SelectBodyStmt
	expr_call_helper    struct {
		Exprs  []ast.Expr
		VarArg bool
	}
	expr_idents           []string
	func_expr_idents      []*ast.ParamExpr
	func_expr_typed_ident *ast.ParamExpr
	func_expr_args        struct {
		Params   []*ast.ParamExpr
		VarArg   bool
		TypeData *ast.TypeStruct
	}
	expr_typed_ident struct {
		Name     string
		TypeData *ast.TypeStruct
	}
	opt_func_return_expr_idents []*ast.FuncReturnValuesExpr
	expr_map_content            *ast.MapExpr
	type_data                   *ast.TypeStruct
	slice_count                 int
	tok                         ast.Token
	opt_ident                   *ast.Token
	str                         string
	op_lets                     bool
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57405
	yyEofCode   = 57344
	ANDAND      = 57364
	ANDEQ       = 57378
	ARRAY       = 57349
	BREAK       = 57380
	CASE        = 57389
	CATCH       = 57372
	CHAN        = 57393
	CLOSE       = 57399
	CONTINUE    = 57381
	DBG         = 57402
	DEFAULT     = 57390
	DEFER       = 57392
	DELETE      = 57398
	DIVEQ       = 57377
	ELSE        = 57356
	EQEQ        = 57359
	FALSE       = 57367
	FINALLY     = 57373
	FOR         = 57357
	FUNC        = 57351
	GE          = 57361
	GO          = 57391
	IDENT       = 57346
	IF          = 57355
	IN          = 57358
	LE          = 57362
	LEN         = 57397
	MAKE        = 57394
	MAP         = 57400
	MINUSEQ     = 57375
	MINUSMINUS  = 57383
	MODULE      = 57370
	MULEQ       = 57376
	NEQ         = 57360
	NEW         = 57365
	NIL         = 57368
	NILCOALESCE = 57369
	NUMBER      = 57347
	OPCHAN      = 57395
	OREQ        = 57379
	OROR        = 57363
	PLUSEQ      = 57374
	PLUSPLUS    = 57382
	POW         = 57384
	RETURN      = 57352
	SELECT      = 57388
	SHIFTLEFT   = 57385
	SHIFTRIGHT  = 57386
	STRING      = 57348
	STRUCT      = 57401
	SWITCH      = 57387
	THROW       = 57354
	TRUE        = 57366
	TRY         = 57371
	TYPE        = 57396
	UNARY       = 57404
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57403
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -238
)

var (
	yyPrec = map[int]int{
		POW:         0,
		'=':         1,
		PLUSEQ:      1,
		MINUSEQ:     1,
		DIVEQ:       1,
		MULEQ:       1,
		ANDEQ:       1,
		OREQ:        1,
		':':         2,
		OPCHAN:      3,
		'?':         4,
		NILCOALESCE: 4,
		OROR:        5,
		ANDAND:      6,
		EQEQ:        7,
		NEQ:         7,
		'<':         7,
		LE:          7,
		'>':         7,
		GE:          7,
		'+':         8,
		'-':         8,
		'|':         8,
		'^':         8,
		'*':         9,
		'/':         9,
		'%':         9,
		SHIFTLEFT:   9,
		SHIFTRIGHT:  9,
		'&':         9,
		IN:          10,
		PLUSPLUS:    11,
		MINUSMINUS:  11,
		UNARY:       12,
	}

	yyXLAT = map[int]int{
		91:    0,   // '[' (234x)
		42:    1,   // '*' (231x)
		40:    2,   // '(' (222x)
		125:   3,   // '}' (220x)
		123:   4,   // '{' (216x)
		38:    5,   // '&' (212x)
		45:    6,   // '-' (212x)
		57395: 7,   // OPCHAN (212x)
		10:    8,   // '\n' (188x)
		57390: 9,   // DEFAULT (153x)
		57389: 10,  // CASE (152x)
		59:    11,  // ';' (145x)
		57346: 12,  // IDENT (145x)
		57344: 13,  // $end (135x)
		57400: 14,  // MAP (131x)
		58:    15,  // ':' (128x)
		44:    16,  // ',' (125x)
		46:    17,  // '.' (124x)
		41:    18,  // ')' (121x)
		33:    19,  // '!' (110x)
		94:    20,  // '^' (110x)
		57399: 21,  // CLOSE (110x)
		57402: 22,  // DBG (110x)
		57398: 23,  // DELETE (110x)
		57367: 24,  // FALSE (110x)
		57351: 25,  // FUNC (110x)
		57397: 26,  // LEN (110x)
		57394: 27,  // MAKE (110x)
		57365: 28,  // NEW (110x)
		57368: 29,  // NIL (110x)
		57347: 30,  // NUMBER (110x)
		57348: 31,  // STRING (110x)
		57366: 32,  // TRUE (110x)
		93:    33,  // ']' (104x)
		57358: 34,  // IN (104x)
		37:    35,  // '%' (102x)
		43:    36,  // '+' (102x)
		47:    37,  // '/' (102x)
		60:    38,  // '<' (102x)
		62:    39,  // '>' (102x)
		63:    40,  // '?' (102x)
		124:   41,  // '|' (102x)
		57364: 42,  // ANDAND (102x)
		57378: 43,  // ANDEQ (102x)
		57377: 44,  // DIVEQ (102x)
		57359: 45,  // EQEQ (102x)
		57361: 46,  // GE (102x)
		57362: 47,  // LE (102x)
		57375: 48,  // MINUSEQ (102x)
		57383: 49,  // MINUSMINUS (102x)
		57376: 50,  // MULEQ (102x)
		57360: 51,  // NEQ (102x)
		57369: 52,  // NILCOALESCE (102x)
		57379: 53,  // OREQ (102x)
		57363: 54,  // OROR (102x)
		57374: 55,  // PLUSEQ (102x)
		57382: 56,  // PLUSPLUS (102x)
		57384: 57,  // POW (102x)
		57385: 58,  // SHIFTLEFT (102x)
		57386: 59,  // SHIFTRIGHT (102x)
		61:    60,  // '=' (79x)
		57350: 61,  // VARARG (78x)
		57403: 62,  // WALRUS (76x)
		57475: 63,  // slice_count (64x)
		57507: 64,  // typed_slice_count (62x)
		57426: 65,  // expr_ident (51x)
		57410: 66,  // const_expr (45x)
		57413: 67,  // expr (45x)
		57414: 68,  // expr_anon_call (45x)
		57415: 69,  // expr_array (45x)
		57416: 70,  // expr_assoc (45x)
		57417: 71,  // expr_binary (45x)
		57418: 72,  // expr_call (45x)
		57421: 73,  // expr_close (45x)
		57422: 74,  // expr_dbg (45x)
		57423: 75,  // expr_delete (45x)
		57425: 76,  // expr_func (45x)
		57428: 77,  // expr_in (45x)
		57429: 78,  // expr_item_or_slice (45x)
		57430: 79,  // expr_iterable (45x)
		57431: 80,  // expr_len (45x)
		57432: 81,  // expr_literals (45x)
		57433: 82,  // expr_literals_helper (45x)
		57434: 83,  // expr_make (45x)
		57435: 84,  // expr_map (45x)
		57439: 85,  // expr_member (45x)
		57440: 86,  // expr_member_or_ident (45x)
		57441: 87,  // expr_new (45x)
		57442: 88,  // expr_nil_coalesce (45x)
		57443: 89,  // expr_opchan (45x)
		57444: 90,  // expr_paren (45x)
		57445: 91,  // expr_ternary (45x)
		57447: 92,  // expr_unary (45x)
		57508: 93,  // unary_op (45x)
		57419: 94,  // expr_call_helper (36x)
		57457: 95,  // newline (36x)
		57406: 96,  // bin_op (35x)
		57459: 97,  // op_assoc (35x)
		57460: 98,  // op_assoc1 (35x)
		57458: 99,  // newlines (33x)
		57355: 100, // IF (31x)
		57353: 101, // VAR (31x)
		57380: 102, // BREAK (30x)
		57381: 103, // CONTINUE (30x)
		57392: 104, // DEFER (30x)
		57357: 105, // FOR (30x)
		57391: 106, // GO (30x)
		57370: 107, // MODULE (30x)
		57352: 108, // RETURN (30x)
		57388: 109, // SELECT (30x)
		57387: 110, // SWITCH (30x)
		57354: 111, // THROW (30x)
		57371: 112, // TRY (30x)
		57393: 113, // CHAN (29x)
		57401: 114, // STRUCT (29x)
		57473: 115, // opt_term (19x)
		57504: 116, // term (19x)
		57409: 117, // compstmt (18x)
		57505: 118, // type_data (18x)
		57470: 119, // opt_newlines (15x)
		57407: 120, // comma_opt_newlines (11x)
		57448: 121, // exprs (10x)
		57356: 122, // ELSE (4x)
		57436: 123, // expr_map_content (4x)
		57446: 124, // expr_typed_ident (4x)
		57464: 125, // opt_exprs (4x)
		57485: 126, // stmt_lets (4x)
		57501: 127, // stmt_var (4x)
		57502: 128, // stmt_var_or_lets (4x)
		57477: 129, // stmt (3x)
		57478: 130, // stmt_break (3x)
		57479: 131, // stmt_continue (3x)
		57480: 132, // stmt_defer (3x)
		57481: 133, // stmt_expr (3x)
		57482: 134, // stmt_for (3x)
		57483: 135, // stmt_go (3x)
		57484: 136, // stmt_if (3x)
		57486: 137, // stmt_module (3x)
		57487: 138, // stmt_return (3x)
		57488: 139, // stmt_select (3x)
		57494: 140, // stmt_switch (3x)
		57499: 141, // stmt_throw (3x)
		57500: 142, // stmt_try (3x)
		57408: 143, // comma_separated_exprs (2x)
		57420: 144, // expr_callable (2x)
		57438: 145, // expr_map_key_value (2x)
		57453: 146, // func_expr_typed_ident (2x)
		57455: 147, // func_expr_untyped_ident (2x)
		57462: 148, // opt_comma_opt_newlines (2x)
		57463: 149, // opt_expr (2x)
		57469: 150, // opt_ident (2x)
		57489: 151, // stmt_select_case (2x)
		57495: 152, // stmt_switch_case (2x)
		57498: 153, // stmt_switch_default (2x)
		57372: 154, // CATCH (1x)
		57411: 155, // else_if (1x)
		57412: 156, // else_if_list (1x)
		57424: 157, // expr_for_idents (1x)
		57427: 158, // expr_idents (1x)
		57437: 159, // expr_map_content_helper (1x)
		57373: 160, // FINALLY (1x)
		57449: 161, // func_expr_args (1x)
		57450: 162, // func_expr_idents (1x)
		57451: 163, // func_expr_idents_last_untyped (1x)
		57452: 164, // func_expr_idents_not_empty (1x)
		57454: 165, // func_expr_typed_idents (1x)
		57456: 166, // maybe_else (1x)
		57461: 167, // op_lets (1x)
		57465: 168, // opt_finally (1x)
		57466: 169, // opt_func_return_expr_idents (1x)
		57467: 170, // opt_func_return_expr_idents1 (1x)
		57468: 171, // opt_func_return_expr_idents2 (1x)
		57471: 172, // opt_stmt_select_cases (1x)
		57472: 173, // opt_stmt_var_or_lets (1x)
		57474: 174, // slice (1x)
		57476: 175, // start (1x)
		57490: 176, // stmt_select_cases (1x)
		57491: 177, // stmt_select_content (1x)
		57492: 178, // stmt_select_default (1x)
		57493: 179, // stmt_select_opt_default (1x)
		57496: 180, // stmt_switch_cases (1x)
		57497: 181, // stmt_switch_cases_helper (1x)
		57503: 182, // stmtsStmt (1x)
		57396: 183, // TYPE (1x)
		57506: 184, // type_data_struct (1x)
		57405: 185, // $default (0x)
		57349: 186, // ARRAY (0x)
		57345: 187, // error (0x)
		57404: 188, // UNARY (0x)
	}

	yySymNames = []string{
		"'['",
		"'*'",
		"'('",
		"'}'",
		"'{'",
		"'&'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"DEFAULT",
		"CASE",
		"';'",
		"IDENT",
		"$end",
		"MAP",
		"':'",
		"','",
		"'.'",
		"')'",
		"'!'",
		"'^'",
		"CLOSE",
		"DBG",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"']'",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"'='",
		"VARARG",
		"WALRUS",
		"slice_count",
		"typed_slice_count",
		"expr_ident",
		"const_expr",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_dbg",
		"expr_delete",
		"expr_func",
		"expr_in",
		"expr_item_or_slice",
		"expr_iterable",
		"expr_len",
		"expr_literals",
		"expr_literals_helper",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_nil_coalesce",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"unary_op",
		"expr_call_helper",
		"newline",
		"bin_op",
		"op_assoc",
		"op_assoc1",
		"newlines",
		"IF",
		"VAR",
		"BREAK",
		"CONTINUE",
		"DEFER",
		"FOR",
		"GO",
		"MODULE",
		"RETURN",
		"SELECT",
		"SWITCH",
		"THROW",
		"TRY",
		"CHAN",
		"STRUCT",
		"opt_term",
		"term",
		"compstmt",
		"type_data",
		"opt_newlines",
		"comma_opt_newlines",
		"exprs",
		"ELSE",
		"expr_map_content",
		"expr_typed_ident",
		"opt_exprs",
		"stmt_lets",
		"stmt_var",
		"stmt_var_or_lets",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_if",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"comma_separated_exprs",
		"expr_callable",
		"expr_map_key_value",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"opt_comma_opt_newlines",
		"opt_expr",
		"opt_ident",
		"stmt_select_case",
		"stmt_switch_case",
		"stmt_switch_default",
		"CATCH",
		"else_if",
		"else_if_list",
		"expr_for_idents",
		"expr_idents",
		"expr_map_content_helper",
		"FINALLY",
		"func_expr_args",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"maybe_else",
		"op_lets",
		"opt_finally",
		"opt_func_return_expr_idents",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"opt_stmt_select_cases",
		"opt_stmt_var_or_lets",
		"slice",
		"start",
		"stmt_select_cases",
		"stmt_select_content",
		"stmt_select_default",
		"stmt_select_opt_default",
		"stmt_switch_cases",
		"stmt_switch_cases_helper",
		"stmtsStmt",
		"TYPE",
		"type_data_struct",
		"$default",
		"ARRAY",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {175, 1},
		2:   {117, 1},
		3:   {117, 3},
		4:   {182, 1},
		5:   {182, 3},
		6:   {129, 1},
		7:   {129, 1},
		8:   {129, 1},
		9:   {129, 1},
		10:  {129, 1},
		11:  {129, 1},
		12:  {129, 1},
		13:  {129, 1},
		14:  {129, 1},
		15:  {129, 1},
		16:  {129, 1},
		17:  {129, 1},
		18:  {129, 1},
		19:  {129, 1},
		20:  {67, 1},
		21:  {67, 1},
		22:  {67, 1},
		23:  {67, 1},
		24:  {67, 1},
		25:  {67, 1},
		26:  {67, 1},
		27:  {67, 1},
		28:  {67, 1},
		29:  {67, 1},
		30:  {67, 1},
		31:  {67, 1},
		32:  {67, 1},
		33:  {67, 1},
		34:  {79, 1},
		35:  {79, 1},
		36:  {79, 1},
		37:  {79, 1},
		38:  {79, 1},
		39:  {79, 1},
		40:  {79, 1},
		41:  {79, 1},
		42:  {130, 1},
		43:  {131, 1},
		44:  {138, 2},
		45:  {141, 2},
		46:  {137, 5},
		47:  {133, 1},
		48:  {135, 2},
		49:  {132, 2},
		50:  {142, 10},
		51:  {168, 0},
		52:  {168, 4},
		53:  {173, 0},
		54:  {173, 1},
		55:  {128, 1},
		56:  {128, 1},
		57:  {127, 4},
		58:  {126, 3},
		59:  {167, 1},
		60:  {167, 1},
		61:  {136, 7},
		62:  {156, 0},
		63:  {156, 2},
		64:  {155, 6},
		65:  {166, 0},
		66:  {166, 4},
		67:  {134, 4},
		68:  {134, 5},
		69:  {134, 7},
		70:  {134, 9},
		71:  {157, 1},
		72:  {157, 3},
		73:  {139, 4},
		74:  {177, 0},
		75:  {177, 3},
		76:  {172, 0},
		77:  {172, 1},
		78:  {176, 1},
		79:  {176, 2},
		80:  {151, 4},
		81:  {179, 0},
		82:  {179, 1},
		83:  {178, 3},
		84:  {140, 7},
		85:  {180, 0},
		86:  {180, 1},
		87:  {181, 1},
		88:  {181, 1},
		89:  {181, 2},
		90:  {181, 2},
		91:  {152, 4},
		92:  {152, 4},
		93:  {153, 3},
		94:  {169, 0},
		95:  {169, 1},
		96:  {169, 3},
		97:  {170, 0},
		98:  {170, 1},
		99:  {171, 1},
		100: {171, 3},
		101: {162, 0},
		102: {162, 1},
		103: {164, 1},
		104: {164, 1},
		105: {147, 1},
		106: {146, 1},
		107: {163, 1},
		108: {163, 3},
		109: {165, 1},
		110: {165, 3},
		111: {125, 0},
		112: {125, 1},
		113: {121, 1},
		114: {121, 3},
		115: {149, 0},
		116: {149, 1},
		117: {74, 3},
		118: {74, 4},
		119: {74, 4},
		120: {80, 4},
		121: {90, 3},
		122: {69, 2},
		123: {69, 3},
		124: {69, 4},
		125: {143, 3},
		126: {88, 3},
		127: {91, 5},
		128: {87, 4},
		129: {89, 3},
		130: {89, 2},
		131: {77, 3},
		132: {75, 4},
		133: {75, 6},
		134: {73, 4},
		135: {81, 1},
		136: {82, 1},
		137: {82, 1},
		138: {82, 1},
		139: {66, 1},
		140: {66, 1},
		141: {66, 1},
		142: {86, 1},
		143: {86, 1},
		144: {65, 1},
		145: {124, 2},
		146: {150, 0},
		147: {150, 1},
		148: {85, 3},
		149: {144, 1},
		150: {144, 1},
		151: {72, 2},
		152: {68, 2},
		153: {94, 4},
		154: {94, 3},
		155: {93, 1},
		156: {93, 1},
		157: {93, 1},
		158: {93, 1},
		159: {93, 1},
		160: {92, 2},
		161: {96, 1},
		162: {96, 1},
		163: {96, 1},
		164: {96, 1},
		165: {96, 1},
		166: {96, 1},
		167: {96, 1},
		168: {96, 1},
		169: {96, 1},
		170: {96, 1},
		171: {96, 1},
		172: {96, 1},
		173: {96, 1},
		174: {96, 1},
		175: {96, 1},
		176: {96, 1},
		177: {96, 1},
		178: {71, 3},
		179: {71, 3},
		180: {71, 1},
		181: {97, 1},
		182: {97, 1},
		183: {97, 1},
		184: {97, 1},
		185: {97, 1},
		186: {97, 1},
		187: {98, 1},
		188: {98, 1},
		189: {70, 3},
		190: {70, 2},
		191: {76, 9},
		192: {161, 3},
		193: {161, 2},
		194: {161, 1},
		195: {83, 4},
		196: {83, 6},
		197: {83, 8},
		198: {83, 7},
		199: {118, 1},
		200: {118, 3},
		201: {118, 2},
		202: {118, 1},
		203: {118, 5},
		204: {118, 2},
		205: {118, 6},
		206: {184, 1},
		207: {184, 3},
		208: {64, 2},
		209: {63, 2},
		210: {63, 3},
		211: {84, 4},
		212: {84, 8},
		213: {84, 3},
		214: {123, 1},
		215: {123, 3},
		216: {159, 1},
		217: {159, 3},
		218: {145, 3},
		219: {78, 4},
		220: {174, 3},
		221: {174, 2},
		222: {174, 2},
		223: {174, 1},
		224: {158, 1},
		225: {158, 3},
		226: {115, 0},
		227: {115, 1},
		228: {116, 1},
		229: {116, 2},
		230: {119, 0},
		231: {119, 1},
		232: {99, 1},
		233: {99, 2},
		234: {95, 1},
		235: {120, 2},
		236: {148, 1},
		237: {148, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [419][]uint16{
		// 0
		{12, 12, 12, 4: 12, 12, 12, 12, 246, 11: 244, 12, 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 240, 175: 239},
		{13: 238},
		{13: 237},
		{308, 327, 307, 236, 335, 328, 324, 311, 236, 236, 236, 12: 323, 236, 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 293, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 100: 301, 299, 288, 289, 295, 302, 294, 292, 290, 303, 304, 291, 296, 121: 300, 126: 298, 297, 252, 251, 253, 254, 264, 265, 259, 263, 258, 257, 255, 262, 261, 256, 260, 182: 250},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12: 11, 11, 11, 19: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 100: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		// 5
		{10, 10, 10, 10, 10, 10, 10, 10, 246, 10, 10, 12: 10, 10, 10, 19: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 95: 249, 100: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{8, 8, 8, 8, 8, 8, 8, 8, 246, 8, 8, 12: 8, 8, 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 95: 245, 99: 248, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 119: 247},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12: 6, 6, 6, 16: 6, 19: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 100: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12: 4, 4, 4, 16: 4, 19: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 100: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 12: 9, 9, 9, 19: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		// 10
		{7, 7, 7, 7, 7, 7, 7, 7, 246, 7, 7, 12: 7, 7, 7, 16: 7, 19: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 95: 249, 100: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12: 5, 5, 5, 16: 5, 19: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 100: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{3: 12, 8: 246, 12, 12, 244, 13: 12, 95: 245, 99: 243, 115: 654, 655},
		{3: 234, 8: 234, 234, 234, 234, 13: 234},
		{3: 232, 8: 232, 232, 232, 232, 13: 232, 15: 232},
		// 15
		{3: 231, 8: 231, 231, 231, 231, 13: 231, 15: 231},
		{3: 230, 8: 230, 230, 230, 230, 13: 230, 15: 230},
		{3: 229, 8: 229, 229, 229, 229, 13: 229, 15: 229},
		{3: 228, 8: 228, 228, 228, 228, 13: 228, 15: 228},
		{3: 227, 8: 227, 227, 227, 227, 13: 227, 15: 227},
		// 20
		{3: 226, 8: 226, 226, 226, 226, 13: 226, 15: 226},
		{3: 225, 8: 225, 225, 225, 225, 13: 225, 15: 225},
		{3: 224, 8: 224, 224, 224, 224, 13: 224, 15: 224},
		{3: 223, 8: 223, 223, 223, 223, 13: 223, 15: 223},
		{3: 222, 8: 222, 222, 222, 222, 13: 222, 15: 222},
		// 25
		{3: 221, 8: 221, 221, 221, 221, 13: 221, 15: 221},
		{3: 220, 8: 220, 220, 220, 220, 13: 220, 15: 220},
		{3: 219, 8: 219, 219, 219, 219, 13: 219, 15: 219},
		{218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 13: 218, 15: 218, 218, 218, 218, 33: 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218},
		{217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 13: 217, 15: 217, 217, 217, 217, 33: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217},
		// 30
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 13: 216, 15: 216, 216, 216, 216, 33: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 13: 215, 15: 215, 215, 215, 215, 33: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215},
		{214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 13: 214, 15: 214, 214, 214, 214, 33: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214},
		{213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 13: 213, 15: 213, 213, 213, 213, 33: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
		{212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 13: 212, 15: 212, 212, 212, 212, 33: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
		// 35
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 13: 211, 15: 211, 211, 211, 211, 33: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211},
		{210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 13: 210, 15: 210, 210, 210, 210, 33: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
		{209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 13: 209, 15: 209, 209, 209, 209, 33: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
		{208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 13: 208, 15: 208, 208, 208, 208, 33: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208},
		{207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 13: 207, 15: 207, 207, 207, 207, 33: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
		// 40
		{206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 13: 206, 15: 206, 206, 206, 206, 33: 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206},
		{205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 13: 205, 15: 205, 205, 205, 205, 33: 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
		{204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 13: 204, 15: 204, 204, 204, 204, 33: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204},
		{203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 13: 203, 15: 203, 203, 203, 203, 33: 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203},
		{202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 13: 202, 15: 202, 202, 202, 202, 33: 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202},
		// 45
		{201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 13: 201, 15: 201, 201, 201, 201, 33: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201},
		{200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 13: 200, 15: 200, 200, 200, 200, 33: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
		{199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 13: 199, 15: 199, 199, 199, 199, 33: 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199, 199},
		{198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 13: 198, 15: 198, 198, 198, 198, 33: 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198, 198},
		{197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 13: 197, 15: 197, 197, 197, 197, 33: 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197},
		// 50
		{3: 196, 8: 196, 196, 196, 196, 13: 196, 15: 196},
		{3: 195, 8: 195, 195, 195, 195, 13: 195, 15: 195},
		{308, 327, 307, 127, 335, 328, 324, 311, 127, 127, 127, 127, 323, 127, 334, 127, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 397, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 121: 512, 125: 653},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 652, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{12: 648},
		// 55
		{384, 356, 353, 191, 5: 364, 355, 349, 191, 191, 191, 191, 13: 191, 15: 191, 125, 351, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 125, 62: 125, 94: 352, 96: 371, 381, 382},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 595, 644, 282, 330, 271, 645, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 144: 647},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 595, 644, 282, 330, 271, 645, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 144: 646},
		{4: 631},
		{3: 183, 8: 183, 183, 183, 183, 13: 183, 15: 183},
		// 60
		{3: 182, 8: 182, 182, 182, 182, 13: 182, 15: 182},
		{12: 323, 65: 626, 158: 625},
		{16: 343, 60: 623, 62: 622, 120: 400, 167: 621},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 605, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{308, 327, 307, 4: 578, 328, 324, 311, 11: 185, 582, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 579, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 101: 299, 121: 300, 126: 298, 297, 577, 157: 580, 173: 581},
		// 65
		{4: 560},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 539, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{2: 525},
		{2: 522},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 520, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		// 70
		{8, 8, 8, 4: 8, 8, 8, 8, 246, 12: 8, 14: 8, 16: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 517, 95: 245, 99: 248, 119: 511, 143: 518},
		{4: 509},
		{2: 506},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 505, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{2: 499},
		// 75
		{2: 496},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 13: 103, 15: 103, 103, 103, 103, 33: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 13: 102, 15: 102, 102, 102, 102, 33: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 13: 101, 15: 101, 101, 101, 101, 33: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 13: 100, 15: 100, 100, 100, 100, 33: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		// 80
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 13: 99, 15: 99, 99, 99, 99, 33: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 13: 98, 15: 98, 98, 98, 98, 33: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 13: 97, 15: 97, 97, 97, 97, 33: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		{96, 96, 353, 96, 96, 96, 96, 96, 96, 96, 96, 96, 13: 96, 15: 96, 96, 96, 96, 33: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 94: 495},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 13: 95, 15: 95, 95, 95, 95, 33: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95},
		// 85
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 33: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 113: 94, 94},
		{83, 83, 83, 4: 83, 83, 83, 83, 12: 83, 14: 83, 19: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 82, 4: 82, 82, 82, 82, 12: 82, 14: 82, 19: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{81, 81, 81, 4: 81, 81, 81, 81, 12: 81, 14: 81, 19: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{80, 80, 80, 4: 80, 80, 80, 80, 12: 80, 14: 80, 19: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
		// 90
		{79, 79, 79, 4: 79, 79, 79, 79, 12: 79, 14: 79, 19: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 494, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 13: 58, 15: 58, 58, 58, 58, 33: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{2: 92, 12: 464, 150: 465},
		{2: 450},
		// 95
		{421, 416, 12: 414, 14: 418, 63: 333, 417, 113: 419, 420, 118: 449},
		{413, 4: 412},
		{8, 8, 8, 8, 8, 8, 8, 8, 246, 12: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 95: 245, 99: 248, 119: 337, 123: 336},
		{3: 411},
		{308, 327, 307, 24, 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 338, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 145: 340, 159: 339},
		// 100
		{384, 356, 353, 5: 364, 355, 349, 15: 383, 17: 351, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		{3: 8, 8: 246, 16: 343, 95: 245, 99: 248, 119: 344, 342, 148: 341},
		{3: 22, 8: 22, 16: 22},
		{3: 23},
		{308, 327, 307, 2, 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 338, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 145: 346},
		// 105
		{8, 8, 8, 8, 8, 8, 8, 8, 246, 12: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 95: 245, 99: 248, 113: 8, 8, 119: 345},
		{3: 1, 33: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 12: 3, 14: 3, 19: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 113: 3, 3},
		{3: 21, 8: 21, 16: 21},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 410, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		// 110
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 407, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 406, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 405, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{12: 404},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 13: 86, 15: 86, 86, 86, 86, 33: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		// 115
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 18: 127, 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 397, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 121: 396, 125: 398},
		{77, 77, 77, 4: 77, 77, 77, 77, 12: 77, 14: 77, 19: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 4: 76, 76, 76, 76, 12: 76, 14: 76, 19: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		{75, 75, 75, 4: 75, 75, 75, 75, 12: 75, 14: 75, 19: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{74, 74, 74, 4: 74, 74, 74, 74, 12: 74, 14: 74, 19: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		// 120
		{73, 73, 73, 4: 73, 73, 73, 73, 12: 73, 14: 73, 19: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		{72, 72, 72, 4: 72, 72, 72, 72, 12: 72, 14: 72, 19: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		{71, 71, 71, 4: 71, 71, 71, 71, 12: 71, 14: 71, 19: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		{70, 70, 70, 4: 70, 70, 70, 70, 12: 70, 14: 70, 19: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{69, 69, 69, 4: 69, 69, 69, 69, 12: 69, 14: 69, 19: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		// 125
		{68, 68, 68, 4: 68, 68, 68, 68, 12: 68, 14: 68, 19: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		{67, 67, 67, 4: 67, 67, 67, 67, 12: 67, 14: 67, 19: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{66, 66, 66, 4: 66, 66, 66, 66, 12: 66, 14: 66, 19: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{65, 65, 65, 4: 65, 65, 65, 65, 12: 65, 14: 65, 19: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		{64, 64, 64, 4: 64, 64, 64, 64, 12: 64, 14: 64, 19: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		// 130
		{63, 63, 63, 4: 63, 63, 63, 63, 12: 63, 14: 63, 19: 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		{62, 62, 62, 4: 62, 62, 62, 62, 12: 62, 14: 62, 19: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 4: 61, 61, 61, 61, 12: 61, 14: 61, 19: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 395, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 394, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		// 135
		{57, 57, 57, 4: 57, 57, 57, 57, 12: 57, 14: 57, 19: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{56, 56, 56, 4: 56, 56, 56, 56, 12: 56, 14: 56, 19: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{55, 55, 55, 4: 55, 55, 55, 55, 12: 55, 14: 55, 19: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{54, 54, 54, 4: 54, 54, 54, 54, 12: 54, 14: 54, 19: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{53, 53, 53, 4: 53, 53, 53, 53, 12: 53, 14: 53, 19: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		// 140
		{52, 52, 52, 4: 52, 52, 52, 52, 12: 52, 14: 52, 19: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 13: 51, 15: 51, 51, 51, 51, 33: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 13: 50, 15: 50, 50, 50, 50, 33: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 393, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 13: 48, 15: 48, 48, 48, 48, 33: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		// 145
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 392, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 387, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 385, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 174: 386},
		{384, 356, 353, 5: 364, 355, 349, 15: 390, 17: 351, 33: 15, 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		{33: 389},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 388, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		// 150
		{384, 356, 353, 5: 364, 355, 349, 17: 351, 33: 16, 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 13: 19, 15: 19, 19, 19, 19, 33: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 17, 63: 333, 309, 321, 317, 391, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{384, 356, 353, 5: 364, 355, 349, 17: 351, 33: 18, 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		{384, 356, 353, 20, 5: 364, 355, 349, 20, 16: 20, 351, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		// 155
		{384, 356, 353, 49, 49, 364, 355, 349, 49, 49, 49, 49, 13: 49, 15: 49, 49, 351, 49, 33: 49, 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 49, 49, 49, 94: 352, 96: 371, 381, 382},
		{384, 356, 353, 59, 59, 364, 355, 59, 59, 59, 59, 59, 13: 59, 15: 59, 59, 351, 59, 33: 59, 350, 359, 354, 357, 59, 59, 59, 362, 59, 59, 59, 59, 59, 59, 59, 380, 59, 59, 59, 59, 59, 59, 379, 59, 360, 361, 59, 59, 59, 94: 352, 96: 371, 381, 382},
		{384, 356, 353, 60, 60, 364, 355, 349, 60, 60, 60, 60, 13: 60, 15: 60, 60, 351, 60, 33: 60, 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 60, 60, 60, 94: 352, 96: 371, 381, 382},
		{16: 343, 18: 126, 61: 401, 120: 400},
		{384, 356, 353, 125, 5: 364, 355, 349, 125, 125, 125, 125, 13: 125, 15: 125, 125, 351, 125, 33: 125, 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 61: 125, 94: 352, 96: 371, 381, 382},
		// 160
		{18: 399},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 13: 84, 15: 84, 84, 84, 84, 33: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 403, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{18: 402},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 13: 85, 15: 85, 85, 85, 85, 33: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		// 165
		{384, 356, 353, 124, 5: 364, 355, 349, 124, 124, 124, 124, 13: 124, 15: 124, 124, 351, 124, 33: 124, 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 124, 124, 124, 94: 352, 96: 371, 381, 382},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 13: 90, 15: 90, 90, 90, 90, 33: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{384, 107, 353, 107, 107, 107, 107, 107, 107, 107, 107, 107, 13: 107, 15: 107, 107, 351, 107, 33: 107, 350, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 380, 107, 107, 107, 107, 107, 107, 379, 107, 107, 107, 107, 107, 107, 94: 352, 96: 371, 381, 382},
		{384, 356, 353, 109, 109, 364, 355, 349, 109, 109, 109, 109, 13: 109, 15: 109, 109, 351, 109, 33: 109, 350, 359, 354, 357, 369, 367, 348, 362, 365, 109, 109, 372, 368, 370, 109, 380, 109, 366, 347, 109, 363, 109, 379, 109, 360, 361, 109, 109, 109, 94: 352, 96: 371, 381, 382},
		{384, 356, 353, 5: 364, 355, 349, 15: 408, 17: 351, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		// 170
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 409, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{384, 356, 353, 111, 111, 364, 355, 349, 111, 111, 111, 111, 13: 111, 15: 111, 111, 351, 111, 33: 111, 350, 359, 354, 357, 369, 367, 348, 362, 365, 111, 111, 372, 368, 370, 111, 380, 111, 366, 347, 111, 363, 111, 379, 111, 360, 361, 111, 111, 111, 94: 352, 96: 371, 381, 382},
		{384, 356, 353, 112, 112, 364, 355, 112, 112, 112, 112, 112, 13: 112, 15: 112, 112, 351, 112, 33: 112, 350, 359, 354, 357, 369, 367, 348, 362, 365, 112, 112, 372, 368, 370, 112, 380, 112, 366, 347, 112, 363, 112, 379, 112, 360, 361, 112, 112, 112, 94: 352, 96: 371, 381, 382},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 13: 25, 15: 25, 25, 25, 25, 33: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{8, 8, 8, 8, 8, 8, 8, 8, 246, 12: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 95: 245, 99: 248, 119: 337, 123: 447},
		// 175
		{421, 416, 12: 414, 14: 418, 63: 333, 417, 113: 419, 420, 118: 415},
		{3: 39, 39, 8: 39, 16: 39, 39, 39, 33: 39},
		{17: 434, 33: 442},
		{421, 416, 12: 414, 14: 418, 63: 333, 417, 113: 419, 420, 118: 441},
		{3: 36, 36, 8: 36, 16: 36, 36, 36, 33: 36},
		// 180
		{437},
		{421, 416, 12: 414, 14: 418, 63: 333, 417, 113: 419, 420, 118: 436},
		{4: 424},
		{33: 422},
		{421, 29, 12: 29, 14: 29, 63: 423, 113: 29, 29},
		// 185
		{28, 28, 12: 28, 14: 28, 113: 28, 28},
		{8: 246, 12: 8, 95: 245, 99: 248, 119: 425},
		{12: 323, 65: 426, 124: 428, 184: 427},
		{421, 416, 12: 414, 14: 418, 63: 333, 417, 113: 419, 420, 118: 433},
		{3: 8, 8: 246, 16: 343, 95: 245, 99: 248, 119: 429, 430},
		// 190
		{3: 32, 8: 32, 16: 32},
		{3: 432},
		{12: 323, 65: 426, 124: 431},
		{3: 31, 8: 31, 16: 31},
		{3: 33, 33, 8: 33, 16: 33, 33, 33, 33: 33},
		// 195
		{3: 93, 8: 93, 16: 93, 434, 93},
		{12: 435},
		{3: 38, 38, 8: 38, 16: 38, 38, 38, 33: 38},
		{3: 34, 34, 8: 34, 16: 34, 434, 34, 33: 34},
		{421, 416, 12: 414, 14: 418, 63: 333, 417, 113: 419, 420, 118: 438},
		// 200
		{17: 434, 33: 439},
		{421, 416, 12: 414, 14: 418, 63: 333, 417, 113: 419, 420, 118: 440},
		{3: 35, 35, 8: 35, 16: 35, 434, 35, 33: 35},
		{3: 37, 37, 8: 37, 16: 37, 434, 37, 33: 37},
		{421, 416, 12: 414, 14: 418, 63: 333, 417, 113: 419, 420, 118: 443},
		// 205
		{4: 444, 17: 434},
		{8, 8, 8, 8, 8, 8, 8, 8, 246, 12: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 95: 245, 99: 248, 119: 337, 123: 445},
		{3: 446},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 13: 26, 15: 26, 26, 26, 26, 33: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{3: 448},
		// 210
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13: 27, 15: 27, 27, 27, 27, 33: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{3: 30, 30, 8: 30, 16: 30, 434, 30, 33: 30},
		{421, 416, 12: 414, 14: 418, 63: 333, 417, 113: 419, 420, 118: 451, 183: 452},
		{16: 458, 434, 457},
		{12: 453},
		// 215
		{16: 454},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 455, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{384, 356, 353, 5: 364, 355, 349, 17: 351, 456, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 13: 40, 15: 40, 40, 40, 40, 33: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 13: 43, 15: 43, 43, 43, 43, 33: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		// 220
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 459, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{384, 356, 353, 5: 364, 355, 349, 16: 461, 351, 460, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 13: 42, 15: 42, 42, 42, 42, 33: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 462, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{384, 356, 353, 5: 364, 355, 349, 17: 351, 463, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		// 225
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 13: 41, 15: 41, 41, 41, 41, 33: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{2: 91, 4: 91},
		{2: 466},
		{12: 470, 18: 137, 65: 426, 124: 471, 146: 473, 472, 161: 474, 475, 468, 467, 469},
		{16: 343, 18: 136, 120: 491},
		// 230
		{16: 135, 18: 135, 61: 489},
		{16: 134, 18: 134},
		{94, 94, 12: 94, 14: 94, 16: 133, 18: 133, 61: 133, 113: 94, 94},
		{16: 132, 18: 132},
		{16: 131, 18: 131, 61: 131},
		// 235
		{16: 129, 18: 129},
		{18: 476},
		{18: 44},
		{421, 416, 478, 4: 144, 12: 414, 14: 418, 63: 333, 417, 113: 419, 420, 118: 477, 169: 479},
		{4: 143, 17: 434},
		// 240
		{421, 416, 12: 414, 14: 418, 18: 141, 63: 333, 417, 113: 419, 420, 118: 485, 170: 483, 484},
		{4: 480},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 481},
		{3: 482},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 13: 47, 15: 47, 47, 47, 47, 33: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		// 245
		{18: 488},
		{16: 343, 18: 140, 120: 486},
		{16: 139, 434, 139},
		{421, 416, 12: 414, 14: 418, 63: 333, 417, 113: 419, 420, 118: 487},
		{16: 138, 434, 138},
		// 250
		{4: 142},
		{421, 416, 12: 414, 14: 418, 18: 45, 63: 333, 417, 113: 419, 420, 118: 490},
		{17: 434, 46},
		{12: 470, 65: 426, 124: 471, 146: 493, 492},
		{16: 130, 18: 130, 61: 130},
		// 255
		{16: 128, 18: 128},
		{384, 78, 353, 78, 78, 78, 78, 78, 78, 78, 78, 78, 13: 78, 15: 78, 78, 351, 78, 33: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 94: 352, 96: 371, 381, 382},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 13: 87, 15: 87, 87, 87, 87, 33: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 497, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{384, 356, 353, 5: 364, 355, 349, 17: 351, 498, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		// 260
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 13: 104, 15: 104, 104, 104, 104, 33: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 500, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{384, 356, 353, 5: 364, 355, 349, 16: 502, 351, 501, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 13: 106, 15: 106, 106, 106, 106, 33: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 503, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		// 265
		{384, 356, 353, 5: 364, 355, 349, 17: 351, 504, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 13: 105, 15: 105, 105, 105, 105, 33: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105},
		{384, 356, 353, 108, 108, 364, 355, 349, 108, 108, 108, 108, 13: 108, 15: 108, 108, 351, 108, 33: 108, 350, 359, 354, 357, 369, 367, 348, 362, 365, 108, 108, 372, 368, 370, 108, 380, 108, 366, 347, 108, 363, 108, 379, 108, 360, 361, 108, 108, 108, 94: 352, 96: 371, 381, 382},
		{421, 416, 12: 414, 14: 418, 63: 333, 417, 113: 419, 420, 118: 507},
		{17: 434, 508},
		// 270
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 13: 110, 15: 110, 110, 110, 110, 33: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		{8, 8, 8, 8, 8, 8, 8, 8, 246, 12: 8, 14: 8, 16: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 95: 245, 99: 248, 119: 511, 143: 510},
		{3: 516},
		{308, 327, 307, 127, 335, 328, 324, 311, 127, 12: 323, 14: 334, 16: 127, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 127, 63: 333, 309, 321, 317, 397, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 121: 512, 125: 513},
		{3: 126, 8: 126, 126, 126, 126, 13: 126, 15: 126, 343, 33: 126, 120: 400},
		// 275
		{3: 8, 8: 246, 16: 343, 33: 8, 95: 245, 99: 248, 119: 344, 515, 148: 514},
		{3: 113, 33: 113},
		{3: 2, 33: 2},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 13: 114, 15: 114, 114, 114, 114, 33: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114},
		{421, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 29, 116, 29, 116, 116, 116, 116, 33: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 423, 113: 29, 29},
		// 280
		{33: 519},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 13: 115, 15: 115, 115, 115, 115, 33: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		{384, 356, 353, 5: 364, 355, 349, 17: 351, 521, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 13: 117, 15: 117, 117, 117, 117, 33: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 523, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		// 285
		{384, 356, 353, 5: 364, 355, 349, 17: 351, 524, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 13: 118, 15: 118, 118, 118, 118, 33: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		{308, 531, 307, 4: 335, 328, 324, 311, 12: 530, 14: 532, 18: 526, 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 529, 321, 317, 527, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 113: 419, 420, 118: 528},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 13: 121, 15: 121, 121, 121, 121, 33: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		{384, 356, 353, 5: 364, 355, 349, 17: 351, 538, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		// 290
		{17: 434, 537},
		{4: 509, 17: 36, 36},
		{94, 94, 94, 5: 94, 94, 94, 17: 94, 94, 34: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{421, 80, 80, 4: 80, 80, 80, 80, 12: 414, 14: 418, 19: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 63: 333, 417, 113: 419, 420, 118: 441},
		{533, 4: 412},
		// 295
		{421, 416, 12: 414, 14: 418, 63: 333, 417, 113: 419, 420, 118: 534},
		{17: 434, 33: 535},
		{421, 416, 12: 414, 14: 418, 63: 333, 417, 113: 419, 420, 118: 536},
		{4: 444, 17: 434, 35},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 13: 119, 15: 119, 119, 119, 119, 33: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		// 300
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 13: 120, 15: 120, 120, 120, 120, 33: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{384, 356, 353, 4: 540, 364, 355, 349, 17: 351, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		{3: 8, 8: 246, 8, 8, 95: 245, 99: 248, 119: 541},
		{3: 153, 8: 153, 547, 546, 152: 545, 544, 180: 542, 543},
		{3: 8, 8: 246, 95: 245, 99: 248, 119: 558},
		// 305
		{3: 152, 8: 152, 547, 546, 152: 556, 557},
		{3: 151, 8: 151, 151, 151},
		{3: 150, 8: 150, 150, 150},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 127, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 550, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 121: 512, 125: 551},
		{15: 548},
		// 310
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 12, 12, 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 549},
		{3: 145, 8: 145, 145, 145},
		{384, 356, 353, 5: 364, 355, 349, 15: 554, 125, 351, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		{15: 552},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 12, 12, 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 553},
		// 315
		{3: 146, 8: 146, 146, 146},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 12, 12, 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 555},
		{3: 147, 8: 147, 147, 147},
		{3: 149, 8: 149, 149, 149},
		{3: 148, 8: 148, 148, 148},
		// 320
		{3: 559},
		{3: 154, 8: 154, 154, 154, 154, 13: 154, 15: 154},
		{3: 164, 8: 246, 8, 8, 95: 245, 99: 248, 119: 562, 177: 561},
		{3: 576},
		{3: 162, 9: 162, 566, 151: 565, 172: 563, 176: 564},
		// 325
		{3: 157, 9: 573, 178: 572, 571},
		{3: 161, 9: 161, 566, 151: 570},
		{3: 160, 9: 160, 160},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 293, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 100: 301, 299, 288, 289, 295, 302, 294, 292, 290, 303, 304, 291, 296, 121: 300, 126: 298, 297, 252, 567, 253, 254, 264, 265, 259, 263, 258, 257, 255, 262, 261, 256, 260},
		{15: 568},
		// 330
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 12, 12, 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 569},
		{3: 158, 9: 158, 158},
		{3: 159, 9: 159, 159},
		{3: 163},
		{3: 156},
		// 335
		{15: 574},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 575},
		{3: 155},
		{3: 165, 8: 165, 165, 165, 165, 13: 165, 15: 165},
		{11: 184},
		// 340
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 603, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 602, 119: 337, 123: 336},
		{384, 356, 353, 4: 599, 364, 355, 349, 16: 125, 351, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 125, 62: 125, 94: 352, 96: 371, 381, 382},
		{34: 593},
		{11: 585},
		{94, 94, 94, 4: 94, 94, 94, 94, 16: 583, 94, 34: 167, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 62: 94},
		// 345
		{12: 584},
		{34: 166},
		{308, 327, 307, 4: 335, 328, 324, 311, 11: 123, 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 587, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 149: 586},
		{11: 588},
		{384, 356, 353, 4: 122, 364, 355, 349, 11: 122, 17: 351, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		// 350
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 587, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 149: 589},
		{4: 590},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 591},
		{3: 592},
		{3: 168, 8: 168, 168, 168, 168, 13: 168, 15: 168},
		// 355
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 595, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 594, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{218, 218, 218, 4: 596, 218, 218, 218, 17: 218, 34: 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218},
		{384, 356, 353, 5: 364, 355, 349, 17: 351, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 597},
		{3: 598},
		// 360
		{3: 169, 8: 169, 169, 169, 169, 13: 169, 15: 169},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 600},
		{3: 601},
		{3: 170, 8: 170, 170, 170, 170, 13: 170, 15: 170},
		{3: 604},
		// 365
		{10, 10, 10, 10, 10, 10, 10, 10, 246, 12: 10, 14: 10, 19: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 95: 249, 100: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{3: 171, 8: 171, 171, 171, 171, 13: 171, 15: 171},
		{384, 356, 353, 4: 606, 364, 355, 349, 17: 351, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 607},
		{3: 608},
		// 370
		{3: 176, 8: 176, 176, 176, 176, 13: 176, 15: 176, 122: 176, 156: 609},
		{3: 173, 8: 173, 173, 173, 173, 13: 173, 15: 173, 122: 612, 155: 611, 166: 610},
		{3: 177, 8: 177, 177, 177, 177, 13: 177, 15: 177},
		{3: 175, 8: 175, 175, 175, 175, 13: 175, 15: 175, 122: 175},
		{4: 614, 100: 613},
		// 375
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 617, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 615},
		{3: 616},
		{3: 172, 8: 172, 172, 172, 172, 13: 172, 15: 172},
		{384, 356, 353, 4: 618, 364, 355, 349, 17: 351, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		// 380
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 619},
		{3: 620},
		{3: 174, 8: 174, 174, 174, 174, 13: 174, 15: 174, 122: 174},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 397, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 121: 624},
		{179, 179, 179, 4: 179, 179, 179, 179, 12: 179, 14: 179, 19: 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179},
		// 385
		{178, 178, 178, 4: 178, 178, 178, 178, 12: 178, 14: 178, 19: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178},
		{3: 180, 8: 180, 180, 180, 180, 13: 180, 15: 180, 343, 120: 400},
		{16: 343, 60: 627, 120: 628},
		{16: 14, 60: 14},
		{308, 327, 307, 4: 335, 328, 324, 311, 12: 323, 14: 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 397, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 121: 630},
		// 390
		{12: 323, 65: 629},
		{16: 13, 60: 13},
		{3: 181, 8: 181, 181, 181, 181, 13: 181, 15: 181, 343, 120: 400},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 632},
		{3: 633},
		// 395
		{154: 634},
		{4: 92, 12: 464, 150: 635},
		{4: 636},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 637},
		{3: 638},
		// 400
		{3: 187, 8: 187, 187, 187, 187, 13: 187, 15: 187, 160: 640, 168: 639},
		{3: 188, 8: 188, 188, 188, 188, 13: 188, 15: 188},
		{4: 641},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 642},
		{3: 643},
		// 405
		{3: 186, 8: 186, 186, 186, 186, 13: 186, 15: 186},
		{201, 201, 201, 88, 5: 201, 201, 201, 88, 88, 88, 88, 13: 88, 15: 88, 17: 201, 34: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201},
		{200, 200, 200, 89, 5: 200, 200, 200, 89, 89, 89, 89, 13: 89, 15: 89, 17: 200, 34: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
		{3: 189, 8: 189, 189, 189, 189, 13: 189, 15: 189},
		{3: 190, 8: 190, 190, 190, 190, 13: 190, 15: 190},
		// 410
		{4: 649},
		{12, 12, 12, 12, 12, 12, 12, 12, 246, 11: 244, 12, 14: 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 245, 99: 243, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 115: 241, 242, 650},
		{3: 651},
		{3: 192, 8: 192, 192, 192, 192, 13: 192, 15: 192},
		{384, 356, 353, 193, 5: 364, 355, 349, 193, 193, 193, 193, 13: 193, 15: 193, 17: 351, 34: 350, 359, 354, 357, 369, 367, 348, 362, 365, 377, 376, 372, 368, 370, 374, 380, 375, 366, 347, 378, 363, 373, 379, 358, 360, 361, 94: 352, 96: 371, 381, 382},
		// 415
		{3: 194, 8: 194, 194, 194, 194, 13: 194, 15: 194},
		{3: 235, 8: 235, 235, 235, 13: 235},
		{308, 327, 307, 11, 335, 328, 324, 311, 11, 11, 11, 12: 323, 11, 334, 19: 325, 326, 313, 305, 312, 319, 331, 306, 332, 310, 320, 315, 316, 318, 63: 333, 309, 321, 317, 293, 283, 282, 330, 271, 284, 277, 273, 278, 270, 279, 286, 266, 272, 267, 314, 275, 280, 322, 285, 274, 269, 276, 281, 287, 268, 329, 100: 301, 299, 288, 289, 295, 302, 294, 292, 290, 303, 304, 291, 296, 121: 300, 126: 298, 297, 252, 656, 253, 254, 264, 265, 259, 263, 258, 257, 255, 262, 261, 256, 260},
		{3: 233, 8: 233, 233, 233, 233, 13: 233},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 187

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmt
			}
		}
	case 2:
		{
			yyVAL.stmt = nil
		}
	case 3:
		{
			yyVAL.stmt = yyS[yypt-1].stmtsStmt
		}
	case 4:
		{
			yyVAL.stmtsStmt = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 5:
		{
			yyS[yypt-2].stmtsStmt.Stmts = append(yyS[yypt-2].stmtsStmt.Stmts, yyS[yypt-0].stmt)
		}
	case 42:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 43:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 44:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 45:
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 46:
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyS[yypt-3].tok.Lit, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 47:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 48:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Go = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Go = true
			}
			yyVAL.stmt = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 49:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Defer = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Defer = true
			}
			yyVAL.stmt = &ast.DeferStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 50:
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyS[yypt-7].stmt, Var: yyS[yypt-4].opt_ident.Lit, Catch: yyS[yypt-2].stmt, Finally: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 51:
		{
			yyVAL.stmt = nil
		}
	case 52:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 53:
		{
			yyVAL.stmt = nil
		}
	case 54:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 57:
		{
			isItem := false
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					arr := []ast.Expr{}
					for _, el := range yyS[yypt-2].expr_idents {
						arr = append(arr, &ast.IdentExpr{Lit: el})
					}
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: arr, Rhs: yyS[yypt-0].exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 58:
		{
			isItem := false
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: yyS[yypt-1].op_lets}
				if len(yyS[yypt-2].exprs) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].exprs) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-2].exprs[0].Position())
		}
	case 59:
		{
			yyVAL.op_lets = true
		}
	case 60:
		{
			yyVAL.op_lets = false
		}
	case 61:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-5].expr, Then: yyS[yypt-3].stmt, ElseIf: yyS[yypt-1].else_if_list, Else: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 62:
		{
			yyVAL.else_if_list = []ast.Stmt{}
		}
	case 63:
		{
			yyS[yypt-1].else_if_list = append(yyS[yypt-1].else_if_list, yyS[yypt-0].stmt)
			yyVAL.else_if_list = yyS[yypt-1].else_if_list
		}
	case 64:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmt}
		}
	case 65:
		{
			yyVAL.stmt = nil
		}
	case 66:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 67:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 68:
		{
			yyVAL.stmt = &ast.LoopStmt{Expr: yyS[yypt-3].expr, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 69:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: yyS[yypt-5].expr_idents, Value: yyS[yypt-3].expr, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 70:
		{
			yyVAL.stmt = &ast.CForStmt{Stmt1: yyS[yypt-7].stmt, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 71:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 72:
		{
			yyVAL.expr_idents = []string{yyS[yypt-2].tok.Lit, yyS[yypt-0].tok.Lit}
		}
	case 73:
		{
			yyVAL.stmt = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 74:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{}
		}
	case 75:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{Cases: yyS[yypt-1].else_if_list, Default: yyS[yypt-0].stmt}
		}
	case 76:
		{
			yyVAL.else_if_list = nil
		}
	case 77:
		{
			yyVAL.else_if_list = yyS[yypt-0].else_if_list
		}
	case 78:
		{
			yyVAL.else_if_list = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 79:
		{
			yyVAL.else_if_list = append(yyVAL.else_if_list, yyS[yypt-0].stmt)
		}
	case 80:
		{
			yyVAL.stmt = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 81:
		{
			yyVAL.stmt = nil
		}
	case 82:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 83:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 84:
		{
			yyS[yypt-2].stmt_switch_cases.Expr = yyS[yypt-5].expr
			yyVAL.stmt = yyS[yypt-2].stmt_switch_cases
			yyVAL.stmt.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 85:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 86:
		{
			yyVAL.stmt_switch_cases = yyS[yypt-0].stmt_switch_cases
		}
	case 87:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyS[yypt-0].stmt}
		}
	case 88:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 89:
		{
			yyS[yypt-1].stmt_switch_cases.Cases = append(yyS[yypt-1].stmt_switch_cases.Cases, yyS[yypt-0].stmt)
			yyVAL.stmt_switch_cases = yyS[yypt-1].stmt_switch_cases
		}
	case 90:
		{
			if yyS[yypt-1].stmt_switch_cases.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyS[yypt-1].stmt_switch_cases.Default = yyS[yypt-0].stmt
		}
	case 91:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyS[yypt-2].expr}, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 92:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].exprs, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 93:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 94:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 95:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 96:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents
		}
	case 97:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{}
		}
	case 98:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-0].opt_func_return_expr_idents
		}
	case 99:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 100:
		{
			yyVAL.opt_func_return_expr_idents = append(yyS[yypt-2].opt_func_return_expr_idents, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 101:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 102:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents
		}
	case 105:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 106:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].expr_typed_ident.Name, TypeData: yyS[yypt-0].expr_typed_ident.TypeData}
		}
	case 107:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 108:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 109:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 110:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 111:
		{
			yyVAL.exprs = nil
		}
	case 112:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 113:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 114:
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 115:
		{
			yyVAL.expr = nil
		}
	case 116:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 117:
		{
			yyVAL.expr = &ast.DbgExpr{}
			yyVAL.expr.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 118:
		{
			yyVAL.expr = &ast.DbgExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 119:
		{
			yyVAL.expr = &ast.DbgExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 120:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 121:
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 122:
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 123:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 124:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprs, TypeData: yyS[yypt-3].type_data}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 125:
		{
			yyVAL.exprs = yyS[yypt-1].exprs
		}
	case 126:
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 127:
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 128:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 129:
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 130:
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 131:
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 132:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 133:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 134:
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 135:
		{
			yyVAL.expr = yyS[yypt-0].expr
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 136:
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 137:
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 138:
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 144:
		{
			yyVAL.expr = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 145:
		{
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: yyS[yypt-0].type_data}
		}
	case 146:
		{
			yyVAL.opt_ident = nil
		}
	case 147:
		{
			yyVAL.opt_ident = &yyS[yypt-0].tok
		}
	case 148:
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 151:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 152:
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyS[yypt-1].expr, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 153:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-2].exprs, VarArg: true}
		}
	case 154:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-1].exprs}
		}
	case 155:
		{
			yyVAL.str = "-"
		}
	case 156:
		{
			yyVAL.str = "!"
		}
	case 157:
		{
			yyVAL.str = "^"
		}
	case 158:
		{
			yyVAL.str = "*"
		}
	case 159:
		{
			yyVAL.str = "&"
		}
	case 160:
		{
			if yyS[yypt-1].str == "&" {
				if el, ok := yyS[yypt-0].expr.(*ast.IdentExpr); ok {
					yyVAL.expr = &ast.AddrExpr{Expr: el}
				} else if el, ok := yyS[yypt-0].expr.(*ast.MemberExpr); ok {
					yyVAL.expr = el
				}
			} else if yyS[yypt-1].str == "*" {
				yyVAL.expr = &ast.DerefExpr{Expr: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.UnaryExpr{Operator: yyS[yypt-1].str, Expr: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 161:
		{
			yyVAL.str = "+"
		}
	case 162:
		{
			yyVAL.str = "-"
		}
	case 163:
		{
			yyVAL.str = "*"
		}
	case 164:
		{
			yyVAL.str = "/"
		}
	case 165:
		{
			yyVAL.str = "**"
		}
	case 166:
		{
			yyVAL.str = "%"
		}
	case 167:
		{
			yyVAL.str = "<<"
		}
	case 168:
		{
			yyVAL.str = ">>"
		}
	case 169:
		{
			yyVAL.str = "|"
		}
	case 170:
		{
			yyVAL.str = "||"
		}
	case 171:
		{
			yyVAL.str = "&"
		}
	case 172:
		{
			yyVAL.str = "&&"
		}
	case 173:
		{
			yyVAL.str = "!="
		}
	case 174:
		{
			yyVAL.str = ">"
		}
	case 175:
		{
			yyVAL.str = ">="
		}
	case 176:
		{
			yyVAL.str = "<"
		}
	case 177:
		{
			yyVAL.str = "<="
		}
	case 178:
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 179:
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 181:
		{
			yyVAL.str = "+="
		}
	case 182:
		{
			yyVAL.str = "-="
		}
	case 183:
		{
			yyVAL.str = "*="
		}
	case 184:
		{
			yyVAL.str = "/="
		}
	case 185:
		{
			yyVAL.str = "&="
		}
	case 186:
		{
			yyVAL.str = "|="
		}
	case 187:
		{
			yyVAL.str = "++"
		}
	case 188:
		{
			yyVAL.str = "--"
		}
	case 189:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 190:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: yyS[yypt-0].str}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 191:
		{
			f := &ast.FuncExpr{Params: yyS[yypt-5].func_expr_args.Params, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].stmt, VarArg: yyS[yypt-5].func_expr_args.VarArg}
			if yyS[yypt-5].func_expr_args.TypeData != nil {
				f.Params[len(f.Params)-1].TypeData = yyS[yypt-5].func_expr_args.TypeData
			}
			if yyS[yypt-7].opt_ident != nil {
				f.Name = yyS[yypt-7].opt_ident.Lit
			}
			yyVAL.expr = f
			yyVAL.expr.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 192:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-2].func_expr_idents, VarArg: true, TypeData: yyS[yypt-0].type_data}
		}
	case 193:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-1].func_expr_idents, VarArg: true, TypeData: nil}
		}
	case 194:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-0].func_expr_idents, VarArg: false, TypeData: nil}
		}
	case 195:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 196:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 197:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 198:
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 199:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 200:
		{
			if yyS[yypt-2].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyS[yypt-2].type_data.Env = append(yyS[yypt-2].type_data.Env, yyS[yypt-2].type_data.Name)
				yyS[yypt-2].type_data.Name = yyS[yypt-0].tok.Lit
			}
		}
	case 201:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 202:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 203:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 204:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 205:
		{
			yyVAL.type_data = yyS[yypt-2].type_data
		}
	case 206:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-0].expr_typed_ident.Name}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].expr_typed_ident.TypeData}}
		}
	case 207:
		{
			if yyS[yypt-2].type_data == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data.StructNames = append(yyVAL.type_data.StructNames, yyS[yypt-0].expr_typed_ident.Name)
			yyVAL.type_data.StructTypes = append(yyVAL.type_data.StructTypes, yyS[yypt-0].expr_typed_ident.TypeData)
		}
	case 208:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 209:
		{
			yyVAL.slice_count = 1
		}
	case 210:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 211:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyS[yypt-1].expr_map_content
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 212:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-5].type_data, SubType: yyS[yypt-3].type_data}
			yyVAL.expr = yyS[yypt-1].expr_map_content
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 213:
		{
			yyVAL.expr = yyS[yypt-1].expr_map_content
			yyVAL.expr.SetPosition(yyS[yypt-1].expr_map_content.Position())
		}
	case 214:
		{
			yyVAL.expr_map_content = &ast.MapExpr{}
		}
	case 215:
		{
			yyVAL.expr_map_content = yyS[yypt-1].expr_map_content
		}
	case 216:
		{
			yyVAL.expr_map_content = &ast.MapExpr{Keys: []ast.Expr{yyS[yypt-0].exprs[0]}, Values: []ast.Expr{yyS[yypt-0].exprs[1]}}
		}
	case 217:
		{
			yyVAL.expr_map_content.Keys = append(yyVAL.expr_map_content.Keys, yyS[yypt-0].exprs[0])
			yyVAL.expr_map_content.Values = append(yyVAL.expr_map_content.Values, yyS[yypt-0].exprs[1])
		}
	case 218:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 219:
		{
			if el, ok := yyS[yypt-1].expr.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-3].expr
			} else if el, ok := yyS[yypt-1].expr.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-3].expr
			}
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 220:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: yyS[yypt-0].expr}
		}
	case 221:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-1].expr, End: nil}
		}
	case 222:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: nil, End: yyS[yypt-0].expr}
		}
	case 223:
		{
			yyVAL.expr = &ast.ItemExpr{Index: yyS[yypt-0].expr}
		}
	case 224:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].expr.(*ast.IdentExpr).Lit}
		}
	case 225:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].expr.(*ast.IdentExpr).Lit)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
