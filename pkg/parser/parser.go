// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                      int
	compstmt                 ast.Stmt
	stmts                    *ast.StmtsStmt
	stmt_var_or_lets         ast.Stmt
	opt_stmt_var_or_lets     ast.Stmt
	stmt_var                 ast.Stmt
	stmt_lets                ast.Stmt
	stmt_typed_lets          ast.Stmt
	stmt_try                 ast.Stmt
	stmt_defer               ast.Stmt
	stmt_go                  ast.Stmt
	stmt_if                  ast.Stmt
	stmt_if_helper           ast.Stmt
	stmt_for                 ast.Stmt
	stmt_switch              ast.Stmt
	stmt_switch_cases        *ast.SwitchStmt
	stmt_switch_cases_helper *ast.SwitchStmt
	stmt_switch_case         ast.Stmt
	stmt_switch_default      ast.Stmt
	stmt_select              ast.Stmt
	stmt_select_body         *ast.SelectBodyStmt
	stmt_select_content      *ast.SelectBodyStmt
	stmt_select_cases        *ast.SelectBodyStmt
	stmt_select_cases_helper *ast.SelectBodyStmt
	stmt_select_case         ast.Stmt
	stmt_select_default      ast.Stmt
	stmt                     ast.Stmt
	stmt_module              ast.Stmt
	stmt_break               ast.Stmt
	stmt_return              ast.Stmt
	stmt_continue            ast.Stmt
	stmt_throw               ast.Stmt
	stmt_expr                *ast.ExprStmt
	expr                     ast.Expr
	opt_expr                 ast.Expr
	expr_dbg                 ast.Expr
	expr_literals            ast.Expr
	expr_literals_helper     ast.Expr
	expr_close               ast.Expr
	expr_delete              ast.Expr
	expr_in                  ast.Expr
	expr_opchan              ast.Expr
	expr_new                 ast.Expr
	expr_array               ast.Expr
	expr_paren               ast.Expr
	expr_nil_coalesce        ast.Expr
	expr_ternary             ast.Expr
	expr_len                 ast.Expr
	expr_unary               ast.Expr
	unary_op                 string
	expr_binary              ast.Expr
	expr_assoc               ast.Expr
	expr_member_or_ident     ast.Expr
	expr_member              ast.Expr
	expr_call                *ast.CallExpr
	expr_call_helper         struct {
		Exprs  []ast.Expr
		VarArg bool
	}
	expr_anon_call                *ast.AnonCallExpr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	opt_exprs                     []ast.Expr
	comma_separated_exprs         []ast.Expr
	expr_idents                   []string
	expr_for_idents               []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_args                struct {
		Params   []*ast.ParamExpr
		VarArg   bool
		TypeData *ast.TypeStruct
	}
	func_expr_typed_idents       []*ast.ParamExpr
	opt_func_return_expr_idents  []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1 []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents2 []*ast.FuncReturnValuesExpr
	expr_map                     *ast.MapExpr
	expr_map_content             *ast.MapExpr
	expr_map_content_helper      *ast.MapExpr
	expr_map_key_value           []ast.Expr
	type_data                    *ast.TypeStruct
	type_data_struct             *ast.TypeStruct
	slice_count                  int
	tok                          ast.Token
	bin_op                       string
	op_assoc                     string
	op_assoc1                    string
	expr_item_or_slice           ast.Expr
	expr_slice_helper1           ast.Expr
	expr_ident                   *ast.IdentExpr
	opt_expr_ident               *ast.IdentExpr
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57405
	yyEofCode   = 57344
	ANDAND      = 57364
	ANDEQ       = 57378
	ARRAY       = 57349
	BREAK       = 57380
	CASE        = 57389
	CATCH       = 57372
	CHAN        = 57393
	CLOSE       = 57399
	CONTINUE    = 57381
	DBG         = 57402
	DEFAULT     = 57390
	DEFER       = 57392
	DELETE      = 57398
	DIVEQ       = 57377
	ELSE        = 57356
	EQEQ        = 57359
	FALSE       = 57367
	FINALLY     = 57373
	FOR         = 57357
	FUNC        = 57351
	GE          = 57361
	GO          = 57391
	IDENT       = 57346
	IF          = 57355
	IN          = 57358
	LE          = 57362
	LEN         = 57397
	MAKE        = 57394
	MAP         = 57400
	MINUSEQ     = 57375
	MINUSMINUS  = 57383
	MODULE      = 57370
	MULEQ       = 57376
	NEQ         = 57360
	NEW         = 57365
	NIL         = 57368
	NILCOALESCE = 57369
	NUMBER      = 57347
	OPCHAN      = 57395
	OREQ        = 57379
	OROR        = 57363
	PLUSEQ      = 57374
	PLUSPLUS    = 57382
	POW         = 57384
	RETURN      = 57352
	SELECT      = 57388
	SHIFTLEFT   = 57385
	SHIFTRIGHT  = 57386
	STRING      = 57348
	STRUCT      = 57401
	SWITCH      = 57387
	THROW       = 57354
	TRUE        = 57366
	TRY         = 57371
	TYPE        = 57396
	UNARY       = 57404
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57403
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -234
)

var (
	yyPrec = map[int]int{
		POW:         0,
		'=':         1,
		PLUSEQ:      1,
		MINUSEQ:     1,
		DIVEQ:       1,
		MULEQ:       1,
		ANDEQ:       1,
		OREQ:        1,
		':':         2,
		OPCHAN:      3,
		'?':         4,
		NILCOALESCE: 4,
		OROR:        5,
		ANDAND:      6,
		EQEQ:        7,
		NEQ:         7,
		'<':         7,
		LE:          7,
		'>':         7,
		GE:          7,
		'+':         8,
		'-':         8,
		'|':         8,
		'^':         8,
		'*':         9,
		'/':         9,
		'%':         9,
		SHIFTLEFT:   9,
		SHIFTRIGHT:  9,
		'&':         9,
		IN:          10,
		PLUSPLUS:    11,
		MINUSMINUS:  11,
		UNARY:       12,
	}

	yyXLAT = map[int]int{
		91:    0,   // '[' (245x)
		42:    1,   // '*' (242x)
		40:    2,   // '(' (231x)
		125:   3,   // '}' (228x)
		123:   4,   // '{' (221x)
		38:    5,   // '&' (220x)
		45:    6,   // '-' (220x)
		57395: 7,   // OPCHAN (220x)
		10:    8,   // '\n' (202x)
		57389: 9,   // CASE (162x)
		57390: 10,  // DEFAULT (162x)
		59:    11,  // ';' (152x)
		57346: 12,  // IDENT (149x)
		57344: 13,  // $end (139x)
		57400: 14,  // MAP (135x)
		58:    15,  // ':' (133x)
		46:    16,  // '.' (132x)
		44:    17,  // ',' (128x)
		41:    18,  // ')' (123x)
		33:    19,  // '!' (112x)
		94:    20,  // '^' (112x)
		57399: 21,  // CLOSE (112x)
		57402: 22,  // DBG (112x)
		57398: 23,  // DELETE (112x)
		57367: 24,  // FALSE (112x)
		57351: 25,  // FUNC (112x)
		57397: 26,  // LEN (112x)
		57394: 27,  // MAKE (112x)
		57365: 28,  // NEW (112x)
		57368: 29,  // NIL (112x)
		57347: 30,  // NUMBER (112x)
		57348: 31,  // STRING (112x)
		57366: 32,  // TRUE (112x)
		57358: 33,  // IN (110x)
		37:    34,  // '%' (108x)
		43:    35,  // '+' (108x)
		47:    36,  // '/' (108x)
		60:    37,  // '<' (108x)
		62:    38,  // '>' (108x)
		63:    39,  // '?' (108x)
		124:   40,  // '|' (108x)
		57364: 41,  // ANDAND (108x)
		57378: 42,  // ANDEQ (108x)
		57377: 43,  // DIVEQ (108x)
		57359: 44,  // EQEQ (108x)
		57361: 45,  // GE (108x)
		57362: 46,  // LE (108x)
		57375: 47,  // MINUSEQ (108x)
		57383: 48,  // MINUSMINUS (108x)
		57376: 49,  // MULEQ (108x)
		57360: 50,  // NEQ (108x)
		57369: 51,  // NILCOALESCE (108x)
		57379: 52,  // OREQ (108x)
		57363: 53,  // OROR (108x)
		57374: 54,  // PLUSEQ (108x)
		57382: 55,  // PLUSPLUS (108x)
		57384: 56,  // POW (108x)
		57385: 57,  // SHIFTLEFT (108x)
		57386: 58,  // SHIFTRIGHT (108x)
		93:    59,  // ']' (106x)
		61:    60,  // '=' (83x)
		57350: 61,  // VARARG (82x)
		57403: 62,  // WALRUS (80x)
		57465: 63,  // slice_count (72x)
		57422: 64,  // expr_ident (51x)
		57410: 65,  // expr (50x)
		57411: 66,  // expr_anon_call (50x)
		57412: 67,  // expr_array (50x)
		57413: 68,  // expr_assoc (50x)
		57414: 69,  // expr_binary (50x)
		57415: 70,  // expr_call (50x)
		57417: 71,  // expr_close (50x)
		57418: 72,  // expr_dbg (50x)
		57419: 73,  // expr_delete (50x)
		57421: 74,  // expr_func (50x)
		57424: 75,  // expr_in (50x)
		57425: 76,  // expr_item_or_slice (50x)
		57426: 77,  // expr_len (50x)
		57427: 78,  // expr_literals (50x)
		57428: 79,  // expr_literals_helper (50x)
		57429: 80,  // expr_make (50x)
		57430: 81,  // expr_map (50x)
		57434: 82,  // expr_member (50x)
		57435: 83,  // expr_member_or_ident (50x)
		57436: 84,  // expr_new (50x)
		57437: 85,  // expr_nil_coalesce (50x)
		57438: 86,  // expr_opchan (50x)
		57439: 87,  // expr_paren (50x)
		57441: 88,  // expr_ternary (50x)
		57442: 89,  // expr_unary (50x)
		57500: 90,  // unary_op (50x)
		57416: 91,  // expr_call_helper (40x)
		57451: 92,  // newline (40x)
		57406: 93,  // bin_op (37x)
		57440: 94,  // expr_slice_helper1 (37x)
		57453: 95,  // op_assoc (37x)
		57454: 96,  // op_assoc1 (37x)
		57452: 97,  // newlines (36x)
		57355: 98,  // IF (32x)
		57353: 99,  // VAR (32x)
		57380: 100, // BREAK (31x)
		57393: 101, // CHAN (31x)
		57381: 102, // CONTINUE (31x)
		57392: 103, // DEFER (31x)
		57357: 104, // FOR (31x)
		57391: 105, // GO (31x)
		57370: 106, // MODULE (31x)
		57352: 107, // RETURN (31x)
		57388: 108, // SELECT (31x)
		57401: 109, // STRUCT (31x)
		57387: 110, // SWITCH (31x)
		57354: 111, // THROW (31x)
		57371: 112, // TRY (31x)
		57498: 113, // type_data (22x)
		57464: 114, // opt_term (21x)
		57497: 115, // term (21x)
		57409: 116, // compstmt (20x)
		57462: 117, // opt_newlines (15x)
		57407: 118, // comma_opt_newlines (12x)
		57443: 119, // exprs (11x)
		57356: 120, // ELSE (4x)
		57431: 121, // expr_map_content (4x)
		57458: 122, // opt_exprs (4x)
		57476: 123, // stmt_lets (4x)
		57493: 124, // stmt_typed_lets (4x)
		57494: 125, // stmt_var (4x)
		57495: 126, // stmt_var_or_lets (4x)
		57467: 127, // stmt (3x)
		57468: 128, // stmt_break (3x)
		57469: 129, // stmt_continue (3x)
		57470: 130, // stmt_defer (3x)
		57471: 131, // stmt_expr (3x)
		57472: 132, // stmt_for (3x)
		57473: 133, // stmt_go (3x)
		57474: 134, // stmt_if (3x)
		57475: 135, // stmt_if_helper (3x)
		57477: 136, // stmt_module (3x)
		57478: 137, // stmt_return (3x)
		57479: 138, // stmt_select (3x)
		57486: 139, // stmt_switch (3x)
		57491: 140, // stmt_throw (3x)
		57492: 141, // stmt_try (3x)
		57408: 142, // comma_separated_exprs (2x)
		57433: 143, // expr_map_key_value (2x)
		57373: 144, // FINALLY (2x)
		57448: 145, // func_expr_typed_ident (2x)
		57450: 146, // func_expr_untyped_ident (2x)
		57455: 147, // opt_comma_opt_newlines (2x)
		57456: 148, // opt_expr (2x)
		57481: 149, // stmt_select_case (2x)
		57485: 150, // stmt_select_default (2x)
		57487: 151, // stmt_switch_case (2x)
		57490: 152, // stmt_switch_default (2x)
		57372: 153, // CATCH (1x)
		57420: 154, // expr_for_idents (1x)
		57423: 155, // expr_idents (1x)
		57432: 156, // expr_map_content_helper (1x)
		57444: 157, // func_expr_args (1x)
		57445: 158, // func_expr_idents (1x)
		57446: 159, // func_expr_idents_last_untyped (1x)
		57447: 160, // func_expr_idents_not_empty (1x)
		57449: 161, // func_expr_typed_idents (1x)
		57457: 162, // opt_expr_ident (1x)
		57459: 163, // opt_func_return_expr_idents (1x)
		57460: 164, // opt_func_return_expr_idents1 (1x)
		57461: 165, // opt_func_return_expr_idents2 (1x)
		57463: 166, // opt_stmt_var_or_lets (1x)
		57466: 167, // start (1x)
		57480: 168, // stmt_select_body (1x)
		57482: 169, // stmt_select_cases (1x)
		57483: 170, // stmt_select_cases_helper (1x)
		57484: 171, // stmt_select_content (1x)
		57488: 172, // stmt_switch_cases (1x)
		57489: 173, // stmt_switch_cases_helper (1x)
		57496: 174, // stmts (1x)
		57396: 175, // TYPE (1x)
		57499: 176, // type_data_struct (1x)
		57405: 177, // $default (0x)
		57349: 178, // ARRAY (0x)
		57345: 179, // error (0x)
		57404: 180, // UNARY (0x)
	}

	yySymNames = []string{
		"'['",
		"'*'",
		"'('",
		"'}'",
		"'{'",
		"'&'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"CASE",
		"DEFAULT",
		"';'",
		"IDENT",
		"$end",
		"MAP",
		"':'",
		"'.'",
		"','",
		"')'",
		"'!'",
		"'^'",
		"CLOSE",
		"DBG",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"']'",
		"'='",
		"VARARG",
		"WALRUS",
		"slice_count",
		"expr_ident",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_dbg",
		"expr_delete",
		"expr_func",
		"expr_in",
		"expr_item_or_slice",
		"expr_len",
		"expr_literals",
		"expr_literals_helper",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_nil_coalesce",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"unary_op",
		"expr_call_helper",
		"newline",
		"bin_op",
		"expr_slice_helper1",
		"op_assoc",
		"op_assoc1",
		"newlines",
		"IF",
		"VAR",
		"BREAK",
		"CHAN",
		"CONTINUE",
		"DEFER",
		"FOR",
		"GO",
		"MODULE",
		"RETURN",
		"SELECT",
		"STRUCT",
		"SWITCH",
		"THROW",
		"TRY",
		"type_data",
		"opt_term",
		"term",
		"compstmt",
		"opt_newlines",
		"comma_opt_newlines",
		"exprs",
		"ELSE",
		"expr_map_content",
		"opt_exprs",
		"stmt_lets",
		"stmt_typed_lets",
		"stmt_var",
		"stmt_var_or_lets",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_if",
		"stmt_if_helper",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"comma_separated_exprs",
		"expr_map_key_value",
		"FINALLY",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"opt_comma_opt_newlines",
		"opt_expr",
		"stmt_select_case",
		"stmt_select_default",
		"stmt_switch_case",
		"stmt_switch_default",
		"CATCH",
		"expr_for_idents",
		"expr_idents",
		"expr_map_content_helper",
		"func_expr_args",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"opt_expr_ident",
		"opt_func_return_expr_idents",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"opt_stmt_var_or_lets",
		"start",
		"stmt_select_body",
		"stmt_select_cases",
		"stmt_select_cases_helper",
		"stmt_select_content",
		"stmt_switch_cases",
		"stmt_switch_cases_helper",
		"stmts",
		"TYPE",
		"type_data_struct",
		"$default",
		"ARRAY",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {167, 1},
		2:   {116, 1},
		3:   {116, 3},
		4:   {174, 1},
		5:   {174, 3},
		6:   {127, 1},
		7:   {127, 1},
		8:   {127, 1},
		9:   {127, 1},
		10:  {127, 1},
		11:  {127, 1},
		12:  {127, 1},
		13:  {127, 1},
		14:  {127, 1},
		15:  {127, 1},
		16:  {127, 1},
		17:  {127, 1},
		18:  {127, 1},
		19:  {127, 1},
		20:  {128, 1},
		21:  {129, 1},
		22:  {137, 2},
		23:  {140, 2},
		24:  {136, 5},
		25:  {131, 1},
		26:  {133, 2},
		27:  {133, 2},
		28:  {130, 2},
		29:  {130, 2},
		30:  {141, 13},
		31:  {141, 12},
		32:  {141, 9},
		33:  {141, 8},
		34:  {166, 0},
		35:  {166, 1},
		36:  {126, 1},
		37:  {126, 1},
		38:  {126, 1},
		39:  {125, 4},
		40:  {124, 3},
		41:  {123, 3},
		42:  {134, 1},
		43:  {135, 5},
		44:  {135, 7},
		45:  {135, 5},
		46:  {132, 4},
		47:  {132, 5},
		48:  {132, 7},
		49:  {132, 9},
		50:  {154, 1},
		51:  {154, 3},
		52:  {138, 4},
		53:  {171, 0},
		54:  {171, 3},
		55:  {169, 1},
		56:  {170, 1},
		57:  {170, 2},
		58:  {170, 2},
		59:  {168, 1},
		60:  {168, 1},
		61:  {149, 4},
		62:  {150, 3},
		63:  {139, 7},
		64:  {172, 0},
		65:  {172, 1},
		66:  {173, 1},
		67:  {173, 1},
		68:  {173, 2},
		69:  {173, 2},
		70:  {151, 4},
		71:  {151, 4},
		72:  {152, 3},
		73:  {163, 0},
		74:  {163, 1},
		75:  {163, 3},
		76:  {164, 0},
		77:  {164, 1},
		78:  {165, 1},
		79:  {165, 3},
		80:  {158, 0},
		81:  {158, 1},
		82:  {160, 1},
		83:  {160, 1},
		84:  {146, 1},
		85:  {145, 2},
		86:  {159, 1},
		87:  {159, 3},
		88:  {161, 1},
		89:  {161, 3},
		90:  {122, 0},
		91:  {122, 1},
		92:  {119, 1},
		93:  {119, 3},
		94:  {148, 0},
		95:  {148, 1},
		96:  {65, 1},
		97:  {65, 1},
		98:  {65, 1},
		99:  {65, 1},
		100: {65, 1},
		101: {65, 1},
		102: {65, 1},
		103: {65, 1},
		104: {65, 1},
		105: {65, 1},
		106: {65, 1},
		107: {65, 1},
		108: {65, 1},
		109: {65, 1},
		110: {65, 1},
		111: {65, 1},
		112: {65, 1},
		113: {65, 1},
		114: {65, 1},
		115: {65, 1},
		116: {65, 1},
		117: {72, 3},
		118: {72, 4},
		119: {72, 4},
		120: {77, 4},
		121: {87, 3},
		122: {67, 2},
		123: {67, 3},
		124: {67, 5},
		125: {142, 3},
		126: {85, 3},
		127: {88, 5},
		128: {84, 4},
		129: {86, 3},
		130: {86, 2},
		131: {75, 3},
		132: {73, 4},
		133: {73, 6},
		134: {71, 4},
		135: {78, 1},
		136: {79, 1},
		137: {79, 1},
		138: {79, 1},
		139: {79, 1},
		140: {79, 1},
		141: {83, 1},
		142: {83, 1},
		143: {64, 1},
		144: {82, 3},
		145: {162, 0},
		146: {162, 1},
		147: {70, 2},
		148: {66, 2},
		149: {91, 4},
		150: {91, 3},
		151: {90, 1},
		152: {90, 1},
		153: {90, 1},
		154: {89, 2},
		155: {89, 2},
		156: {89, 2},
		157: {93, 1},
		158: {93, 1},
		159: {93, 1},
		160: {93, 1},
		161: {93, 1},
		162: {93, 1},
		163: {93, 1},
		164: {93, 1},
		165: {93, 1},
		166: {93, 1},
		167: {93, 1},
		168: {93, 1},
		169: {69, 3},
		170: {69, 3},
		171: {69, 3},
		172: {69, 1},
		173: {95, 1},
		174: {95, 1},
		175: {95, 1},
		176: {95, 1},
		177: {95, 1},
		178: {95, 1},
		179: {68, 3},
		180: {68, 2},
		181: {68, 2},
		182: {96, 1},
		183: {96, 1},
		184: {96, 1},
		185: {96, 1},
		186: {96, 1},
		187: {74, 9},
		188: {157, 3},
		189: {157, 2},
		190: {157, 1},
		191: {80, 4},
		192: {80, 6},
		193: {80, 8},
		194: {80, 7},
		195: {113, 1},
		196: {113, 3},
		197: {113, 2},
		198: {113, 2},
		199: {113, 5},
		200: {113, 2},
		201: {113, 6},
		202: {176, 2},
		203: {176, 4},
		204: {63, 2},
		205: {63, 3},
		206: {81, 4},
		207: {81, 8},
		208: {81, 3},
		209: {121, 1},
		210: {121, 3},
		211: {156, 1},
		212: {156, 3},
		213: {143, 3},
		214: {76, 2},
		215: {94, 3},
		216: {94, 5},
		217: {94, 4},
		218: {94, 4},
		219: {155, 1},
		220: {155, 3},
		221: {114, 0},
		222: {114, 1},
		223: {115, 1},
		224: {115, 1},
		225: {115, 2},
		226: {117, 0},
		227: {117, 1},
		228: {97, 1},
		229: {97, 2},
		230: {92, 1},
		231: {118, 2},
		232: {147, 1},
		233: {147, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [432][]uint16{
		// 0
		{13, 13, 13, 4: 13, 13, 13, 13, 242, 11: 239, 13, 13, 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 236, 167: 235},
		{13: 234},
		{13: 233},
		{304, 324, 303, 232, 329, 323, 319, 307, 232, 232, 232, 12: 318, 232, 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 266, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 98: 276, 273, 261, 102: 262, 268, 277, 267, 265, 263, 278, 110: 279, 264, 269, 119: 274, 123: 272, 271, 270, 247, 246, 248, 249, 259, 260, 254, 258, 253, 275, 252, 250, 257, 256, 251, 255, 174: 245},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12: 12, 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 98: 12, 12, 12, 102: 12, 12, 12, 12, 12, 12, 12, 110: 12, 12, 12},
		// 5
		{11, 11, 11, 11, 11, 11, 11, 11, 242, 11, 11, 12: 11, 11, 11, 19: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 92: 241, 97: 244, 11, 11, 11, 102: 11, 11, 11, 11, 11, 11, 11, 110: 11, 11, 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 242, 10, 10, 12: 10, 10, 10, 19: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 92: 243, 98: 10, 10, 10, 102: 10, 10, 10, 10, 10, 10, 10, 110: 10, 10, 10},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12: 6, 6, 6, 17: 6, 19: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 59: 6, 98: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12: 4, 4, 4, 17: 4, 19: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 59: 4, 98: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12: 5, 5, 5, 17: 5, 19: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 59: 5, 98: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		// 10
		{9, 9, 9, 9, 9, 9, 9, 9, 242, 9, 9, 12: 9, 9, 9, 19: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 92: 243, 98: 9, 9, 9, 102: 9, 9, 9, 9, 9, 9, 9, 110: 9, 9, 9},
		{3: 13, 8: 242, 13, 13, 239, 13: 13, 92: 241, 97: 240, 114: 663, 664},
		{3: 230, 8: 230, 230, 230, 230, 13: 230},
		{3: 228, 8: 228, 228, 228, 228, 13: 228, 15: 228},
		{3: 227, 8: 227, 227, 227, 227, 13: 227, 15: 227},
		// 15
		{3: 226, 8: 226, 226, 226, 226, 13: 226, 15: 226},
		{3: 225, 8: 225, 225, 225, 225, 13: 225, 15: 225},
		{3: 224, 8: 224, 224, 224, 224, 13: 224, 15: 224},
		{3: 223, 8: 223, 223, 223, 223, 13: 223, 15: 223},
		{3: 222, 8: 222, 222, 222, 222, 13: 222, 15: 222},
		// 20
		{3: 221, 8: 221, 221, 221, 221, 13: 221, 15: 221},
		{3: 220, 8: 220, 220, 220, 220, 13: 220, 15: 220},
		{3: 219, 8: 219, 219, 219, 219, 13: 219, 15: 219},
		{3: 218, 8: 218, 218, 218, 218, 13: 218, 15: 218},
		{3: 217, 8: 217, 217, 217, 217, 13: 217, 15: 217},
		// 25
		{3: 216, 8: 216, 216, 216, 216, 13: 216, 15: 216},
		{3: 215, 8: 215, 215, 215, 215, 13: 215, 15: 215},
		{3: 214, 8: 214, 214, 214, 214, 13: 214, 15: 214},
		{3: 213, 8: 213, 213, 213, 213, 13: 213, 15: 213},
		{304, 324, 303, 144, 329, 323, 319, 307, 144, 144, 144, 144, 318, 144, 328, 144, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 396, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 119: 516, 122: 662},
		// 30
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 661, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{12: 657},
		{380, 351, 348, 209, 5: 359, 350, 344, 209, 209, 209, 209, 13: 209, 15: 209, 346, 142, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 60: 142, 62: 142, 91: 347, 93: 361, 379, 370, 363},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 495, 656, 286, 325, 288, 655, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 495, 654, 286, 325, 288, 653, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		// 35
		{4: 634},
		{3: 198, 8: 198, 198, 198, 198, 13: 198, 15: 198},
		{3: 197, 8: 197, 197, 197, 197, 13: 197, 15: 197},
		{3: 196, 8: 196, 196, 196, 196, 13: 196, 15: 196},
		{12: 629, 155: 628},
		// 40
		{17: 338, 60: 625, 62: 624, 118: 399},
		{3: 192, 8: 192, 192, 192, 192, 13: 192, 15: 192, 120: 615},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 611, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{304, 324, 303, 4: 585, 323, 319, 307, 11: 200, 589, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 586, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 99: 273, 119: 274, 123: 272, 271, 270, 584, 154: 587, 166: 588},
		{4: 565},
		// 45
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 544, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 13: 138, 15: 138, 138, 138, 138, 33: 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138},
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 13: 137, 15: 137, 137, 137, 137, 33: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 13: 136, 15: 136, 136, 136, 136, 33: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 13: 135, 15: 135, 135, 135, 135, 33: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135},
		// 50
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 13: 134, 15: 134, 134, 134, 134, 33: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 13: 133, 15: 133, 133, 133, 133, 33: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 13: 132, 15: 132, 132, 132, 132, 33: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132},
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 13: 131, 15: 131, 131, 131, 131, 33: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 13: 130, 15: 130, 130, 130, 130, 33: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130},
		// 55
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 13: 129, 15: 129, 129, 129, 129, 33: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 13: 128, 15: 128, 128, 128, 128, 33: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 13: 127, 15: 127, 127, 127, 127, 33: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 13: 126, 15: 126, 126, 126, 126, 33: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 13: 125, 15: 125, 125, 125, 125, 33: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		// 60
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 13: 124, 15: 124, 124, 124, 124, 33: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 13: 123, 15: 123, 123, 123, 123, 33: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 13: 122, 15: 122, 122, 122, 122, 33: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 13: 121, 15: 121, 121, 121, 121, 33: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 13: 120, 15: 120, 120, 120, 120, 33: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		// 65
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 13: 119, 15: 119, 119, 119, 119, 33: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 13: 118, 15: 118, 118, 118, 118, 33: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		{2: 529},
		{2: 526},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 524, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		// 70
		{8, 8, 8, 4: 8, 8, 8, 8, 242, 12: 8, 14: 8, 17: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 59: 521, 92: 241, 97: 332, 117: 515, 142: 522},
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 512},
		{2: 509},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 508, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{2: 502},
		// 75
		{2: 499},
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 13: 99, 15: 99, 99, 99, 99, 33: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 13: 98, 15: 98, 98, 98, 98, 33: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 13: 97, 15: 97, 97, 97, 97, 33: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 13: 96, 15: 96, 96, 96, 96, 33: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		// 80
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 13: 95, 15: 95, 95, 95, 95, 33: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 13: 94, 15: 94, 94, 94, 94, 33: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 13: 93, 15: 93, 93, 93, 93, 33: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 13: 92, 15: 92, 92, 92, 92, 33: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{91, 91, 348, 91, 91, 91, 91, 91, 91, 91, 91, 91, 13: 91, 15: 91, 91, 91, 91, 33: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91: 498},
		// 85
		{83, 83, 83, 4: 83, 83, 83, 83, 12: 83, 14: 83, 19: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 82, 4: 82, 82, 82, 82, 12: 82, 14: 82, 19: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{81, 81, 81, 4: 81, 81, 81, 81, 12: 81, 14: 81, 19: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 497, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 495, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 496, 294, 284, 297, 287, 283, 282, 322},
		// 90
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 495, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 494, 294, 284, 297, 287, 283, 282, 322},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 13: 62, 15: 62, 62, 62, 62, 33: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{2: 89, 12: 463, 64: 464, 162: 465},
		{2: 449},
		{412, 4: 411},
		// 95
		{8, 8, 8, 8, 8, 8, 8, 8, 242, 12: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 92: 241, 97: 332, 117: 331, 121: 330},
		{3: 410},
		{304, 324, 303, 25, 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 333, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 143: 335, 156: 334},
		{7, 7, 7, 7, 7, 7, 7, 7, 242, 7, 7, 12: 7, 14: 7, 17: 7, 19: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 59: 7, 92: 243, 101: 7, 109: 7},
		{380, 351, 348, 5: 359, 350, 344, 15: 378, 346, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		// 100
		{3: 8, 8: 242, 17: 338, 92: 241, 97: 332, 117: 339, 337, 147: 336},
		{3: 23, 8: 23, 17: 23},
		{3: 24},
		{304, 324, 303, 2, 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 333, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 143: 341},
		{8, 8, 8, 8, 8, 8, 8, 8, 242, 12: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 59: 8, 92: 241, 97: 332, 101: 8, 109: 8, 117: 340},
		// 105
		{3: 1, 59: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 12: 3, 14: 3, 19: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 59: 3, 101: 3, 109: 3},
		{3: 22, 8: 22, 17: 22},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 409, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 406, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		// 110
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 405, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 404, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{12: 403},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 13: 86, 15: 86, 86, 86, 86, 33: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 18: 144, 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 396, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 119: 395, 122: 397},
		// 115
		{77, 77, 77, 4: 77, 77, 77, 77, 12: 77, 14: 77, 19: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 4: 76, 76, 76, 76, 12: 76, 14: 76, 19: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		{75, 75, 75, 4: 75, 75, 75, 75, 12: 75, 14: 75, 19: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{74, 74, 74, 4: 74, 74, 74, 74, 12: 74, 14: 74, 19: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{73, 73, 73, 4: 73, 73, 73, 73, 12: 73, 14: 73, 19: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		// 120
		{72, 72, 72, 4: 72, 72, 72, 72, 12: 72, 14: 72, 19: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		{71, 71, 71, 4: 71, 71, 71, 71, 12: 71, 14: 71, 19: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		{70, 70, 70, 4: 70, 70, 70, 70, 12: 70, 14: 70, 19: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{69, 69, 69, 4: 69, 69, 69, 69, 12: 69, 14: 69, 19: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{68, 68, 68, 4: 68, 68, 68, 68, 12: 68, 14: 68, 19: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		// 125
		{67, 67, 67, 4: 67, 67, 67, 67, 12: 67, 14: 67, 19: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{66, 66, 66, 4: 66, 66, 66, 66, 12: 66, 14: 66, 19: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 394, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 393, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 392, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		// 130
		{61, 61, 61, 4: 61, 61, 61, 61, 12: 61, 14: 61, 19: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{60, 60, 60, 4: 60, 60, 60, 60, 12: 60, 14: 60, 19: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 4: 59, 59, 59, 59, 12: 59, 14: 59, 19: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{58, 58, 58, 4: 58, 58, 58, 58, 12: 58, 14: 58, 19: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{57, 57, 57, 4: 57, 57, 57, 57, 12: 57, 14: 57, 19: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		// 135
		{56, 56, 56, 4: 56, 56, 56, 56, 12: 56, 14: 56, 19: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 391, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 13: 54, 15: 54, 54, 54, 54, 33: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 13: 53, 15: 53, 53, 53, 53, 33: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{52, 52, 52, 4: 52, 52, 52, 52, 12: 52, 14: 52, 19: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		// 140
		{51, 51, 51, 4: 51, 51, 51, 51, 12: 51, 14: 51, 19: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{50, 50, 50, 4: 50, 50, 50, 50, 12: 50, 14: 50, 19: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{49, 49, 49, 4: 49, 49, 49, 49, 12: 49, 14: 49, 19: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{48, 48, 48, 4: 48, 48, 48, 48, 12: 48, 14: 48, 19: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 390, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		// 145
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 13: 20, 15: 20, 20, 20, 20, 33: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 382, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 381, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{380, 351, 348, 5: 359, 350, 344, 15: 386, 346, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 385, 91: 347, 93: 361, 379, 370, 363},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 383, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{380, 351, 348, 5: 359, 350, 344, 16: 346, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 384, 91: 347, 93: 361, 379, 370, 363},
		// 150
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13: 16, 15: 16, 16, 16, 16, 33: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 13: 19, 15: 19, 19, 19, 19, 33: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 59: 388, 63: 305, 316, 387, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{380, 351, 348, 5: 359, 350, 344, 16: 346, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 389, 91: 347, 93: 361, 379, 370, 363},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13: 17, 15: 17, 17, 17, 17, 33: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		// 155
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 13: 18, 15: 18, 18, 18, 18, 33: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{380, 351, 348, 21, 5: 359, 350, 344, 21, 16: 346, 21, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{380, 351, 348, 55, 55, 359, 350, 344, 55, 55, 55, 55, 13: 55, 15: 55, 346, 55, 55, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 55, 55, 55, 55, 91: 347, 93: 361, 379, 370, 363},
		{380, 351, 348, 63, 63, 359, 350, 344, 63, 63, 63, 63, 13: 63, 15: 63, 346, 63, 63, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 63, 63, 63, 63, 91: 347, 93: 361, 379, 370, 363},
		{380, 351, 348, 64, 64, 359, 350, 64, 64, 64, 64, 64, 13: 64, 15: 64, 346, 64, 64, 33: 345, 354, 349, 352, 64, 64, 64, 357, 64, 64, 64, 64, 64, 64, 64, 372, 64, 64, 64, 64, 64, 64, 371, 64, 355, 356, 64, 64, 64, 64, 91: 347, 93: 361, 379, 370, 363},
		// 160
		{380, 351, 348, 65, 65, 359, 350, 344, 65, 65, 65, 65, 13: 65, 15: 65, 346, 65, 65, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 65, 65, 65, 65, 91: 347, 93: 361, 379, 370, 363},
		{17: 338, 143, 61: 400, 118: 399},
		{380, 351, 348, 142, 5: 359, 350, 344, 142, 142, 142, 142, 13: 142, 15: 142, 346, 142, 142, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 142, 61: 142, 91: 347, 93: 361, 379, 370, 363},
		{18: 398},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 13: 84, 15: 84, 84, 84, 84, 33: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		// 165
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 402, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{18: 401},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 13: 85, 15: 85, 85, 85, 85, 33: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{380, 351, 348, 141, 5: 359, 350, 344, 141, 141, 141, 141, 13: 141, 15: 141, 346, 141, 141, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 141, 141, 141, 141, 91: 347, 93: 361, 379, 370, 363},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 13: 90, 15: 90, 90, 90, 90, 33: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		// 170
		{380, 103, 348, 103, 103, 103, 103, 103, 103, 103, 103, 103, 13: 103, 15: 103, 346, 103, 103, 33: 345, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 372, 103, 103, 103, 103, 103, 103, 371, 103, 103, 103, 103, 103, 103, 103, 91: 347, 93: 361, 379, 370, 363},
		{380, 351, 348, 105, 105, 359, 350, 344, 105, 105, 105, 105, 13: 105, 15: 105, 346, 105, 105, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 105, 105, 362, 375, 377, 105, 372, 105, 373, 342, 105, 358, 105, 371, 105, 355, 356, 105, 105, 105, 105, 91: 347, 93: 361, 379, 370, 363},
		{380, 351, 348, 5: 359, 350, 344, 15: 407, 346, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 408, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{380, 351, 348, 107, 107, 359, 350, 344, 107, 107, 107, 107, 13: 107, 15: 107, 346, 107, 107, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 107, 107, 362, 375, 377, 107, 372, 107, 373, 342, 107, 358, 107, 371, 107, 355, 356, 107, 107, 107, 107, 91: 347, 93: 361, 379, 370, 363},
		// 175
		{380, 351, 348, 108, 108, 359, 350, 108, 108, 108, 108, 108, 13: 108, 15: 108, 346, 108, 108, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 108, 108, 362, 375, 377, 108, 372, 108, 373, 342, 108, 358, 108, 371, 108, 355, 356, 108, 108, 108, 108, 91: 347, 93: 361, 379, 370, 363},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 13: 26, 15: 26, 26, 26, 26, 33: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{8, 8, 8, 8, 8, 8, 8, 8, 242, 12: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 92: 241, 97: 332, 117: 331, 121: 447},
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 414},
		{3: 39, 39, 8: 39, 16: 39, 39, 39, 59: 39},
		// 180
		{16: 428, 59: 442},
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 441},
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 440},
		{436},
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 435},
		// 185
		{4: 423},
		{59: 421},
		{420, 30, 12: 30, 14: 30, 63: 422, 101: 30, 109: 30},
		{29, 29, 12: 29, 14: 29, 101: 29, 109: 29},
		{8: 242, 12: 8, 92: 241, 97: 332, 117: 424},
		// 190
		{12: 426, 176: 425},
		{3: 8, 8: 242, 17: 338, 92: 241, 97: 332, 117: 430, 431},
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 427},
		{3: 32, 8: 32, 16: 428, 32},
		{12: 429},
		// 195
		{3: 38, 38, 8: 38, 16: 38, 38, 38, 59: 38},
		{3: 434},
		{12: 432},
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 433},
		{3: 31, 8: 31, 16: 428, 31},
		// 200
		{3: 33, 33, 8: 33, 16: 33, 33, 33, 59: 33},
		{3: 34, 34, 8: 34, 16: 428, 34, 34, 59: 34},
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 437},
		{16: 428, 59: 438},
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 439},
		// 205
		{3: 35, 35, 8: 35, 16: 428, 35, 35, 59: 35},
		{3: 36, 36, 8: 36, 16: 428, 36, 36, 59: 36},
		{3: 37, 37, 8: 37, 16: 428, 37, 37, 59: 37},
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 443},
		{4: 444, 16: 428},
		// 210
		{8, 8, 8, 8, 8, 8, 8, 8, 242, 12: 8, 14: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 92: 241, 97: 332, 117: 331, 121: 445},
		{3: 446},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13: 27, 15: 27, 27, 27, 27, 33: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{3: 448},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 13: 28, 15: 28, 28, 28, 28, 33: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		// 215
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 450, 175: 451},
		{16: 428, 457, 456},
		{12: 452},
		{17: 453},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 454, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		// 220
		{380, 351, 348, 5: 359, 350, 344, 16: 346, 18: 455, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 13: 40, 15: 40, 40, 40, 40, 33: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 13: 43, 15: 43, 43, 43, 43, 33: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 458, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{380, 351, 348, 5: 359, 350, 344, 16: 346, 460, 459, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		// 225
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 13: 42, 15: 42, 42, 42, 42, 33: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 461, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{380, 351, 348, 5: 359, 350, 344, 16: 346, 18: 462, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 13: 41, 15: 41, 41, 41, 41, 33: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{2: 91},
		// 230
		{2: 88},
		{2: 466},
		{12: 470, 18: 154, 145: 472, 471, 157: 473, 474, 468, 467, 469},
		{17: 338, 153, 118: 491},
		{17: 152, 152, 61: 489},
		// 235
		{17: 151, 151},
		{420, 415, 12: 413, 14: 417, 17: 150, 150, 61: 150, 63: 416, 101: 418, 109: 419, 113: 488},
		{17: 148, 148, 61: 148},
		{17: 146, 146},
		{18: 475},
		// 240
		{18: 44},
		{420, 415, 477, 4: 161, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 476, 163: 478},
		{4: 160, 16: 428},
		{420, 415, 12: 413, 14: 417, 18: 158, 63: 416, 101: 418, 109: 419, 113: 484, 164: 482, 483},
		{4: 479},
		// 245
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 11: 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 480},
		{3: 481},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 13: 47, 15: 47, 47, 47, 47, 33: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{18: 487},
		{17: 338, 157, 118: 485},
		// 250
		{16: 428, 156, 156},
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 486},
		{16: 428, 155, 155},
		{4: 159},
		{16: 428, 149, 149},
		// 255
		{420, 415, 12: 413, 14: 417, 18: 45, 63: 416, 101: 418, 109: 419, 113: 490},
		{16: 428, 18: 46},
		{12: 470, 145: 493, 492},
		{17: 147, 147, 61: 147},
		{17: 145, 145},
		// 260
		{138, 138, 138, 78, 78, 138, 138, 138, 78, 78, 78, 78, 13: 78, 15: 78, 138, 78, 78, 33: 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 78, 78, 78, 78},
		{380, 351, 348, 5: 359, 350, 344, 16: 346, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{138, 138, 138, 79, 79, 138, 138, 138, 79, 79, 79, 79, 13: 79, 15: 79, 138, 79, 79, 33: 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 79, 79, 79, 79},
		{380, 80, 348, 80, 80, 80, 80, 80, 80, 80, 80, 80, 13: 80, 15: 80, 346, 80, 80, 33: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 91: 347, 93: 361, 379, 370, 363},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 13: 87, 15: 87, 87, 87, 87, 33: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		// 265
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 500, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{380, 351, 348, 5: 359, 350, 344, 16: 346, 18: 501, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 13: 100, 15: 100, 100, 100, 100, 33: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 503, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{380, 351, 348, 5: 359, 350, 344, 16: 346, 505, 504, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		// 270
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 13: 102, 15: 102, 102, 102, 102, 33: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 506, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{380, 351, 348, 5: 359, 350, 344, 16: 346, 18: 507, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 13: 101, 15: 101, 101, 101, 101, 33: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		{380, 351, 348, 104, 104, 359, 350, 344, 104, 104, 104, 104, 13: 104, 15: 104, 346, 104, 104, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 104, 104, 362, 375, 377, 104, 372, 104, 373, 342, 104, 358, 104, 371, 104, 355, 356, 104, 104, 104, 104, 91: 347, 93: 361, 379, 370, 363},
		// 275
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 510},
		{16: 428, 18: 511},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 13: 106, 15: 106, 106, 106, 106, 33: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106},
		{4: 513, 16: 428},
		{8, 8, 8, 8, 8, 8, 8, 8, 242, 12: 8, 14: 8, 17: 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 92: 241, 97: 332, 117: 515, 142: 514},
		// 280
		{3: 520},
		{304, 324, 303, 144, 329, 323, 319, 307, 144, 12: 318, 14: 328, 17: 144, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 59: 144, 63: 305, 316, 396, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 119: 516, 122: 517},
		{3: 143, 8: 143, 143, 143, 143, 13: 143, 15: 143, 17: 338, 59: 143, 118: 399},
		{3: 8, 8: 242, 17: 338, 59: 8, 92: 241, 97: 332, 117: 339, 519, 147: 518},
		{3: 109, 59: 109},
		// 285
		{3: 2, 59: 2},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 13: 110, 15: 110, 110, 110, 110, 33: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		{420, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 30, 112, 30, 112, 112, 112, 112, 33: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 422, 101: 30, 109: 30},
		{59: 523},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 13: 111, 15: 111, 111, 111, 111, 33: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		// 290
		{380, 351, 348, 5: 359, 350, 344, 16: 346, 18: 525, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 13: 113, 15: 113, 113, 113, 113, 33: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 527, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{380, 351, 348, 5: 359, 350, 344, 16: 346, 18: 528, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 13: 114, 15: 114, 114, 114, 114, 33: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114},
		// 295
		{304, 535, 303, 4: 329, 323, 319, 307, 12: 534, 14: 536, 18: 530, 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 533, 316, 531, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 101: 418, 109: 419, 113: 532},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 13: 117, 15: 117, 117, 117, 117, 33: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{380, 351, 348, 5: 359, 350, 344, 16: 346, 18: 543, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{16: 428, 18: 542},
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 541},
		// 300
		{91, 91, 348, 5: 91, 91, 91, 16: 91, 18: 91, 33: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91: 498},
		{304, 535, 303, 4: 329, 323, 319, 307, 12: 534, 14: 536, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 533, 316, 495, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 494, 294, 284, 297, 287, 283, 282, 322, 101: 418, 109: 419, 113: 441},
		{537, 4: 411},
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 538},
		{16: 428, 59: 539},
		// 305
		{420, 415, 12: 413, 14: 417, 63: 416, 101: 418, 109: 419, 113: 540},
		{4: 444, 16: 428, 18: 35},
		{4: 513, 16: 428, 18: 36},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 13: 115, 15: 115, 115, 115, 115, 33: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 13: 116, 15: 116, 116, 116, 116, 33: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
		// 310
		{380, 351, 348, 4: 545, 359, 350, 344, 16: 346, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{3: 8, 8: 242, 8, 8, 92: 241, 97: 332, 117: 546},
		{3: 170, 8: 170, 551, 552, 151: 550, 549, 172: 547, 548},
		{3: 8, 8: 242, 92: 241, 97: 332, 117: 563},
		{3: 169, 8: 169, 551, 552, 151: 561, 562},
		// 315
		{3: 168, 8: 168, 168, 168},
		{3: 167, 8: 167, 167, 167},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 144, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 555, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 119: 516, 122: 556},
		{15: 553},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 13, 13, 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 554},
		// 320
		{3: 162, 8: 162, 162, 162},
		{380, 351, 348, 5: 359, 350, 344, 15: 559, 346, 142, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{15: 557},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 13, 13, 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 558},
		{3: 163, 8: 163, 163, 163},
		// 325
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 13, 13, 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 560},
		{3: 164, 8: 164, 164, 164},
		{3: 166, 8: 166, 166, 166},
		{3: 165, 8: 165, 165, 165},
		{3: 564},
		// 330
		{3: 171, 8: 171, 171, 171, 171, 13: 171, 15: 171},
		{3: 181, 8: 242, 8, 8, 92: 241, 97: 332, 117: 567, 171: 566},
		{3: 583},
		{9: 573, 574, 149: 572, 571, 168: 570, 568, 569},
		{3: 8, 8: 242, 92: 241, 97: 332, 117: 582},
		// 335
		{3: 179, 8: 179, 573, 574, 149: 580, 581},
		{3: 178, 8: 178, 178, 178},
		{3: 175, 8: 175, 175, 175},
		{3: 174, 8: 174, 174, 174},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 266, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 98: 276, 273, 261, 102: 262, 268, 277, 267, 265, 263, 278, 110: 279, 264, 269, 119: 274, 123: 272, 271, 270, 247, 577, 248, 249, 259, 260, 254, 258, 253, 275, 252, 250, 257, 256, 251, 255},
		// 340
		{15: 575},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 13, 13, 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 576},
		{3: 172, 8: 172, 172, 172},
		{15: 578},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 13, 13, 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 579},
		// 345
		{3: 173, 8: 173, 173, 173},
		{3: 177, 8: 177, 177, 177},
		{3: 176, 8: 176, 176, 176},
		{3: 180},
		{3: 182, 8: 182, 182, 182, 182, 13: 182, 15: 182},
		// 350
		{11: 199},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 11: 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 609, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 608, 331, 121: 330},
		{380, 351, 348, 4: 605, 359, 350, 344, 16: 346, 142, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 60: 142, 62: 142, 91: 347, 93: 361, 379, 370, 363},
		{33: 600},
		{11: 592},
		// 355
		{91, 91, 348, 4: 91, 91, 91, 91, 16: 91, 590, 33: 184, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 60: 91, 62: 91, 91: 498},
		{12: 591},
		{33: 183},
		{304, 324, 303, 4: 329, 323, 319, 307, 11: 140, 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 594, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 148: 593},
		{11: 595},
		// 360
		{380, 351, 348, 4: 139, 359, 350, 344, 11: 139, 16: 346, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 594, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 148: 596},
		{4: 597},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 11: 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 598},
		{3: 599},
		// 365
		{3: 185, 8: 185, 185, 185, 185, 13: 185, 15: 185},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 601, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{380, 351, 348, 4: 602, 359, 350, 344, 16: 346, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 11: 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 603},
		{3: 604},
		// 370
		{3: 186, 8: 186, 186, 186, 186, 13: 186, 15: 186},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 11: 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 606},
		{3: 607},
		{3: 187, 8: 187, 187, 187, 187, 13: 187, 15: 187},
		{3: 610},
		// 375
		{10, 10, 10, 10, 10, 10, 10, 10, 242, 12: 10, 14: 10, 19: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 92: 243, 98: 10, 10, 10, 102: 10, 10, 10, 10, 10, 10, 10, 110: 10, 10, 10},
		{3: 188, 8: 188, 188, 188, 188, 13: 188, 15: 188},
		{380, 351, 348, 4: 612, 359, 350, 344, 16: 346, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 11: 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 613},
		{3: 614},
		// 380
		{3: 191, 8: 191, 191, 191, 191, 13: 191, 15: 191, 120: 191},
		{4: 617, 98: 616},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 620, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 11: 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 618},
		{3: 619},
		// 385
		{3: 189, 8: 189, 189, 189, 189, 13: 189, 15: 189, 120: 189},
		{380, 351, 348, 4: 621, 359, 350, 344, 16: 346, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 11: 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 622},
		{3: 623},
		{3: 190, 8: 190, 190, 190, 190, 13: 190, 15: 190, 120: 190},
		// 390
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 396, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 119: 627},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 396, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 119: 626},
		{3: 193, 8: 193, 193, 193, 193, 13: 193, 15: 193, 17: 338, 118: 399},
		{3: 194, 8: 194, 194, 194, 194, 13: 194, 15: 194, 17: 338, 118: 399},
		{17: 338, 60: 630, 118: 631},
		// 395
		{17: 15, 60: 15},
		{304, 324, 303, 4: 329, 323, 319, 307, 12: 318, 14: 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 396, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 119: 633},
		{12: 632},
		{17: 14, 60: 14},
		{3: 195, 8: 195, 195, 195, 195, 13: 195, 15: 195, 17: 338, 118: 399},
		// 400
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 11: 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 635},
		{3: 636},
		{153: 637},
		{4: 639, 12: 638},
		{4: 646},
		// 405
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 11: 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 640},
		{3: 641},
		{3: 201, 8: 201, 201, 201, 201, 13: 201, 15: 201, 144: 642},
		{4: 643},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 11: 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 644},
		// 410
		{3: 645},
		{3: 203, 8: 203, 203, 203, 203, 13: 203, 15: 203},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 11: 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 647},
		{3: 648},
		{3: 202, 8: 202, 202, 202, 202, 13: 202, 15: 202, 144: 649},
		// 415
		{4: 650},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 11: 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 651},
		{3: 652},
		{3: 204, 8: 204, 204, 204, 204, 13: 204, 15: 204},
		{129, 129, 129, 206, 5: 129, 129, 129, 206, 206, 206, 206, 13: 206, 15: 206, 129, 33: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
		// 420
		{128, 128, 128, 205, 5: 128, 128, 128, 205, 205, 205, 205, 13: 205, 15: 205, 128, 33: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		{129, 129, 129, 208, 5: 129, 129, 129, 208, 208, 208, 208, 13: 208, 15: 208, 129, 33: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
		{128, 128, 128, 207, 5: 128, 128, 128, 207, 207, 207, 207, 13: 207, 15: 207, 128, 33: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		{4: 658},
		{13, 13, 13, 13, 13, 13, 13, 13, 242, 11: 239, 13, 14: 13, 19: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 92: 241, 97: 240, 13, 13, 13, 102: 13, 13, 13, 13, 13, 13, 13, 110: 13, 13, 13, 114: 237, 238, 659},
		// 425
		{3: 660},
		{3: 210, 8: 210, 210, 210, 210, 13: 210, 15: 210},
		{380, 351, 348, 211, 5: 359, 350, 344, 211, 211, 211, 211, 13: 211, 15: 211, 346, 33: 345, 354, 349, 352, 376, 374, 343, 357, 360, 368, 367, 362, 375, 377, 365, 372, 366, 373, 342, 369, 358, 364, 371, 353, 355, 356, 91: 347, 93: 361, 379, 370, 363},
		{3: 212, 8: 212, 212, 212, 212, 13: 212, 15: 212},
		{3: 231, 8: 231, 231, 231, 13: 231},
		// 430
		{304, 324, 303, 12, 329, 323, 319, 307, 12, 12, 12, 12: 318, 12, 328, 19: 320, 321, 309, 301, 308, 314, 326, 302, 327, 306, 315, 311, 312, 313, 63: 305, 316, 266, 290, 286, 325, 288, 289, 298, 293, 299, 285, 300, 291, 292, 281, 310, 295, 296, 317, 280, 294, 284, 297, 287, 283, 282, 322, 98: 276, 273, 261, 102: 262, 268, 277, 267, 265, 263, 278, 110: 279, 264, 269, 119: 274, 123: 272, 271, 270, 247, 665, 248, 249, 259, 260, 254, 258, 253, 275, 252, 250, 257, 256, 251, 255},
		{3: 229, 8: 229, 229, 229, 229, 13: 229},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 179

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			yyVAL.compstmt = nil
		}
	case 3:
		{
			yyVAL.compstmt = yyS[yypt-1].stmts
		}
	case 4:
		{
			yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		{
			yyS[yypt-2].stmts.Stmts = append(yyS[yypt-2].stmts.Stmts, yyS[yypt-0].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 6:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_var_or_lets
		}
	case 7:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_break
		}
	case 8:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_continue
		}
	case 9:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_return
		}
	case 10:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_throw
		}
	case 11:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_module
		}
	case 12:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 13:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_for
		}
	case 14:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_try
		}
	case 15:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_switch
		}
	case 16:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_select
		}
	case 17:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_go
		}
	case 18:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_defer
		}
	case 19:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_expr
		}
	case 20:
		{
			yyVAL.stmt_break = &ast.BreakStmt{}
			yyVAL.stmt_break.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 21:
		{
			yyVAL.stmt_continue = &ast.ContinueStmt{}
			yyVAL.stmt_continue.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 22:
		{
			yyVAL.stmt_return = &ast.ReturnStmt{Exprs: yyS[yypt-0].opt_exprs}
			yyVAL.stmt_return.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 23:
		{
			yyVAL.stmt_throw = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt_throw.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 24:
		{
			yyVAL.stmt_module = &ast.ModuleStmt{Name: yyS[yypt-3].tok.Lit, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_module.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 25:
		{
			yyVAL.stmt_expr = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt_expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 26:
		{
			yyS[yypt-0].expr_call.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr_call}
			yyVAL.stmt_go.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 27:
		{
			yyS[yypt-0].expr_anon_call.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr_anon_call}
			yyVAL.stmt_go.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 28:
		{
			yyS[yypt-0].expr_call.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: yyS[yypt-0].expr_call}
			yyVAL.stmt_defer.SetPosition(yyS[yypt-0].expr_call.Position())
		}
	case 29:
		{
			yyS[yypt-0].expr_anon_call.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: yyS[yypt-0].expr_anon_call}
			yyVAL.stmt_defer.SetPosition(yyS[yypt-0].expr_anon_call.Position())
		}
	case 30:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-10].compstmt, Var: yyS[yypt-7].tok.Lit, Catch: yyS[yypt-5].compstmt, Finally: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-12].tok.Position())
		}
	case 31:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-9].compstmt, Catch: yyS[yypt-5].compstmt, Finally: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-11].tok.Position())
		}
	case 32:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-6].compstmt, Var: yyS[yypt-3].tok.Lit, Catch: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 33:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-5].compstmt, Catch: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 34:
		{
			yyVAL.opt_stmt_var_or_lets = nil
		}
	case 35:
		{
			yyVAL.opt_stmt_var_or_lets = yyS[yypt-0].stmt_var_or_lets
		}
	case 36:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_var
		}
	case 37:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_typed_lets
		}
	case 38:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_lets
		}
	case 39:
		{
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				} else {
					yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				}
			} else {
				yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt_var.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 40:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
				if len(yyS[yypt-2].exprs) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].exprs) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt_typed_lets.SetPosition(yyS[yypt-2].exprs[0].Position())
		}
	case 41:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].exprs) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].exprs) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt_lets.SetPosition(yyS[yypt-2].exprs[0].Position())
		}
	case 42:
		{
			yyVAL.stmt_if = yyS[yypt-0].stmt_if_helper
			yyVAL.stmt_if.SetPosition(yyS[yypt-0].stmt_if_helper.Position())
		}
	case 43:
		{
			yyVAL.stmt_if_helper = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].compstmt, Else: nil}
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 44:
		{
			yyS[yypt-6].stmt_if_helper.(*ast.IfStmt).ElseIf = append(yyS[yypt-6].stmt_if_helper.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].compstmt})
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-6].stmt_if_helper.Position())
		}
	case 45:
		{
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-4].stmt_if_helper.Position())
			if yyVAL.stmt_if_helper.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if_helper.(*ast.IfStmt).Else = yyS[yypt-1].compstmt
			}
		}
	case 46:
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 47:
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 48:
		{
			yyVAL.stmt_for = &ast.ForStmt{Vars: yyS[yypt-5].expr_for_idents, Value: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 49:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-7].opt_stmt_var_or_lets, Expr2: yyS[yypt-5].opt_expr, Expr3: yyS[yypt-3].opt_expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 50:
		{
			yyVAL.expr_for_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 51:
		{
			yyVAL.expr_for_idents = []string{yyS[yypt-2].tok.Lit, yyS[yypt-0].tok.Lit}
		}
	case 52:
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt_select.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 53:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{}
		}
	case 54:
		{
			yyVAL.stmt_select_content = yyS[yypt-1].stmt_select_cases
		}
	case 55:
		{
			yyVAL.stmt_select_cases = yyS[yypt-0].stmt_select_cases_helper
		}
	case 56:
		{
			yyVAL.stmt_select_cases_helper = yyS[yypt-0].stmt_select_body
		}
	case 57:
		{
			yyVAL.stmt_select_cases_helper.Cases = append(yyVAL.stmt_select_cases_helper.Cases, yyS[yypt-0].stmt_select_case)
		}
	case 58:
		{
			if yyVAL.stmt_select_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyVAL.stmt_select_cases_helper.Default = yyS[yypt-0].stmt_select_default
		}
	case 59:
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Default: yyS[yypt-0].stmt_select_default}
		}
	case 60:
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt_select_case}}
		}
	case 61:
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 62:
		{
			yyVAL.stmt_select_default = yyS[yypt-0].compstmt
		}
	case 63:
		{
			yyS[yypt-2].stmt_switch_cases.Expr = yyS[yypt-5].expr
			yyVAL.stmt_switch = yyS[yypt-2].stmt_switch_cases
			yyVAL.stmt_switch.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 64:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 65:
		{
			yyVAL.stmt_switch_cases = yyS[yypt-0].stmt_switch_cases_helper
		}
	case 66:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Default: yyS[yypt-0].stmt_switch_default}
		}
	case 67:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt_switch_case}}
		}
	case 68:
		{
			yyS[yypt-1].stmt_switch_cases_helper.Cases = append(yyS[yypt-1].stmt_switch_cases_helper.Cases, yyS[yypt-0].stmt_switch_case)
			yyVAL.stmt_switch_cases_helper = yyS[yypt-1].stmt_switch_cases_helper
		}
	case 69:
		{
			if yyS[yypt-1].stmt_switch_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyS[yypt-1].stmt_switch_cases_helper.Default = yyS[yypt-0].stmt_switch_default
		}
	case 70:
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyS[yypt-2].expr}, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 71:
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].opt_exprs, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 72:
		{
			yyVAL.stmt_switch_default = yyS[yypt-0].compstmt
		}
	case 73:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 74:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 75:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents1
		}
	case 76:
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 77:
		{
			yyVAL.opt_func_return_expr_idents1 = yyS[yypt-0].opt_func_return_expr_idents2
		}
	case 78:
		{
			yyVAL.opt_func_return_expr_idents2 = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 79:
		{
			yyVAL.opt_func_return_expr_idents2 = append(yyS[yypt-2].opt_func_return_expr_idents2, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 80:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 81:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents_not_empty
		}
	case 82:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_idents_last_untyped
		}
	case 83:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_typed_idents
		}
	case 84:
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 85:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-1].tok.Lit, TypeData: yyS[yypt-0].type_data}
		}
	case 86:
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyS[yypt-0].func_expr_untyped_ident}
		}
	case 87:
		{
			yyVAL.func_expr_idents_last_untyped = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_untyped_ident)
		}
	case 88:
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 89:
		{
			yyVAL.func_expr_typed_idents = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_typed_ident)
		}
	case 90:
		{
			yyVAL.opt_exprs = nil
		}
	case 91:
		{
			yyVAL.opt_exprs = yyS[yypt-0].exprs
		}
	case 92:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 93:
		{
			if len(yyS[yypt-2].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 94:
		{
			yyVAL.opt_expr = nil
		}
	case 95:
		{
			yyVAL.opt_expr = yyS[yypt-0].expr
		}
	case 96:
		{
			yyVAL.expr = yyS[yypt-0].expr_member_or_ident
		}
	case 97:
		{
			yyVAL.expr = yyS[yypt-0].expr_literals
		}
	case 98:
		{
			yyVAL.expr = yyS[yypt-0].expr_unary
		}
	case 99:
		{
			yyVAL.expr = yyS[yypt-0].expr_ternary
		}
	case 100:
		{
			yyVAL.expr = yyS[yypt-0].expr_nil_coalesce
		}
	case 101:
		{
			yyVAL.expr = yyS[yypt-0].expr_func
		}
	case 102:
		{
			yyVAL.expr = yyS[yypt-0].expr_array
		}
	case 103:
		{
			yyVAL.expr = yyS[yypt-0].expr_paren
		}
	case 104:
		{
			yyVAL.expr = yyS[yypt-0].expr_binary
		}
	case 105:
		{
			yyVAL.expr = yyS[yypt-0].expr_call
		}
	case 106:
		{
			yyVAL.expr = yyS[yypt-0].expr_anon_call
		}
	case 107:
		{
			yyVAL.expr = yyS[yypt-0].expr_item_or_slice
		}
	case 108:
		{
			yyVAL.expr = yyS[yypt-0].expr_len
		}
	case 109:
		{
			yyVAL.expr = yyS[yypt-0].expr_dbg
		}
	case 110:
		{
			yyVAL.expr = yyS[yypt-0].expr_new
		}
	case 111:
		{
			yyVAL.expr = yyS[yypt-0].expr_make
		}
	case 112:
		{
			yyVAL.expr = yyS[yypt-0].expr_map
		}
	case 113:
		{
			yyVAL.expr = yyS[yypt-0].expr_opchan
		}
	case 114:
		{
			yyVAL.expr = yyS[yypt-0].expr_close
		}
	case 115:
		{
			yyVAL.expr = yyS[yypt-0].expr_delete
		}
	case 116:
		{
			yyVAL.expr = yyS[yypt-0].expr_in
		}
	case 117:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 118:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 119:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 120:
		{
			yyVAL.expr_len = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr_len.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 121:
		{
			yyVAL.expr_paren = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_paren.SetPosition(l.pos)
			}
		}
	case 122:
		{
			yyVAL.expr_array = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 123:
		{
			yyVAL.expr_array = &ast.ArrayExpr{Exprs: yyS[yypt-1].comma_separated_exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 124:
		{
			yyVAL.expr_array = &ast.ArrayExpr{Exprs: yyS[yypt-1].comma_separated_exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-3].type_data, Dimensions: yyS[yypt-4].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 125:
		{
			yyVAL.comma_separated_exprs = yyS[yypt-1].opt_exprs
		}
	case 126:
		{
			yyVAL.expr_nil_coalesce = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_nil_coalesce.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 127:
		{
			yyVAL.expr_ternary = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_ternary.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 128:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr_new = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr_new = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr_new.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 129:
		{
			yyVAL.expr_opchan = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_opchan.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 130:
		{
			yyVAL.expr_opchan = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr_opchan.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 131:
		{
			yyVAL.expr_in = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr_in.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 132:
		{
			yyVAL.expr_delete = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr_delete.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 133:
		{
			yyVAL.expr_delete = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr_delete.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 134:
		{
			yyVAL.expr_close = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr_close.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 135:
		{
			yyVAL.expr_literals = yyS[yypt-0].expr_literals_helper
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].expr_literals_helper.Position())
		}
	case 136:
		{
			yyVAL.expr_literals_helper = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 137:
		{
			yyVAL.expr_literals_helper = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 138:
		{
			yyVAL.expr_literals_helper = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 139:
		{
			yyVAL.expr_literals_helper = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 140:
		{
			yyVAL.expr_literals_helper = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 141:
		{
			yyVAL.expr_member_or_ident = yyS[yypt-0].expr_ident
		}
	case 142:
		{
			yyVAL.expr_member_or_ident = yyS[yypt-0].expr_member
		}
	case 143:
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 144:
		{
			yyVAL.expr_member = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr_member.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 145:
		{
			yyVAL.opt_expr_ident = nil
		}
	case 146:
		{
			yyVAL.opt_expr_ident = yyS[yypt-0].expr_ident
		}
	case 147:
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyS[yypt-1].tok.Lit, SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}
			yyVAL.expr_call.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 148:
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyS[yypt-1].expr, SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}
			yyVAL.expr_anon_call.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 149:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-2].exprs, VarArg: true}
		}
	case 150:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-1].opt_exprs}
		}
	case 151:
		{
			yyVAL.unary_op = "-"
		}
	case 152:
		{
			yyVAL.unary_op = "!"
		}
	case 153:
		{
			yyVAL.unary_op = "^"
		}
	case 154:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: yyS[yypt-1].unary_op, Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 155:
		{
			if el, ok := yyS[yypt-0].expr_member_or_ident.(*ast.IdentExpr); ok {
				yyVAL.expr_unary = &ast.AddrExpr{Expr: el}
			} else if el, ok := yyS[yypt-0].expr_member_or_ident.(*ast.MemberExpr); ok {
				yyVAL.expr_unary = el
			}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_member_or_ident.Position())
		}
	case 156:
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyS[yypt-0].expr_member_or_ident}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_member_or_ident.Position())
		}
	case 157:
		{
			yyVAL.bin_op = "+"
		}
	case 158:
		{
			yyVAL.bin_op = "-"
		}
	case 159:
		{
			yyVAL.bin_op = "*"
		}
	case 160:
		{
			yyVAL.bin_op = "/"
		}
	case 161:
		{
			yyVAL.bin_op = yyS[yypt-0].tok.Lit
		}
	case 162:
		{
			yyVAL.bin_op = "%"
		}
	case 163:
		{
			yyVAL.bin_op = yyS[yypt-0].tok.Lit
		}
	case 164:
		{
			yyVAL.bin_op = yyS[yypt-0].tok.Lit
		}
	case 165:
		{
			yyVAL.bin_op = "|"
		}
	case 166:
		{
			yyVAL.bin_op = yyS[yypt-0].tok.Lit
		}
	case 167:
		{
			yyVAL.bin_op = "&"
		}
	case 168:
		{
			yyVAL.bin_op = yyS[yypt-0].tok.Lit
		}
	case 169:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].bin_op, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 170:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 171:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].op_assoc1, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 172:
		{
			yyVAL.expr_binary = yyS[yypt-0].expr_assoc
		}
	case 173:
		{
			yyVAL.op_assoc = "+="
		}
	case 174:
		{
			yyVAL.op_assoc = "-="
		}
	case 175:
		{
			yyVAL.op_assoc = "*="
		}
	case 176:
		{
			yyVAL.op_assoc = "/="
		}
	case 177:
		{
			yyVAL.op_assoc = "&="
		}
	case 178:
		{
			yyVAL.op_assoc = "|="
		}
	case 179:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].op_assoc, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 180:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "++"}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 181:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "--"}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 182:
		{
			yyVAL.op_assoc1 = "!="
		}
	case 183:
		{
			yyVAL.op_assoc1 = ">"
		}
	case 184:
		{
			yyVAL.op_assoc1 = ">="
		}
	case 185:
		{
			yyVAL.op_assoc1 = "<"
		}
	case 186:
		{
			yyVAL.op_assoc1 = "<="
		}
	case 187:
		{
			f := &ast.FuncExpr{Params: yyS[yypt-5].func_expr_args.Params, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: yyS[yypt-5].func_expr_args.VarArg}
			if yyS[yypt-5].func_expr_args.TypeData != nil {
				f.Params[len(f.Params)-1].TypeData = yyS[yypt-5].func_expr_args.TypeData
			}
			if yyS[yypt-7].opt_expr_ident != nil {
				f.Name = yyS[yypt-7].opt_expr_ident.Lit
			}
			yyVAL.expr_func = f
			yyVAL.expr_func.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 188:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-2].func_expr_idents_last_untyped, VarArg: true, TypeData: yyS[yypt-0].type_data}
		}
	case 189:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-1].func_expr_idents_last_untyped, VarArg: true, TypeData: nil}
		}
	case 190:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-0].func_expr_idents, VarArg: false, TypeData: nil}
		}
	case 191:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr_make.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 192:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 193:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 194:
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 195:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 196:
		{
			if yyS[yypt-2].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyS[yypt-2].type_data.Env = append(yyS[yypt-2].type_data.Env, yyS[yypt-2].type_data.Name)
				yyS[yypt-2].type_data.Name = yyS[yypt-0].tok.Lit
			}
		}
	case 197:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 198:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 199:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 200:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 201:
		{
			yyVAL.type_data = yyS[yypt-2].type_data_struct
		}
	case 202:
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].type_data}}
		}
	case 203:
		{
			if yyS[yypt-3].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyS[yypt-1].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyS[yypt-0].type_data)
		}
	case 204:
		{
			yyVAL.slice_count = 1
		}
	case 205:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 206:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 207:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-5].type_data, SubType: yyS[yypt-3].type_data}
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 208:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-1].expr_map_content.Position())
		}
	case 209:
		{
			yyVAL.expr_map_content = &ast.MapExpr{}
		}
	case 210:
		{
			yyVAL.expr_map_content = yyS[yypt-1].expr_map_content_helper
		}
	case 211:
		{
			yyVAL.expr_map_content_helper = &ast.MapExpr{Keys: []ast.Expr{yyS[yypt-0].expr_map_key_value[0]}, Values: []ast.Expr{yyS[yypt-0].expr_map_key_value[1]}}
		}
	case 212:
		{
			yyVAL.expr_map_content_helper.Keys = append(yyVAL.expr_map_content_helper.Keys, yyS[yypt-0].expr_map_key_value[0])
			yyVAL.expr_map_content_helper.Values = append(yyVAL.expr_map_content_helper.Values, yyS[yypt-0].expr_map_key_value[1])
		}
	case 213:
		{
			yyVAL.expr_map_key_value = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 214:
		{
			if el, ok := yyS[yypt-0].expr_slice_helper1.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-1].expr
			} else if el, ok := yyS[yypt-0].expr_slice_helper1.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-1].expr
			}
			yyVAL.expr_item_or_slice = yyS[yypt-0].expr_slice_helper1
			yyVAL.expr_item_or_slice.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 215:
		{
			yyVAL.expr_slice_helper1 = &ast.ItemExpr{Index: yyS[yypt-1].expr}
		}
	case 216:
		{
			yyVAL.expr_slice_helper1 = &ast.SliceExpr{Begin: yyS[yypt-3].expr, End: yyS[yypt-1].expr}
		}
	case 217:
		{
			yyVAL.expr_slice_helper1 = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: nil}
		}
	case 218:
		{
			yyVAL.expr_slice_helper1 = &ast.SliceExpr{Begin: nil, End: yyS[yypt-1].expr}
		}
	case 219:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 220:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].tok.Lit)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
