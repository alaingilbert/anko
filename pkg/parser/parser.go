// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                 int
	stmtsStmt           *ast.StmtsStmt
	exprsExpr           *ast.ExprsExpr
	stmt                ast.Stmt
	expr                ast.Expr
	exprs               []ast.Expr
	stmts               []ast.Stmt
	stmt_select_content *ast.SelectBodyStmt
	expr_call_helper    struct {
		Exprs  *ast.ExprsExpr
		VarArg bool
	}
	expr_idents           []string
	func_expr_idents      []*ast.ParamExpr
	func_expr_typed_ident *ast.ParamExpr
	func_expr_args        struct {
		Params   []*ast.ParamExpr
		VarArg   bool
		TypeData *ast.TypeStruct
	}
	expr_typed_ident struct {
		Name     string
		TypeData *ast.TypeStruct
	}
	stmt_lets_helper struct {
		Exprs1, Exprs2 *ast.ExprsExpr
		Typed, Mutable bool
	}
	opt_func_return_expr_idents []*ast.FuncReturnValuesExpr
	expr_map                    *ast.MapExpr
	type_data                   *ast.TypeStruct
	slice_count                 int
	tok                         ast.Token
	opt_ident                   *ast.Token
	str                         string
	op_lets                     bool
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57408
	yyEofCode   = 57344
	ANDAND      = 57365
	ANDEQ       = 57379
	ARRAY       = 57349
	BREAK       = 57381
	CASE        = 57390
	CATCH       = 57373
	CHAN        = 57394
	CLOSE       = 57400
	CONTINUE    = 57382
	DBG         = 57403
	DEFAULT     = 57391
	DEFER       = 57393
	DELETE      = 57399
	DIVEQ       = 57378
	ELSE        = 57356
	EMPTYARR    = 57405
	EQEQ        = 57360
	FALSE       = 57368
	FINALLY     = 57374
	FOR         = 57357
	FUNC        = 57351
	GE          = 57362
	GO          = 57392
	IDENT       = 57346
	IF          = 57355
	IN          = 57359
	LE          = 57363
	LEN         = 57398
	LOOP        = 57358
	MAKE        = 57395
	MAP         = 57401
	MINUSEQ     = 57376
	MINUSMINUS  = 57384
	MODULE      = 57371
	MULEQ       = 57377
	MUT         = 57406
	NEQ         = 57361
	NEW         = 57366
	NIL         = 57369
	NILCOALESCE = 57370
	NUMBER      = 57347
	OPCHAN      = 57396
	OREQ        = 57380
	OROR        = 57364
	PLUSEQ      = 57375
	PLUSPLUS    = 57383
	POW         = 57385
	RETURN      = 57352
	SELECT      = 57389
	SHIFTLEFT   = 57386
	SHIFTRIGHT  = 57387
	STRING      = 57348
	STRUCT      = 57402
	SWITCH      = 57388
	THROW       = 57354
	TRUE        = 57367
	TRY         = 57372
	TYPE        = 57397
	UNARY       = 57407
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57404
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -266
)

var (
	yyPrec = map[int]int{
		POW:         0,
		'=':         1,
		PLUSEQ:      1,
		MINUSEQ:     1,
		DIVEQ:       1,
		MULEQ:       1,
		ANDEQ:       1,
		OREQ:        1,
		':':         2,
		OPCHAN:      3,
		'?':         4,
		NILCOALESCE: 4,
		OROR:        5,
		ANDAND:      6,
		EQEQ:        7,
		NEQ:         7,
		'<':         7,
		LE:          7,
		'>':         7,
		GE:          7,
		'+':         8,
		'-':         8,
		'|':         8,
		'^':         8,
		'*':         9,
		'/':         9,
		'%':         9,
		SHIFTLEFT:   9,
		SHIFTRIGHT:  9,
		'&':         9,
		IN:          10,
		PLUSPLUS:    11,
		MINUSMINUS:  11,
		UNARY:       12,
	}

	yyXLAT = map[int]int{
		42:    0,   // '*' (203x)
		40:    1,   // '(' (196x)
		123:   2,   // '{' (196x)
		125:   3,   // '}' (191x)
		91:    4,   // '[' (187x)
		38:    5,   // '&' (186x)
		45:    6,   // '-' (186x)
		57396: 7,   // OPCHAN (186x)
		10:    8,   // '\n' (159x)
		57391: 9,   // DEFAULT (144x)
		57390: 10,  // CASE (142x)
		57344: 11,  // $end (131x)
		59:    12,  // ';' (129x)
		57346: 13,  // IDENT (129x)
		44:    14,  // ',' (125x)
		58:    15,  // ':' (125x)
		41:    16,  // ')' (118x)
		57405: 17,  // EMPTYARR (112x)
		57401: 18,  // MAP (112x)
		33:    19,  // '!' (94x)
		46:    20,  // '.' (94x)
		94:    21,  // '^' (94x)
		57400: 22,  // CLOSE (94x)
		57399: 23,  // DELETE (94x)
		57368: 24,  // FALSE (94x)
		57351: 25,  // FUNC (94x)
		57398: 26,  // LEN (94x)
		57395: 27,  // MAKE (94x)
		57366: 28,  // NEW (94x)
		57369: 29,  // NIL (94x)
		57347: 30,  // NUMBER (94x)
		57348: 31,  // STRING (94x)
		57367: 32,  // TRUE (94x)
		57359: 33,  // IN (93x)
		37:    34,  // '%' (92x)
		43:    35,  // '+' (92x)
		47:    36,  // '/' (92x)
		60:    37,  // '<' (92x)
		62:    38,  // '>' (92x)
		63:    39,  // '?' (92x)
		93:    40,  // ']' (92x)
		124:   41,  // '|' (92x)
		57365: 42,  // ANDAND (92x)
		57379: 43,  // ANDEQ (92x)
		57378: 44,  // DIVEQ (92x)
		57360: 45,  // EQEQ (92x)
		57362: 46,  // GE (92x)
		57363: 47,  // LE (92x)
		57376: 48,  // MINUSEQ (92x)
		57384: 49,  // MINUSMINUS (92x)
		57377: 50,  // MULEQ (92x)
		57361: 51,  // NEQ (92x)
		57370: 52,  // NILCOALESCE (92x)
		57380: 53,  // OREQ (92x)
		57364: 54,  // OROR (92x)
		57375: 55,  // PLUSEQ (92x)
		57383: 56,  // PLUSPLUS (92x)
		57385: 57,  // POW (92x)
		57386: 58,  // SHIFTLEFT (92x)
		57387: 59,  // SHIFTRIGHT (92x)
		61:    60,  // '=' (70x)
		57350: 61,  // VARARG (69x)
		57404: 62,  // WALRUS (69x)
		57471: 63,  // map_type (59x)
		57434: 64,  // expr_ident (52x)
		57443: 65,  // expr_map_container (46x)
		57418: 66,  // const_expr (45x)
		57423: 67,  // expr (45x)
		57424: 68,  // expr_anon_call (45x)
		57425: 69,  // expr_array (45x)
		57426: 70,  // expr_assoc (45x)
		57427: 71,  // expr_binary (45x)
		57428: 72,  // expr_call (45x)
		57431: 73,  // expr_close (45x)
		57432: 74,  // expr_delete (45x)
		57433: 75,  // expr_func (45x)
		57436: 76,  // expr_item_or_slice (45x)
		57437: 77,  // expr_iterable (45x)
		57438: 78,  // expr_len (45x)
		57439: 79,  // expr_literals (45x)
		57440: 80,  // expr_literals_helper (45x)
		57441: 81,  // expr_make (45x)
		57442: 82,  // expr_map (45x)
		57447: 83,  // expr_member (45x)
		57448: 84,  // expr_member_or_ident (45x)
		57449: 85,  // expr_new (45x)
		57450: 86,  // expr_opchan (45x)
		57451: 87,  // expr_paren (45x)
		57452: 88,  // expr_ternary (45x)
		57454: 89,  // expr_unary (45x)
		57537: 90,  // unary_op (45x)
		57429: 91,  // expr_call_helper (32x)
		57411: 92,  // bin_op (31x)
		57475: 93,  // op_assoc1 (31x)
		57406: 94,  // MUT (25x)
		57394: 95,  // CHAN (24x)
		57402: 96,  // STRUCT (24x)
		57355: 97,  // IF (18x)
		57353: 98,  // VAR (18x)
		57381: 99,  // BREAK (17x)
		57382: 100, // CONTINUE (17x)
		57403: 101, // DBG (17x)
		57393: 102, // DEFER (17x)
		57357: 103, // FOR (17x)
		57392: 104, // GO (17x)
		57358: 105, // LOOP (17x)
		57371: 106, // MODULE (17x)
		57473: 107, // newline (17x)
		57352: 108, // RETURN (17x)
		57389: 109, // SELECT (17x)
		57388: 110, // SWITCH (17x)
		57354: 111, // THROW (17x)
		57372: 112, // TRY (17x)
		57474: 113, // newlines (15x)
		57496: 114, // slice_count (15x)
		57413: 115, // channel_type (14x)
		57492: 116, // package_name (14x)
		57493: 117, // pointer_type (14x)
		57494: 118, // qualified_ident (14x)
		57528: 119, // struct_type (14x)
		57531: 120, // type (14x)
		57533: 121, // type_lit (14x)
		57534: 122, // type_name (14x)
		57536: 123, // typed_slice_count (14x)
		57415: 124, // comma_opt_newlines (12x)
		57455: 125, // exprs (11x)
		57412: 126, // block (9x)
		57487: 127, // opt_newlines (8x)
		57491: 128, // opt_term (7x)
		57530: 129, // term (7x)
		57417: 130, // compstmt (6x)
		57453: 131, // expr_typed_ident (4x)
		57506: 132, // stmt_if (4x)
		57507: 133, // stmt_lets (4x)
		57508: 134, // stmt_lets_helper (4x)
		57525: 135, // stmt_var (4x)
		57526: 136, // stmt_var_or_lets (4x)
		57420: 137, // element (3x)
		57481: 138, // opt_exprs (3x)
		57498: 139, // stmt (3x)
		57499: 140, // stmt_break (3x)
		57500: 141, // stmt_continue (3x)
		57501: 142, // stmt_dbg (3x)
		57502: 143, // stmt_defer (3x)
		57503: 144, // stmt_expr (3x)
		57504: 145, // stmt_for (3x)
		57505: 146, // stmt_go (3x)
		57509: 147, // stmt_loop (3x)
		57510: 148, // stmt_module (3x)
		57511: 149, // stmt_return (3x)
		57512: 150, // stmt_select (3x)
		57518: 151, // stmt_switch (3x)
		57523: 152, // stmt_throw (3x)
		57524: 153, // stmt_try (3x)
		57373: 154, // CATCH (2x)
		57356: 155, // ELSE (2x)
		57430: 156, // expr_callable (2x)
		57446: 157, // expr_map_key_value (2x)
		57374: 158, // FINALLY (2x)
		57461: 159, // func_expr_typed_ident (2x)
		57463: 160, // func_expr_untyped_ident (2x)
		57464: 161, // key (2x)
		57466: 162, // keyed_element (2x)
		57467: 163, // label (2x)
		57480: 164, // opt_expr (2x)
		57486: 165, // opt_ident (2x)
		57513: 166, // stmt_select_case (2x)
		57519: 167, // stmt_switch_case (2x)
		57419: 168, // dbg_content (1x)
		57421: 169, // element_list (1x)
		57422: 170, // element_type (1x)
		57435: 171, // expr_idents (1x)
		57444: 172, // expr_map_content (1x)
		57445: 173, // expr_map_content_helper (1x)
		57456: 174, // for_content (1x)
		57457: 175, // func_expr_args (1x)
		57458: 176, // func_expr_idents (1x)
		57459: 177, // func_expr_idents_last_untyped (1x)
		57460: 178, // func_expr_idents_not_empty (1x)
		57462: 179, // func_expr_typed_idents (1x)
		57465: 180, // key_type (1x)
		57472: 181, // maybe_else (1x)
		57476: 182, // op_lets (1x)
		57478: 183, // opt_comma_opt_newlines (1x)
		57482: 184, // opt_finally (1x)
		57483: 185, // opt_func_return_expr_idents (1x)
		57484: 186, // opt_func_return_expr_idents1 (1x)
		57485: 187, // opt_func_return_expr_idents2 (1x)
		57488: 188, // opt_stmt_select_cases (1x)
		57489: 189, // opt_stmt_switch_cases (1x)
		57490: 190, // opt_stmt_var_or_lets (1x)
		57495: 191, // slice (1x)
		57497: 192, // start (1x)
		57514: 193, // stmt_select_cases (1x)
		57515: 194, // stmt_select_content (1x)
		57516: 195, // stmt_select_default (1x)
		57517: 196, // stmt_select_opt_default (1x)
		57520: 197, // stmt_switch_cases (1x)
		57521: 198, // stmt_switch_default (1x)
		57522: 199, // stmt_switch_opt_default (1x)
		57527: 200, // stmtsStmt (1x)
		57529: 201, // switch_content (1x)
		57397: 202, // TYPE (1x)
		57532: 203, // type_data_struct (1x)
		57535: 204, // type_struct_content (1x)
		57408: 205, // $default (0x)
		57349: 206, // ARRAY (0x)
		57409: 207, // array_length (0x)
		57410: 208, // array_type (0x)
		57414: 209, // comma (0x)
		57416: 210, // composite_lit (0x)
		57345: 211, // error (0x)
		57468: 212, // labeled_stmt (0x)
		57469: 213, // literal_type (0x)
		57470: 214, // literal_value (0x)
		57477: 215, // opt_comma (0x)
		57479: 216, // opt_element_list (0x)
		57407: 217, // UNARY (0x)
	}

	yySymNames = []string{
		"'*'",
		"'('",
		"'{'",
		"'}'",
		"'['",
		"'&'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"DEFAULT",
		"CASE",
		"$end",
		"';'",
		"IDENT",
		"','",
		"':'",
		"')'",
		"EMPTYARR",
		"MAP",
		"'!'",
		"'.'",
		"'^'",
		"CLOSE",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"']'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"'='",
		"VARARG",
		"WALRUS",
		"map_type",
		"expr_ident",
		"expr_map_container",
		"const_expr",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_delete",
		"expr_func",
		"expr_item_or_slice",
		"expr_iterable",
		"expr_len",
		"expr_literals",
		"expr_literals_helper",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"unary_op",
		"expr_call_helper",
		"bin_op",
		"op_assoc1",
		"MUT",
		"CHAN",
		"STRUCT",
		"IF",
		"VAR",
		"BREAK",
		"CONTINUE",
		"DBG",
		"DEFER",
		"FOR",
		"GO",
		"LOOP",
		"MODULE",
		"newline",
		"RETURN",
		"SELECT",
		"SWITCH",
		"THROW",
		"TRY",
		"newlines",
		"slice_count",
		"channel_type",
		"package_name",
		"pointer_type",
		"qualified_ident",
		"struct_type",
		"type",
		"type_lit",
		"type_name",
		"typed_slice_count",
		"comma_opt_newlines",
		"exprs",
		"block",
		"opt_newlines",
		"opt_term",
		"term",
		"compstmt",
		"expr_typed_ident",
		"stmt_if",
		"stmt_lets",
		"stmt_lets_helper",
		"stmt_var",
		"stmt_var_or_lets",
		"element",
		"opt_exprs",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_dbg",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_loop",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"CATCH",
		"ELSE",
		"expr_callable",
		"expr_map_key_value",
		"FINALLY",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"key",
		"keyed_element",
		"label",
		"opt_expr",
		"opt_ident",
		"stmt_select_case",
		"stmt_switch_case",
		"dbg_content",
		"element_list",
		"element_type",
		"expr_idents",
		"expr_map_content",
		"expr_map_content_helper",
		"for_content",
		"func_expr_args",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"key_type",
		"maybe_else",
		"op_lets",
		"opt_comma_opt_newlines",
		"opt_finally",
		"opt_func_return_expr_idents",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"opt_stmt_select_cases",
		"opt_stmt_switch_cases",
		"opt_stmt_var_or_lets",
		"slice",
		"start",
		"stmt_select_cases",
		"stmt_select_content",
		"stmt_select_default",
		"stmt_select_opt_default",
		"stmt_switch_cases",
		"stmt_switch_default",
		"stmt_switch_opt_default",
		"stmtsStmt",
		"switch_content",
		"TYPE",
		"type_data_struct",
		"type_struct_content",
		"$default",
		"ARRAY",
		"array_length",
		"array_type",
		"comma",
		"composite_lit",
		"error",
		"labeled_stmt",
		"literal_type",
		"literal_value",
		"opt_comma",
		"opt_element_list",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {192, 1},
		2:   {130, 1},
		3:   {130, 3},
		4:   {200, 1},
		5:   {200, 3},
		6:   {139, 1},
		7:   {139, 1},
		8:   {139, 1},
		9:   {139, 1},
		10:  {139, 1},
		11:  {139, 1},
		12:  {139, 1},
		13:  {139, 1},
		14:  {139, 1},
		15:  {139, 1},
		16:  {139, 1},
		17:  {139, 1},
		18:  {139, 1},
		19:  {139, 1},
		20:  {139, 1},
		21:  {139, 1},
		22:  {67, 1},
		23:  {67, 1},
		24:  {67, 1},
		25:  {67, 1},
		26:  {67, 1},
		27:  {67, 1},
		28:  {67, 1},
		29:  {67, 1},
		30:  {67, 1},
		31:  {67, 1},
		32:  {67, 1},
		33:  {77, 1},
		34:  {77, 1},
		35:  {77, 1},
		36:  {77, 1},
		37:  {77, 1},
		38:  {77, 1},
		39:  {77, 1},
		40:  {77, 1},
		41:  {126, 3},
		42:  {163, 1},
		43:  {212, 3},
		44:  {140, 1},
		45:  {140, 2},
		46:  {141, 1},
		47:  {141, 2},
		48:  {149, 2},
		49:  {152, 2},
		50:  {148, 3},
		51:  {144, 1},
		52:  {146, 2},
		53:  {143, 2},
		54:  {153, 6},
		55:  {184, 0},
		56:  {184, 2},
		57:  {190, 0},
		58:  {190, 1},
		59:  {136, 1},
		60:  {136, 1},
		61:  {135, 4},
		62:  {133, 1},
		63:  {134, 3},
		64:  {134, 4},
		65:  {182, 1},
		66:  {182, 1},
		67:  {132, 4},
		68:  {181, 0},
		69:  {181, 2},
		70:  {181, 2},
		71:  {147, 2},
		72:  {145, 3},
		73:  {174, 1},
		74:  {174, 3},
		75:  {174, 5},
		76:  {174, 5},
		77:  {150, 4},
		78:  {194, 3},
		79:  {188, 0},
		80:  {188, 1},
		81:  {193, 1},
		82:  {193, 2},
		83:  {166, 4},
		84:  {196, 0},
		85:  {196, 1},
		86:  {195, 3},
		87:  {151, 5},
		88:  {201, 3},
		89:  {189, 0},
		90:  {189, 1},
		91:  {197, 1},
		92:  {197, 2},
		93:  {167, 4},
		94:  {199, 0},
		95:  {199, 1},
		96:  {198, 3},
		97:  {185, 0},
		98:  {185, 1},
		99:  {185, 3},
		100: {186, 0},
		101: {186, 1},
		102: {187, 1},
		103: {187, 3},
		104: {176, 0},
		105: {176, 1},
		106: {178, 1},
		107: {178, 1},
		108: {160, 1},
		109: {159, 1},
		110: {177, 1},
		111: {177, 3},
		112: {179, 1},
		113: {179, 3},
		114: {138, 0},
		115: {138, 1},
		116: {125, 1},
		117: {125, 3},
		118: {164, 0},
		119: {164, 1},
		120: {142, 3},
		121: {142, 4},
		122: {168, 1},
		123: {78, 4},
		124: {87, 3},
		125: {137, 1},
		126: {169, 1},
		127: {169, 3},
		128: {216, 0},
		129: {216, 1},
		130: {161, 1},
		131: {162, 1},
		132: {162, 3},
		133: {210, 2},
		134: {213, 1},
		135: {207, 1},
		136: {208, 4},
		137: {214, 4},
		138: {69, 1},
		139: {69, 3},
		140: {88, 5},
		141: {85, 4},
		142: {86, 2},
		143: {74, 4},
		144: {74, 6},
		145: {73, 4},
		146: {79, 1},
		147: {80, 1},
		148: {80, 1},
		149: {80, 1},
		150: {66, 1},
		151: {66, 1},
		152: {66, 1},
		153: {84, 1},
		154: {84, 1},
		155: {131, 2},
		156: {131, 3},
		157: {165, 0},
		158: {165, 1},
		159: {83, 3},
		160: {156, 1},
		161: {156, 1},
		162: {72, 2},
		163: {68, 2},
		164: {91, 4},
		165: {91, 3},
		166: {90, 1},
		167: {90, 1},
		168: {90, 1},
		169: {90, 1},
		170: {90, 1},
		171: {89, 2},
		172: {92, 1},
		173: {92, 1},
		174: {92, 1},
		175: {92, 1},
		176: {92, 1},
		177: {92, 1},
		178: {92, 1},
		179: {92, 1},
		180: {92, 1},
		181: {92, 1},
		182: {92, 1},
		183: {92, 1},
		184: {92, 1},
		185: {92, 1},
		186: {92, 1},
		187: {92, 1},
		188: {92, 1},
		189: {92, 1},
		190: {92, 1},
		191: {92, 1},
		192: {92, 1},
		193: {92, 1},
		194: {92, 1},
		195: {92, 1},
		196: {92, 1},
		197: {71, 3},
		198: {71, 3},
		199: {71, 3},
		200: {71, 1},
		201: {93, 1},
		202: {93, 1},
		203: {70, 2},
		204: {75, 7},
		205: {175, 3},
		206: {175, 2},
		207: {175, 1},
		208: {81, 4},
		209: {81, 6},
		210: {81, 8},
		211: {81, 7},
		212: {120, 1},
		213: {120, 1},
		214: {121, 1},
		215: {121, 1},
		216: {121, 1},
		217: {121, 1},
		218: {121, 1},
		219: {122, 1},
		220: {122, 1},
		221: {116, 1},
		222: {118, 3},
		223: {117, 2},
		224: {119, 4},
		225: {115, 2},
		226: {180, 1},
		227: {170, 1},
		228: {63, 5},
		229: {204, 3},
		230: {203, 1},
		231: {203, 3},
		232: {123, 2},
		233: {114, 1},
		234: {114, 2},
		235: {82, 2},
		236: {82, 1},
		237: {65, 3},
		238: {172, 1},
		239: {172, 3},
		240: {173, 1},
		241: {173, 3},
		242: {157, 3},
		243: {76, 4},
		244: {191, 3},
		245: {191, 2},
		246: {191, 2},
		247: {191, 1},
		248: {171, 1},
		249: {171, 3},
		250: {64, 1},
		251: {209, 1},
		252: {215, 0},
		253: {215, 1},
		254: {128, 0},
		255: {128, 1},
		256: {129, 1},
		257: {129, 2},
		258: {127, 0},
		259: {127, 1},
		260: {113, 1},
		261: {113, 2},
		262: {107, 1},
		263: {124, 2},
		264: {183, 1},
		265: {183, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [391][]uint16{
		// 0
		{12, 12, 12, 4: 12, 12, 12, 12, 274, 11: 12, 272, 12, 17: 12, 12, 12, 21: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 94: 12, 97: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 273, 12, 12, 12, 12, 12, 271, 128: 269, 270, 268, 192: 267},
		{11: 266},
		{11: 265},
		{356, 337, 365, 264, 339, 357, 353, 341, 9: 264, 264, 264, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 320, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 94: 329, 97: 330, 326, 315, 316, 335, 322, 332, 321, 331, 319, 108: 317, 333, 334, 318, 323, 125: 328, 132: 286, 325, 327, 324, 280, 139: 279, 281, 282, 295, 293, 294, 288, 292, 287, 285, 283, 291, 290, 284, 289, 200: 278},
		{11, 11, 11, 11, 11, 11, 11, 11, 9: 11, 11, 11, 13: 11, 17: 11, 11, 11, 21: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 94: 11, 97: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 108: 11, 11, 11, 11, 11},
		// 5
		{10, 10, 10, 10, 10, 10, 10, 10, 274, 10, 10, 10, 13: 10, 17: 10, 10, 10, 21: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 94: 10, 97: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 277, 10, 10, 10, 10, 10},
		{8, 8, 8, 8, 8, 8, 8, 8, 274, 8, 8, 8, 13: 8, 17: 8, 8, 8, 21: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 94: 8, 97: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 273, 8, 8, 8, 8, 8, 276, 127: 275},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 13: 6, 17: 6, 6, 6, 21: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 94: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 108: 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 13: 4, 17: 4, 4, 4, 21: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 94: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 108: 4, 4, 4, 4, 4},
		{9, 9, 9, 9, 9, 9, 9, 9, 9: 9, 9, 9, 13: 9, 17: 9, 9, 9, 21: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 94: 9, 97: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 108: 9, 9, 9, 9, 9},
		// 10
		{7, 7, 7, 7, 7, 7, 7, 7, 274, 7, 7, 7, 13: 7, 17: 7, 7, 7, 21: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 94: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 277, 7, 7, 7, 7, 7},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13: 5, 17: 5, 5, 5, 21: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 94: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 108: 5, 5, 5, 5, 5},
		{3: 12, 8: 274, 12, 12, 12, 272, 107: 273, 113: 271, 128: 654, 655},
		{3: 262, 8: 262, 262, 262, 262, 262},
		{3: 260, 8: 260, 260, 260, 260, 260, 15: 260},
		// 15
		{3: 259, 8: 259, 259, 259, 259, 259, 15: 259},
		{3: 258, 8: 258, 258, 258, 258, 258, 15: 258},
		{3: 257, 8: 257, 257, 257, 257, 257, 15: 257},
		{3: 256, 8: 256, 256, 256, 256, 256, 15: 256},
		{3: 255, 8: 255, 255, 255, 255, 255, 15: 255},
		// 20
		{3: 254, 8: 254, 254, 254, 254, 254, 15: 254},
		{3: 253, 8: 253, 253, 253, 253, 253, 15: 253},
		{3: 252, 8: 252, 252, 252, 252, 252, 15: 252},
		{3: 251, 8: 251, 251, 251, 251, 251, 15: 251},
		{3: 250, 8: 250, 250, 250, 250, 250, 15: 250},
		// 25
		{3: 249, 8: 249, 249, 249, 249, 249, 15: 249},
		{3: 248, 8: 248, 248, 248, 248, 248, 15: 248},
		{3: 247, 8: 247, 247, 247, 247, 247, 15: 247},
		{3: 246, 8: 246, 246, 246, 246, 246, 15: 246},
		{3: 245, 8: 245, 245, 245, 245, 245, 15: 245},
		// 30
		{244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 14: 244, 244, 244, 20: 244, 33: 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244},
		{243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 14: 243, 243, 243, 20: 243, 33: 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243},
		{242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 14: 242, 242, 242, 20: 242, 33: 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242},
		{241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 14: 241, 241, 241, 20: 241, 33: 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241},
		{240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 14: 240, 240, 240, 20: 240, 33: 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240},
		// 35
		{239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 14: 239, 239, 239, 20: 239, 33: 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239},
		{238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 14: 238, 238, 238, 20: 238, 33: 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238},
		{237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 14: 237, 237, 237, 20: 237, 33: 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237},
		{236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 14: 236, 236, 236, 20: 236, 33: 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236},
		{235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 14: 235, 235, 235, 20: 235, 33: 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235},
		// 40
		{234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 14: 234, 234, 234, 20: 234, 33: 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234},
		{233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 14: 233, 233, 233, 20: 233, 33: 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233},
		{232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 14: 232, 232, 232, 20: 232, 33: 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232},
		{231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 14: 231, 231, 231, 20: 231, 33: 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231},
		{230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 14: 230, 230, 230, 20: 230, 33: 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230},
		// 45
		{229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 14: 229, 229, 229, 20: 229, 33: 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229},
		{228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 14: 228, 228, 228, 20: 228, 33: 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228},
		{227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 14: 227, 227, 227, 20: 227, 33: 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227},
		{226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 14: 226, 226, 226, 20: 226, 33: 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226},
		{3: 222, 8: 222, 222, 222, 222, 222, 651, 15: 222, 163: 653},
		// 50
		{3: 220, 8: 220, 220, 220, 220, 220, 651, 15: 220, 163: 652},
		{356, 337, 365, 152, 339, 357, 353, 341, 152, 152, 152, 152, 152, 366, 15: 152, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 427, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 125: 571, 138: 650},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 649, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{13: 647},
		{384, 381, 3: 215, 414, 392, 383, 406, 215, 215, 215, 215, 215, 14: 150, 215, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 150, 62: 150, 91: 380, 407, 412},
		// 55
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 613, 643, 309, 359, 300, 644, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 156: 646},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 613, 643, 309, 359, 300, 644, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 156: 645},
		{2: 511, 126: 636},
		{3: 207, 8: 207, 207, 207, 207, 207, 15: 207},
		{3: 206, 8: 206, 206, 206, 206, 206, 15: 206},
		// 60
		{13: 366, 64: 631, 171: 630},
		{3: 204, 8: 204, 204, 204, 204, 204, 15: 204},
		{14: 374, 60: 628, 62: 627, 124: 430, 182: 626},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 427, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 125: 623},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 617, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		// 65
		{2: 511, 126: 616},
		{356, 337, 365, 4: 339, 357, 353, 341, 12: 209, 601, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 600, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 94: 329, 98: 326, 125: 328, 133: 325, 327, 324, 598, 174: 599, 190: 602},
		{2: 581},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 562, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{1: 557},
		// 70
		{1: 554},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 552, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 14: 128, 128, 128, 20: 128, 33: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 541, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 137: 544, 161: 545, 542, 169: 543},
		{1: 538},
		// 75
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 537, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{1: 531},
		{1: 528},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 14: 120, 120, 120, 20: 120, 33: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 14: 119, 119, 119, 20: 119, 33: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		// 80
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 14: 118, 118, 118, 20: 118, 33: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 14: 117, 117, 117, 20: 117, 33: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 14: 116, 116, 116, 20: 116, 33: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 14: 115, 115, 115, 20: 115, 33: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 14: 114, 114, 114, 20: 114, 33: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114},
		// 85
		{113, 381, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 14: 113, 113, 113, 20: 113, 33: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 91: 527},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 14: 112, 112, 112, 20: 112, 33: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		{100, 100, 100, 4: 100, 100, 100, 100, 13: 100, 17: 100, 100, 100, 21: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{99, 99, 99, 4: 99, 99, 99, 99, 13: 99, 17: 99, 99, 99, 21: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{98, 98, 98, 4: 98, 98, 98, 98, 13: 98, 17: 98, 98, 98, 21: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		// 90
		{97, 97, 97, 4: 97, 97, 97, 97, 13: 97, 17: 97, 97, 97, 21: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		{96, 96, 96, 4: 96, 96, 96, 96, 13: 96, 17: 96, 96, 96, 21: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 526, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 14: 66, 66, 66, 20: 66, 33: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{1: 109, 13: 495, 165: 496},
		// 95
		{1: 481},
		{4: 440},
		{2: 365, 65: 439},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 14: 30, 30, 30, 20: 30, 33: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{8, 8, 8, 8, 8, 8, 8, 8, 274, 13: 8, 17: 8, 8, 8, 21: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 107: 273, 113: 276, 127: 368, 172: 367},
		// 100
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 20: 16, 33: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 95: 16, 16},
		{3: 438},
		{356, 337, 365, 28, 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 369, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 157: 371, 173: 370},
		{384, 381, 4: 414, 392, 383, 406, 15: 413, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		{3: 8, 8: 274, 14: 374, 107: 273, 113: 276, 124: 373, 127: 375, 183: 372},
		// 105
		{3: 26, 8: 26, 14: 26},
		{3: 27},
		{356, 337, 365, 2, 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 369, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 157: 377},
		{8, 8, 8, 8, 8, 8, 8, 8, 274, 13: 8, 17: 8, 8, 8, 21: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 94: 8, 8, 8, 107: 273, 113: 276, 127: 376},
		{3: 1},
		// 110
		{3, 3, 3, 3, 3, 3, 3, 3, 13: 3, 17: 3, 3, 3, 21: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 94: 3, 3, 3},
		{3: 25, 8: 25, 14: 25},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 435, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{13: 434},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 14: 103, 103, 103, 20: 103, 33: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		// 115
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 16: 152, 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 427, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 125: 426, 138: 428},
		{94, 94, 94, 4: 94, 94, 94, 94, 13: 94, 17: 94, 94, 94, 21: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{93, 93, 93, 4: 93, 93, 93, 93, 13: 93, 17: 93, 93, 93, 21: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93},
		{92, 92, 92, 4: 92, 92, 92, 92, 13: 92, 17: 92, 92, 92, 21: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{91, 91, 91, 4: 91, 91, 91, 91, 13: 91, 17: 91, 91, 91, 21: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		// 120
		{90, 90, 90, 4: 90, 90, 90, 90, 13: 90, 17: 90, 90, 90, 21: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{89, 89, 89, 4: 89, 89, 89, 89, 13: 89, 17: 89, 89, 89, 21: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{88, 88, 88, 4: 88, 88, 88, 88, 13: 88, 17: 88, 88, 88, 21: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{87, 87, 87, 4: 87, 87, 87, 87, 13: 87, 17: 87, 87, 87, 21: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{86, 86, 86, 4: 86, 86, 86, 86, 13: 86, 17: 86, 86, 86, 21: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		// 125
		{85, 85, 85, 4: 85, 85, 85, 85, 13: 85, 17: 85, 85, 85, 21: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{84, 84, 84, 4: 84, 84, 84, 84, 13: 84, 17: 84, 84, 84, 21: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{83, 83, 83, 4: 83, 83, 83, 83, 13: 83, 17: 83, 83, 83, 21: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 82, 4: 82, 82, 82, 82, 13: 82, 17: 82, 82, 82, 21: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		{81, 81, 81, 4: 81, 81, 81, 81, 13: 81, 17: 81, 81, 81, 21: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		// 130
		{80, 80, 80, 4: 80, 80, 80, 80, 13: 80, 17: 80, 80, 80, 21: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
		{79, 79, 79, 4: 79, 79, 79, 79, 13: 79, 17: 79, 79, 79, 21: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{78, 78, 78, 4: 78, 78, 78, 78, 13: 78, 17: 78, 78, 78, 21: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		{77, 77, 77, 4: 77, 77, 77, 77, 13: 77, 17: 77, 77, 77, 21: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 4: 76, 76, 76, 76, 13: 76, 17: 76, 76, 76, 21: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		// 135
		{75, 75, 75, 4: 75, 75, 75, 75, 13: 75, 17: 75, 75, 75, 21: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{74, 74, 74, 4: 74, 74, 74, 74, 13: 74, 17: 74, 74, 74, 21: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{73, 73, 73, 4: 73, 73, 73, 73, 13: 73, 17: 73, 73, 73, 21: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		{72, 72, 72, 4: 72, 72, 72, 72, 13: 72, 17: 72, 72, 72, 21: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		{71, 71, 71, 4: 71, 71, 71, 71, 13: 71, 17: 71, 71, 71, 21: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		// 140
		{70, 70, 70, 4: 70, 70, 70, 70, 13: 70, 17: 70, 70, 70, 21: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 425, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 424, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 423, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 14: 65, 65, 65, 20: 65, 33: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		// 145
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 14: 64, 64, 64, 20: 64, 33: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 14: 63, 63, 63, 20: 63, 33: 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 422, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 15: 417, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 415, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 191: 416},
		{384, 381, 4: 414, 392, 383, 406, 15: 420, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 19, 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		// 150
		{40: 419},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 418, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{384, 381, 4: 414, 392, 383, 406, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 20, 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 14: 23, 23, 23, 20: 23, 33: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 40: 21, 63: 363, 351, 364, 347, 421, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		// 155
		{384, 381, 4: 414, 392, 383, 406, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 22, 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		{384, 381, 3: 24, 414, 392, 383, 406, 24, 14: 24, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		{67, 381, 67, 67, 414, 67, 67, 67, 67, 67, 67, 67, 67, 14: 67, 67, 67, 20: 379, 33: 409, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 411, 67, 67, 67, 67, 67, 67, 410, 67, 67, 67, 67, 67, 67, 91: 380, 407, 412},
		{384, 381, 68, 68, 414, 392, 383, 68, 68, 68, 68, 68, 68, 14: 68, 68, 68, 20: 379, 33: 409, 387, 382, 385, 68, 68, 68, 68, 390, 68, 68, 68, 68, 68, 68, 68, 411, 68, 68, 68, 68, 68, 68, 410, 68, 388, 389, 68, 68, 68, 91: 380, 407, 412},
		{384, 381, 69, 69, 414, 392, 383, 406, 69, 69, 69, 69, 69, 14: 69, 69, 69, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 69, 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 69, 69, 69, 91: 380, 407, 412},
		// 160
		{14: 374, 16: 151, 61: 431, 124: 430},
		{384, 381, 3: 150, 414, 392, 383, 406, 150, 150, 150, 150, 150, 14: 150, 150, 150, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 61: 150, 150, 91: 380, 407, 412},
		{16: 429},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 14: 101, 101, 101, 20: 101, 33: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 433, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		// 165
		{16: 432},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 14: 102, 102, 102, 20: 102, 33: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{384, 381, 3: 149, 414, 392, 383, 406, 149, 149, 149, 149, 149, 14: 149, 149, 149, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 149, 149, 149, 91: 380, 407, 412},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 14: 107, 107, 107, 20: 107, 33: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{384, 381, 4: 414, 392, 383, 406, 15: 436, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		// 170
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 437, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{384, 381, 126, 126, 414, 392, 383, 406, 126, 126, 126, 126, 126, 14: 126, 126, 126, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 126, 390, 393, 126, 126, 408, 396, 398, 126, 411, 126, 394, 399, 126, 391, 126, 410, 126, 388, 389, 126, 126, 126, 91: 380, 407, 412},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14: 29, 29, 29, 20: 29, 33: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 14: 31, 31, 31, 20: 31, 33: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{451, 13: 448, 17: 457, 362, 63: 445, 95: 453, 452, 114: 456, 446, 450, 443, 449, 447, 454, 442, 441, 444, 180: 455},
		// 175
		{2: 54, 54, 8: 54, 14: 54, 16: 54, 40: 54},
		{2: 53, 53, 8: 53, 14: 53, 16: 53, 40: 53},
		{2: 52, 52, 8: 52, 14: 52, 16: 52, 40: 52},
		{2: 51, 51, 8: 51, 14: 51, 16: 51, 40: 51},
		{2: 50, 50, 8: 50, 14: 50, 16: 50, 40: 50},
		// 180
		{2: 49, 49, 8: 49, 14: 49, 16: 49, 40: 49},
		{2: 48, 48, 8: 48, 14: 48, 16: 48, 40: 48},
		{2: 47, 47, 8: 47, 14: 47, 16: 47, 20: 45, 40: 47},
		{2: 46, 46, 8: 46, 14: 46, 16: 46, 40: 46},
		{20: 479},
		// 185
		{451, 13: 448, 17: 457, 362, 63: 445, 95: 453, 452, 114: 456, 446, 450, 443, 449, 447, 478, 442, 441, 444},
		{2: 464},
		{451, 13: 448, 17: 457, 362, 63: 445, 95: 453, 452, 114: 456, 446, 450, 443, 449, 447, 463, 442, 441, 444},
		{40: 40},
		{40: 460},
		// 190
		{451, 13: 448, 17: 457, 362, 63: 445, 95: 453, 452, 114: 456, 446, 450, 443, 449, 447, 459, 442, 441, 444},
		{33, 13: 33, 17: 457, 33, 95: 33, 33, 114: 458},
		{32, 13: 32, 17: 32, 32, 95: 32, 32},
		{2: 34, 34, 8: 34, 14: 34, 16: 34, 40: 34},
		{451, 13: 448, 17: 457, 362, 63: 445, 95: 453, 452, 114: 456, 446, 450, 443, 449, 447, 461, 442, 441, 444, 170: 462},
		// 195
		{2: 39, 39, 8: 39, 14: 39, 16: 39, 40: 39},
		{2: 38, 38, 8: 38, 14: 38, 16: 38, 40: 38},
		{2: 41, 41, 8: 41, 14: 41, 16: 41, 40: 41},
		{8: 274, 13: 8, 94: 8, 107: 273, 113: 276, 127: 466, 204: 465},
		{3: 477},
		// 200
		{13: 366, 64: 467, 94: 468, 131: 470, 203: 469},
		{451, 13: 448, 17: 457, 362, 63: 445, 95: 453, 452, 114: 456, 446, 450, 443, 449, 447, 476, 442, 441, 444},
		{13: 366, 64: 474},
		{3: 8, 8: 274, 14: 374, 107: 273, 113: 276, 124: 472, 127: 471},
		{3: 36, 8: 36, 14: 36},
		// 205
		{3: 37},
		{13: 366, 64: 467, 94: 468, 131: 473},
		{3: 35, 8: 35, 14: 35},
		{451, 13: 448, 17: 457, 362, 63: 445, 95: 453, 452, 114: 456, 446, 450, 443, 449, 447, 475, 442, 441, 444},
		{3: 110, 8: 110, 14: 110, 16: 110},
		// 210
		{3: 111, 8: 111, 14: 111, 16: 111},
		{2: 42, 42, 8: 42, 14: 42, 16: 42, 40: 42},
		{2: 43, 43, 8: 43, 14: 43, 16: 43, 40: 43},
		{13: 480},
		{2: 44, 44, 8: 44, 14: 44, 16: 44, 40: 44},
		// 215
		{451, 13: 448, 17: 457, 362, 63: 445, 95: 453, 452, 114: 456, 446, 450, 443, 449, 447, 482, 442, 441, 444, 202: 483},
		{14: 489, 16: 488},
		{13: 484},
		{14: 485},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 486, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		// 220
		{384, 381, 4: 414, 392, 383, 406, 16: 487, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 14: 55, 55, 55, 20: 55, 33: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 14: 58, 58, 58, 20: 58, 33: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 490, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{384, 381, 4: 414, 392, 383, 406, 14: 492, 16: 491, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		// 225
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 14: 57, 57, 57, 20: 57, 33: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 493, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{384, 381, 4: 414, 392, 383, 406, 16: 494, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 14: 56, 56, 56, 20: 56, 33: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{1: 108, 108},
		// 230
		{1: 497},
		{13: 501, 16: 162, 64: 467, 94: 468, 131: 502, 159: 504, 503, 175: 505, 506, 499, 498, 500},
		{14: 374, 16: 161, 124: 523},
		{14: 160, 16: 160, 61: 521},
		{14: 159, 16: 159},
		// 235
		{16, 13: 16, 158, 16: 158, 16, 16, 61: 158, 95: 16, 16},
		{14: 157, 16: 157},
		{14: 156, 16: 156, 61: 156},
		{14: 154, 16: 154},
		{16: 507},
		// 240
		{16: 59},
		{451, 509, 169, 13: 448, 17: 457, 362, 63: 445, 95: 453, 452, 114: 456, 446, 450, 443, 449, 447, 508, 442, 441, 444, 185: 510},
		{2: 168},
		{451, 13: 448, 16: 166, 457, 362, 63: 445, 95: 453, 452, 114: 456, 446, 450, 443, 449, 447, 517, 442, 441, 444, 186: 515, 516},
		{2: 511, 126: 512},
		// 245
		{12, 12, 12, 12, 12, 12, 12, 12, 274, 12: 272, 12, 17: 12, 12, 12, 21: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 94: 12, 97: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 273, 12, 12, 12, 12, 12, 271, 128: 269, 270, 513},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 14: 62, 62, 62, 20: 62, 33: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{3: 514},
		{225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 14: 225, 225, 225, 20: 225, 33: 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 154: 225, 225, 158: 225},
		{16: 520},
		// 250
		{14: 374, 16: 165, 124: 518},
		{14: 164, 16: 164},
		{451, 13: 448, 17: 457, 362, 63: 445, 95: 453, 452, 114: 456, 446, 450, 443, 449, 447, 519, 442, 441, 444},
		{14: 163, 16: 163},
		{2: 167},
		// 255
		{451, 13: 448, 16: 60, 457, 362, 63: 445, 95: 453, 452, 114: 456, 446, 450, 443, 449, 447, 522, 442, 441, 444},
		{16: 61},
		{13: 501, 64: 467, 94: 468, 131: 502, 159: 525, 524},
		{14: 155, 16: 155, 61: 155},
		{14: 153, 16: 153},
		// 260
		{95, 381, 95, 95, 414, 95, 95, 95, 95, 95, 95, 95, 95, 14: 95, 95, 95, 20: 379, 33: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 91: 380, 407, 412},
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 14: 104, 104, 104, 20: 104, 33: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 529, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{384, 381, 4: 414, 392, 383, 406, 16: 530, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 14: 121, 121, 121, 20: 121, 33: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		// 265
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 532, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{384, 381, 4: 414, 392, 383, 406, 14: 534, 16: 533, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 14: 123, 123, 123, 20: 123, 33: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 535, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{384, 381, 4: 414, 392, 383, 406, 16: 536, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		// 270
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 14: 122, 122, 122, 20: 122, 33: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		{384, 381, 124, 124, 414, 392, 383, 406, 124, 124, 124, 124, 124, 14: 124, 124, 124, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 124, 390, 393, 124, 124, 408, 396, 398, 124, 411, 124, 394, 399, 124, 391, 124, 410, 124, 388, 389, 124, 124, 124, 91: 380, 407, 412},
		{451, 13: 448, 17: 457, 362, 63: 445, 95: 453, 452, 114: 456, 446, 450, 443, 449, 447, 539, 442, 441, 444},
		{16: 540},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 14: 125, 125, 125, 20: 125, 33: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		// 275
		{384, 381, 4: 414, 392, 383, 406, 14: 141, 136, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 141, 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		{14: 140, 40: 140},
		{14: 549, 40: 550},
		{14: 135, 40: 135},
		{15: 546},
		// 280
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 547, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 137: 548},
		{384, 381, 4: 414, 392, 383, 406, 14: 141, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 141, 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		{14: 134, 40: 134},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 541, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 137: 544, 161: 545, 551},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 14: 127, 127, 127, 20: 127, 33: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		// 285
		{14: 139, 40: 139},
		{384, 381, 4: 414, 392, 383, 406, 16: 553, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		{142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 14: 142, 142, 142, 20: 142, 33: 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 555, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{384, 381, 4: 414, 392, 383, 406, 16: 556, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		// 290
		{143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 14: 143, 143, 143, 20: 143, 33: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143},
		{451, 13: 448, 16: 558, 457, 362, 63: 445, 95: 453, 452, 114: 456, 446, 450, 443, 449, 447, 560, 442, 441, 444, 168: 559},
		{3: 146, 8: 146, 146, 146, 146, 146, 15: 146},
		{16: 561},
		{16: 144},
		// 295
		{3: 145, 8: 145, 145, 145, 145, 145, 15: 145},
		{384, 381, 563, 4: 414, 392, 383, 406, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		{3: 8, 8: 274, 8, 8, 107: 273, 113: 276, 127: 565, 201: 564},
		{3: 580},
		{3: 177, 9: 177, 569, 167: 568, 189: 566, 197: 567},
		// 300
		{3: 172, 9: 577, 198: 576, 575},
		{3: 176, 9: 176, 569, 167: 574},
		{3: 175, 9: 175, 175},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 15: 152, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 427, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 125: 571, 138: 570},
		{15: 572},
		// 305
		{3: 151, 8: 151, 151, 151, 151, 151, 14: 374, 151, 124: 430},
		{12, 12, 12, 12, 12, 12, 12, 12, 274, 12, 12, 12: 272, 12, 17: 12, 12, 12, 21: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 94: 12, 97: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 273, 12, 12, 12, 12, 12, 271, 128: 269, 270, 573},
		{3: 173, 9: 173, 173},
		{3: 174, 9: 174, 174},
		{3: 178},
		// 310
		{3: 171},
		{15: 578},
		{12, 12, 12, 12, 12, 12, 12, 12, 274, 12: 272, 12, 17: 12, 12, 12, 21: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 94: 12, 97: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 273, 12, 12, 12, 12, 12, 271, 128: 269, 270, 579},
		{3: 170},
		{3: 179, 8: 179, 179, 179, 179, 179, 15: 179},
		// 315
		{3: 8, 8: 274, 8, 8, 107: 273, 113: 276, 127: 583, 194: 582},
		{3: 597},
		{3: 187, 9: 187, 587, 166: 586, 188: 584, 193: 585},
		{3: 182, 9: 594, 195: 593, 592},
		{3: 186, 9: 186, 587, 166: 591},
		// 320
		{3: 185, 9: 185, 185},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 320, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 94: 329, 97: 330, 326, 315, 316, 335, 322, 332, 321, 331, 319, 108: 317, 333, 334, 318, 323, 125: 328, 132: 286, 325, 327, 324, 280, 139: 588, 281, 282, 295, 293, 294, 288, 292, 287, 285, 283, 291, 290, 284, 289},
		{15: 589},
		{12, 12, 12, 12, 12, 12, 12, 12, 274, 12, 12, 12: 272, 12, 17: 12, 12, 12, 21: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 94: 12, 97: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 273, 12, 12, 12, 12, 12, 271, 128: 269, 270, 590},
		{3: 183, 9: 183, 183},
		// 325
		{3: 184, 9: 184, 184},
		{3: 188},
		{3: 181},
		{15: 595},
		{12, 12, 12, 12, 12, 12, 12, 12, 274, 12: 272, 12, 17: 12, 12, 12, 21: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 94: 12, 97: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 273, 12, 12, 12, 12, 12, 271, 128: 269, 270, 596},
		// 330
		{3: 180},
		{3: 189, 8: 189, 189, 189, 189, 189, 15: 189},
		{12: 208},
		{2: 511, 126: 615},
		{384, 381, 193, 4: 414, 392, 383, 406, 14: 150, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 150, 62: 150, 91: 380, 407, 412},
		// 335
		{16, 16, 16, 4: 16, 16, 16, 16, 14: 609, 20: 16, 33: 608, 16, 16, 16, 16, 16, 16, 41: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 62: 16},
		{12: 603},
		{356, 337, 365, 4: 339, 357, 353, 341, 12: 148, 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 605, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 164: 604},
		{12: 606},
		{384, 381, 147, 4: 414, 392, 383, 406, 12: 147, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		// 340
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 605, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 164: 607},
		{2: 190},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 613, 310, 309, 359, 300, 311, 305, 306, 299, 313, 614, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{13: 610},
		{33: 611},
		// 345
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 613, 310, 309, 359, 300, 311, 305, 306, 299, 313, 612, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358},
		{244, 244, 191, 4: 244, 244, 244, 244, 20: 244, 33: 244, 244, 244, 244, 244, 244, 244, 41: 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244},
		{384, 381, 4: 414, 392, 383, 406, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		{244, 244, 192, 4: 244, 244, 244, 244, 20: 244, 33: 244, 244, 244, 244, 244, 244, 244, 41: 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244},
		{3: 194, 8: 194, 194, 194, 194, 194, 15: 194},
		// 350
		{3: 195, 8: 195, 195, 195, 195, 195, 15: 195},
		{384, 381, 511, 4: 414, 392, 383, 406, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412, 126: 618},
		{3: 198, 8: 198, 198, 198, 198, 198, 15: 198, 155: 620, 181: 619},
		{3: 199, 8: 199, 199, 199, 199, 199, 15: 199},
		{2: 511, 97: 330, 126: 622, 132: 621},
		// 355
		{3: 197, 8: 197, 197, 197, 197, 197, 15: 197},
		{3: 196, 8: 196, 196, 196, 196, 196, 15: 196},
		{14: 374, 62: 624, 124: 430},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 427, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 125: 625},
		{3: 202, 8: 202, 202, 202, 202, 202, 14: 374, 202, 124: 430},
		// 360
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 427, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 125: 629},
		{201, 201, 201, 4: 201, 201, 201, 201, 13: 201, 17: 201, 201, 201, 21: 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201},
		{200, 200, 200, 4: 200, 200, 200, 200, 13: 200, 17: 200, 200, 200, 21: 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200},
		{3: 203, 8: 203, 203, 203, 203, 203, 14: 374, 203, 124: 430},
		{14: 374, 60: 632, 124: 633},
		// 365
		{14: 18, 60: 18},
		{356, 337, 365, 4: 339, 357, 353, 341, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 427, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 125: 635},
		{13: 366, 64: 634},
		{14: 17, 60: 17},
		{3: 205, 8: 205, 205, 205, 205, 205, 14: 374, 205, 124: 430},
		// 370
		{154: 637},
		{2: 109, 13: 495, 165: 638},
		{2: 511, 126: 639},
		{3: 211, 8: 211, 211, 211, 211, 211, 15: 211, 158: 641, 184: 640},
		{3: 212, 8: 212, 212, 212, 212, 212, 15: 212},
		// 375
		{2: 511, 126: 642},
		{3: 210, 8: 210, 210, 210, 210, 210, 15: 210},
		{230, 230, 3: 105, 230, 230, 230, 230, 105, 105, 105, 105, 105, 15: 105, 20: 230, 33: 230, 230, 230, 230, 230, 230, 230, 41: 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230},
		{229, 229, 3: 106, 229, 229, 229, 229, 106, 106, 106, 106, 106, 15: 106, 20: 229, 33: 229, 229, 229, 229, 229, 229, 229, 41: 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229},
		{3: 213, 8: 213, 213, 213, 213, 213, 15: 213},
		// 380
		{3: 214, 8: 214, 214, 214, 214, 214, 15: 214},
		{2: 511, 126: 648},
		{3: 216, 8: 216, 216, 216, 216, 216, 15: 216},
		{384, 381, 3: 217, 414, 392, 383, 406, 217, 217, 217, 217, 217, 15: 217, 20: 379, 33: 409, 387, 382, 385, 397, 395, 378, 41: 390, 393, 404, 403, 408, 396, 398, 401, 411, 402, 394, 399, 405, 391, 400, 410, 386, 388, 389, 91: 380, 407, 412},
		{3: 218, 8: 218, 218, 218, 218, 218, 15: 218},
		// 385
		{3: 224, 8: 224, 224, 224, 224, 224, 15: 224},
		{3: 219, 8: 219, 219, 219, 219, 219, 15: 219},
		{3: 221, 8: 221, 221, 221, 221, 221, 15: 221},
		{3: 263, 9: 263, 263, 263},
		{356, 337, 365, 11, 339, 357, 353, 341, 9: 11, 11, 11, 13: 366, 17: 338, 362, 354, 21: 355, 343, 342, 349, 360, 336, 361, 340, 350, 345, 346, 348, 63: 363, 351, 364, 347, 320, 310, 309, 359, 300, 311, 305, 306, 299, 313, 296, 301, 297, 344, 303, 307, 352, 312, 302, 304, 308, 314, 298, 358, 94: 329, 97: 330, 326, 315, 316, 335, 322, 332, 321, 331, 319, 108: 317, 333, 334, 318, 323, 125: 328, 132: 286, 325, 327, 324, 280, 139: 656, 281, 282, 295, 293, 294, 288, 292, 287, 285, 283, 291, 290, 284, 289},
		// 390
		{3: 261, 8: 261, 261, 261, 261, 261},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 211

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmt
			}
		}
	case 2:
		{
			yyVAL.stmt = nil
		}
	case 3:
		{
			yyVAL.stmt = yyS[yypt-1].stmtsStmt
		}
	case 4:
		{
			yyVAL.stmtsStmt = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 5:
		{
			yyS[yypt-2].stmtsStmt.Stmts = append(yyS[yypt-2].stmtsStmt.Stmts, yyS[yypt-0].stmt)
		}
	case 41:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 43:
		{
			yyVAL.stmt = &ast.LabelStmt{Name: yyS[yypt-2].tok.Lit, Stmt: yyS[yypt-0].stmt}
		}
	case 44:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 45:
		{
			yyVAL.stmt = &ast.BreakStmt{Label: yyS[yypt-0].tok.Lit}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 46:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 47:
		{
			yyVAL.stmt = &ast.ContinueStmt{Label: yyS[yypt-0].tok.Lit}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 48:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprsExpr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 49:
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 50:
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyS[yypt-1].tok.Lit, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 51:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 52:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Go = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Go = true
			}
			yyVAL.stmt = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 53:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Defer = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Defer = true
			}
			yyVAL.stmt = &ast.DeferStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 54:
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyS[yypt-4].stmt, Var: yyS[yypt-2].opt_ident.Lit, Catch: yyS[yypt-1].stmt, Finally: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 55:
		{
			yyVAL.stmt = nil
		}
	case 56:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 57:
		{
			yyVAL.stmt = nil
		}
	case 58:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 61:
		{
			isItem := false
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprsExpr.Exprs) == 1 {
				if _, ok := yyS[yypt-0].exprsExpr.Exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					arr := &ast.ExprsExpr{}
					for _, el := range yyS[yypt-2].expr_idents {
						arr.Exprs = append(arr.Exprs, &ast.IdentExpr{Lit: el})
					}
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: arr, Rhs: yyS[yypt-0].exprsExpr.Exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprsExpr.Exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprsExpr.Exprs) && !(len(yyS[yypt-0].exprsExpr.Exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprsExpr.Exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 62:
		{
			lhs := yyS[yypt-0].stmt_lets_helper.Exprs1
			rhs := yyS[yypt-0].stmt_lets_helper.Exprs2
			isItem := false
			if len(lhs.Exprs) == 2 && len(rhs.Exprs) == 1 {
				if _, ok := rhs.Exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: lhs, Rhs: rhs.Exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.LetsStmt{Lhss: lhs, Operator: "=", Rhss: rhs, Typed: yyS[yypt-0].stmt_lets_helper.Typed, Mutable: yyS[yypt-0].stmt_lets_helper.Mutable}
				if len(lhs.Exprs) != len(rhs.Exprs) && !(len(rhs.Exprs) == 1 && len(lhs.Exprs) > len(rhs.Exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(lhs.Exprs[0].Position())
		}
	case 63:
		{
			yyVAL.stmt_lets_helper = struct {
				Exprs1, Exprs2 *ast.ExprsExpr
				Typed, Mutable bool
			}{Exprs1: yyS[yypt-2].exprsExpr, Exprs2: yyS[yypt-0].exprsExpr, Typed: yyS[yypt-1].op_lets, Mutable: false}
		}
	case 64:
		{
			yyVAL.stmt_lets_helper = struct {
				Exprs1, Exprs2 *ast.ExprsExpr
				Typed, Mutable bool
			}{Exprs1: yyS[yypt-2].exprsExpr, Exprs2: yyS[yypt-0].exprsExpr, Typed: true, Mutable: true}
		}
	case 65:
		{
			yyVAL.op_lets = true
		}
	case 66:
		{
			yyVAL.op_lets = false
		}
	case 67:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-2].expr, Then: yyS[yypt-1].stmt, Else: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 68:
		{
			yyVAL.stmt = nil
		}
	case 69:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 70:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 71:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 72:
		{
			if el, ok := yyS[yypt-1].stmt.(*ast.LoopStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			} else if el, ok := yyS[yypt-1].stmt.(*ast.ForStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			} else if el, ok := yyS[yypt-1].stmt.(*ast.CForStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			}
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 73:
		{
			yyVAL.stmt = &ast.LoopStmt{Expr: yyS[yypt-0].expr}
		}
	case 74:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: []string{yyS[yypt-2].tok.Lit}, Value: yyS[yypt-0].expr}
		}
	case 75:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: []string{yyS[yypt-4].tok.Lit, yyS[yypt-2].tok.Lit}, Value: yyS[yypt-0].expr}
		}
	case 76:
		{
			yyVAL.stmt = &ast.CForStmt{Stmt1: yyS[yypt-4].stmt, Expr2: yyS[yypt-2].expr, Expr3: yyS[yypt-0].expr}
		}
	case 77:
		{
			yyVAL.stmt = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 78:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{Cases: yyS[yypt-1].stmts, Default: yyS[yypt-0].stmt}
		}
	case 79:
		{
			yyVAL.stmts = nil
		}
	case 80:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 81:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 82:
		{
			yyVAL.stmts = append(yyVAL.stmts, yyS[yypt-0].stmt)
		}
	case 83:
		{
			yyVAL.stmt = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 84:
		{
			yyVAL.stmt = nil
		}
	case 85:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 86:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 87:
		{
			yyS[yypt-1].stmt.(*ast.SwitchStmt).Expr = yyS[yypt-3].expr
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 88:
		{
			yyVAL.stmt = &ast.SwitchStmt{Cases: yyS[yypt-1].stmts, Default: yyS[yypt-0].stmt}
		}
	case 89:
		{
			yyVAL.stmts = nil
		}
	case 90:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 91:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 92:
		{
			yyVAL.stmts = append(yyVAL.stmts, yyS[yypt-0].stmt)
		}
	case 93:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].exprsExpr, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 94:
		{
			yyVAL.stmt = nil
		}
	case 95:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 96:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 97:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 98:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 99:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents
		}
	case 100:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{}
		}
	case 101:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-0].opt_func_return_expr_idents
		}
	case 102:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 103:
		{
			yyVAL.opt_func_return_expr_idents = append(yyS[yypt-2].opt_func_return_expr_idents, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 104:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 105:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents
		}
	case 108:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 109:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].expr_typed_ident.Name, TypeData: yyS[yypt-0].expr_typed_ident.TypeData}
		}
	case 110:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 111:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 112:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 113:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 114:
		{
			yyVAL.exprsExpr = &ast.ExprsExpr{Exprs: []ast.Expr{}}
		}
	case 115:
		{
			yyVAL.exprsExpr = yyS[yypt-0].exprsExpr
		}
	case 116:
		{
			yyVAL.exprsExpr = &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 117:
		{
			yyS[yypt-2].exprsExpr.Exprs = append(yyS[yypt-2].exprsExpr.Exprs, yyS[yypt-0].expr)
		}
	case 118:
		{
			yyVAL.expr = nil
		}
	case 119:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 120:
		{
			yyVAL.stmt = &ast.DbgStmt{Expr: nil}
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 121:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 122:
		{
			yyVAL.stmt = &ast.DbgStmt{TypeData: yyS[yypt-0].type_data}
		}
	case 123:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 124:
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 126:
		{
			yyVAL.exprsExpr = &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 127:
		{
			yyS[yypt-2].exprsExpr.Exprs = append(yyS[yypt-2].exprsExpr.Exprs, yyS[yypt-0].expr)
		}
	case 128:
		{
			yyVAL.exprsExpr = nil
		}
	case 129:
		{
			yyVAL.exprsExpr = yyS[yypt-0].exprsExpr
		}
	case 131:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 132:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 133:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 136:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 137:
		{
			yyVAL.expr = yyS[yypt-2].exprsExpr
		}
	case 138:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: &ast.ExprsExpr{Exprs: []ast.Expr{}}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 139:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprsExpr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 140:
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 141:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 142:
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 143:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 144:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 145:
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 146:
		{
			yyVAL.expr = yyS[yypt-0].expr
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 147:
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 148:
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 149:
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 155:
		{
			typeData := yyS[yypt-0].type_data
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: typeData}
		}
	case 156:
		{
			typeData := yyS[yypt-0].type_data
			typeData.Mutable = true
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: typeData}
		}
	case 157:
		{
			yyVAL.opt_ident = nil
		}
	case 158:
		{
			yyVAL.opt_ident = &yyS[yypt-0].tok
		}
	case 159:
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 162:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 163:
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyS[yypt-1].expr, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 164:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  *ast.ExprsExpr
				VarArg bool
			}{Exprs: yyS[yypt-2].exprsExpr, VarArg: true}
		}
	case 165:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  *ast.ExprsExpr
				VarArg bool
			}{Exprs: yyS[yypt-1].exprsExpr}
		}
	case 166:
		{
			yyVAL.str = "-"
		}
	case 167:
		{
			yyVAL.str = "!"
		}
	case 168:
		{
			yyVAL.str = "^"
		}
	case 169:
		{
			yyVAL.str = "*"
		}
	case 170:
		{
			yyVAL.str = "&"
		}
	case 171:
		{
			if yyS[yypt-1].str == "&" {
				if el, ok := yyS[yypt-0].expr.(*ast.IdentExpr); ok {
					yyVAL.expr = &ast.AddrExpr{Expr: el}
				} else if el, ok := yyS[yypt-0].expr.(*ast.MemberExpr); ok {
					yyVAL.expr = el
				}
			} else if yyS[yypt-1].str == "*" {
				yyVAL.expr = &ast.DerefExpr{Expr: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.UnaryExpr{Operator: yyS[yypt-1].str, Expr: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 172:
		{
			yyVAL.str = "+"
		}
	case 173:
		{
			yyVAL.str = "-"
		}
	case 174:
		{
			yyVAL.str = "*"
		}
	case 175:
		{
			yyVAL.str = "/"
		}
	case 176:
		{
			yyVAL.str = "**"
		}
	case 177:
		{
			yyVAL.str = "%"
		}
	case 178:
		{
			yyVAL.str = "<<"
		}
	case 179:
		{
			yyVAL.str = ">>"
		}
	case 180:
		{
			yyVAL.str = "|"
		}
	case 181:
		{
			yyVAL.str = "||"
		}
	case 182:
		{
			yyVAL.str = "&"
		}
	case 183:
		{
			yyVAL.str = "&&"
		}
	case 184:
		{
			yyVAL.str = "!="
		}
	case 185:
		{
			yyVAL.str = ">"
		}
	case 186:
		{
			yyVAL.str = ">="
		}
	case 187:
		{
			yyVAL.str = "<"
		}
	case 188:
		{
			yyVAL.str = "<="
		}
	case 189:
		{
			yyVAL.str = "??"
		}
	case 190:
		{
			yyVAL.str = "+="
		}
	case 191:
		{
			yyVAL.str = "-="
		}
	case 192:
		{
			yyVAL.str = "*="
		}
	case 193:
		{
			yyVAL.str = "/="
		}
	case 194:
		{
			yyVAL.str = "&="
		}
	case 195:
		{
			yyVAL.str = "|="
		}
	case 196:
		{
			yyVAL.str = "<-"
		}
	case 197:
		{
			if yyS[yypt-1].str == "??" {
				yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "<-" {
				yyVAL.expr = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "+=" ||
				yyS[yypt-1].str == "-=" ||
				yyS[yypt-1].str == "*=" ||
				yyS[yypt-1].str == "/=" ||
				yyS[yypt-1].str == "&=" ||
				yyS[yypt-1].str == "|=" {
				yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 198:
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 199:
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 201:
		{
			yyVAL.str = "++"
		}
	case 202:
		{
			yyVAL.str = "--"
		}
	case 203:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: yyS[yypt-0].str}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 204:
		{
			f := &ast.FuncExpr{Params: yyS[yypt-3].func_expr_args.Params, Returns: yyS[yypt-1].opt_func_return_expr_idents, Stmt: yyS[yypt-0].stmt, VarArg: yyS[yypt-3].func_expr_args.VarArg}
			if yyS[yypt-3].func_expr_args.TypeData != nil {
				f.Params[len(f.Params)-1].TypeData = yyS[yypt-3].func_expr_args.TypeData
			}
			if yyS[yypt-5].opt_ident != nil {
				f.Name = yyS[yypt-5].opt_ident.Lit
			}
			yyVAL.expr = f
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 205:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-2].func_expr_idents, VarArg: true, TypeData: yyS[yypt-0].type_data}
		}
	case 206:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-1].func_expr_idents, VarArg: true, TypeData: nil}
		}
	case 207:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-0].func_expr_idents, VarArg: false, TypeData: nil}
		}
	case 208:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 209:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 210:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 211:
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 219:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 220:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 222:
		{
			yyVAL.type_data = &ast.TypeStruct{Env: []string{yyS[yypt-2].tok.Lit}, Name: yyS[yypt-0].tok.Lit}
		}
	case 223:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 224:
		{
			yyVAL.type_data = yyS[yypt-1].type_data
		}
	case 225:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 228:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 229:
		{
			yyVAL.type_data = yyS[yypt-1].type_data
		}
	case 230:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-0].expr_typed_ident.Name}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].expr_typed_ident.TypeData}}
		}
	case 231:
		{
			if yyS[yypt-2].type_data == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data.StructNames = append(yyVAL.type_data.StructNames, yyS[yypt-0].expr_typed_ident.Name)
			yyVAL.type_data.StructTypes = append(yyVAL.type_data.StructTypes, yyS[yypt-0].expr_typed_ident.TypeData)
		}
	case 232:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 233:
		{
			yyVAL.slice_count = 1
		}
	case 234:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 235:
		{
			yyS[yypt-0].expr_map.TypeData = yyS[yypt-1].type_data
			yyVAL.expr = yyS[yypt-0].expr_map
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_map.Position())
		}
	case 236:
		{
			yyVAL.expr = yyS[yypt-0].expr_map
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_map.Position())
		}
	case 237:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map
		}
	case 238:
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: &ast.ExprsExpr{Exprs: []ast.Expr{}}, Values: &ast.ExprsExpr{Exprs: []ast.Expr{}}}
		}
	case 239:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map
		}
	case 240:
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].exprs[0]}}, Values: &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].exprs[1]}}}
		}
	case 241:
		{
			yyVAL.expr_map.Keys.Exprs = append(yyVAL.expr_map.Keys.Exprs, yyS[yypt-0].exprs[0])
			yyVAL.expr_map.Values.Exprs = append(yyVAL.expr_map.Values.Exprs, yyS[yypt-0].exprs[1])
		}
	case 242:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 243:
		{
			if el, ok := yyS[yypt-1].expr.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-3].expr
			} else if el, ok := yyS[yypt-1].expr.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-3].expr
			}
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 244:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: yyS[yypt-0].expr}
		}
	case 245:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-1].expr, End: nil}
		}
	case 246:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: nil, End: yyS[yypt-0].expr}
		}
	case 247:
		{
			yyVAL.expr = &ast.ItemExpr{Index: yyS[yypt-0].expr}
		}
	case 248:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].expr.(*ast.IdentExpr).Lit}
		}
	case 249:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].expr.(*ast.IdentExpr).Lit)
		}
	case 250:
		{
			yyVAL.expr = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-0].tok.Position())
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
