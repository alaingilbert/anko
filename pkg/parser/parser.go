// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                 int
	stmtsStmt           *ast.StmtsStmt
	exprsExpr           *ast.ExprsExpr
	stmt                ast.Stmt
	expr                ast.Expr
	exprs               []ast.Expr
	stmts               []ast.Stmt
	stmt_select_content *ast.SelectBodyStmt
	expr_call_helper    struct {
		Exprs  *ast.ExprsExpr
		VarArg bool
	}
	expr_idents           []string
	func_expr_idents      []*ast.ParamExpr
	func_expr_typed_ident *ast.ParamExpr
	func_expr_args        struct {
		Params   []*ast.ParamExpr
		VarArg   bool
		TypeData *ast.TypeStruct
	}
	expr_typed_ident struct {
		Name     string
		TypeData *ast.TypeStruct
	}
	stmt_lets_helper struct {
		Exprs1, Exprs2 *ast.ExprsExpr
		Typed, Mutable bool
	}
	opt_func_return_expr_idents []*ast.FuncReturnValuesExpr
	expr_map                    *ast.MapExpr
	type_data                   *ast.TypeStruct
	slice_count                 int
	tok                         ast.Token
	opt_ident                   *ast.Token
	str                         string
	op_lets                     bool
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57408
	yyEofCode   = 57344
	ANDAND      = 57365
	ANDEQ       = 57379
	ARRAY       = 57349
	BREAK       = 57381
	CASE        = 57390
	CATCH       = 57373
	CHAN        = 57394
	CLOSE       = 57400
	CONTINUE    = 57382
	DBG         = 57403
	DEFAULT     = 57391
	DEFER       = 57393
	DELETE      = 57399
	DIVEQ       = 57378
	ELSE        = 57356
	EMPTYARR    = 57405
	EQEQ        = 57360
	FALSE       = 57368
	FINALLY     = 57374
	FOR         = 57357
	FUNC        = 57351
	GE          = 57362
	GO          = 57392
	IDENT       = 57346
	IF          = 57355
	IN          = 57359
	LE          = 57363
	LEN         = 57398
	LOOP        = 57358
	MAKE        = 57395
	MAP         = 57401
	MINUSEQ     = 57376
	MINUSMINUS  = 57384
	MODULE      = 57371
	MULEQ       = 57377
	MUT         = 57406
	NEQ         = 57361
	NEW         = 57366
	NIL         = 57369
	NILCOALESCE = 57370
	NUMBER      = 57347
	OPCHAN      = 57396
	OREQ        = 57380
	OROR        = 57364
	PLUSEQ      = 57375
	PLUSPLUS    = 57383
	POW         = 57385
	RETURN      = 57352
	SELECT      = 57389
	SHIFTLEFT   = 57386
	SHIFTRIGHT  = 57387
	STRING      = 57348
	STRUCT      = 57402
	SWITCH      = 57388
	THROW       = 57354
	TRUE        = 57367
	TRY         = 57372
	TYPE        = 57397
	UNARY       = 57407
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57404
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -271
)

var (
	yyPrec = map[int]int{
		POW:         0,
		'=':         1,
		PLUSEQ:      1,
		MINUSEQ:     1,
		DIVEQ:       1,
		MULEQ:       1,
		ANDEQ:       1,
		OREQ:        1,
		':':         2,
		OPCHAN:      3,
		'?':         4,
		NILCOALESCE: 4,
		OROR:        5,
		ANDAND:      6,
		EQEQ:        7,
		NEQ:         7,
		'<':         7,
		LE:          7,
		'>':         7,
		GE:          7,
		'+':         8,
		'-':         8,
		'|':         8,
		'^':         8,
		'*':         9,
		'/':         9,
		'%':         9,
		SHIFTLEFT:   9,
		SHIFTRIGHT:  9,
		'&':         9,
		IN:          10,
		PLUSPLUS:    11,
		MINUSMINUS:  11,
		UNARY:       12,
	}

	yyXLAT = map[int]int{
		91:    0,   // '[' (212x)
		42:    1,   // '*' (211x)
		125:   2,   // '}' (210x)
		123:   3,   // '{' (208x)
		40:    4,   // '(' (203x)
		38:    5,   // '&' (193x)
		45:    6,   // '-' (193x)
		57396: 7,   // OPCHAN (193x)
		10:    8,   // '\n' (166x)
		57391: 9,   // DEFAULT (147x)
		57390: 10,  // CASE (145x)
		44:    11,  // ',' (136x)
		57344: 12,  // $end (134x)
		57346: 13,  // IDENT (133x)
		59:    14,  // ';' (132x)
		58:    15,  // ':' (129x)
		41:    16,  // ')' (125x)
		57405: 17,  // EMPTYARR (116x)
		57401: 18,  // MAP (116x)
		93:    19,  // ']' (102x)
		46:    20,  // '.' (99x)
		57359: 21,  // IN (98x)
		37:    22,  // '%' (97x)
		43:    23,  // '+' (97x)
		47:    24,  // '/' (97x)
		60:    25,  // '<' (97x)
		62:    26,  // '>' (97x)
		63:    27,  // '?' (97x)
		124:   28,  // '|' (97x)
		57365: 29,  // ANDAND (97x)
		57379: 30,  // ANDEQ (97x)
		57378: 31,  // DIVEQ (97x)
		57360: 32,  // EQEQ (97x)
		57362: 33,  // GE (97x)
		57363: 34,  // LE (97x)
		57376: 35,  // MINUSEQ (97x)
		57384: 36,  // MINUSMINUS (97x)
		57377: 37,  // MULEQ (97x)
		57361: 38,  // NEQ (97x)
		57370: 39,  // NILCOALESCE (97x)
		57380: 40,  // OREQ (97x)
		57364: 41,  // OROR (97x)
		57375: 42,  // PLUSEQ (97x)
		57383: 43,  // PLUSPLUS (97x)
		57385: 44,  // POW (97x)
		57386: 45,  // SHIFTLEFT (97x)
		57387: 46,  // SHIFTRIGHT (97x)
		33:    47,  // '!' (96x)
		94:    48,  // '^' (96x)
		57400: 49,  // CLOSE (96x)
		57399: 50,  // DELETE (96x)
		57368: 51,  // FALSE (96x)
		57351: 52,  // FUNC (96x)
		57398: 53,  // LEN (96x)
		57395: 54,  // MAKE (96x)
		57366: 55,  // NEW (96x)
		57369: 56,  // NIL (96x)
		57347: 57,  // NUMBER (96x)
		57348: 58,  // STRING (96x)
		57367: 59,  // TRUE (96x)
		61:    60,  // '=' (73x)
		57350: 61,  // VARARG (72x)
		57404: 62,  // WALRUS (72x)
		57410: 63,  // array_type (65x)
		57471: 64,  // map_type (65x)
		57497: 65,  // slice_type (65x)
		57434: 66,  // expr_ident (54x)
		57443: 67,  // expr_map_container (48x)
		57416: 68,  // composite_lit (47x)
		57418: 69,  // const_expr (47x)
		57423: 70,  // expr (47x)
		57424: 71,  // expr_anon_call (47x)
		57425: 72,  // expr_array (47x)
		57426: 73,  // expr_assoc (47x)
		57427: 74,  // expr_binary (47x)
		57428: 75,  // expr_call (47x)
		57431: 76,  // expr_close (47x)
		57432: 77,  // expr_delete (47x)
		57433: 78,  // expr_func (47x)
		57436: 79,  // expr_item_or_slice (47x)
		57437: 80,  // expr_iterable (47x)
		57438: 81,  // expr_len (47x)
		57439: 82,  // expr_literals (47x)
		57440: 83,  // expr_literals_helper (47x)
		57441: 84,  // expr_make (47x)
		57442: 85,  // expr_map (47x)
		57447: 86,  // expr_member (47x)
		57448: 87,  // expr_member_or_ident (47x)
		57449: 88,  // expr_new (47x)
		57450: 89,  // expr_opchan (47x)
		57451: 90,  // expr_paren (47x)
		57452: 91,  // expr_ternary (47x)
		57454: 92,  // expr_unary (47x)
		57469: 93,  // literal_type (47x)
		57538: 94,  // unary_op (47x)
		57429: 95,  // expr_call_helper (34x)
		57411: 96,  // bin_op (33x)
		57475: 97,  // op_assoc1 (33x)
		57394: 98,  // CHAN (26x)
		57402: 99,  // STRUCT (26x)
		57406: 100, // MUT (25x)
		57413: 101, // channel_type (18x)
		57355: 102, // IF (18x)
		57492: 103, // package_name (18x)
		57493: 104, // pointer_type (18x)
		57494: 105, // qualified_ident (18x)
		57496: 106, // slice_count (18x)
		57529: 107, // struct_type (18x)
		57532: 108, // type (18x)
		57534: 109, // type_lit (18x)
		57535: 110, // type_name (18x)
		57537: 111, // typed_slice_count (18x)
		57353: 112, // VAR (18x)
		57381: 113, // BREAK (17x)
		57382: 114, // CONTINUE (17x)
		57403: 115, // DBG (17x)
		57393: 116, // DEFER (17x)
		57357: 117, // FOR (17x)
		57392: 118, // GO (17x)
		57358: 119, // LOOP (17x)
		57371: 120, // MODULE (17x)
		57473: 121, // newline (17x)
		57352: 122, // RETURN (17x)
		57389: 123, // SELECT (17x)
		57388: 124, // SWITCH (17x)
		57354: 125, // THROW (17x)
		57372: 126, // TRY (17x)
		57474: 127, // newlines (15x)
		57415: 128, // comma_opt_newlines (12x)
		57455: 129, // exprs (11x)
		57412: 130, // block (9x)
		57487: 131, // opt_newlines (8x)
		57491: 132, // opt_term (7x)
		57531: 133, // term (7x)
		57417: 134, // compstmt (6x)
		57420: 135, // element (4x)
		57422: 136, // element_type (4x)
		57453: 137, // expr_typed_ident (4x)
		57507: 138, // stmt_if (4x)
		57508: 139, // stmt_lets (4x)
		57509: 140, // stmt_lets_helper (4x)
		57526: 141, // stmt_var (4x)
		57527: 142, // stmt_var_or_lets (4x)
		57464: 143, // key (3x)
		57466: 144, // keyed_element (3x)
		57481: 145, // opt_exprs (3x)
		57499: 146, // stmt (3x)
		57500: 147, // stmt_break (3x)
		57501: 148, // stmt_continue (3x)
		57502: 149, // stmt_dbg (3x)
		57503: 150, // stmt_defer (3x)
		57504: 151, // stmt_expr (3x)
		57505: 152, // stmt_for (3x)
		57506: 153, // stmt_go (3x)
		57510: 154, // stmt_loop (3x)
		57511: 155, // stmt_module (3x)
		57512: 156, // stmt_return (3x)
		57513: 157, // stmt_select (3x)
		57519: 158, // stmt_switch (3x)
		57524: 159, // stmt_throw (3x)
		57525: 160, // stmt_try (3x)
		57409: 161, // array_length (2x)
		57373: 162, // CATCH (2x)
		57421: 163, // element_list (2x)
		57356: 164, // ELSE (2x)
		57430: 165, // expr_callable (2x)
		57446: 166, // expr_map_key_value (2x)
		57374: 167, // FINALLY (2x)
		57461: 168, // func_expr_typed_ident (2x)
		57463: 169, // func_expr_untyped_ident (2x)
		57467: 170, // label (2x)
		57480: 171, // opt_expr (2x)
		57486: 172, // opt_ident (2x)
		57514: 173, // stmt_select_case (2x)
		57520: 174, // stmt_switch_case (2x)
		57414: 175, // comma (1x)
		57419: 176, // dbg_content (1x)
		57435: 177, // expr_idents (1x)
		57444: 178, // expr_map_content (1x)
		57445: 179, // expr_map_content_helper (1x)
		57456: 180, // for_content (1x)
		57457: 181, // func_expr_args (1x)
		57458: 182, // func_expr_idents (1x)
		57459: 183, // func_expr_idents_last_untyped (1x)
		57460: 184, // func_expr_idents_not_empty (1x)
		57462: 185, // func_expr_typed_idents (1x)
		57465: 186, // key_type (1x)
		57470: 187, // literal_value (1x)
		57472: 188, // maybe_else (1x)
		57476: 189, // op_lets (1x)
		57477: 190, // opt_comma (1x)
		57478: 191, // opt_comma_opt_newlines (1x)
		57479: 192, // opt_element_list (1x)
		57482: 193, // opt_finally (1x)
		57483: 194, // opt_func_return_expr_idents (1x)
		57484: 195, // opt_func_return_expr_idents1 (1x)
		57485: 196, // opt_func_return_expr_idents2 (1x)
		57488: 197, // opt_stmt_select_cases (1x)
		57489: 198, // opt_stmt_switch_cases (1x)
		57490: 199, // opt_stmt_var_or_lets (1x)
		57495: 200, // slice (1x)
		57498: 201, // start (1x)
		57515: 202, // stmt_select_cases (1x)
		57516: 203, // stmt_select_content (1x)
		57517: 204, // stmt_select_default (1x)
		57518: 205, // stmt_select_opt_default (1x)
		57521: 206, // stmt_switch_cases (1x)
		57522: 207, // stmt_switch_default (1x)
		57523: 208, // stmt_switch_opt_default (1x)
		57528: 209, // stmtsStmt (1x)
		57530: 210, // switch_content (1x)
		57397: 211, // TYPE (1x)
		57533: 212, // type_data_struct (1x)
		57536: 213, // type_struct_content (1x)
		57408: 214, // $default (0x)
		57349: 215, // ARRAY (0x)
		57345: 216, // error (0x)
		57468: 217, // labeled_stmt (0x)
		57407: 218, // UNARY (0x)
	}

	yySymNames = []string{
		"'['",
		"'*'",
		"'}'",
		"'{'",
		"'('",
		"'&'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"DEFAULT",
		"CASE",
		"','",
		"$end",
		"IDENT",
		"';'",
		"':'",
		"')'",
		"EMPTYARR",
		"MAP",
		"']'",
		"'.'",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"'!'",
		"'^'",
		"CLOSE",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"'='",
		"VARARG",
		"WALRUS",
		"array_type",
		"map_type",
		"slice_type",
		"expr_ident",
		"expr_map_container",
		"composite_lit",
		"const_expr",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_delete",
		"expr_func",
		"expr_item_or_slice",
		"expr_iterable",
		"expr_len",
		"expr_literals",
		"expr_literals_helper",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"literal_type",
		"unary_op",
		"expr_call_helper",
		"bin_op",
		"op_assoc1",
		"CHAN",
		"STRUCT",
		"MUT",
		"channel_type",
		"IF",
		"package_name",
		"pointer_type",
		"qualified_ident",
		"slice_count",
		"struct_type",
		"type",
		"type_lit",
		"type_name",
		"typed_slice_count",
		"VAR",
		"BREAK",
		"CONTINUE",
		"DBG",
		"DEFER",
		"FOR",
		"GO",
		"LOOP",
		"MODULE",
		"newline",
		"RETURN",
		"SELECT",
		"SWITCH",
		"THROW",
		"TRY",
		"newlines",
		"comma_opt_newlines",
		"exprs",
		"block",
		"opt_newlines",
		"opt_term",
		"term",
		"compstmt",
		"element",
		"element_type",
		"expr_typed_ident",
		"stmt_if",
		"stmt_lets",
		"stmt_lets_helper",
		"stmt_var",
		"stmt_var_or_lets",
		"key",
		"keyed_element",
		"opt_exprs",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_dbg",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_loop",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"array_length",
		"CATCH",
		"element_list",
		"ELSE",
		"expr_callable",
		"expr_map_key_value",
		"FINALLY",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"label",
		"opt_expr",
		"opt_ident",
		"stmt_select_case",
		"stmt_switch_case",
		"comma",
		"dbg_content",
		"expr_idents",
		"expr_map_content",
		"expr_map_content_helper",
		"for_content",
		"func_expr_args",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"key_type",
		"literal_value",
		"maybe_else",
		"op_lets",
		"opt_comma",
		"opt_comma_opt_newlines",
		"opt_element_list",
		"opt_finally",
		"opt_func_return_expr_idents",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"opt_stmt_select_cases",
		"opt_stmt_switch_cases",
		"opt_stmt_var_or_lets",
		"slice",
		"start",
		"stmt_select_cases",
		"stmt_select_content",
		"stmt_select_default",
		"stmt_select_opt_default",
		"stmt_switch_cases",
		"stmt_switch_default",
		"stmt_switch_opt_default",
		"stmtsStmt",
		"switch_content",
		"TYPE",
		"type_data_struct",
		"type_struct_content",
		"$default",
		"ARRAY",
		"error",
		"labeled_stmt",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {201, 1},
		2:   {134, 1},
		3:   {134, 3},
		4:   {209, 1},
		5:   {209, 3},
		6:   {146, 1},
		7:   {146, 1},
		8:   {146, 1},
		9:   {146, 1},
		10:  {146, 1},
		11:  {146, 1},
		12:  {146, 1},
		13:  {146, 1},
		14:  {146, 1},
		15:  {146, 1},
		16:  {146, 1},
		17:  {146, 1},
		18:  {146, 1},
		19:  {146, 1},
		20:  {146, 1},
		21:  {146, 1},
		22:  {70, 1},
		23:  {70, 1},
		24:  {70, 1},
		25:  {70, 1},
		26:  {70, 1},
		27:  {70, 1},
		28:  {70, 1},
		29:  {70, 1},
		30:  {70, 1},
		31:  {70, 1},
		32:  {70, 1},
		33:  {70, 1},
		34:  {80, 1},
		35:  {80, 1},
		36:  {80, 1},
		37:  {80, 1},
		38:  {80, 1},
		39:  {80, 1},
		40:  {80, 1},
		41:  {80, 1},
		42:  {130, 3},
		43:  {170, 1},
		44:  {217, 3},
		45:  {147, 1},
		46:  {147, 2},
		47:  {148, 1},
		48:  {148, 2},
		49:  {156, 2},
		50:  {159, 2},
		51:  {155, 3},
		52:  {151, 1},
		53:  {153, 2},
		54:  {150, 2},
		55:  {160, 6},
		56:  {193, 0},
		57:  {193, 2},
		58:  {199, 0},
		59:  {199, 1},
		60:  {142, 1},
		61:  {142, 1},
		62:  {141, 4},
		63:  {139, 1},
		64:  {140, 3},
		65:  {140, 4},
		66:  {189, 1},
		67:  {189, 1},
		68:  {138, 4},
		69:  {188, 0},
		70:  {188, 2},
		71:  {188, 2},
		72:  {154, 2},
		73:  {152, 3},
		74:  {180, 1},
		75:  {180, 3},
		76:  {180, 5},
		77:  {180, 5},
		78:  {157, 4},
		79:  {203, 3},
		80:  {197, 0},
		81:  {197, 1},
		82:  {202, 1},
		83:  {202, 2},
		84:  {173, 4},
		85:  {205, 0},
		86:  {205, 1},
		87:  {204, 3},
		88:  {158, 5},
		89:  {210, 3},
		90:  {198, 0},
		91:  {198, 1},
		92:  {206, 1},
		93:  {206, 2},
		94:  {174, 4},
		95:  {208, 0},
		96:  {208, 1},
		97:  {207, 3},
		98:  {194, 0},
		99:  {194, 1},
		100: {194, 3},
		101: {195, 0},
		102: {195, 1},
		103: {196, 1},
		104: {196, 3},
		105: {182, 0},
		106: {182, 1},
		107: {184, 1},
		108: {184, 1},
		109: {169, 1},
		110: {168, 1},
		111: {183, 1},
		112: {183, 3},
		113: {185, 1},
		114: {185, 3},
		115: {145, 0},
		116: {145, 1},
		117: {129, 1},
		118: {129, 3},
		119: {171, 0},
		120: {171, 1},
		121: {149, 3},
		122: {149, 4},
		123: {176, 1},
		124: {81, 4},
		125: {90, 3},
		126: {135, 1},
		127: {163, 1},
		128: {163, 3},
		129: {192, 0},
		130: {192, 1},
		131: {143, 1},
		132: {144, 1},
		133: {144, 3},
		134: {68, 2},
		135: {93, 1},
		136: {93, 1},
		137: {161, 1},
		138: {63, 4},
		139: {65, 2},
		140: {187, 4},
		141: {72, 1},
		142: {72, 3},
		143: {91, 5},
		144: {88, 4},
		145: {89, 2},
		146: {77, 4},
		147: {77, 6},
		148: {76, 4},
		149: {82, 1},
		150: {83, 1},
		151: {83, 1},
		152: {83, 1},
		153: {69, 1},
		154: {69, 1},
		155: {69, 1},
		156: {87, 1},
		157: {87, 1},
		158: {137, 2},
		159: {137, 3},
		160: {172, 0},
		161: {172, 1},
		162: {86, 3},
		163: {165, 1},
		164: {165, 1},
		165: {75, 2},
		166: {71, 2},
		167: {95, 4},
		168: {95, 3},
		169: {94, 1},
		170: {94, 1},
		171: {94, 1},
		172: {94, 1},
		173: {94, 1},
		174: {92, 2},
		175: {96, 1},
		176: {96, 1},
		177: {96, 1},
		178: {96, 1},
		179: {96, 1},
		180: {96, 1},
		181: {96, 1},
		182: {96, 1},
		183: {96, 1},
		184: {96, 1},
		185: {96, 1},
		186: {96, 1},
		187: {96, 1},
		188: {96, 1},
		189: {96, 1},
		190: {96, 1},
		191: {96, 1},
		192: {96, 1},
		193: {96, 1},
		194: {96, 1},
		195: {96, 1},
		196: {96, 1},
		197: {96, 1},
		198: {96, 1},
		199: {96, 1},
		200: {74, 3},
		201: {74, 3},
		202: {74, 3},
		203: {74, 1},
		204: {97, 1},
		205: {97, 1},
		206: {73, 2},
		207: {78, 7},
		208: {181, 3},
		209: {181, 2},
		210: {181, 1},
		211: {84, 4},
		212: {84, 6},
		213: {84, 8},
		214: {84, 7},
		215: {108, 1},
		216: {108, 1},
		217: {109, 1},
		218: {109, 1},
		219: {109, 1},
		220: {109, 1},
		221: {109, 1},
		222: {109, 1},
		223: {109, 1},
		224: {110, 1},
		225: {110, 1},
		226: {103, 1},
		227: {105, 3},
		228: {104, 2},
		229: {107, 4},
		230: {101, 2},
		231: {186, 1},
		232: {136, 1},
		233: {64, 5},
		234: {213, 3},
		235: {212, 1},
		236: {212, 3},
		237: {111, 2},
		238: {106, 1},
		239: {106, 2},
		240: {85, 2},
		241: {85, 1},
		242: {67, 3},
		243: {178, 1},
		244: {178, 3},
		245: {179, 1},
		246: {179, 3},
		247: {166, 3},
		248: {79, 4},
		249: {200, 3},
		250: {200, 2},
		251: {200, 2},
		252: {200, 1},
		253: {177, 1},
		254: {177, 3},
		255: {66, 1},
		256: {175, 1},
		257: {190, 0},
		258: {190, 1},
		259: {132, 0},
		260: {132, 1},
		261: {133, 1},
		262: {133, 2},
		263: {131, 0},
		264: {131, 1},
		265: {127, 1},
		266: {127, 2},
		267: {121, 1},
		268: {128, 2},
		269: {191, 1},
		270: {191, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [412][]uint16{
		// 0
		{12, 12, 3: 12, 12, 12, 12, 12, 279, 12: 12, 12, 277, 17: 12, 12, 47: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 100: 12, 102: 12, 112: 12, 12, 12, 12, 12, 12, 12, 12, 12, 278, 12, 12, 12, 12, 12, 276, 132: 274, 275, 273, 201: 272},
		{12: 271},
		{12: 270},
		{347, 365, 269, 374, 343, 366, 362, 350, 9: 269, 269, 12: 269, 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 326, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 100: 335, 102: 336, 112: 332, 321, 322, 341, 328, 338, 327, 337, 325, 122: 323, 339, 340, 324, 329, 129: 334, 138: 291, 331, 333, 330, 285, 146: 284, 286, 287, 300, 298, 299, 293, 297, 292, 290, 288, 296, 295, 289, 294, 209: 283},
		{11, 11, 11, 11, 11, 11, 11, 11, 9: 11, 11, 12: 11, 11, 17: 11, 11, 47: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 100: 11, 102: 11, 112: 11, 11, 11, 11, 11, 11, 11, 11, 11, 122: 11, 11, 11, 11, 11},
		// 5
		{10, 10, 10, 10, 10, 10, 10, 10, 279, 10, 10, 12: 10, 10, 17: 10, 10, 47: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 100: 10, 102: 10, 112: 10, 10, 10, 10, 10, 10, 10, 10, 10, 282, 10, 10, 10, 10, 10},
		{8, 8, 8, 8, 8, 8, 8, 8, 279, 8, 8, 12: 8, 8, 17: 8, 8, 47: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 100: 8, 102: 8, 112: 8, 8, 8, 8, 8, 8, 8, 8, 8, 278, 8, 8, 8, 8, 8, 281, 131: 280},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12: 6, 6, 17: 6, 6, 47: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 98: 6, 6, 6, 102: 6, 112: 6, 6, 6, 6, 6, 6, 6, 6, 6, 122: 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12: 4, 4, 17: 4, 4, 47: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 98: 4, 4, 4, 102: 4, 112: 4, 4, 4, 4, 4, 4, 4, 4, 4, 122: 4, 4, 4, 4, 4},
		{9, 9, 9, 9, 9, 9, 9, 9, 9: 9, 9, 12: 9, 9, 17: 9, 9, 47: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 100: 9, 102: 9, 112: 9, 9, 9, 9, 9, 9, 9, 9, 9, 122: 9, 9, 9, 9, 9},
		// 10
		{7, 7, 7, 7, 7, 7, 7, 7, 279, 7, 7, 12: 7, 7, 17: 7, 7, 47: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 98: 7, 7, 7, 102: 7, 112: 7, 7, 7, 7, 7, 7, 7, 7, 7, 282, 7, 7, 7, 7, 7},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12: 5, 5, 17: 5, 5, 47: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 98: 5, 5, 5, 102: 5, 112: 5, 5, 5, 5, 5, 5, 5, 5, 5, 122: 5, 5, 5, 5, 5},
		{2: 12, 8: 279, 12, 12, 12: 12, 14: 277, 121: 278, 127: 276, 132: 680, 681},
		{2: 267, 8: 267, 267, 267, 12: 267, 14: 267},
		{2: 265, 8: 265, 265, 265, 12: 265, 14: 265, 265},
		// 15
		{2: 264, 8: 264, 264, 264, 12: 264, 14: 264, 264},
		{2: 263, 8: 263, 263, 263, 12: 263, 14: 263, 263},
		{2: 262, 8: 262, 262, 262, 12: 262, 14: 262, 262},
		{2: 261, 8: 261, 261, 261, 12: 261, 14: 261, 261},
		{2: 260, 8: 260, 260, 260, 12: 260, 14: 260, 260},
		// 20
		{2: 259, 8: 259, 259, 259, 12: 259, 14: 259, 259},
		{2: 258, 8: 258, 258, 258, 12: 258, 14: 258, 258},
		{2: 257, 8: 257, 257, 257, 12: 257, 14: 257, 257},
		{2: 256, 8: 256, 256, 256, 12: 256, 14: 256, 256},
		{2: 255, 8: 255, 255, 255, 12: 255, 14: 255, 255},
		// 25
		{2: 254, 8: 254, 254, 254, 12: 254, 14: 254, 254},
		{2: 253, 8: 253, 253, 253, 12: 253, 14: 253, 253},
		{2: 252, 8: 252, 252, 252, 12: 252, 14: 252, 252},
		{2: 251, 8: 251, 251, 251, 12: 251, 14: 251, 251},
		{2: 250, 8: 250, 250, 250, 12: 250, 14: 250, 250},
		// 30
		{249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 14: 249, 249, 249, 19: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 60: 249, 249, 249},
		{248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 14: 248, 248, 248, 19: 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 60: 248, 248, 248},
		{247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 14: 247, 247, 247, 19: 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 60: 247, 247, 247},
		{246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 14: 246, 246, 246, 19: 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 60: 246, 246, 246},
		{245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 14: 245, 245, 245, 19: 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 60: 245, 245, 245},
		// 35
		{244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 14: 244, 244, 244, 19: 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 60: 244, 244, 244},
		{243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 14: 243, 243, 243, 19: 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 60: 243, 243, 243},
		{242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 14: 242, 242, 242, 19: 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 60: 242, 242, 242},
		{241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 14: 241, 241, 241, 19: 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 60: 241, 241, 241},
		{240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 14: 240, 240, 240, 19: 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 60: 240, 240, 240},
		// 40
		{239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 14: 239, 239, 239, 19: 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 60: 239, 239, 239},
		{238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 14: 238, 238, 238, 19: 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 60: 238, 238, 238},
		{237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 14: 237, 237, 237, 19: 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 60: 237, 237, 237},
		{236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 14: 236, 236, 236, 19: 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 60: 236, 236, 236},
		{235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 14: 235, 235, 235, 19: 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 60: 235, 235, 235},
		// 45
		{234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 14: 234, 234, 234, 19: 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 60: 234, 234, 234},
		{233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 14: 233, 233, 233, 19: 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 60: 233, 233, 233},
		{232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 14: 232, 232, 232, 19: 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 60: 232, 232, 232},
		{231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 14: 231, 231, 231, 19: 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 60: 231, 231, 231},
		{230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 14: 230, 230, 230, 19: 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 60: 230, 230, 230},
		// 50
		{2: 226, 8: 226, 226, 226, 12: 226, 677, 226, 226, 170: 679},
		{2: 224, 8: 224, 224, 224, 12: 224, 677, 224, 224, 170: 678},
		{347, 365, 156, 374, 343, 366, 362, 350, 156, 156, 156, 12: 156, 375, 156, 156, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 436, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 129: 597, 145: 676},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 675, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{13: 673},
		// 55
		{423, 393, 219, 4: 390, 401, 392, 415, 219, 219, 219, 154, 219, 14: 219, 219, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 60: 154, 62: 154, 95: 389, 416, 421},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 639, 669, 315, 368, 306, 670, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 165: 672},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 639, 669, 315, 368, 306, 670, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 165: 671},
		{3: 528, 130: 662},
		{2: 211, 8: 211, 211, 211, 12: 211, 14: 211, 211},
		// 60
		{2: 210, 8: 210, 210, 210, 12: 210, 14: 210, 210},
		{13: 375, 66: 657, 177: 656},
		{2: 208, 8: 208, 208, 208, 12: 208, 14: 208, 208},
		{11: 383, 60: 654, 62: 653, 128: 439, 189: 652},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 436, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 129: 649},
		// 65
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 643, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{3: 528, 130: 642},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 627, 213, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 626, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 100: 335, 112: 332, 129: 334, 139: 331, 333, 330, 624, 180: 625, 199: 628},
		{3: 607},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 588, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		// 70
		{4: 583},
		{4: 580},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 578, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{3: 571, 187: 570},
		{3: 136},
		// 75
		{3: 135},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 558, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 135: 561, 143: 562, 559, 161: 495, 163: 560},
		{450, 464, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 461, 130, 130, 130, 451, 371, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 60: 130, 130, 130, 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 472, 453, 452, 457, 136: 492},
		{4: 555},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 554, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		// 80
		{4: 548},
		{4: 545},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 14: 122, 122, 122, 19: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 60: 122, 122, 122},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 14: 121, 121, 121, 19: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 60: 121, 121, 121},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 14: 120, 120, 120, 19: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 60: 120, 120, 120},
		// 85
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 14: 119, 119, 119, 19: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 60: 119, 119, 119},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 14: 118, 118, 118, 19: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 60: 118, 118, 118},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 14: 117, 117, 117, 19: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 60: 117, 117, 117},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 14: 116, 116, 116, 19: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 60: 116, 116, 116},
		{115, 115, 115, 115, 390, 115, 115, 115, 115, 115, 115, 115, 115, 14: 115, 115, 115, 19: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 60: 115, 115, 115, 95: 544},
		// 90
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 14: 114, 114, 114, 19: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 60: 114, 114, 114},
		{102, 102, 3: 102, 102, 102, 102, 102, 13: 102, 17: 102, 102, 47: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{101, 101, 3: 101, 101, 101, 101, 101, 13: 101, 17: 101, 101, 47: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		{100, 100, 3: 100, 100, 100, 100, 100, 13: 100, 17: 100, 100, 47: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		{99, 99, 3: 99, 99, 99, 99, 99, 13: 99, 17: 99, 99, 47: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		// 95
		{98, 98, 3: 98, 98, 98, 98, 98, 13: 98, 17: 98, 98, 47: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 543, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 14: 68, 68, 68, 19: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 60: 68, 68, 68},
		{4: 111, 13: 512, 172: 513},
		{4: 498},
		// 100
		{449},
		{3: 374, 67: 448},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 14: 30, 30, 30, 19: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 60: 30, 30, 30},
		{8, 8, 8, 8, 8, 8, 8, 8, 279, 13: 8, 17: 8, 8, 47: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 121: 278, 127: 281, 131: 377, 178: 376},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 60: 16, 16, 16, 98: 16, 16},
		// 105
		{2: 447},
		{347, 365, 28, 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 378, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 166: 380, 179: 379},
		{423, 393, 4: 390, 401, 392, 415, 15: 422, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{2: 8, 8: 279, 11: 383, 121: 278, 127: 281, 382, 131: 384, 191: 381},
		{2: 26, 8: 26, 11: 26},
		// 110
		{2: 27},
		{347, 365, 2, 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 378, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 166: 386},
		{8, 8, 8, 8, 8, 8, 8, 8, 279, 13: 8, 17: 8, 8, 47: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 98: 8, 8, 8, 121: 278, 127: 281, 131: 385},
		{2: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 13: 3, 17: 3, 3, 47: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 98: 3, 3, 3},
		// 115
		{2: 25, 8: 25, 11: 25},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 444, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{13: 443},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 14: 105, 105, 105, 19: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 60: 105, 105, 105},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 16: 156, 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 436, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 129: 435, 145: 437},
		// 120
		{96, 96, 3: 96, 96, 96, 96, 96, 13: 96, 17: 96, 96, 47: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		{95, 95, 3: 95, 95, 95, 95, 95, 13: 95, 17: 95, 95, 47: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95},
		{94, 94, 3: 94, 94, 94, 94, 94, 13: 94, 17: 94, 94, 47: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94},
		{93, 93, 3: 93, 93, 93, 93, 93, 13: 93, 17: 93, 93, 47: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93},
		{92, 92, 3: 92, 92, 92, 92, 92, 13: 92, 17: 92, 92, 47: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		// 125
		{91, 91, 3: 91, 91, 91, 91, 91, 13: 91, 17: 91, 91, 47: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		{90, 90, 3: 90, 90, 90, 90, 90, 13: 90, 17: 90, 90, 47: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{89, 89, 3: 89, 89, 89, 89, 89, 13: 89, 17: 89, 89, 47: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{88, 88, 3: 88, 88, 88, 88, 88, 13: 88, 17: 88, 88, 47: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{87, 87, 3: 87, 87, 87, 87, 87, 13: 87, 17: 87, 87, 47: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		// 130
		{86, 86, 3: 86, 86, 86, 86, 86, 13: 86, 17: 86, 86, 47: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{85, 85, 3: 85, 85, 85, 85, 85, 13: 85, 17: 85, 85, 47: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{84, 84, 3: 84, 84, 84, 84, 84, 13: 84, 17: 84, 84, 47: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84},
		{83, 83, 3: 83, 83, 83, 83, 83, 13: 83, 17: 83, 83, 47: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{82, 82, 3: 82, 82, 82, 82, 82, 13: 82, 17: 82, 82, 47: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		// 135
		{81, 81, 3: 81, 81, 81, 81, 81, 13: 81, 17: 81, 81, 47: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{80, 80, 3: 80, 80, 80, 80, 80, 13: 80, 17: 80, 80, 47: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
		{79, 79, 3: 79, 79, 79, 79, 79, 13: 79, 17: 79, 79, 47: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{78, 78, 3: 78, 78, 78, 78, 78, 13: 78, 17: 78, 78, 47: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		{77, 77, 3: 77, 77, 77, 77, 77, 13: 77, 17: 77, 77, 47: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		// 140
		{76, 76, 3: 76, 76, 76, 76, 76, 13: 76, 17: 76, 76, 47: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		{75, 75, 3: 75, 75, 75, 75, 75, 13: 75, 17: 75, 75, 47: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{74, 74, 3: 74, 74, 74, 74, 74, 13: 74, 17: 74, 74, 47: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{73, 73, 3: 73, 73, 73, 73, 73, 13: 73, 17: 73, 73, 47: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		{72, 72, 3: 72, 72, 72, 72, 72, 13: 72, 17: 72, 72, 47: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		// 145
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 434, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 433, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 432, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 14: 67, 67, 67, 19: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 60: 67, 67, 67},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 14: 66, 66, 66, 19: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 60: 66, 66, 66},
		// 150
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 14: 65, 65, 65, 19: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 60: 65, 65, 65},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 431, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 15: 426, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 424, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 200: 425},
		{423, 393, 4: 390, 401, 392, 415, 15: 429, 19: 19, 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{19: 428},
		// 155
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 427, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{423, 393, 4: 390, 401, 392, 415, 19: 20, 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 14: 23, 23, 23, 19: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 60: 23, 23, 23},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 21, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 430, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{423, 393, 4: 390, 401, 392, 415, 19: 22, 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		// 160
		{423, 393, 24, 4: 390, 401, 392, 415, 24, 11: 24, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{423, 69, 69, 69, 390, 69, 69, 69, 69, 69, 69, 69, 69, 14: 69, 69, 69, 19: 69, 388, 418, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 420, 69, 69, 69, 69, 69, 69, 419, 69, 69, 69, 60: 69, 69, 69, 95: 389, 416, 421},
		{423, 393, 70, 70, 390, 401, 392, 70, 70, 70, 70, 70, 70, 14: 70, 70, 70, 19: 70, 388, 418, 396, 391, 394, 70, 70, 70, 399, 70, 70, 70, 70, 70, 70, 70, 420, 70, 70, 70, 70, 70, 70, 419, 70, 397, 398, 60: 70, 70, 70, 95: 389, 416, 421},
		{423, 393, 71, 71, 390, 401, 392, 415, 71, 71, 71, 71, 71, 14: 71, 71, 71, 19: 71, 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 60: 71, 71, 71, 95: 389, 416, 421},
		{11: 383, 16: 155, 61: 440, 128: 439},
		// 165
		{423, 393, 154, 4: 390, 401, 392, 415, 154, 154, 154, 154, 154, 14: 154, 154, 154, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 61: 154, 154, 95: 389, 416, 421},
		{16: 438},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 14: 103, 103, 103, 19: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 60: 103, 103, 103},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 442, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{16: 441},
		// 170
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 14: 104, 104, 104, 19: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 60: 104, 104, 104},
		{423, 393, 153, 4: 390, 401, 392, 415, 153, 153, 153, 153, 153, 14: 153, 153, 153, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 60: 153, 153, 153, 95: 389, 416, 421},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 14: 109, 109, 109, 19: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 60: 109, 109, 109},
		{423, 393, 4: 390, 401, 392, 415, 15: 445, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 446, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		// 175
		{423, 393, 128, 128, 390, 401, 392, 415, 128, 128, 128, 128, 128, 14: 128, 128, 128, 19: 128, 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 128, 128, 417, 405, 407, 128, 420, 128, 403, 408, 128, 400, 128, 419, 128, 397, 398, 60: 128, 128, 128, 95: 389, 416, 421},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14: 29, 29, 29, 19: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 60: 29, 29, 29},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 14: 31, 31, 31, 19: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 60: 31, 31, 31},
		{450, 464, 13: 461, 17: 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 467, 453, 452, 457, 186: 468},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 494, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 161: 495},
		// 180
		{450, 464, 13: 461, 17: 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 493, 460, 472, 453, 452, 457, 136: 492},
		{2: 56, 56, 8: 56, 11: 56, 16: 56, 19: 56},
		{2: 55, 55, 8: 55, 11: 55, 16: 55, 19: 55},
		{2: 54, 54, 8: 54, 11: 54, 16: 54, 19: 54},
		{2: 53, 53, 8: 53, 11: 53, 16: 53, 19: 53},
		// 185
		{2: 52, 52, 8: 52, 11: 52, 16: 52, 19: 52},
		{2: 51, 51, 8: 51, 11: 51, 16: 51, 19: 51},
		{2: 50, 50, 8: 50, 11: 50, 16: 50, 19: 50},
		{2: 49, 49, 8: 49, 11: 49, 16: 49, 19: 49},
		{2: 48, 48, 8: 48, 11: 48, 16: 48, 19: 48},
		// 190
		{2: 47, 47, 8: 47, 11: 47, 16: 47, 19: 47, 45},
		{2: 46, 46, 8: 46, 11: 46, 16: 46, 19: 46},
		{20: 490},
		{450, 464, 13: 461, 17: 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 489, 453, 452, 457},
		{3: 475},
		// 195
		{450, 464, 13: 461, 17: 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 474, 453, 452, 457},
		{19: 40},
		{19: 471},
		{450, 464, 13: 461, 17: 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 470, 453, 452, 457},
		{2: 34, 34, 8: 34, 11: 34, 16: 34, 19: 34},
		// 200
		{450, 464, 13: 461, 17: 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 472, 453, 452, 457, 136: 473},
		{2: 39, 39, 8: 39, 11: 39, 16: 39, 19: 39},
		{2: 38, 38, 8: 38, 11: 38, 16: 38, 19: 38},
		{2: 41, 41, 8: 41, 11: 41, 16: 41, 19: 41},
		{8: 279, 13: 8, 100: 8, 121: 278, 127: 281, 131: 477, 213: 476},
		// 205
		{2: 488},
		{13: 375, 66: 478, 100: 479, 137: 481, 212: 480},
		{450, 464, 13: 461, 17: 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 487, 453, 452, 457},
		{13: 375, 66: 485},
		{2: 8, 8: 279, 11: 383, 121: 278, 127: 281, 483, 131: 482},
		// 210
		{2: 36, 8: 36, 11: 36},
		{2: 37},
		{13: 375, 66: 478, 100: 479, 137: 484},
		{2: 35, 8: 35, 11: 35},
		{450, 464, 13: 461, 17: 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 486, 453, 452, 457},
		// 215
		{2: 112, 8: 112, 11: 112, 16: 112},
		{2: 113, 8: 113, 11: 113, 16: 113},
		{2: 42, 42, 8: 42, 11: 42, 16: 42, 19: 42},
		{2: 43, 43, 8: 43, 11: 43, 16: 43, 19: 43},
		{13: 491},
		// 220
		{2: 44, 44, 8: 44, 11: 44, 16: 44, 19: 44},
		{2: 132, 132, 8: 132, 11: 132, 16: 132, 19: 132},
		{450, 464, 13: 461, 17: 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 470, 453, 452, 457},
		{423, 393, 4: 390, 401, 392, 415, 19: 134, 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{19: 496},
		// 225
		{450, 464, 13: 461, 17: 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 472, 453, 452, 457, 136: 497},
		{2: 133, 133, 8: 133, 11: 133, 16: 133, 19: 133},
		{450, 464, 13: 461, 17: 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 499, 453, 452, 457, 211: 500},
		{11: 506, 16: 505},
		{13: 501},
		// 230
		{11: 502},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 503, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{423, 393, 4: 390, 401, 392, 415, 16: 504, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 14: 57, 57, 57, 19: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 60: 57, 57, 57},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 14: 60, 60, 60, 19: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60: 60, 60, 60},
		// 235
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 507, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{423, 393, 4: 390, 401, 392, 415, 11: 509, 16: 508, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 14: 59, 59, 59, 19: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60: 59, 59, 59},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 510, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{423, 393, 4: 390, 401, 392, 415, 16: 511, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		// 240
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 14: 58, 58, 58, 19: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 60: 58, 58, 58},
		{3: 110, 110},
		{4: 514},
		{13: 518, 16: 166, 66: 478, 100: 479, 137: 519, 168: 521, 520, 181: 522, 523, 516, 515, 517},
		{11: 383, 16: 165, 128: 540},
		// 245
		{11: 164, 16: 164, 61: 538},
		{11: 163, 16: 163},
		{16, 16, 11: 162, 13: 16, 16: 162, 16, 16, 61: 162, 98: 16, 16},
		{11: 161, 16: 161},
		{11: 160, 16: 160, 61: 160},
		// 250
		{11: 158, 16: 158},
		{16: 524},
		{16: 61},
		{450, 464, 3: 173, 526, 13: 461, 17: 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 525, 453, 452, 457, 194: 527},
		{3: 172},
		// 255
		{450, 464, 13: 461, 16: 170, 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 534, 453, 452, 457, 195: 532, 533},
		{3: 528, 130: 529},
		{12, 12, 12, 12, 12, 12, 12, 12, 279, 13: 12, 277, 17: 12, 12, 47: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 100: 12, 102: 12, 112: 12, 12, 12, 12, 12, 12, 12, 12, 12, 278, 12, 12, 12, 12, 12, 276, 132: 274, 275, 530},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 14: 64, 64, 64, 19: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 60: 64, 64, 64},
		{2: 531},
		// 260
		{229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 14: 229, 229, 229, 19: 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 60: 229, 229, 229, 162: 229, 164: 229, 167: 229},
		{16: 537},
		{11: 383, 16: 169, 128: 535},
		{11: 168, 16: 168},
		{450, 464, 13: 461, 17: 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 536, 453, 452, 457},
		// 265
		{11: 167, 16: 167},
		{3: 171},
		{450, 464, 13: 461, 16: 62, 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 539, 453, 452, 457},
		{16: 63},
		{13: 518, 66: 478, 100: 479, 137: 519, 168: 542, 541},
		// 270
		{11: 159, 16: 159, 61: 159},
		{11: 157, 16: 157},
		{423, 97, 97, 97, 390, 97, 97, 97, 97, 97, 97, 97, 97, 14: 97, 97, 97, 19: 97, 388, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 60: 97, 97, 97, 95: 389, 416, 421},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 14: 106, 106, 106, 19: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 60: 106, 106, 106},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 546, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		// 275
		{423, 393, 4: 390, 401, 392, 415, 16: 547, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 14: 123, 123, 123, 19: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 60: 123, 123, 123},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 549, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{423, 393, 4: 390, 401, 392, 415, 11: 551, 16: 550, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 14: 125, 125, 125, 19: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 60: 125, 125, 125},
		// 280
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 552, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{423, 393, 4: 390, 401, 392, 415, 16: 553, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 14: 124, 124, 124, 19: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 60: 124, 124, 124},
		{423, 393, 126, 126, 390, 401, 392, 415, 126, 126, 126, 126, 126, 14: 126, 126, 126, 19: 126, 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 126, 126, 417, 405, 407, 126, 420, 126, 403, 408, 126, 400, 126, 419, 126, 397, 398, 60: 126, 126, 126, 95: 389, 416, 421},
		{450, 464, 13: 461, 17: 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 556, 453, 452, 457},
		// 285
		{16: 557},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 14: 127, 127, 127, 19: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 60: 127, 127, 127},
		{423, 393, 4: 390, 401, 392, 415, 11: 145, 15: 140, 19: 145, 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{2: 144, 11: 144, 19: 144},
		{11: 566, 19: 567},
		// 290
		{2: 139, 11: 139, 19: 139},
		{15: 563},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 564, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 135: 565},
		{423, 393, 145, 4: 390, 401, 392, 415, 11: 145, 19: 145, 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{2: 138, 11: 138, 19: 138},
		// 295
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 568, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 135: 561, 143: 562, 569},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 14: 129, 129, 129, 19: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 60: 129, 129, 129},
		{423, 393, 145, 4: 390, 401, 392, 415, 11: 145, 15: 140, 19: 145, 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{2: 143, 11: 143, 19: 143},
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 14: 137, 137, 137, 19: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 60: 137, 137, 137},
		// 300
		{347, 365, 142, 374, 343, 366, 362, 350, 11: 142, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 568, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 135: 561, 143: 562, 559, 163: 572, 192: 573},
		{2: 141, 11: 566},
		{2: 14, 11: 575, 175: 576, 190: 574},
		{2: 577},
		{2: 15},
		// 305
		{2: 13},
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 14: 131, 131, 131, 19: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 60: 131, 131, 131},
		{423, 393, 4: 390, 401, 392, 415, 16: 579, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 14: 146, 146, 146, 19: 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 60: 146, 146, 146},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 581, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		// 310
		{423, 393, 4: 390, 401, 392, 415, 16: 582, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 14: 147, 147, 147, 19: 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 60: 147, 147, 147},
		{450, 464, 13: 461, 16: 584, 451, 371, 63: 455, 458, 456, 98: 466, 465, 101: 459, 103: 463, 454, 462, 469, 460, 586, 453, 452, 457, 176: 585},
		{2: 150, 8: 150, 150, 150, 12: 150, 14: 150, 150},
		{16: 587},
		// 315
		{16: 148},
		{2: 149, 8: 149, 149, 149, 12: 149, 14: 149, 149},
		{423, 393, 3: 589, 390, 401, 392, 415, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{2: 8, 8: 279, 8, 8, 121: 278, 127: 281, 131: 591, 210: 590},
		{2: 606},
		// 320
		{2: 181, 9: 181, 595, 174: 594, 198: 592, 206: 593},
		{2: 176, 9: 603, 207: 602, 601},
		{2: 180, 9: 180, 595, 174: 600},
		{2: 179, 9: 179, 179},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 15: 156, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 436, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 129: 597, 145: 596},
		// 325
		{15: 598},
		{2: 155, 8: 155, 155, 155, 383, 155, 14: 155, 155, 128: 439},
		{12, 12, 12, 12, 12, 12, 12, 12, 279, 12, 12, 13: 12, 277, 17: 12, 12, 47: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 100: 12, 102: 12, 112: 12, 12, 12, 12, 12, 12, 12, 12, 12, 278, 12, 12, 12, 12, 12, 276, 132: 274, 275, 599},
		{2: 177, 9: 177, 177},
		{2: 178, 9: 178, 178},
		// 330
		{2: 182},
		{2: 175},
		{15: 604},
		{12, 12, 12, 12, 12, 12, 12, 12, 279, 13: 12, 277, 17: 12, 12, 47: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 100: 12, 102: 12, 112: 12, 12, 12, 12, 12, 12, 12, 12, 12, 278, 12, 12, 12, 12, 12, 276, 132: 274, 275, 605},
		{2: 174},
		// 335
		{2: 183, 8: 183, 183, 183, 12: 183, 14: 183, 183},
		{2: 8, 8: 279, 8, 8, 121: 278, 127: 281, 131: 609, 203: 608},
		{2: 623},
		{2: 191, 9: 191, 613, 173: 612, 197: 610, 202: 611},
		{2: 186, 9: 620, 204: 619, 618},
		// 340
		{2: 190, 9: 190, 613, 173: 617},
		{2: 189, 9: 189, 189},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 326, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 100: 335, 102: 336, 112: 332, 321, 322, 341, 328, 338, 327, 337, 325, 122: 323, 339, 340, 324, 329, 129: 334, 138: 291, 331, 333, 330, 285, 146: 614, 286, 287, 300, 298, 299, 293, 297, 292, 290, 288, 296, 295, 289, 294},
		{15: 615},
		{12, 12, 12, 12, 12, 12, 12, 12, 279, 12, 12, 13: 12, 277, 17: 12, 12, 47: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 100: 12, 102: 12, 112: 12, 12, 12, 12, 12, 12, 12, 12, 12, 278, 12, 12, 12, 12, 12, 276, 132: 274, 275, 616},
		// 345
		{2: 187, 9: 187, 187},
		{2: 188, 9: 188, 188},
		{2: 192},
		{2: 185},
		{15: 621},
		// 350
		{12, 12, 12, 12, 12, 12, 12, 12, 279, 13: 12, 277, 17: 12, 12, 47: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 100: 12, 102: 12, 112: 12, 12, 12, 12, 12, 12, 12, 12, 12, 278, 12, 12, 12, 12, 12, 276, 132: 274, 275, 622},
		{2: 184},
		{2: 193, 8: 193, 193, 193, 12: 193, 14: 193, 193},
		{14: 212},
		{3: 528, 130: 641},
		// 355
		{423, 393, 3: 197, 390, 401, 392, 415, 11: 154, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 60: 154, 62: 154, 95: 389, 416, 421},
		{16, 16, 3: 16, 16, 16, 16, 16, 11: 635, 20: 16, 634, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 60: 16, 62: 16},
		{14: 629},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 152, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 631, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 171: 630},
		{14: 632},
		// 360
		{423, 393, 3: 151, 390, 401, 392, 415, 14: 151, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 631, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 171: 633},
		{3: 194},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 639, 316, 315, 368, 306, 317, 311, 312, 305, 319, 640, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{13: 636},
		// 365
		{21: 637},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 639, 316, 315, 368, 306, 317, 311, 312, 305, 319, 638, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367},
		{249, 249, 3: 195, 249, 249, 249, 249, 20: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249},
		{423, 393, 4: 390, 401, 392, 415, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		{249, 249, 3: 196, 249, 249, 249, 249, 20: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249},
		// 370
		{2: 198, 8: 198, 198, 198, 12: 198, 14: 198, 198},
		{2: 199, 8: 199, 199, 199, 12: 199, 14: 199, 199},
		{423, 393, 3: 528, 390, 401, 392, 415, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421, 130: 644},
		{2: 202, 8: 202, 202, 202, 12: 202, 14: 202, 202, 164: 646, 188: 645},
		{2: 203, 8: 203, 203, 203, 12: 203, 14: 203, 203},
		// 375
		{3: 528, 102: 336, 130: 648, 138: 647},
		{2: 201, 8: 201, 201, 201, 12: 201, 14: 201, 201},
		{2: 200, 8: 200, 200, 200, 12: 200, 14: 200, 200},
		{11: 383, 62: 650, 128: 439},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 436, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 129: 651},
		// 380
		{2: 206, 8: 206, 206, 206, 383, 206, 14: 206, 206, 128: 439},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 436, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 129: 655},
		{205, 205, 3: 205, 205, 205, 205, 205, 13: 205, 17: 205, 205, 47: 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
		{204, 204, 3: 204, 204, 204, 204, 204, 13: 204, 17: 204, 204, 47: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204},
		{2: 207, 8: 207, 207, 207, 383, 207, 14: 207, 207, 128: 439},
		// 385
		{11: 383, 60: 658, 128: 659},
		{11: 18, 60: 18},
		{347, 365, 3: 374, 343, 366, 362, 350, 13: 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 436, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 129: 661},
		{13: 375, 66: 660},
		{11: 17, 60: 17},
		// 390
		{2: 209, 8: 209, 209, 209, 383, 209, 14: 209, 209, 128: 439},
		{162: 663},
		{3: 111, 13: 512, 172: 664},
		{3: 528, 130: 665},
		{2: 215, 8: 215, 215, 215, 12: 215, 14: 215, 215, 167: 667, 193: 666},
		// 395
		{2: 216, 8: 216, 216, 216, 12: 216, 14: 216, 216},
		{3: 528, 130: 668},
		{2: 214, 8: 214, 214, 214, 12: 214, 14: 214, 214},
		{234, 234, 107, 4: 234, 234, 234, 234, 107, 107, 107, 12: 107, 14: 107, 107, 20: 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234},
		{233, 233, 108, 4: 233, 233, 233, 233, 108, 108, 108, 12: 108, 14: 108, 108, 20: 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233},
		// 400
		{2: 217, 8: 217, 217, 217, 12: 217, 14: 217, 217},
		{2: 218, 8: 218, 218, 218, 12: 218, 14: 218, 218},
		{3: 528, 130: 674},
		{2: 220, 8: 220, 220, 220, 12: 220, 14: 220, 220},
		{423, 393, 221, 4: 390, 401, 392, 415, 221, 221, 221, 12: 221, 14: 221, 221, 20: 388, 418, 396, 391, 394, 406, 404, 387, 399, 402, 413, 412, 417, 405, 407, 410, 420, 411, 403, 408, 414, 400, 409, 419, 395, 397, 398, 95: 389, 416, 421},
		// 405
		{2: 222, 8: 222, 222, 222, 12: 222, 14: 222, 222},
		{2: 228, 8: 228, 228, 228, 12: 228, 14: 228, 228},
		{2: 223, 8: 223, 223, 223, 12: 223, 14: 223, 223},
		{2: 225, 8: 225, 225, 225, 12: 225, 14: 225, 225},
		{2: 268, 9: 268, 268, 12: 268},
		// 410
		{347, 365, 11, 374, 343, 366, 362, 350, 9: 11, 11, 12: 11, 375, 17: 348, 371, 47: 363, 364, 352, 351, 358, 369, 342, 370, 349, 359, 354, 355, 357, 63: 345, 372, 346, 360, 373, 302, 356, 326, 316, 315, 368, 306, 317, 311, 312, 305, 319, 301, 307, 303, 353, 309, 313, 361, 318, 308, 310, 314, 320, 304, 344, 367, 100: 335, 102: 336, 112: 332, 321, 322, 341, 328, 338, 327, 337, 325, 122: 323, 339, 340, 324, 329, 129: 334, 138: 291, 331, 333, 330, 285, 146: 682, 286, 287, 300, 298, 299, 293, 297, 292, 290, 288, 296, 295, 289, 294},
		{2: 266, 8: 266, 266, 266, 12: 266, 14: 266},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 216

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmt
			}
		}
	case 2:
		{
			yyVAL.stmt = nil
		}
	case 3:
		{
			yyVAL.stmt = yyS[yypt-1].stmtsStmt
		}
	case 4:
		{
			yyVAL.stmtsStmt = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 5:
		{
			yyS[yypt-2].stmtsStmt.Stmts = append(yyS[yypt-2].stmtsStmt.Stmts, yyS[yypt-0].stmt)
		}
	case 42:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 44:
		{
			yyVAL.stmt = &ast.LabelStmt{Name: yyS[yypt-2].tok.Lit, Stmt: yyS[yypt-0].stmt}
		}
	case 45:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 46:
		{
			yyVAL.stmt = &ast.BreakStmt{Label: yyS[yypt-0].tok.Lit}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 47:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 48:
		{
			yyVAL.stmt = &ast.ContinueStmt{Label: yyS[yypt-0].tok.Lit}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 49:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprsExpr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 50:
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 51:
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyS[yypt-1].tok.Lit, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 52:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 53:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Go = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Go = true
			}
			yyVAL.stmt = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 54:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Defer = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Defer = true
			}
			yyVAL.stmt = &ast.DeferStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 55:
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyS[yypt-4].stmt, Var: yyS[yypt-2].opt_ident.Lit, Catch: yyS[yypt-1].stmt, Finally: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 56:
		{
			yyVAL.stmt = nil
		}
	case 57:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 58:
		{
			yyVAL.stmt = nil
		}
	case 59:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 62:
		{
			isItem := false
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprsExpr.Exprs) == 1 {
				if _, ok := yyS[yypt-0].exprsExpr.Exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					arr := &ast.ExprsExpr{}
					for _, el := range yyS[yypt-2].expr_idents {
						arr.Exprs = append(arr.Exprs, &ast.IdentExpr{Lit: el})
					}
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: arr, Rhs: yyS[yypt-0].exprsExpr.Exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprsExpr.Exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprsExpr.Exprs) && !(len(yyS[yypt-0].exprsExpr.Exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprsExpr.Exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 63:
		{
			lhs := yyS[yypt-0].stmt_lets_helper.Exprs1
			rhs := yyS[yypt-0].stmt_lets_helper.Exprs2
			isItem := false
			if len(lhs.Exprs) == 2 && len(rhs.Exprs) == 1 {
				if _, ok := rhs.Exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: lhs, Rhs: rhs.Exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.LetsStmt{Lhss: lhs, Operator: "=", Rhss: rhs, Typed: yyS[yypt-0].stmt_lets_helper.Typed, Mutable: yyS[yypt-0].stmt_lets_helper.Mutable}
				if len(lhs.Exprs) != len(rhs.Exprs) && !(len(rhs.Exprs) == 1 && len(lhs.Exprs) > len(rhs.Exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(lhs.Exprs[0].Position())
		}
	case 64:
		{
			yyVAL.stmt_lets_helper = struct {
				Exprs1, Exprs2 *ast.ExprsExpr
				Typed, Mutable bool
			}{Exprs1: yyS[yypt-2].exprsExpr, Exprs2: yyS[yypt-0].exprsExpr, Typed: yyS[yypt-1].op_lets, Mutable: false}
		}
	case 65:
		{
			yyVAL.stmt_lets_helper = struct {
				Exprs1, Exprs2 *ast.ExprsExpr
				Typed, Mutable bool
			}{Exprs1: yyS[yypt-2].exprsExpr, Exprs2: yyS[yypt-0].exprsExpr, Typed: true, Mutable: true}
		}
	case 66:
		{
			yyVAL.op_lets = true
		}
	case 67:
		{
			yyVAL.op_lets = false
		}
	case 68:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-2].expr, Then: yyS[yypt-1].stmt, Else: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 69:
		{
			yyVAL.stmt = nil
		}
	case 70:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 71:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 72:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 73:
		{
			if el, ok := yyS[yypt-1].stmt.(*ast.LoopStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			} else if el, ok := yyS[yypt-1].stmt.(*ast.ForStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			} else if el, ok := yyS[yypt-1].stmt.(*ast.CForStmt); ok {
				el.Stmt = yyS[yypt-0].stmt
			}
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 74:
		{
			yyVAL.stmt = &ast.LoopStmt{Expr: yyS[yypt-0].expr}
		}
	case 75:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: []string{yyS[yypt-2].tok.Lit}, Value: yyS[yypt-0].expr}
		}
	case 76:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: []string{yyS[yypt-4].tok.Lit, yyS[yypt-2].tok.Lit}, Value: yyS[yypt-0].expr}
		}
	case 77:
		{
			yyVAL.stmt = &ast.CForStmt{Stmt1: yyS[yypt-4].stmt, Expr2: yyS[yypt-2].expr, Expr3: yyS[yypt-0].expr}
		}
	case 78:
		{
			yyVAL.stmt = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 79:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{Cases: yyS[yypt-1].stmts, Default: yyS[yypt-0].stmt}
		}
	case 80:
		{
			yyVAL.stmts = nil
		}
	case 81:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 82:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 83:
		{
			yyVAL.stmts = append(yyVAL.stmts, yyS[yypt-0].stmt)
		}
	case 84:
		{
			yyVAL.stmt = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 85:
		{
			yyVAL.stmt = nil
		}
	case 86:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 87:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 88:
		{
			yyS[yypt-1].stmt.(*ast.SwitchStmt).Expr = yyS[yypt-3].expr
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 89:
		{
			yyVAL.stmt = &ast.SwitchStmt{Cases: yyS[yypt-1].stmts, Default: yyS[yypt-0].stmt}
		}
	case 90:
		{
			yyVAL.stmts = nil
		}
	case 91:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 92:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 93:
		{
			yyVAL.stmts = append(yyVAL.stmts, yyS[yypt-0].stmt)
		}
	case 94:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].exprsExpr, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 95:
		{
			yyVAL.stmt = nil
		}
	case 96:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 97:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 98:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 99:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 100:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents
		}
	case 101:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{}
		}
	case 102:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-0].opt_func_return_expr_idents
		}
	case 103:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 104:
		{
			yyVAL.opt_func_return_expr_idents = append(yyS[yypt-2].opt_func_return_expr_idents, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 105:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 106:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents
		}
	case 109:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 110:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].expr_typed_ident.Name, TypeData: yyS[yypt-0].expr_typed_ident.TypeData}
		}
	case 111:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 112:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 113:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 114:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 115:
		{
			yyVAL.exprsExpr = &ast.ExprsExpr{Exprs: []ast.Expr{}}
		}
	case 116:
		{
			yyVAL.exprsExpr = yyS[yypt-0].exprsExpr
		}
	case 117:
		{
			yyVAL.exprsExpr = &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 118:
		{
			yyS[yypt-2].exprsExpr.Exprs = append(yyS[yypt-2].exprsExpr.Exprs, yyS[yypt-0].expr)
		}
	case 119:
		{
			yyVAL.expr = nil
		}
	case 120:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 121:
		{
			yyVAL.stmt = &ast.DbgStmt{Expr: nil}
			yyVAL.stmt.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 122:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 123:
		{
			yyVAL.stmt = &ast.DbgStmt{TypeData: yyS[yypt-0].type_data}
		}
	case 124:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 125:
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 127:
		{
			yyVAL.exprsExpr = &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 128:
		{
			yyS[yypt-2].exprsExpr.Exprs = append(yyS[yypt-2].exprsExpr.Exprs, yyS[yypt-0].expr)
		}
	case 129:
		{
			yyVAL.exprsExpr = nil
		}
	case 130:
		{
			yyVAL.exprsExpr = yyS[yypt-0].exprsExpr
		}
	case 132:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 133:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 134:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeSlice {
				yyVAL.expr = &ast.ArrayExpr{TypeData: yyS[yypt-1].type_data, Exprs: yyS[yypt-0].expr.(*ast.ExprsExpr)}
			} else {
				yyVAL.expr = yyS[yypt-0].expr
			}
		}
	case 138:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 139:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data}
		}
	case 140:
		{
			yyVAL.expr = yyS[yypt-2].exprsExpr
		}
	case 141:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: &ast.ExprsExpr{Exprs: []ast.Expr{}}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 142:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprsExpr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 143:
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 144:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 145:
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 146:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 147:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 148:
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 149:
		{
			yyVAL.expr = yyS[yypt-0].expr
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 150:
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 151:
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 152:
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 158:
		{
			typeData := yyS[yypt-0].type_data
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: typeData}
		}
	case 159:
		{
			typeData := yyS[yypt-0].type_data
			typeData.Mutable = true
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: typeData}
		}
	case 160:
		{
			yyVAL.opt_ident = nil
		}
	case 161:
		{
			yyVAL.opt_ident = &yyS[yypt-0].tok
		}
	case 162:
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 165:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 166:
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyS[yypt-1].expr, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 167:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  *ast.ExprsExpr
				VarArg bool
			}{Exprs: yyS[yypt-2].exprsExpr, VarArg: true}
		}
	case 168:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  *ast.ExprsExpr
				VarArg bool
			}{Exprs: yyS[yypt-1].exprsExpr}
		}
	case 169:
		{
			yyVAL.str = "-"
		}
	case 170:
		{
			yyVAL.str = "!"
		}
	case 171:
		{
			yyVAL.str = "^"
		}
	case 172:
		{
			yyVAL.str = "*"
		}
	case 173:
		{
			yyVAL.str = "&"
		}
	case 174:
		{
			if yyS[yypt-1].str == "&" {
				if el, ok := yyS[yypt-0].expr.(*ast.IdentExpr); ok {
					yyVAL.expr = &ast.AddrExpr{Expr: el}
				} else if el, ok := yyS[yypt-0].expr.(*ast.MemberExpr); ok {
					yyVAL.expr = el
				}
			} else if yyS[yypt-1].str == "*" {
				yyVAL.expr = &ast.DerefExpr{Expr: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.UnaryExpr{Operator: yyS[yypt-1].str, Expr: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 175:
		{
			yyVAL.str = "+"
		}
	case 176:
		{
			yyVAL.str = "-"
		}
	case 177:
		{
			yyVAL.str = "*"
		}
	case 178:
		{
			yyVAL.str = "/"
		}
	case 179:
		{
			yyVAL.str = "**"
		}
	case 180:
		{
			yyVAL.str = "%"
		}
	case 181:
		{
			yyVAL.str = "<<"
		}
	case 182:
		{
			yyVAL.str = ">>"
		}
	case 183:
		{
			yyVAL.str = "|"
		}
	case 184:
		{
			yyVAL.str = "||"
		}
	case 185:
		{
			yyVAL.str = "&"
		}
	case 186:
		{
			yyVAL.str = "&&"
		}
	case 187:
		{
			yyVAL.str = "!="
		}
	case 188:
		{
			yyVAL.str = ">"
		}
	case 189:
		{
			yyVAL.str = ">="
		}
	case 190:
		{
			yyVAL.str = "<"
		}
	case 191:
		{
			yyVAL.str = "<="
		}
	case 192:
		{
			yyVAL.str = "??"
		}
	case 193:
		{
			yyVAL.str = "+="
		}
	case 194:
		{
			yyVAL.str = "-="
		}
	case 195:
		{
			yyVAL.str = "*="
		}
	case 196:
		{
			yyVAL.str = "/="
		}
	case 197:
		{
			yyVAL.str = "&="
		}
	case 198:
		{
			yyVAL.str = "|="
		}
	case 199:
		{
			yyVAL.str = "<-"
		}
	case 200:
		{
			if yyS[yypt-1].str == "??" {
				yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "<-" {
				yyVAL.expr = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "+=" ||
				yyS[yypt-1].str == "-=" ||
				yyS[yypt-1].str == "*=" ||
				yyS[yypt-1].str == "/=" ||
				yyS[yypt-1].str == "&=" ||
				yyS[yypt-1].str == "|=" {
				yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 201:
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 202:
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 204:
		{
			yyVAL.str = "++"
		}
	case 205:
		{
			yyVAL.str = "--"
		}
	case 206:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: yyS[yypt-0].str}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 207:
		{
			f := &ast.FuncExpr{Params: yyS[yypt-3].func_expr_args.Params, Returns: yyS[yypt-1].opt_func_return_expr_idents, Stmt: yyS[yypt-0].stmt, VarArg: yyS[yypt-3].func_expr_args.VarArg}
			if yyS[yypt-3].func_expr_args.TypeData != nil {
				f.Params[len(f.Params)-1].TypeData = yyS[yypt-3].func_expr_args.TypeData
			}
			if yyS[yypt-5].opt_ident != nil {
				f.Name = yyS[yypt-5].opt_ident.Lit
			}
			yyVAL.expr = f
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 208:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-2].func_expr_idents, VarArg: true, TypeData: yyS[yypt-0].type_data}
		}
	case 209:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-1].func_expr_idents, VarArg: true, TypeData: nil}
		}
	case 210:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-0].func_expr_idents, VarArg: false, TypeData: nil}
		}
	case 211:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 212:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 213:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 214:
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 224:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 225:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 227:
		{
			yyVAL.type_data = &ast.TypeStruct{Env: []string{yyS[yypt-2].tok.Lit}, Name: yyS[yypt-0].tok.Lit}
		}
	case 228:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 229:
		{
			yyVAL.type_data = yyS[yypt-1].type_data
		}
	case 230:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 233:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 234:
		{
			yyVAL.type_data = yyS[yypt-1].type_data
		}
	case 235:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-0].expr_typed_ident.Name}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].expr_typed_ident.TypeData}}
		}
	case 236:
		{
			if yyS[yypt-2].type_data == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data.StructNames = append(yyVAL.type_data.StructNames, yyS[yypt-0].expr_typed_ident.Name)
			yyVAL.type_data.StructTypes = append(yyVAL.type_data.StructTypes, yyS[yypt-0].expr_typed_ident.TypeData)
		}
	case 237:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 238:
		{
			yyVAL.slice_count = 1
		}
	case 239:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 240:
		{
			yyS[yypt-0].expr_map.TypeData = yyS[yypt-1].type_data
			yyVAL.expr = yyS[yypt-0].expr_map
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_map.Position())
		}
	case 241:
		{
			yyVAL.expr = yyS[yypt-0].expr_map
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_map.Position())
		}
	case 242:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map
		}
	case 243:
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: &ast.ExprsExpr{Exprs: []ast.Expr{}}, Values: &ast.ExprsExpr{Exprs: []ast.Expr{}}}
		}
	case 244:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map
		}
	case 245:
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].exprs[0]}}, Values: &ast.ExprsExpr{Exprs: []ast.Expr{yyS[yypt-0].exprs[1]}}}
		}
	case 246:
		{
			yyVAL.expr_map.Keys.Exprs = append(yyVAL.expr_map.Keys.Exprs, yyS[yypt-0].exprs[0])
			yyVAL.expr_map.Values.Exprs = append(yyVAL.expr_map.Values.Exprs, yyS[yypt-0].exprs[1])
		}
	case 247:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 248:
		{
			if el, ok := yyS[yypt-1].expr.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-3].expr
			} else if el, ok := yyS[yypt-1].expr.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-3].expr
			}
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 249:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: yyS[yypt-0].expr}
		}
	case 250:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-1].expr, End: nil}
		}
	case 251:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: nil, End: yyS[yypt-0].expr}
		}
	case 252:
		{
			yyVAL.expr = &ast.ItemExpr{Index: yyS[yypt-0].expr}
		}
	case 253:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].expr.(*ast.IdentExpr).Lit}
		}
	case 254:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].expr.(*ast.IdentExpr).Lit)
		}
	case 255:
		{
			yyVAL.expr = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-0].tok.Position())
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
