// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:54
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             ast.Stmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_unary                    ast.Expr
	expr_binary                   ast.Expr
	expr_member_or_ident          ast.Expr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"','",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1175

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	61, 90,
	62, 90,
	80, 6,
	81, 90,
	-2, 2,
	-1, 24,
	81, 91,
	-2, 20,
	-1, 70,
	61, 90,
	62, 90,
	81, 90,
	-2, 6,
	-1, 119,
	16, 72,
	81, 72,
	-2, 197,
	-1, 127,
	4, 186,
	51, 186,
	58, 186,
	59, 186,
	-2, 104,
	-1, 157,
	1, 137,
	8, 137,
	47, 137,
	48, 137,
	61, 137,
	62, 137,
	63, 137,
	76, 137,
	77, 137,
	79, 137,
	80, 137,
	81, 137,
	83, 137,
	86, 137,
	-2, 132,
	-1, 159,
	1, 139,
	8, 139,
	47, 139,
	48, 139,
	61, 139,
	62, 139,
	63, 139,
	76, 139,
	77, 139,
	79, 139,
	80, 139,
	81, 139,
	83, 139,
	86, 139,
	-2, 132,
	-1, 259,
	79, 177,
	84, 177,
	-2, 197,
	-1, 289,
	63, 6,
	-2, 90,
	-1, 294,
	77, 211,
	83, 211,
	-2, 203,
	-1, 311,
	77, 211,
	-2, 203,
	-1, 318,
	1, 93,
	8, 93,
	47, 93,
	48, 93,
	61, 93,
	62, 93,
	63, 93,
	77, 93,
	79, 93,
	80, 93,
	81, 93,
	83, 93,
	86, 93,
	-2, 132,
	-1, 319,
	1, 138,
	8, 138,
	47, 138,
	48, 138,
	61, 138,
	62, 138,
	63, 138,
	76, 138,
	77, 138,
	79, 138,
	80, 138,
	81, 138,
	83, 138,
	86, 138,
	-2, 133,
	-1, 320,
	1, 140,
	8, 140,
	47, 140,
	48, 140,
	61, 140,
	62, 140,
	63, 140,
	76, 140,
	77, 140,
	79, 140,
	80, 140,
	81, 140,
	83, 140,
	86, 140,
	-2, 133,
	-1, 365,
	1, 22,
	47, 22,
	48, 22,
	63, 22,
	77, 22,
	80, 22,
	86, 22,
	-2, 110,
	-1, 367,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	77, 24,
	80, 24,
	86, 24,
	-2, 112,
	-1, 369,
	1, 26,
	47, 26,
	48, 26,
	63, 26,
	77, 26,
	80, 26,
	86, 26,
	-2, 110,
	-1, 371,
	1, 28,
	47, 28,
	48, 28,
	63, 28,
	77, 28,
	80, 28,
	86, 28,
	-2, 112,
	-1, 372,
	77, 209,
	83, 209,
	-2, 204,
	-1, 421,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	77, 21,
	80, 21,
	86, 21,
	-2, 109,
	-1, 422,
	1, 23,
	47, 23,
	48, 23,
	63, 23,
	77, 23,
	80, 23,
	86, 23,
	-2, 111,
	-1, 423,
	1, 25,
	47, 25,
	48, 25,
	63, 25,
	77, 25,
	80, 25,
	86, 25,
	-2, 109,
	-1, 424,
	1, 27,
	47, 27,
	48, 27,
	63, 27,
	77, 27,
	80, 27,
	86, 27,
	-2, 111,
}

const yyPrivate = 57344

const yyLast = 4337

var yyAct = [...]int16{
	2, 253, 145, 355, 250, 388, 295, 8, 286, 287,
	356, 10, 85, 358, 357, 72, 9, 248, 247, 6,
	48, 289, 288, 311, 428, 9, 294, 127, 9, 9,
	9, 9, 432, 221, 477, 237, 107, 108, 92, 222,
	222, 222, 47, 36, 38, 85, 128, 66, 14, 59,
	15, 28, 9, 29, 331, 222, 332, 211, 140, 222,
	9, 52, 39, 40, 41, 373, 16, 30, 228, 107,
	108, 92, 93, 94, 82, 131, 12, 13, 83, 72,
	86, 131, 165, 31, 32, 157, 159, 33, 34, 137,
	68, 56, 370, 50, 58, 57, 54, 131, 67, 439,
	89, 90, 91, 111, 222, 92, 61, 82, 63, 65,
	225, 83, 64, 86, 55, 204, 45, 445, 222, 328,
	43, 212, 135, 62, 222, 214, 368, 131, 135, 134,
	136, 263, 375, 222, 143, 134, 136, 72, 309, 222,
	330, 82, 132, 206, 135, 83, 235, 86, 132, 390,
	398, 134, 136, 137, 366, 307, 244, 74, 463, 137,
	222, 24, 364, 371, 132, 153, 471, 264, 472, 266,
	151, 152, 443, 75, 135, 137, 153, 143, 153, 241,
	323, 134, 136, 144, 424, 423, 113, 116, 139, 121,
	153, 124, 126, 422, 132, 421, 522, 369, 207, 153,
	394, 378, 391, 138, 273, 137, 254, 301, 207, 277,
	276, 338, 321, 72, 146, 217, 284, 215, 268, 154,
	155, 156, 158, 160, 297, 367, 162, 153, 24, 131,
	300, 164, 521, 365, 163, 153, 169, 170, 171, 172,
	44, 174, 176, 177, 310, 179, 180, 181, 182, 183,
	184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
	194, 195, 196, 197, 198, 318, 148, 199, 200, 201,
	202, 308, 326, 325, 147, 210, 135, 519, 302, 346,
	153, 142, 159, 134, 136, 133, 141, 410, 359, 269,
	515, 153, 514, 513, 361, 360, 132, 244, 231, 233,
	161, 363, 517, 238, 72, 239, 240, 137, 508, 506,
	501, 500, 492, 486, 385, 382, 483, 482, 481, 466,
	465, 256, 460, 454, 452, 265, 393, 451, 450, 449,
	431, 418, 402, 272, 384, 345, 399, 342, 7, 336,
	334, 283, 274, 512, 401, 71, 510, 167, 403, 404,
	497, 406, 495, 475, 473, 458, 435, 412, 414, 411,
	227, 166, 122, 419, 275, 413, 120, 279, 219, 282,
	420, 415, 362, 133, 133, 511, 133, 60, 502, 427,
	72, 425, 129, 133, 115, 133, 358, 357, 289, 288,
	305, 353, 73, 238, 129, 441, 11, 438, 440, 77,
	442, 395, 317, 322, 258, 133, 453, 489, 455, 456,
	168, 252, 459, 5, 377, 3, 461, 344, 70, 160,
	69, 464, 333, 320, 319, 337, 118, 298, 178, 339,
	150, 467, 76, 1, 49, 468, 470, 376, 349, 351,
	436, 251, 249, 46, 149, 474, 389, 24, 37, 476,
	51, 53, 42, 205, 35, 285, 21, 354, 484, 485,
	173, 129, 379, 487, 488, 20, 133, 18, 17, 219,
	386, 22, 23, 387, 494, 493, 496, 19, 26, 27,
	25, 4, 129, 498, 0, 0, 0, 0, 0, 0,
	397, 130, 129, 133, 0, 0, 507, 504, 509, 133,
	0, 0, 258, 0, 490, 0, 220, 0, 0, 0,
	409, 516, 0, 518, 0, 0, 416, 230, 520, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 433, 0, 0, 129, 0, 0, 0,
	133, 0, 129, 0, 0, 0, 448, 0, 0, 296,
	129, 0, 133, 133, 0, 0, 129, 0, 0, 0,
	0, 133, 0, 0, 0, 0, 296, 0, 0, 223,
	224, 0, 226, 0, 0, 0, 0, 0, 0, 234,
	0, 236, 0, 290, 291, 292, 293, 0, 0, 0,
	0, 0, 0, 0, 0, 479, 0, 0, 0, 0,
	257, 262, 0, 0, 0, 0, 133, 205, 133, 316,
	0, 0, 0, 0, 129, 0, 238, 491, 0, 0,
	0, 133, 133, 372, 0, 133, 133, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 296, 0, 0,
	372, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 299, 0, 0, 374, 0, 0, 0, 0,
	133, 0, 0, 0, 133, 0, 133, 205, 0, 205,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 324,
	0, 0, 0, 0, 0, 329, 0, 0, 223, 0,
	0, 0, 0, 296, 0, 129, 0, 0, 133, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	133, 0, 0, 0, 133, 0, 417, 85, 95, 96,
	98, 100, 110, 112, 0, 0, 0, 205, 81, 0,
	0, 0, 0, 0, 0, 0, 383, 0, 0, 0,
	0, 107, 108, 92, 93, 94, 0, 129, 0, 392,
	0, 129, 0, 0, 84, 0, 0, 396, 0, 0,
	0, 0, 0, 0, 0, 80, 99, 97, 87, 88,
	109, 0, 89, 90, 91, 111, 0, 0, 0, 82,
	0, 0, 0, 83, 0, 86, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 426, 0, 429, 0, 0, 0, 0, 296,
	0, 0, 0, 0, 0, 0, 0, 437, 0, 0,
	0, 0, 444, 0, 0, 85, 95, 96, 98, 100,
	110, 112, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 101, 102, 103, 104, 105, 106, 0, 0, 107,
	108, 92, 93, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	78, 79, 478, 80, 99, 97, 87, 88, 109, 0,
	89, 90, 91, 111, 0, 208, 0, 82, 0, 0,
	0, 83, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 85, 95, 96, 98,
	100, 110, 112, 0, 0, 0, 503, 81, 0, 0,
	505, 0, 101, 102, 103, 104, 105, 106, 0, 0,
	107, 108, 92, 93, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 99, 97, 87, 88, 109,
	0, 89, 90, 91, 111, 0, 0, 0, 82, 446,
	0, 447, 83, 0, 86, 85, 95, 96, 98, 100,
	110, 112, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 101, 102, 103, 104, 105, 106, 0, 0, 107,
	108, 92, 93, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 99, 97, 87, 88, 109, 0,
	89, 90, 91, 111, 0, 0, 0, 82, 314, 0,
	315, 83, 0, 86, 85, 95, 96, 98, 100, 110,
	112, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	101, 102, 103, 104, 105, 106, 0, 0, 107, 108,
	92, 93, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 304, 80, 99, 97, 87, 88, 109, 0, 89,
	90, 91, 111, 0, 0, 0, 82, 0, 0, 0,
	83, 303, 86, 85, 95, 96, 98, 100, 110, 112,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 101,
	102, 103, 104, 105, 106, 0, 0, 107, 108, 92,
	93, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	271, 80, 99, 97, 87, 88, 109, 0, 89, 90,
	91, 111, 0, 0, 0, 82, 0, 0, 0, 83,
	270, 86, 85, 95, 96, 98, 100, 110, 112, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 101, 102,
	103, 104, 105, 106, 0, 0, 107, 108, 92, 93,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 78, 79, 0,
	80, 99, 97, 87, 88, 109, 0, 89, 90, 91,
	111, 0, 0, 0, 82, 0, 0, 0, 83, 0,
	86, 85, 95, 96, 98, 100, 110, 112, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 101, 102, 103,
	104, 105, 106, 0, 0, 107, 108, 92, 93, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	99, 97, 87, 88, 109, 0, 89, 90, 91, 111,
	0, 0, 0, 82, 499, 0, 0, 83, 0, 86,
	85, 95, 96, 98, 100, 110, 112, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 101, 102, 103, 104,
	105, 106, 0, 0, 107, 108, 92, 93, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 99,
	97, 87, 88, 109, 0, 89, 90, 91, 111, 0,
	0, 0, 82, 480, 0, 0, 83, 0, 86, 85,
	95, 96, 98, 100, 110, 112, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 101, 102, 103, 104, 105,
	106, 0, 0, 107, 108, 92, 93, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 469, 80, 99, 97,
	87, 88, 109, 0, 89, 90, 91, 111, 0, 0,
	0, 82, 0, 0, 0, 83, 0, 86, 85, 95,
	96, 98, 100, 110, 112, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 101, 102, 103, 104, 105, 106,
	0, 0, 107, 108, 92, 93, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 462, 80, 99, 97, 87,
	88, 109, 0, 89, 90, 91, 111, 0, 0, 0,
	82, 0, 0, 0, 83, 0, 86, 85, 95, 96,
	98, 100, 110, 112, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 101, 102, 103, 104, 105, 106, 0,
	0, 107, 108, 92, 93, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 99, 97, 87, 88,
	109, 0, 89, 90, 91, 111, 0, 457, 0, 82,
	0, 0, 0, 83, 0, 86, 85, 95, 96, 98,
	100, 110, 112, 0, 0, 0, 0, 81, 0, 0,
	0, 0, 101, 102, 103, 104, 105, 106, 0, 0,
	107, 108, 92, 93, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 99, 97, 87, 88, 109,
	0, 89, 90, 91, 111, 0, 0, 0, 82, 434,
	0, 0, 83, 0, 86, 85, 95, 96, 98, 100,
	110, 112, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 101, 102, 103, 104, 105, 106, 0, 0, 107,
	108, 92, 93, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 99, 97, 87, 88, 109, 0,
	89, 90, 91, 111, 0, 0, 0, 82, 0, 0,
	0, 83, 430, 86, 85, 95, 96, 98, 100, 110,
	112, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	101, 102, 103, 104, 105, 106, 0, 0, 107, 108,
	92, 93, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 99, 97, 87, 88, 109, 0, 89,
	90, 91, 111, 0, 407, 0, 82, 0, 0, 0,
	83, 0, 86, 85, 95, 96, 98, 100, 110, 112,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 101,
	102, 103, 104, 105, 106, 0, 0, 107, 108, 92,
	93, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 99, 97, 87, 88, 109, 0, 89, 90,
	91, 111, 0, 405, 0, 82, 0, 0, 0, 83,
	0, 86, 85, 95, 96, 98, 100, 110, 112, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 101, 102,
	103, 104, 105, 106, 0, 0, 107, 108, 92, 93,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 99, 97, 87, 88, 109, 0, 89, 90, 91,
	111, 0, 0, 0, 82, 0, 0, 0, 83, 400,
	86, 85, 95, 96, 98, 100, 110, 112, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 101, 102, 103,
	104, 105, 106, 0, 0, 107, 108, 92, 93, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	99, 97, 87, 88, 109, 0, 89, 90, 91, 111,
	0, 0, 0, 82, 0, 0, 0, 83, 381, 86,
	85, 95, 96, 98, 100, 110, 112, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 101, 102, 103, 104,
	105, 106, 0, 0, 107, 108, 92, 93, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 80, 99,
	97, 87, 88, 109, 0, 89, 90, 91, 111, 0,
	0, 0, 82, 0, 352, 0, 83, 0, 86, 85,
	95, 96, 98, 100, 110, 112, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 101, 102, 103, 104, 105,
	106, 0, 0, 107, 108, 92, 93, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 99, 97,
	87, 88, 109, 0, 89, 90, 91, 111, 0, 347,
	0, 82, 0, 0, 0, 83, 0, 86, 85, 95,
	96, 98, 100, 110, 112, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 101, 102, 103, 104, 105, 106,
	0, 0, 107, 108, 92, 93, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 99, 97, 87,
	88, 109, 0, 89, 90, 91, 111, 0, 343, 0,
	82, 0, 0, 0, 83, 0, 86, 85, 95, 96,
	98, 100, 110, 112, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 101, 102, 103, 104, 105, 106, 0,
	0, 107, 108, 92, 93, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 99, 97, 87, 88,
	109, 0, 89, 90, 91, 111, 0, 0, 0, 82,
	0, 0, 0, 83, 341, 86, 85, 95, 96, 98,
	100, 110, 112, 0, 0, 0, 0, 81, 0, 0,
	0, 0, 101, 102, 103, 104, 105, 106, 0, 0,
	107, 108, 92, 93, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 99, 97, 87, 88, 109,
	0, 89, 90, 91, 111, 0, 335, 0, 82, 0,
	0, 0, 83, 0, 86, 85, 95, 96, 98, 100,
	110, 112, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 101, 102, 103, 104, 105, 106, 0, 0, 107,
	108, 92, 93, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 99, 97, 87, 88, 109, 0,
	89, 90, 91, 111, 0, 0, 0, 82, 327, 0,
	0, 83, 0, 86, 85, 95, 96, 98, 100, 110,
	112, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	101, 102, 103, 104, 105, 106, 0, 0, 107, 108,
	92, 93, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 99, 97, 87, 88, 109, 0, 89,
	90, 91, 111, 0, 0, 0, 82, 313, 0, 0,
	83, 0, 86, 85, 95, 96, 98, 100, 110, 112,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 101,
	102, 103, 104, 105, 106, 0, 0, 107, 108, 92,
	93, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	312, 80, 99, 97, 87, 88, 109, 0, 89, 90,
	91, 111, 0, 0, 0, 82, 0, 0, 0, 83,
	0, 86, 85, 95, 96, 98, 100, 110, 112, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 101, 102,
	103, 104, 105, 106, 0, 0, 107, 108, 92, 93,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 99, 97, 87, 88, 109, 0, 89, 90, 91,
	111, 0, 0, 0, 82, 306, 0, 0, 83, 0,
	86, 85, 95, 96, 98, 100, 110, 112, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 101, 102, 103,
	104, 105, 106, 0, 0, 107, 108, 92, 93, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	99, 97, 87, 88, 109, 0, 89, 90, 91, 111,
	0, 0, 0, 82, 0, 280, 0, 83, 0, 86,
	85, 95, 96, 98, 100, 110, 112, 0, 0, 0,
	0, 81, 0, 0, 0, 0, 101, 102, 103, 104,
	105, 106, 0, 0, 107, 108, 92, 93, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 80, 99,
	97, 87, 88, 109, 0, 89, 90, 91, 111, 0,
	0, 0, 82, 0, 0, 0, 83, 0, 86, 85,
	95, 96, 98, 100, 110, 112, 0, 0, 0, 0,
	81, 0, 0, 0, 0, 101, 102, 103, 104, 105,
	106, 0, 0, 107, 108, 92, 93, 94, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 80, 99, 97,
	87, 88, 109, 0, 89, 90, 91, 111, 0, 0,
	0, 82, 229, 0, 0, 83, 0, 86, 85, 95,
	96, 98, 100, 110, 112, 0, 0, 0, 0, 81,
	0, 0, 0, 0, 101, 102, 103, 104, 105, 106,
	0, 0, 107, 108, 92, 93, 94, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 99, 97, 87,
	88, 109, 0, 89, 90, 91, 111, 0, 213, 0,
	82, 0, 0, 0, 83, 0, 86, 85, 95, 96,
	98, 100, 110, 112, 0, 0, 0, 0, 81, 0,
	0, 0, 0, 101, 102, 103, 104, 105, 106, 0,
	0, 107, 108, 92, 93, 94, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 80, 99, 97, 87, 88,
	109, 0, 89, 90, 91, 111, 0, 203, 0, 82,
	0, 0, 0, 83, 0, 86, 85, 95, 96, 98,
	100, 110, 112, 0, 0, 0, 0, 81, 0, 0,
	0, 0, 101, 102, 103, 104, 105, 106, 0, 0,
	107, 108, 92, 93, 94, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 80, 99, 97, 87, 88, 109,
	0, 89, 90, 91, 111, 0, 0, 0, 82, 0,
	0, 0, 83, 0, 86, 85, 95, 96, 98, 100,
	110, 112, 0, 0, 0, 0, 81, 0, 0, 0,
	0, 101, 102, 103, 104, 105, 106, 0, 0, 107,
	108, 92, 93, 94, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 80, 99, 97, 87, 88, 109, 0,
	89, 90, 91, 111, 0, 0, 0, 82, 0, 0,
	0, 83, 0, 246, 85, 95, 96, 98, 100, 110,
	112, 0, 0, 0, 0, 81, 0, 0, 0, 0,
	101, 102, 103, 104, 105, 106, 0, 0, 107, 108,
	92, 93, 94, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 80, 99, 97, 87, 88, 109, 0, 89,
	90, 91, 111, 0, 0, 0, 82, 0, 0, 0,
	83, 0, 245, 85, 95, 96, 98, 100, 110, 112,
	0, 0, 0, 0, 81, 0, 0, 0, 0, 101,
	102, 103, 104, 105, 106, 0, 0, 107, 108, 92,
	93, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 80, 99, 97, 87, 88, 109, 0, 89, 90,
	91, 111, 0, 0, 0, 218, 0, 0, 0, 83,
	0, 86, 85, 95, 96, 98, 100, 110, 112, 0,
	0, 0, 0, 81, 0, 0, 0, 0, 101, 102,
	103, 104, 105, 106, 0, 0, 107, 108, 92, 93,
	94, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	80, 99, 97, 87, 88, 109, 0, 89, 90, 91,
	111, 259, 36, 38, 216, 0, 66, 0, 83, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	52, 39, 40, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 259,
	36, 38, 0, 0, 66, 0, 0, 0, 135, 68,
	56, 0, 50, 58, 57, 260, 136, 67, 52, 39,
	40, 41, 0, 0, 0, 61, 0, 63, 261, 0,
	0, 64, 0, 55, 0, 45, 255, 0, 0, 43,
	0, 0, 62, 0, 0, 0, 135, 68, 56, 0,
	50, 58, 57, 260, 136, 67, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 63, 261, 0, 0, 64,
	0, 55, 0, 45, 0, 0, 0, 43, 0, 0,
	62, 85, 95, 96, 98, 100, 110, 112, 0, 0,
	0, 0, 81, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 108, 92, 93, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 80,
	99, 97, 87, 88, 109, 0, 89, 90, 91, 111,
	0, 0, 0, 82, 0, 0, 0, 83, 0, 86,
	119, 36, 38, 0, 0, 66, 0, 59, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 52,
	39, 40, 41, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 47, 36,
	38, 0, 0, 66, 0, 0, 0, 0, 68, 56,
	0, 50, 58, 57, 54, 0, 67, 52, 39, 40,
	41, 0, 0, 0, 61, 0, 63, 65, 0, 0,
	64, 0, 114, 0, 45, 0, 117, 0, 43, 0,
	0, 62, 0, 0, 0, 0, 68, 56, 0, 50,
	58, 57, 54, 0, 67, 0, 0, 0, 0, 0,
	0, 0, 61, 0, 63, 65, 0, 0, 64, 0,
	55, 0, 45, 47, 36, 38, 43, 380, 66, 62,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 39, 40, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 47, 36, 38, 0, 0, 66, 0, 0, 0,
	0, 68, 56, 0, 50, 58, 57, 54, 0, 67,
	52, 39, 40, 41, 0, 0, 0, 61, 0, 63,
	65, 0, 0, 64, 0, 55, 0, 45, 0, 0,
	0, 43, 340, 0, 62, 0, 0, 0, 0, 68,
	56, 0, 50, 58, 57, 54, 0, 67, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 63, 65, 0,
	0, 64, 0, 55, 0, 45, 0, 281, 0, 43,
	0, 0, 62, 47, 36, 38, 0, 0, 66, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 52, 39, 40, 41, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 47, 36, 38, 0, 0, 66,
	0, 68, 56, 0, 50, 58, 57, 54, 0, 67,
	0, 0, 232, 52, 39, 40, 41, 61, 0, 63,
	65, 0, 0, 64, 0, 55, 0, 45, 0, 0,
	0, 43, 0, 0, 62, 47, 36, 38, 0, 0,
	66, 0, 68, 56, 0, 50, 58, 57, 54, 0,
	67, 0, 0, 0, 52, 39, 40, 41, 61, 0,
	63, 65, 0, 0, 64, 0, 55, 0, 45, 0,
	209, 0, 43, 0, 0, 62, 47, 36, 38, 0,
	0, 66, 0, 68, 56, 0, 50, 58, 57, 54,
	0, 67, 0, 0, 175, 52, 39, 40, 41, 61,
	0, 63, 65, 0, 0, 64, 0, 55, 0, 45,
	0, 0, 0, 43, 0, 0, 62, 47, 36, 38,
	0, 0, 66, 0, 68, 56, 0, 50, 58, 57,
	54, 0, 67, 0, 0, 0, 52, 39, 40, 41,
	61, 0, 63, 65, 0, 0, 64, 0, 55, 0,
	45, 0, 0, 0, 43, 0, 0, 62, 47, 36,
	38, 0, 0, 66, 0, 68, 56, 0, 50, 58,
	57, 54, 0, 67, 0, 0, 0, 52, 39, 40,
	41, 61, 0, 63, 65, 0, 0, 64, 0, 408,
	0, 45, 0, 0, 0, 43, 0, 0, 62, 47,
	36, 38, 0, 0, 66, 0, 68, 56, 0, 50,
	58, 57, 54, 0, 67, 0, 0, 0, 52, 39,
	40, 41, 61, 0, 63, 65, 0, 0, 64, 0,
	350, 0, 45, 0, 0, 0, 43, 0, 0, 62,
	47, 36, 38, 0, 0, 66, 0, 68, 56, 0,
	50, 58, 57, 54, 0, 67, 0, 0, 0, 52,
	39, 40, 41, 61, 0, 63, 65, 0, 0, 64,
	0, 348, 0, 45, 0, 0, 0, 43, 0, 0,
	62, 125, 36, 38, 0, 0, 66, 0, 68, 56,
	0, 50, 58, 57, 54, 0, 67, 0, 0, 0,
	52, 39, 40, 41, 61, 0, 63, 65, 0, 0,
	64, 0, 278, 0, 45, 0, 0, 0, 43, 0,
	0, 62, 123, 36, 38, 0, 0, 66, 0, 68,
	56, 0, 50, 58, 57, 54, 0, 67, 0, 0,
	0, 52, 39, 40, 41, 61, 0, 63, 65, 0,
	0, 64, 0, 55, 0, 45, 0, 0, 0, 43,
	0, 0, 62, 0, 0, 0, 0, 0, 0, 0,
	68, 56, 0, 50, 58, 57, 54, 0, 67, 0,
	0, 85, 95, 96, 98, 100, 61, 112, 63, 65,
	0, 0, 64, 0, 55, 0, 45, 0, 0, 0,
	43, 0, 0, 62, 0, 107, 108, 92, 93, 94,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 97, 87, 88, 109, 0, 89, 90, 91, 111,
	0, 0, 0, 82, 0, 0, 0, 83, 0, 86,
	85, 95, 96, 98, 100, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 0, 107, 108, 92, 93, 94, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 108, 92, 93, 94, 0, 0, 99,
	97, 87, 88, 109, 0, 89, 90, 91, 111, 0,
	0, 0, 82, 0, 0, 0, 83, 0, 86, 87,
	88, 109, 0, 89, 90, 91, 111, 0, 0, 0,
	82, 0, 0, 0, 83, 0, 86,
}

var yyPact = [...]int16{
	-61, -1000, -1000, 38, -61, -1000, -70, -70, -1000, -1000,
	-1000, -1000, -1000, -1000, 3872, 3872, 428, 385, -1000, -1000,
	-1000, -1000, -1000, -1000, 1186, -1000, -1000, -1000, 3872, 3516,
	290, 3872, 286, 4118, 4077, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -56, 225, 3872, -1000, 110, -24, -1000,
	208, -1000, 203, -1000, 101, -70, 3872, 196, 188, 426,
	109, 3872, 3872, 3872, 3872, 3872, 222, 156, 153, -1000,
	38, -70, -1000, 97, 2980, 2980, 285, 334, 3872, 3872,
	3872, 3872, 3872, 3831, 3872, 3872, 424, 3872, 3872, 3872,
	3872, 3872, 3872, 3872, 3872, 3872, 3872, 3872, 3872, 3872,
	3872, 3872, 3872, 3872, 3872, 3872, 3872, -1000, -1000, 3872,
	3872, 3872, 3872, 2911, -61, 127, 829, 3790, -23, 110,
	-61, 2842, -70, 139, 3256, 137, 3187, 7, 3872, -70,
	-43, -1000, 225, 225, 28, 225, 284, -15, 2773, 3872,
	3749, 3872, 225, -70, 225, 3872, 721, 3872, 3872, 117,
	-1000, 3872, 3872, -70, 63, 63, 63, -24, 3118, -24,
	3049, 407, 128, 3327, 77, -1000, -61, 3872, -61, 2980,
	2980, 2704, 3435, 210, 1117, 3872, 721, -4, -1000, 29,
	29, -4, -4, -4, 2980, -4, -4, 4252, 4252, 4252,
	4252, 4252, 4252, 2980, 2980, 2980, 2980, 2980, 2980, 29,
	4165, -4, 4234, -61, 265, -70, 3872, -70, -61, 4036,
	2635, 3667, 264, -70, 341, 3872, 3872, 3872, 3872, -1000,
	-55, -70, 423, -29, -29, 225, -29, -70, 7, -1000,
	199, 1048, 3872, 2566, 76, 3872, 55, -58, 2497, 2428,
	979, 3872, 97, 97, 3872, 420, 419, 133, 395, 99,
	-1000, -1000, 225, -1000, 407, -1000, 2359, 40, 225, 110,
	58, 3365, -25, 418, 263, 2290, 262, 3872, 132, -1000,
	-1000, 3629, 2221, 260, -1000, 2152, 413, 258, -61, 2083,
	3995, 3954, 2014, 361, 339, -26, -1000, -1000, 309, 38,
	154, 146, 118, 84, -70, -18, -70, 3872, -1000, 49,
	410, 122, -1000, -1000, 3554, 1945, -1000, -1000, -58, 225,
	257, -70, 3872, -1000, -1000, 3872, 97, 2980, -24, -1000,
	-1000, 71, 123, -70, -29, 121, 393, -1000, -1000, -43,
	225, -1000, 3872, 69, -1000, -61, -1000, 721, -1000, 1876,
	-1000, -1000, -1000, -61, -1000, -1000, 255, -61, -61, 1807,
	-61, 1738, 3913, 283, -34, -1000, -1000, 308, 3872, 254,
	-1000, -1000, -61, 307, 116, -1000, 114, -1000, 106, -1000,
	105, -1000, -70, -1000, -55, 225, -57, 225, -1000, 1669,
	-1000, -1000, 253, -44, -1000, 3872, 2980, 1600, 280, -29,
	225, 71, 20, 407, 71, 93, 34, 910, 3872, 252,
	-1000, 251, -1000, 250, 247, -61, 246, -61, -61, 1531,
	279, -61, 245, -1000, -1000, -61, 1462, 95, -1000, -1000,
	-61, -1000, -1000, -1000, -1000, 243, -29, 242, -70, -29,
	-1000, -1000, -70, 1393, -1000, -61, 87, -29, 278, 71,
	-1000, -1000, 277, 71, -45, 225, -1000, 3872, 1324, -1000,
	-1000, -1000, -1000, 241, -1000, 240, 239, -61, -61, 236,
	-1000, -1000, -61, -61, -1000, -1000, -1000, 403, 3872, 3872,
	235, -1000, -70, -61, 276, -61, 274, 71, -44, 1255,
	-1000, -1000, -1000, -1000, 234, 233, 347, -1000, -1000, 225,
	-58, 2980, -1000, 225, 232, -61, 231, -61, 270, -1000,
	-1000, 344, 267, -29, 216, -29, -1000, 215, -1000, 213,
	-61, 226, -61, -1000, -1000, -1000, 200, -61, 155, -1000,
	119, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 0, 481, 11, 396, 480, 479, 478, 477, 472,
	471, 468, 467, 465, 457, 10, 3, 456, 455, 9,
	8, 377, 157, 454, 452, 451, 450, 448, 443, 384,
	18, 442, 4, 1, 17, 441, 5, 440, 446, 437,
	240, 35, 434, 20, 433, 415, 413, 2, 6, 338,
	7,
}

var yyR1 = [...]int8{
	0, 44, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 10, 10, 10, 10, 9, 9, 9, 9, 8,
	8, 8, 8, 4, 4, 4, 5, 7, 7, 6,
	6, 11, 11, 11, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 17, 18, 18, 18, 18,
	18, 19, 20, 13, 14, 14, 14, 14, 14, 15,
	15, 16, 29, 29, 36, 36, 36, 37, 37, 37,
	30, 30, 31, 31, 32, 33, 34, 34, 35, 35,
	21, 21, 21, 21, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 26,
	26, 26, 23, 23, 27, 27, 27, 27, 27, 27,
	27, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
	28, 28, 28, 28, 28, 28, 28, 24, 24, 24,
	24, 24, 24, 25, 25, 25, 25, 38, 38, 38,
	38, 38, 38, 38, 39, 39, 40, 40, 41, 41,
	41, 42, 42, 42, 42, 42, 42, 43, 45, 45,
	46, 46, 46, 47, 47, 49, 49, 50, 48, 48,
	48, 48,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 3, 0, 1, 1, 1,
	2, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 5, 6, 5, 6, 5, 6, 5, 13,
	12, 9, 8, 1, 1, 1, 4, 3, 3, 3,
	3, 5, 7, 5, 4, 7, 5, 6, 7, 7,
	8, 7, 8, 8, 9, 6, 0, 1, 1, 2,
	2, 4, 3, 7, 0, 1, 1, 2, 2, 4,
	4, 3, 1, 4, 0, 1, 3, 0, 1, 4,
	0, 1, 1, 1, 1, 2, 1, 4, 1, 4,
	0, 1, 4, 4, 1, 1, 1, 1, 1, 1,
	1, 5, 3, 1, 2, 5, 7, 3, 1, 5,
	4, 5, 4, 4, 4, 1, 4, 1, 4, 1,
	6, 10, 5, 3, 2, 4, 4, 6, 3, 3,
	4, 4, 1, 3, 2, 2, 2, 2, 4, 2,
	4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 3, 3, 3, 8, 9, 10,
	9, 10, 11, 4, 6, 8, 7, 1, 3, 2,
	2, 5, 2, 6, 2, 5, 2, 3, 0, 3,
	6, 6, 5, 5, 6, 5, 5, 1, 0, 1,
	2, 1, 1, 0, 1, 1, 2, 1, 0, 2,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -44, -1, -45, -2, -46, 80, -49, -50, 86,
	-3, -4, 38, 39, 10, 12, 28, -11, -12, -8,
	-13, -17, -10, -9, -22, -5, -7, -6, 13, 15,
	29, 45, 46, 49, 50, -23, 5, -27, 6, 24,
	25, 26, -24, 82, -40, 78, -28, 4, -43, -42,
	55, -26, 23, -25, 58, 76, 53, 57, 56, 11,
	-21, 68, 85, 70, 74, 71, 9, 60, 52, -45,
	-46, -49, -50, -21, -22, -22, 4, 14, 61, 62,
	64, 27, 78, 82, 53, 16, 84, 67, 68, 71,
	72, 73, 42, 43, 44, 17, 18, 66, 19, 65,
	20, 32, 33, 34, 35, 36, 37, 40, 41, 69,
	21, 74, 22, -22, 76, -29, -22, 80, -4, 4,
	76, -22, 76, 4, -22, 4, -22, 83, -47, -49,
	-38, 4, 71, -40, 58, 51, 59, 82, -22, 78,
	82, 78, 78, 76, 82, -47, -22, 78, 78, -29,
	4, 61, 62, 81, -22, -22, -22, -43, -22, -43,
	-22, 78, 4, 78, 78, -3, 76, 13, 76, -22,
	-22, -22, -22, -21, -22, 63, -22, -22, 4, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, 76, -1, -49, 16, 81, 76, 80,
	-22, 80, -1, 76, -47, 78, 78, 78, 78, -40,
	-21, 76, 84, -38, -38, 82, -38, 76, 83, 79,
	-21, -22, 63, -22, -38, -47, -38, -41, -22, -22,
	-22, 62, -21, -21, -47, 84, 84, -30, -34, -31,
	-32, -35, 4, -33, 78, 79, -22, -38, -40, 4,
	58, 71, -38, 54, -1, -22, -1, 63, 8, 79,
	83, 63, -22, -1, 77, -22, -47, -1, 76, -22,
	80, 80, -22, 77, -47, -18, -20, -19, 48, 47,
	-21, -21, -21, -21, 81, -48, -49, -47, 4, -38,
	-47, 8, 79, 83, 63, -22, 79, 79, -41, 83,
	-48, 81, 63, 79, 79, 81, -21, -22, -43, 4,
	4, 79, 8, 81, -38, -30, -34, 79, 79, -38,
	82, 79, 81, 4, 77, 76, 77, -22, 79, -22,
	83, 83, 77, 76, 4, 77, -1, 76, 76, -22,
	76, -22, 80, 30, -14, -16, -15, 48, 47, -47,
	-19, -20, 63, -3, 8, 79, 8, 79, 8, 79,
	8, 79, -49, 83, -21, 83, -39, 4, 79, -22,
	83, 83, -48, -38, 77, -47, -22, -22, -36, -38,
	78, 79, -38, -47, 79, 8, -38, -22, 81, -1,
	83, -1, 77, -1, -1, 76, -1, 76, 76, -22,
	4, 76, -47, -15, -16, 63, -22, -21, 77, -1,
	63, 79, 79, 79, 79, -48, -38, -47, 81, -38,
	83, 77, 76, -22, 79, 76, -37, -38, -36, 79,
	-32, -33, -36, 79, -38, 83, 79, 81, -22, 77,
	77, 77, 77, -1, 77, -1, -1, 76, 76, -1,
	77, -1, 63, 63, -1, 77, 77, -47, -47, 63,
	-1, 79, 81, 76, -36, 76, -36, 79, -38, -22,
	79, 77, 77, 77, -1, -1, 77, -1, -1, 4,
	-41, -22, 77, -47, -1, 76, -1, 76, -36, 79,
	77, 77, 31, -38, -48, -38, 77, -1, 77, -1,
	76, 31, 76, 77, 77, 77, -1, 76, -1, 77,
	-1, 77, 77,
}

var yyDef = [...]int16{
	198, -2, 1, -2, 198, 199, 202, 201, 205, 207,
	4, 7, 8, 9, 90, 0, 0, 13, 14, 15,
	16, 17, 18, 19, -2, 33, 34, 35, 0, 90,
	0, 0, 0, 0, 0, 94, 95, 96, 97, 98,
	99, 100, 103, 203, 0, 0, 108, 197, 132, 115,
	0, 117, 0, 119, 0, 203, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
	-2, 200, 206, 10, 91, 11, 0, 0, 0, 0,
	0, 0, 90, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 161, 162, 0,
	0, 0, 0, 0, 198, 0, 91, 0, 0, -2,
	198, 0, 203, 197, 0, 197, 0, -2, 90, 204,
	0, 177, 0, 0, 0, 0, 0, 0, 0, 90,
	0, 0, 0, 203, 0, 188, 124, 0, 0, 0,
	72, 90, 90, 203, 134, 135, 136, -2, 0, -2,
	0, 80, 0, 0, 0, 5, 198, 0, 198, 37,
	39, 0, 102, 0, 0, 0, 123, 128, 133, 141,
	142, 143, 144, 145, 146, 147, 148, 149, 150, 151,
	152, 153, 154, 155, 156, 157, 158, 159, 160, 163,
	164, 165, 166, 198, 0, 201, 0, 203, 198, 0,
	0, 0, 0, 203, 56, 90, 90, 90, 90, 187,
	208, 203, 0, 179, 180, 0, 182, 203, 186, 107,
	0, 0, 0, 0, 0, 188, 0, 208, 0, 0,
	0, 90, 38, 40, 0, 0, 0, 0, 82, 81,
	86, 83, 84, 88, 80, 129, 0, 0, 0, -2,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 112,
	114, 0, 0, 0, 44, 0, 0, 0, 198, 0,
	0, 0, 0, 0, 64, 203, 57, 58, 0, -2,
	0, 0, 0, 0, -2, 0, 210, 90, 178, 0,
	0, 0, 110, 113, 0, 0, 116, 118, 208, 0,
	0, -2, 0, 125, 126, 0, 36, 92, -2, -2,
	-2, 74, 0, 203, 85, 0, 82, 130, 131, 180,
	0, 173, 0, 0, 12, 198, 43, 101, 111, 0,
	195, 196, 41, 198, 73, 46, 0, 198, 198, 0,
	198, 0, 0, 0, 203, 65, 66, 0, 90, 0,
	59, 60, 198, 0, 0, -2, 0, -2, 0, -2,
	0, -2, -2, 105, 208, 0, 203, 0, 109, 0,
	192, 193, 0, 0, 122, 0, 189, 0, 0, 75,
	77, 74, 0, 0, 74, 0, 0, 0, 0, 0,
	194, 0, 47, 0, 0, 198, 0, 198, 198, 0,
	0, 198, 0, 67, 68, 198, 91, 0, 55, 62,
	198, -2, -2, -2, -2, 0, 181, 0, 203, 184,
	191, 120, 203, 0, 127, 198, 0, 78, 0, 74,
	87, 89, 0, 74, 0, 0, 174, 0, 0, 42,
	45, 48, 49, 0, 51, 0, 0, 198, 198, 0,
	63, 71, 198, 198, 61, 106, 183, 0, 188, 0,
	0, 76, 203, 198, 0, 198, 0, 74, 181, 0,
	176, 50, 52, 53, 0, 0, 32, 69, 70, 0,
	208, 190, 167, 0, 0, 198, 0, 198, 0, 175,
	54, 31, 0, 185, 0, 79, 168, 0, 170, 0,
	198, 0, 198, 121, 169, 171, 0, 198, 0, 172,
	0, 30, 29,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 85, 3, 3, 3, 73, 74, 3,
	78, 79, 71, 67, 81, 68, 84, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 80,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 82, 3, 83, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:124
		{
			yyVAL.compstmt = nil
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:128
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:134
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:143
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:159
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:160
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:162
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:167
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:172
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:177
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:191
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = yyDollar[1].stmt_try
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:193
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:194
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:195
		{
			yyVAL.stmt = yyDollar[1].stmt_go
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.stmt = yyDollar[1].stmt_defer
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:198
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:205
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:210
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:215
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].expr.Position())
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:220
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:227
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:232
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:237
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr.Position())
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:242
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:249
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:254
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:259
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:264
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:270
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:271
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:272
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:276
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:283
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:287
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:304
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:308
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:325
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:330
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:335
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:345
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:350
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:361
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:366
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:371
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:376
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:381
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:386
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:391
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:396
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:401
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:408
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:415
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:419
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:423
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:427
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:432
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:443
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:450
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 63:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:456
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:465
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:469
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:473
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:477
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:483
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:494
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:499
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:506
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:512
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:516
		{
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:521
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:525
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:529
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:533
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:537
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:541
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:549
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:552
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:555
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:556
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:560
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:566
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:572
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:576
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:582
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:586
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:591
		{
			yyVAL.exprs = nil
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:595
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:599
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:606
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:614
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:616
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:620
		{
			yyVAL.expr = yyDollar[1].expr_unary
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:622
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:627
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:632
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:637
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 101:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:642
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:647
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:651
		{
			yyVAL.expr = yyDollar[1].expr_func
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:653
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 105:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:658
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 106:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:663
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:668
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:672
		{
			yyVAL.expr = yyDollar[1].expr_binary
		}
	case 109:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:674
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 110:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:679
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:684
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 112:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:689
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:694
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 114:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:699
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:704
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:709
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:713
		{
			yyVAL.expr = yyDollar[1].expr_dbg
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:715
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 119:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:724
		{
			yyVAL.expr = yyDollar[1].expr_make
		}
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:726
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 121:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:732
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:738
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:743
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:748
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:753
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:758
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 127:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:763
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:768
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:775
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:780
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:785
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:791
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:793
		{
			yyVAL.expr_member_or_ident = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member_or_ident.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:800
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:805
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:810
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:815
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:820
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:825
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:830
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:837
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:842
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:847
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:852
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:857
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:862
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:867
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:872
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:877
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:882
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:887
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:892
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:897
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:902
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:907
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:912
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:917
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:922
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:927
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:932
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:937
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:942
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:947
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:952
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:957
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:962
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:969
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 168:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:974
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 169:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:979
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 170:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:985
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 171:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:990
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 172:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:995
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1003
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1008
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 175:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:1013
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:1018
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1025
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1029
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1038
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1047
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1057
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1061
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1070
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1076
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1080
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1090
		{
			yyVAL.slice_count = 1
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1094
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1101
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1105
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1109
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1119
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1123
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1127
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1131
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1135
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1139
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1145
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
