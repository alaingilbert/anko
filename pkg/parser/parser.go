// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         *ast.StmtsStmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_if_helper                ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             *ast.SwitchStmt
	stmt_switch_cases_helper      *ast.SwitchStmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_body              *ast.SelectBodyStmt
	stmt_select_content           *ast.SelectBodyStmt
	stmt_select_cases             *ast.SelectBodyStmt
	stmt_select_cases_helper      *ast.SelectBodyStmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	stmt_module                   ast.Stmt
	stmt_break                    ast.Stmt
	stmt_return                   ast.Stmt
	stmt_continue                 ast.Stmt
	stmt_throw                    ast.Stmt
	stmt_expr                     *ast.ExprStmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_literals                 ast.Expr
	expr_unary                    ast.Expr
	expr_binary                   ast.Expr
	expr_member_or_ident          ast.Expr
	expr_call                     *ast.CallExpr
	expr_anon_call                *ast.AnonCallExpr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	opt_exprs                     []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents2  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	expr_map_content              *ast.MapExpr
	expr_map_content_helper       *ast.MapExpr
	expr_map_key_value            []ast.Expr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57405
	yyEofCode   = 57344
	ANDAND      = 57364
	ANDEQ       = 57378
	ARRAY       = 57349
	BREAK       = 57380
	CASE        = 57389
	CATCH       = 57372
	CHAN        = 57393
	CLOSE       = 57399
	CONTINUE    = 57381
	DBG         = 57402
	DEFAULT     = 57390
	DEFER       = 57392
	DELETE      = 57398
	DIVEQ       = 57377
	ELSE        = 57356
	EQEQ        = 57359
	FALSE       = 57367
	FINALLY     = 57373
	FOR         = 57357
	FUNC        = 57351
	GE          = 57361
	GO          = 57391
	IDENT       = 57346
	IF          = 57355
	IN          = 57358
	LE          = 57362
	LEN         = 57397
	MAKE        = 57394
	MAP         = 57400
	MINUSEQ     = 57375
	MINUSMINUS  = 57383
	MODULE      = 57370
	MULEQ       = 57376
	NEQ         = 57360
	NEW         = 57365
	NIL         = 57368
	NILCOALESCE = 57369
	NUMBER      = 57347
	OPCHAN      = 57395
	OREQ        = 57379
	OROR        = 57363
	PLUSEQ      = 57374
	PLUSPLUS    = 57382
	POW         = 57384
	RETURN      = 57352
	SELECT      = 57388
	SHIFTLEFT   = 57385
	SHIFTRIGHT  = 57386
	STRING      = 57348
	STRUCT      = 57401
	SWITCH      = 57387
	THROW       = 57354
	TRUE        = 57366
	TRY         = 57371
	TYPE        = 57396
	UNARY       = 57404
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57403
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -225
)

var (
	yyPrec = map[int]int{
		'=':         0,
		PLUSEQ:      0,
		MINUSEQ:     0,
		MULEQ:       0,
		DIVEQ:       0,
		ANDEQ:       0,
		OREQ:        0,
		':':         1,
		OPCHAN:      2,
		'?':         3,
		NILCOALESCE: 3,
		OROR:        4,
		ANDAND:      5,
		EQEQ:        6,
		NEQ:         6,
		'<':         6,
		LE:          6,
		'>':         6,
		GE:          6,
		'+':         7,
		'-':         7,
		'|':         7,
		'^':         7,
		'*':         8,
		'/':         8,
		'%':         8,
		SHIFTLEFT:   8,
		SHIFTRIGHT:  8,
		'&':         8,
		IN:          9,
		PLUSPLUS:    10,
		MINUSMINUS:  10,
		UNARY:       11,
	}

	yyXLAT = map[int]int{
		91:    0,   // '[' (302x)
		42:    1,   // '*' (299x)
		40:    2,   // '(' (285x)
		125:   3,   // '}' (281x)
		38:    4,   // '&' (271x)
		45:    5,   // '-' (271x)
		123:   6,   // '{' (271x)
		57395: 7,   // OPCHAN (271x)
		10:    8,   // '\n' (246x)
		59:    9,   // ';' (193x)
		57389: 10,  // CASE (191x)
		57390: 11,  // DEFAULT (191x)
		57346: 12,  // IDENT (176x)
		57344: 13,  // $end (168x)
		46:    14,  // '.' (165x)
		58:    15,  // ':' (164x)
		57400: 16,  // MAP (160x)
		44:    17,  // ',' (153x)
		41:    18,  // ')' (151x)
		57358: 19,  // IN (142x)
		37:    20,  // '%' (140x)
		43:    21,  // '+' (140x)
		47:    22,  // '/' (140x)
		60:    23,  // '<' (140x)
		62:    24,  // '>' (140x)
		63:    25,  // '?' (140x)
		124:   26,  // '|' (140x)
		57364: 27,  // ANDAND (140x)
		57378: 28,  // ANDEQ (140x)
		57377: 29,  // DIVEQ (140x)
		57359: 30,  // EQEQ (140x)
		57361: 31,  // GE (140x)
		57362: 32,  // LE (140x)
		57375: 33,  // MINUSEQ (140x)
		57383: 34,  // MINUSMINUS (140x)
		57376: 35,  // MULEQ (140x)
		57360: 36,  // NEQ (140x)
		57369: 37,  // NILCOALESCE (140x)
		57379: 38,  // OREQ (140x)
		57363: 39,  // OROR (140x)
		57374: 40,  // PLUSEQ (140x)
		57382: 41,  // PLUSPLUS (140x)
		57384: 42,  // POW (140x)
		57385: 43,  // SHIFTLEFT (140x)
		57386: 44,  // SHIFTRIGHT (140x)
		33:    45,  // '!' (131x)
		94:    46,  // '^' (131x)
		57399: 47,  // CLOSE (131x)
		57402: 48,  // DBG (131x)
		57398: 49,  // DELETE (131x)
		57367: 50,  // FALSE (131x)
		57351: 51,  // FUNC (131x)
		57397: 52,  // LEN (131x)
		57394: 53,  // MAKE (131x)
		57365: 54,  // NEW (131x)
		57368: 55,  // NIL (131x)
		57347: 56,  // NUMBER (131x)
		57348: 57,  // STRING (131x)
		57366: 58,  // TRUE (131x)
		93:    59,  // ']' (129x)
		57441: 60,  // slice_count (111x)
		57350: 61,  // VARARG (104x)
		61:    62,  // '=' (103x)
		57403: 63,  // WALRUS (100x)
		57408: 64,  // expr (83x)
		57409: 65,  // expr_anon_call (83x)
		57410: 66,  // expr_binary (83x)
		57411: 67,  // expr_call (83x)
		57412: 68,  // expr_dbg (83x)
		57413: 69,  // expr_func (83x)
		57414: 70,  // expr_ident (83x)
		57416: 71,  // expr_literals (83x)
		57417: 72,  // expr_make (83x)
		57418: 73,  // expr_map (83x)
		57422: 74,  // expr_member_or_ident (83x)
		57423: 75,  // expr_slice (83x)
		57424: 76,  // expr_unary (83x)
		57432: 77,  // newline (53x)
		57433: 78,  // newlines (49x)
		57355: 79,  // IF (44x)
		57353: 80,  // VAR (44x)
		57380: 81,  // BREAK (43x)
		57381: 82,  // CONTINUE (43x)
		57392: 83,  // DEFER (43x)
		57357: 84,  // FOR (43x)
		57391: 85,  // GO (43x)
		57370: 86,  // MODULE (43x)
		57352: 87,  // RETURN (43x)
		57388: 88,  // SELECT (43x)
		57387: 89,  // SWITCH (43x)
		57354: 90,  // THROW (43x)
		57371: 91,  // TRY (43x)
		57393: 92,  // CHAN (37x)
		57401: 93,  // STRUCT (37x)
		57440: 94,  // opt_term (33x)
		57473: 95,  // term (33x)
		57407: 96,  // compstmt (32x)
		57474: 97,  // type_data (28x)
		57439: 98,  // opt_newlines (20x)
		57406: 99,  // comma_newlines (15x)
		57425: 100, // exprs (13x)
		57419: 101, // expr_map_content (8x)
		57435: 102, // opt_exprs (6x)
		57436: 103, // opt_func_return_expr_idents (6x)
		57356: 104, // ELSE (4x)
		57452: 105, // stmt_lets (4x)
		57469: 106, // stmt_typed_lets (4x)
		57470: 107, // stmt_var (4x)
		57471: 108, // stmt_var_or_lets (4x)
		57429: 109, // func_expr_typed_ident (3x)
		57431: 110, // func_expr_untyped_ident (3x)
		57434: 111, // opt_comma_newlines (3x)
		57443: 112, // stmt (3x)
		57444: 113, // stmt_break (3x)
		57445: 114, // stmt_continue (3x)
		57446: 115, // stmt_defer (3x)
		57447: 116, // stmt_expr (3x)
		57448: 117, // stmt_for (3x)
		57449: 118, // stmt_go (3x)
		57450: 119, // stmt_if (3x)
		57451: 120, // stmt_if_helper (3x)
		57453: 121, // stmt_module (3x)
		57454: 122, // stmt_return (3x)
		57455: 123, // stmt_select (3x)
		57462: 124, // stmt_switch (3x)
		57467: 125, // stmt_throw (3x)
		57468: 126, // stmt_try (3x)
		57415: 127, // expr_idents (2x)
		57421: 128, // expr_map_key_value (2x)
		57373: 129, // FINALLY (2x)
		57426: 130, // func_expr_idents (2x)
		57427: 131, // func_expr_idents_last_untyped (2x)
		57428: 132, // func_expr_idents_not_empty (2x)
		57430: 133, // func_expr_typed_idents (2x)
		57457: 134, // stmt_select_case (2x)
		57461: 135, // stmt_select_default (2x)
		57463: 136, // stmt_switch_case (2x)
		57466: 137, // stmt_switch_default (2x)
		57372: 138, // CATCH (1x)
		57420: 139, // expr_map_content_helper (1x)
		57437: 140, // opt_func_return_expr_idents1 (1x)
		57438: 141, // opt_func_return_expr_idents2 (1x)
		57442: 142, // start (1x)
		57456: 143, // stmt_select_body (1x)
		57458: 144, // stmt_select_cases (1x)
		57459: 145, // stmt_select_cases_helper (1x)
		57460: 146, // stmt_select_content (1x)
		57464: 147, // stmt_switch_cases (1x)
		57465: 148, // stmt_switch_cases_helper (1x)
		57472: 149, // stmts (1x)
		57396: 150, // TYPE (1x)
		57475: 151, // type_data_struct (1x)
		57405: 152, // $default (0x)
		57349: 153, // ARRAY (0x)
		57345: 154, // error (0x)
		57404: 155, // UNARY (0x)
	}

	yySymNames = []string{
		"'['",
		"'*'",
		"'('",
		"'}'",
		"'&'",
		"'-'",
		"'{'",
		"OPCHAN",
		"'\\n'",
		"';'",
		"CASE",
		"DEFAULT",
		"IDENT",
		"$end",
		"'.'",
		"':'",
		"MAP",
		"','",
		"')'",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"'!'",
		"'^'",
		"CLOSE",
		"DBG",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"']'",
		"slice_count",
		"VARARG",
		"'='",
		"WALRUS",
		"expr",
		"expr_anon_call",
		"expr_binary",
		"expr_call",
		"expr_dbg",
		"expr_func",
		"expr_ident",
		"expr_literals",
		"expr_make",
		"expr_map",
		"expr_member_or_ident",
		"expr_slice",
		"expr_unary",
		"newline",
		"newlines",
		"IF",
		"VAR",
		"BREAK",
		"CONTINUE",
		"DEFER",
		"FOR",
		"GO",
		"MODULE",
		"RETURN",
		"SELECT",
		"SWITCH",
		"THROW",
		"TRY",
		"CHAN",
		"STRUCT",
		"opt_term",
		"term",
		"compstmt",
		"type_data",
		"opt_newlines",
		"comma_newlines",
		"exprs",
		"expr_map_content",
		"opt_exprs",
		"opt_func_return_expr_idents",
		"ELSE",
		"stmt_lets",
		"stmt_typed_lets",
		"stmt_var",
		"stmt_var_or_lets",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"opt_comma_newlines",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_if",
		"stmt_if_helper",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"expr_idents",
		"expr_map_key_value",
		"FINALLY",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"stmt_select_case",
		"stmt_select_default",
		"stmt_switch_case",
		"stmt_switch_default",
		"CATCH",
		"expr_map_content_helper",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"start",
		"stmt_select_body",
		"stmt_select_cases",
		"stmt_select_cases_helper",
		"stmt_select_content",
		"stmt_switch_cases",
		"stmt_switch_cases_helper",
		"stmts",
		"TYPE",
		"type_data_struct",
		"$default",
		"ARRAY",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {142, 1},
		2:   {96, 1},
		3:   {96, 3},
		4:   {149, 1},
		5:   {149, 3},
		6:   {112, 1},
		7:   {112, 1},
		8:   {112, 1},
		9:   {112, 1},
		10:  {112, 1},
		11:  {112, 1},
		12:  {112, 1},
		13:  {112, 1},
		14:  {112, 1},
		15:  {112, 1},
		16:  {112, 1},
		17:  {112, 1},
		18:  {112, 1},
		19:  {112, 1},
		20:  {113, 1},
		21:  {114, 1},
		22:  {122, 2},
		23:  {125, 2},
		24:  {121, 5},
		25:  {116, 1},
		26:  {118, 2},
		27:  {118, 2},
		28:  {115, 2},
		29:  {115, 2},
		30:  {126, 13},
		31:  {126, 12},
		32:  {126, 9},
		33:  {126, 8},
		34:  {108, 1},
		35:  {108, 1},
		36:  {108, 1},
		37:  {107, 4},
		38:  {106, 3},
		39:  {106, 3},
		40:  {105, 3},
		41:  {105, 3},
		42:  {119, 1},
		43:  {120, 5},
		44:  {120, 7},
		45:  {120, 5},
		46:  {117, 4},
		47:  {117, 7},
		48:  {117, 5},
		49:  {117, 6},
		50:  {117, 7},
		51:  {117, 7},
		52:  {117, 8},
		53:  {117, 7},
		54:  {117, 8},
		55:  {117, 8},
		56:  {117, 9},
		57:  {123, 4},
		58:  {146, 3},
		59:  {144, 0},
		60:  {144, 1},
		61:  {145, 1},
		62:  {145, 2},
		63:  {145, 2},
		64:  {143, 1},
		65:  {143, 1},
		66:  {134, 4},
		67:  {135, 3},
		68:  {124, 7},
		69:  {147, 0},
		70:  {147, 1},
		71:  {148, 1},
		72:  {148, 1},
		73:  {148, 2},
		74:  {148, 2},
		75:  {136, 4},
		76:  {136, 4},
		77:  {137, 3},
		78:  {127, 1},
		79:  {127, 3},
		80:  {103, 0},
		81:  {103, 1},
		82:  {103, 3},
		83:  {140, 0},
		84:  {140, 1},
		85:  {141, 1},
		86:  {141, 3},
		87:  {130, 0},
		88:  {130, 1},
		89:  {132, 1},
		90:  {132, 1},
		91:  {110, 1},
		92:  {109, 2},
		93:  {131, 1},
		94:  {131, 3},
		95:  {133, 1},
		96:  {133, 3},
		97:  {102, 0},
		98:  {102, 1},
		99:  {100, 1},
		100: {100, 3},
		101: {100, 3},
		102: {64, 1},
		103: {64, 1},
		104: {64, 1},
		105: {64, 5},
		106: {64, 3},
		107: {64, 1},
		108: {64, 2},
		109: {64, 5},
		110: {64, 7},
		111: {64, 3},
		112: {64, 1},
		113: {64, 1},
		114: {64, 1},
		115: {64, 4},
		116: {64, 4},
		117: {64, 1},
		118: {64, 4},
		119: {64, 1},
		120: {64, 4},
		121: {64, 1},
		122: {64, 1},
		123: {64, 3},
		124: {64, 2},
		125: {64, 4},
		126: {64, 4},
		127: {64, 6},
		128: {64, 3},
		129: {68, 3},
		130: {68, 4},
		131: {68, 4},
		132: {71, 1},
		133: {71, 1},
		134: {71, 1},
		135: {71, 1},
		136: {71, 1},
		137: {74, 1},
		138: {74, 3},
		139: {67, 5},
		140: {67, 4},
		141: {65, 5},
		142: {65, 4},
		143: {76, 2},
		144: {76, 2},
		145: {76, 2},
		146: {76, 2},
		147: {76, 4},
		148: {76, 2},
		149: {76, 4},
		150: {66, 3},
		151: {66, 3},
		152: {66, 3},
		153: {66, 3},
		154: {66, 3},
		155: {66, 3},
		156: {66, 3},
		157: {66, 3},
		158: {66, 3},
		159: {66, 3},
		160: {66, 3},
		161: {66, 3},
		162: {66, 3},
		163: {66, 3},
		164: {66, 3},
		165: {66, 3},
		166: {66, 3},
		167: {66, 3},
		168: {66, 3},
		169: {66, 3},
		170: {66, 2},
		171: {66, 2},
		172: {66, 3},
		173: {66, 3},
		174: {66, 3},
		175: {66, 3},
		176: {69, 8},
		177: {69, 9},
		178: {69, 10},
		179: {69, 9},
		180: {69, 10},
		181: {69, 11},
		182: {72, 4},
		183: {72, 6},
		184: {72, 8},
		185: {72, 7},
		186: {97, 1},
		187: {97, 3},
		188: {97, 2},
		189: {97, 2},
		190: {97, 5},
		191: {97, 2},
		192: {97, 6},
		193: {151, 2},
		194: {151, 4},
		195: {60, 2},
		196: {60, 3},
		197: {73, 4},
		198: {73, 8},
		199: {73, 3},
		200: {101, 1},
		201: {101, 3},
		202: {139, 1},
		203: {139, 3},
		204: {128, 3},
		205: {75, 6},
		206: {75, 5},
		207: {75, 5},
		208: {75, 6},
		209: {75, 5},
		210: {75, 5},
		211: {70, 1},
		212: {94, 0},
		213: {94, 1},
		214: {95, 1},
		215: {95, 1},
		216: {95, 2},
		217: {98, 0},
		218: {98, 1},
		219: {78, 1},
		220: {78, 2},
		221: {77, 1},
		222: {99, 2},
		223: {111, 1},
		224: {111, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [514][]uint16{
		// 0
		{13, 13, 13, 4: 13, 13, 13, 13, 233, 230, 12: 13, 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 227, 142: 226},
		{13: 225},
		{13: 224},
		{275, 302, 277, 223, 301, 298, 306, 288, 223, 10: 223, 223, 297, 223, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 257, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 79: 267, 264, 252, 253, 259, 268, 258, 256, 254, 269, 270, 255, 260, 100: 265, 105: 263, 262, 261, 238, 112: 237, 239, 240, 250, 251, 245, 249, 244, 266, 243, 241, 248, 247, 242, 246, 149: 236},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 10: 12, 12, 12, 12, 16: 12, 45: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 79: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		// 5
		{11, 11, 11, 11, 11, 11, 11, 11, 233, 10: 11, 11, 11, 11, 16: 11, 45: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 77: 232, 235, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 233, 10: 10, 10, 10, 10, 16: 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 77: 234, 79: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 10: 6, 6, 6, 6, 16: 6, 6, 45: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 79: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 10: 4, 4, 4, 4, 16: 4, 4, 45: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 79: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 10: 5, 5, 5, 5, 16: 5, 5, 45: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 79: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		// 10
		{9, 9, 9, 9, 9, 9, 9, 9, 233, 10: 9, 9, 9, 9, 16: 9, 45: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 77: 234, 79: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{3: 13, 8: 233, 230, 13, 13, 13: 13, 77: 232, 231, 94: 736, 737},
		{3: 221, 8: 221, 221, 221, 221, 13: 221},
		{3: 219, 8: 219, 219, 219, 219, 13: 219, 15: 219},
		{3: 218, 8: 218, 218, 218, 218, 13: 218, 15: 218},
		// 15
		{3: 217, 8: 217, 217, 217, 217, 13: 217, 15: 217},
		{3: 216, 8: 216, 216, 216, 216, 13: 216, 15: 216},
		{3: 215, 8: 215, 215, 215, 215, 13: 215, 15: 215},
		{3: 214, 8: 214, 214, 214, 214, 13: 214, 15: 214},
		{3: 213, 8: 213, 213, 213, 213, 13: 213, 15: 213},
		// 20
		{3: 212, 8: 212, 212, 212, 212, 13: 212, 15: 212},
		{3: 211, 8: 211, 211, 211, 211, 13: 211, 15: 211},
		{3: 210, 8: 210, 210, 210, 210, 13: 210, 15: 210},
		{3: 209, 8: 209, 209, 209, 209, 13: 209, 15: 209},
		{3: 208, 8: 208, 208, 208, 208, 13: 208, 15: 208},
		// 25
		{3: 207, 8: 207, 207, 207, 207, 13: 207, 15: 207},
		{3: 206, 8: 206, 206, 206, 206, 13: 206, 15: 206},
		{3: 205, 8: 205, 205, 205, 205, 13: 205, 15: 205},
		{3: 204, 8: 204, 204, 204, 204, 13: 204, 15: 204},
		{275, 302, 277, 128, 301, 298, 306, 288, 128, 128, 128, 128, 297, 128, 15: 128, 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 379, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 100: 557, 102: 735},
		// 30
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 734, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{12: 730},
		{321, 328, 325, 200, 350, 327, 7: 322, 200, 200, 200, 200, 13: 200, 324, 200, 17: 126, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 62: 679, 678},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 727, 729, 278, 728, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 727, 726, 278, 725, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		// 35
		{6: 706},
		{3: 191, 8: 191, 191, 191, 191, 13: 191, 15: 191},
		{3: 190, 8: 190, 190, 190, 190, 13: 190, 15: 190},
		{3: 189, 8: 189, 189, 189, 189, 13: 189, 15: 189},
		{12: 703, 127: 702},
		// 40
		{17: 315, 62: 699, 698, 99: 382},
		{3: 183, 8: 183, 183, 183, 183, 13: 183, 15: 183, 104: 689},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 685, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 628, 288, 9: 630, 12: 632, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 627, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 80: 264, 100: 265, 105: 263, 262, 261, 631, 127: 629},
		{6: 608},
		// 45
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 587, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 13: 123, 123, 123, 17: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 59: 123, 61: 123, 123, 123},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 13: 122, 122, 122, 17: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 59: 122, 61: 122, 122, 122},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 13: 121, 121, 121, 17: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 59: 121, 61: 121, 121, 121},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 13: 118, 118, 118, 17: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 59: 118, 61: 118, 118, 118},
		// 50
		{8, 8, 8, 4: 8, 8, 8, 8, 233, 12: 8, 16: 8, 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 582, 77: 232, 309, 98: 583},
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 581},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 579, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 13: 113, 113, 113, 17: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 59: 113, 61: 113, 113, 113},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 13: 112, 112, 112, 17: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 59: 112, 61: 112, 112, 112},
		// 55
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 13: 111, 111, 111, 17: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 59: 111, 61: 111, 111, 111},
		{387, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 13: 88, 88, 88, 17: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 59: 88, 61: 88, 88, 88},
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 13: 108, 108, 108, 17: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 59: 108, 61: 108, 108, 108},
		{2: 576},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 13: 106, 106, 106, 17: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 59: 106, 61: 106, 106, 106},
		// 60
		{2: 573},
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 13: 104, 104, 104, 17: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 59: 104, 61: 104, 104, 104},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 13: 103, 103, 103, 17: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 59: 103, 61: 103, 103, 103},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 572, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{2: 569},
		// 65
		{2: 563},
		{2: 541},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 13: 93, 93, 93, 17: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 59: 93, 61: 93, 93, 93},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 13: 92, 92, 92, 17: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 59: 92, 61: 92, 92, 92},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 13: 91, 91, 91, 17: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 59: 91, 61: 91, 91, 91},
		// 70
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 13: 90, 90, 90, 17: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 59: 90, 61: 90, 90, 90},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 13: 89, 89, 89, 17: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 59: 89, 61: 89, 89, 89},
		{14, 14, 535, 14, 14, 14, 14, 14, 14, 14, 14, 14, 13: 14, 14, 14, 17: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 59: 14, 61: 14, 14, 14},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 534, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 533, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		// 75
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 532, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 528, 280, 278, 279, 284, 274, 529, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 524, 280, 278, 279, 284, 274, 525, 272, 286, 287, 271, 282, 273},
		{2: 466, 12: 467},
		{2: 452},
		// 80
		{415, 6: 414},
		{8, 8, 8, 8, 8, 8, 8, 8, 233, 12: 8, 16: 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 77: 232, 309, 98: 308, 101: 307},
		{3: 413},
		{275, 302, 277, 25, 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 310, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 128: 312, 139: 311},
		{7, 7, 7, 7, 7, 7, 7, 7, 233, 10: 7, 7, 7, 16: 7, 7, 45: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 77: 234, 92: 7, 7},
		// 85
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 352, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{3: 8, 8: 233, 17: 315, 77: 232, 309, 98: 316, 314, 111: 313},
		{3: 23, 8: 23, 17: 23},
		{3: 24},
		{275, 302, 277, 2, 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 310, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 128: 318},
		// 90
		{8, 8, 8, 8, 8, 8, 8, 8, 233, 12: 8, 16: 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 77: 232, 309, 92: 8, 8, 98: 317},
		{3: 1, 59: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 12: 3, 16: 3, 45: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 92: 3, 3},
		{3: 22, 8: 22, 17: 22},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 410, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		// 95
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 409, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 15: 401, 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 400, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 399, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 398, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{12: 397},
		// 100
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 18: 128, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 379, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 100: 378, 102: 380},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 377, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 376, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 375, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 374, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		// 105
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 373, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 372, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 371, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 370, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 369, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		// 110
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 368, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 367, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 366, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 365, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 364, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		// 115
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 363, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 362, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 361, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 360, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 359, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		// 120
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 358, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 13: 55, 55, 55, 17: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59: 55, 61: 55, 55, 55},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 13: 54, 54, 54, 17: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 59: 54, 61: 54, 54, 54},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 357, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 356, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		// 125
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 355, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 354, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 353, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{321, 328, 325, 21, 350, 327, 7: 322, 21, 14: 324, 17: 21, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{321, 328, 325, 50, 350, 327, 50, 50, 50, 50, 50, 50, 13: 50, 324, 50, 17: 50, 50, 323, 330, 326, 329, 338, 336, 50, 348, 50, 50, 50, 334, 337, 339, 50, 347, 50, 335, 50, 50, 50, 50, 346, 331, 332, 333, 59: 50, 61: 50, 50, 50},
		// 130
		{321, 51, 325, 51, 51, 51, 51, 51, 51, 51, 51, 51, 13: 51, 324, 51, 17: 51, 51, 323, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 347, 51, 51, 51, 51, 51, 51, 346, 331, 51, 51, 59: 51, 61: 51, 51, 51},
		{321, 328, 325, 52, 350, 327, 52, 52, 52, 52, 52, 52, 13: 52, 324, 52, 17: 52, 52, 323, 330, 326, 329, 338, 336, 52, 348, 351, 52, 52, 334, 337, 339, 52, 347, 52, 335, 52, 52, 52, 52, 346, 331, 332, 333, 59: 52, 61: 52, 52, 52},
		{321, 328, 325, 53, 350, 53, 53, 53, 53, 53, 53, 53, 13: 53, 324, 53, 17: 53, 53, 323, 330, 53, 329, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 347, 53, 53, 53, 53, 53, 53, 346, 331, 332, 333, 59: 53, 61: 53, 53, 53},
		{321, 328, 325, 56, 350, 327, 56, 322, 56, 56, 56, 56, 13: 56, 324, 56, 17: 56, 56, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 56, 61: 56, 56, 56},
		{321, 328, 325, 57, 350, 327, 57, 322, 57, 57, 57, 57, 13: 57, 324, 57, 17: 57, 57, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 57, 61: 57, 57, 57},
		// 135
		{321, 328, 325, 58, 350, 327, 58, 322, 58, 58, 58, 58, 13: 58, 324, 58, 17: 58, 58, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 58, 61: 58, 58, 58},
		{321, 328, 325, 59, 350, 327, 59, 322, 59, 59, 59, 59, 13: 59, 324, 59, 17: 59, 59, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 59, 61: 59, 59, 59},
		{321, 328, 325, 60, 350, 327, 60, 322, 60, 60, 60, 60, 13: 60, 324, 60, 17: 60, 60, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 60, 61: 60, 60, 60},
		{321, 328, 325, 61, 350, 327, 61, 322, 61, 61, 61, 61, 13: 61, 324, 61, 17: 61, 61, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 61, 61: 61, 61, 61},
		{321, 328, 325, 62, 350, 327, 62, 62, 62, 62, 62, 62, 13: 62, 324, 62, 17: 62, 62, 323, 330, 326, 329, 62, 62, 62, 348, 62, 62, 62, 62, 62, 62, 62, 347, 62, 62, 62, 62, 62, 62, 346, 331, 332, 333, 59: 62, 61: 62, 62, 62},
		// 140
		{321, 328, 325, 63, 350, 327, 63, 63, 63, 63, 63, 63, 13: 63, 324, 63, 17: 63, 63, 323, 330, 326, 329, 63, 63, 63, 348, 63, 63, 63, 63, 63, 63, 63, 347, 63, 63, 63, 63, 63, 63, 346, 331, 332, 333, 59: 63, 61: 63, 63, 63},
		{321, 328, 325, 64, 350, 327, 64, 64, 64, 64, 64, 64, 13: 64, 324, 64, 17: 64, 64, 323, 330, 326, 329, 64, 64, 64, 348, 64, 64, 64, 64, 64, 64, 64, 347, 64, 64, 64, 64, 64, 64, 346, 331, 332, 333, 59: 64, 61: 64, 64, 64},
		{321, 328, 325, 65, 350, 327, 65, 65, 65, 65, 65, 65, 13: 65, 324, 65, 17: 65, 65, 323, 330, 326, 329, 65, 65, 65, 348, 65, 65, 65, 65, 65, 65, 65, 347, 65, 65, 65, 65, 65, 65, 346, 331, 332, 333, 59: 65, 61: 65, 65, 65},
		{321, 328, 325, 66, 350, 327, 66, 66, 66, 66, 66, 66, 13: 66, 324, 66, 17: 66, 66, 323, 330, 326, 329, 66, 66, 66, 348, 66, 66, 66, 66, 66, 66, 66, 347, 66, 66, 66, 66, 66, 66, 346, 331, 332, 333, 59: 66, 61: 66, 66, 66},
		{321, 328, 325, 67, 350, 327, 67, 67, 67, 67, 67, 67, 13: 67, 324, 67, 17: 67, 67, 323, 330, 326, 329, 67, 67, 67, 348, 67, 67, 67, 67, 67, 67, 67, 347, 67, 67, 67, 67, 67, 67, 346, 331, 332, 333, 59: 67, 61: 67, 67, 67},
		// 145
		{321, 68, 325, 68, 68, 68, 68, 68, 68, 68, 68, 68, 13: 68, 324, 68, 17: 68, 68, 323, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 347, 68, 68, 68, 68, 68, 68, 346, 331, 68, 68, 59: 68, 61: 68, 68, 68},
		{321, 69, 325, 69, 69, 69, 69, 69, 69, 69, 69, 69, 13: 69, 324, 69, 17: 69, 69, 323, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 347, 69, 69, 69, 69, 69, 69, 346, 331, 69, 69, 59: 69, 61: 69, 69, 69},
		{321, 328, 325, 70, 350, 327, 70, 322, 70, 70, 70, 70, 13: 70, 324, 70, 17: 70, 70, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 70, 61: 70, 70, 70},
		{321, 71, 325, 71, 71, 71, 71, 71, 71, 71, 71, 71, 13: 71, 324, 71, 17: 71, 71, 323, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 347, 71, 71, 71, 71, 71, 71, 346, 331, 71, 71, 59: 71, 61: 71, 71, 71},
		{321, 72, 325, 72, 72, 72, 72, 72, 72, 72, 72, 72, 13: 72, 324, 72, 17: 72, 72, 323, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 347, 72, 72, 72, 72, 72, 72, 346, 331, 72, 72, 59: 72, 61: 72, 72, 72},
		// 150
		{321, 73, 325, 73, 73, 73, 73, 73, 73, 73, 73, 73, 13: 73, 324, 73, 17: 73, 73, 323, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 347, 73, 73, 73, 73, 73, 73, 346, 331, 73, 73, 59: 73, 61: 73, 73, 73},
		{321, 328, 325, 74, 350, 74, 74, 74, 74, 74, 74, 74, 13: 74, 324, 74, 17: 74, 74, 323, 330, 74, 329, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 347, 74, 74, 74, 74, 74, 74, 346, 331, 332, 333, 59: 74, 61: 74, 74, 74},
		{321, 328, 325, 75, 350, 75, 75, 75, 75, 75, 75, 75, 13: 75, 324, 75, 17: 75, 75, 323, 330, 75, 329, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 347, 75, 75, 75, 75, 75, 75, 346, 331, 332, 333, 59: 75, 61: 75, 75, 75},
		{17: 315, 127, 61: 383, 99: 382},
		{321, 328, 325, 126, 350, 327, 7: 322, 126, 126, 126, 126, 13: 126, 324, 126, 17: 126, 126, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 126, 61: 126},
		// 155
		{18: 381},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 13: 83, 83, 83, 17: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 59: 83, 61: 83, 83, 83},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 385, 280, 278, 279, 284, 274, 386, 272, 286, 287, 271, 282, 273},
		{18: 384},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 13: 84, 84, 84, 17: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 59: 84, 61: 84, 84, 84},
		// 160
		{321, 328, 325, 125, 350, 327, 7: 322, 125, 125, 125, 125, 13: 125, 324, 125, 17: 125, 125, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 125, 61: 125, 125, 125},
		{387, 88, 88, 124, 88, 88, 7: 88, 124, 124, 124, 124, 13: 124, 88, 124, 17: 124, 124, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 59: 124, 61: 124, 124, 124},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 15: 389, 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 388, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 393, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 392},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 390, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		// 165
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 391},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 13: 18, 18, 18, 17: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 59: 18, 61: 18, 18, 18},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 13: 110, 110, 110, 17: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 59: 110, 61: 110, 110, 110},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 395, 276, 64: 394, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 396},
		// 170
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 13: 19, 19, 19, 17: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 59: 19, 61: 19, 19, 19},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 13: 20, 20, 20, 17: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59: 20, 61: 20, 20, 20},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 13: 87, 87, 87, 17: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 59: 87, 61: 87, 87, 87},
		{321, 97, 325, 97, 97, 97, 97, 97, 97, 97, 97, 97, 13: 97, 324, 97, 17: 97, 97, 323, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 347, 97, 97, 97, 97, 97, 97, 346, 331, 97, 97, 59: 97, 61: 97, 97, 97},
		{321, 328, 325, 102, 350, 327, 102, 322, 102, 102, 102, 102, 13: 102, 324, 102, 17: 102, 102, 323, 330, 326, 329, 338, 336, 319, 348, 351, 102, 102, 334, 337, 339, 102, 347, 102, 335, 320, 102, 349, 102, 346, 331, 332, 333, 59: 102, 61: 102, 102, 102},
		// 175
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 405, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 404},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 402, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 403},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 13: 15, 15, 15, 17: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 59: 15, 61: 15, 15, 15},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 13: 109, 109, 109, 17: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 59: 109, 61: 109, 109, 109},
		// 180
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 407, 276, 64: 406, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 59: 408},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13: 16, 16, 16, 17: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 59: 16, 61: 16, 16, 16},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13: 17, 17, 17, 17: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 59: 17, 61: 17, 17, 17},
		{321, 328, 325, 119, 350, 327, 119, 119, 119, 119, 119, 119, 13: 119, 324, 119, 17: 119, 119, 323, 330, 326, 329, 338, 336, 319, 348, 351, 119, 119, 334, 337, 339, 119, 347, 119, 335, 320, 119, 349, 119, 346, 331, 332, 333, 59: 119, 61: 119, 119, 119},
		// 185
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 411, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 412, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{321, 328, 325, 120, 350, 327, 120, 322, 120, 120, 120, 120, 13: 120, 324, 120, 17: 120, 120, 323, 330, 326, 329, 338, 336, 319, 348, 351, 120, 120, 334, 337, 339, 120, 347, 120, 335, 320, 120, 349, 120, 346, 331, 332, 333, 59: 120, 61: 120, 120, 120},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 13: 26, 26, 26, 17: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 59: 26, 61: 26, 26, 26},
		{8, 8, 8, 8, 8, 8, 8, 8, 233, 12: 8, 16: 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 77: 232, 309, 98: 308, 101: 450},
		// 190
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 417},
		{3: 39, 6: 39, 8: 39, 14: 39, 17: 39, 39, 59: 39},
		{14: 431, 59: 445},
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 444},
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 443},
		// 195
		{439},
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 438},
		{6: 426},
		{59: 424},
		{423, 30, 12: 30, 16: 30, 60: 425, 92: 30, 30},
		// 200
		{29, 29, 12: 29, 16: 29, 92: 29, 29},
		{8: 233, 12: 8, 77: 232, 309, 98: 427},
		{12: 429, 151: 428},
		{3: 8, 8: 233, 17: 315, 77: 232, 309, 98: 433, 434},
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 430},
		// 205
		{3: 32, 8: 32, 14: 431, 17: 32},
		{12: 432},
		{3: 38, 6: 38, 8: 38, 14: 38, 17: 38, 38, 59: 38},
		{3: 437},
		{12: 435},
		// 210
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 436},
		{3: 31, 8: 31, 14: 431, 17: 31},
		{3: 33, 6: 33, 8: 33, 14: 33, 17: 33, 33, 59: 33},
		{3: 34, 6: 34, 8: 34, 14: 431, 17: 34, 34, 59: 34},
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 440},
		// 215
		{14: 431, 59: 441},
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 442},
		{3: 35, 6: 35, 8: 35, 14: 431, 17: 35, 35, 59: 35},
		{3: 36, 6: 36, 8: 36, 14: 431, 17: 36, 36, 59: 36},
		{3: 37, 6: 37, 8: 37, 14: 431, 17: 37, 37, 59: 37},
		// 220
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 446},
		{6: 447, 14: 431},
		{8, 8, 8, 8, 8, 8, 8, 8, 233, 12: 8, 16: 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 77: 232, 309, 98: 308, 101: 448},
		{3: 449},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13: 27, 27, 27, 17: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 59: 27, 61: 27, 27, 27},
		// 225
		{3: 451},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 13: 28, 28, 28, 17: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 59: 28, 61: 28, 28, 28},
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 453, 150: 454},
		{14: 431, 17: 460, 459},
		{12: 455},
		// 230
		{17: 456},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 457, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 18: 458, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 13: 40, 40, 40, 17: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 59: 40, 61: 40, 40, 40},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 13: 43, 43, 43, 17: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 59: 43, 61: 43, 43, 43},
		// 235
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 461, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 17: 463, 462, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 13: 42, 42, 42, 17: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 59: 42, 61: 42, 42, 42},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 464, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 18: 465, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		// 240
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 13: 41, 41, 41, 17: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 59: 41, 61: 41, 41, 41},
		{12: 472, 18: 138, 109: 474, 473, 130: 506, 505, 469, 471},
		{2: 468},
		{12: 472, 18: 138, 109: 474, 473, 130: 475, 470, 469, 471},
		{17: 315, 137, 99: 502},
		// 245
		{17: 136, 136, 61: 490},
		{17: 135, 135},
		{423, 418, 12: 416, 16: 420, 134, 134, 60: 419, 134, 92: 421, 422, 97: 489},
		{17: 132, 132, 61: 132},
		{17: 130, 130},
		// 250
		{18: 476},
		{423, 418, 478, 6: 145, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 477, 103: 479},
		{6: 144, 14: 431},
		{423, 418, 12: 416, 16: 420, 18: 142, 60: 419, 92: 421, 422, 97: 485, 140: 483, 484},
		{6: 480},
		// 255
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 481},
		{3: 482},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 13: 46, 46, 46, 17: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 59: 46, 61: 46, 46, 46},
		{18: 488},
		{17: 315, 141, 99: 486},
		// 260
		{14: 431, 17: 140, 140},
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 487},
		{14: 431, 17: 139, 139},
		{6: 143},
		{14: 431, 17: 133, 133},
		// 265
		{423, 418, 12: 416, 16: 420, 18: 491, 60: 419, 92: 421, 422, 97: 492},
		{423, 418, 478, 6: 145, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 477, 103: 498},
		{14: 431, 18: 493},
		{423, 418, 478, 6: 145, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 477, 103: 494},
		{6: 495},
		// 270
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 496},
		{3: 497},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 13: 44, 44, 44, 17: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 59: 44, 61: 44, 44, 44},
		{6: 499},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 500},
		// 275
		{3: 501},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 13: 45, 45, 45, 17: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 59: 45, 61: 45, 45, 45},
		{12: 472, 109: 504, 503},
		{17: 131, 131, 61: 131},
		{17: 129, 129},
		// 280
		{17: 136, 136, 61: 512},
		{18: 507},
		{423, 418, 478, 6: 145, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 477, 103: 508},
		{6: 509},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 510},
		// 285
		{3: 511},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 13: 49, 49, 49, 17: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 59: 49, 61: 49, 49, 49},
		{423, 418, 12: 416, 16: 420, 18: 513, 60: 419, 92: 421, 422, 97: 514},
		{423, 418, 478, 6: 145, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 477, 103: 520},
		{14: 431, 18: 515},
		// 290
		{423, 418, 478, 6: 145, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 477, 103: 516},
		{6: 517},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 518},
		{3: 519},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 13: 47, 47, 47, 17: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 59: 47, 61: 47, 47, 47},
		// 295
		{6: 521},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 522},
		{3: 523},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 13: 48, 48, 48, 17: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 59: 48, 61: 48, 48, 48},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 526, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		// 300
		{387, 88, 88, 77, 88, 88, 77, 88, 77, 77, 77, 77, 13: 77, 88, 77, 17: 77, 77, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 59: 77, 61: 77, 77, 77},
		{12: 527},
		{87, 87, 87, 76, 87, 87, 76, 87, 76, 76, 76, 76, 13: 76, 87, 76, 17: 76, 76, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 59: 76, 61: 76, 76, 76},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 530, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{387, 88, 88, 79, 88, 88, 79, 88, 79, 79, 79, 79, 13: 79, 88, 79, 17: 79, 79, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 59: 79, 61: 79, 79, 79},
		// 305
		{12: 531},
		{87, 87, 87, 78, 87, 87, 78, 87, 78, 78, 78, 78, 13: 78, 87, 78, 17: 78, 78, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 59: 78, 61: 78, 78, 78},
		{321, 80, 325, 80, 80, 80, 80, 80, 80, 80, 80, 80, 13: 80, 324, 80, 17: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 331, 80, 80, 59: 80, 61: 80, 80, 80},
		{321, 81, 325, 81, 81, 81, 81, 81, 81, 81, 81, 81, 13: 81, 324, 81, 17: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 331, 81, 81, 59: 81, 61: 81, 81, 81},
		{321, 82, 325, 82, 82, 82, 82, 82, 82, 82, 82, 82, 13: 82, 324, 82, 17: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 331, 82, 82, 59: 82, 61: 82, 82, 82},
		// 310
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 18: 128, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 379, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 100: 536, 102: 537},
		{17: 315, 127, 61: 539, 99: 382},
		{18: 538},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 13: 85, 85, 85, 17: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 59: 85, 61: 85, 85, 85},
		{18: 540},
		// 315
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 13: 86, 86, 86, 17: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 59: 86, 61: 86, 86, 86},
		{275, 547, 277, 4: 301, 298, 306, 288, 12: 546, 16: 548, 18: 544, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 543, 64: 542, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 92: 421, 422, 97: 545},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 18: 562, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 554},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 13: 96, 96, 96, 17: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 59: 96, 61: 96, 96, 96},
		// 320
		{14: 431, 18: 553},
		{14, 14, 535, 4: 14, 14, 7: 14, 14: 39, 18: 39, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{275, 547, 277, 4: 301, 298, 306, 288, 12: 546, 16: 548, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 543, 64: 524, 280, 278, 279, 284, 274, 525, 272, 286, 287, 271, 282, 273, 92: 421, 422, 97: 444},
		{549, 6: 414},
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 550},
		// 325
		{14: 431, 59: 551},
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 552},
		{6: 447, 14: 431, 18: 35},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 13: 94, 94, 94, 17: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 59: 94, 61: 94, 94, 94},
		{6: 555, 14: 431, 18: 36},
		// 330
		{8, 8, 8, 8, 8, 8, 8, 8, 233, 12: 8, 16: 8, 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 77: 232, 309, 98: 556},
		{275, 302, 277, 128, 301, 298, 306, 288, 128, 12: 297, 16: 305, 128, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 379, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 100: 557, 102: 558},
		{3: 127, 8: 127, 127, 127, 127, 13: 127, 15: 127, 17: 315, 59: 127, 99: 382},
		{3: 8, 8: 233, 17: 315, 77: 232, 309, 98: 316, 560, 111: 559},
		{3: 561},
		// 335
		{3: 2, 59: 2},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 13: 115, 115, 115, 17: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 59: 115, 61: 115, 115, 115},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 13: 95, 95, 95, 17: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 59: 95, 61: 95, 95, 95},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 564, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 17: 566, 565, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		// 340
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 13: 99, 99, 99, 17: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 59: 99, 61: 99, 99, 99},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 567, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 18: 568, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 13: 98, 98, 98, 17: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 59: 98, 61: 98, 98, 98},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 570, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		// 345
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 18: 571, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 13: 100, 100, 100, 17: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 59: 100, 61: 100, 100, 100},
		{321, 328, 325, 101, 350, 327, 101, 322, 101, 101, 101, 101, 13: 101, 324, 101, 17: 101, 101, 323, 330, 326, 329, 338, 336, 319, 348, 351, 101, 101, 334, 337, 339, 101, 347, 101, 335, 320, 101, 349, 101, 346, 331, 332, 333, 59: 101, 61: 101, 101, 101},
		{423, 418, 12: 416, 16: 420, 60: 419, 92: 421, 422, 97: 574},
		{14: 431, 18: 575},
		// 350
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 13: 105, 105, 105, 17: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 59: 105, 61: 105, 105, 105},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 577, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 18: 578, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 13: 107, 107, 107, 17: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 59: 107, 61: 107, 107, 107},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 18: 580, 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		// 355
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 13: 114, 114, 114, 17: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 59: 114, 61: 114, 114, 114},
		{6: 555, 14: 431},
		{423, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 30, 117, 117, 117, 30, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 59: 117, 425, 117, 117, 117, 92: 30, 30},
		{275, 302, 277, 4: 301, 298, 306, 288, 128, 12: 297, 16: 305, 128, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 128, 276, 64: 379, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 100: 557, 102: 584},
		{8: 233, 17: 315, 59: 8, 77: 232, 309, 98: 316, 560, 111: 585},
		// 360
		{59: 586},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 13: 116, 116, 116, 17: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 59: 116, 61: 116, 116, 116},
		{321, 328, 325, 4: 350, 327, 588, 322, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{3: 8, 8: 233, 10: 8, 8, 77: 232, 309, 98: 589},
		{3: 156, 8: 156, 10: 594, 595, 136: 593, 592, 147: 590, 591},
		// 365
		{3: 8, 8: 233, 77: 232, 309, 98: 606},
		{3: 155, 8: 155, 10: 594, 595, 136: 604, 605},
		{3: 154, 8: 154, 10: 154, 154},
		{3: 153, 8: 153, 10: 153, 153},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 15: 128, 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 598, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 100: 557, 102: 599},
		// 370
		{15: 596},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 13, 13, 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 597},
		{3: 148, 8: 148, 10: 148, 148},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 602, 17: 126, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{15: 600},
		// 375
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 13, 13, 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 601},
		{3: 149, 8: 149, 10: 149, 149},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 13, 13, 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 603},
		{3: 150, 8: 150, 10: 150, 150},
		{3: 152, 8: 152, 10: 152, 152},
		// 380
		{3: 151, 8: 151, 10: 151, 151},
		{3: 607},
		{3: 157, 8: 157, 157, 157, 157, 13: 157, 15: 157},
		{3: 8, 8: 233, 10: 8, 8, 77: 232, 309, 98: 610, 146: 609},
		{3: 626},
		// 385
		{3: 166, 8: 166, 10: 616, 617, 134: 615, 614, 143: 613, 611, 612},
		{3: 8, 8: 233, 77: 232, 309, 98: 625},
		{3: 165, 8: 165, 10: 616, 617, 134: 623, 624},
		{3: 164, 8: 164, 10: 164, 164},
		{3: 161, 8: 161, 10: 161, 161},
		// 390
		{3: 160, 8: 160, 10: 160, 160},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 257, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 79: 267, 264, 252, 253, 259, 268, 258, 256, 254, 269, 270, 255, 260, 100: 265, 105: 263, 262, 261, 238, 112: 620, 239, 240, 250, 251, 245, 249, 244, 266, 243, 241, 248, 247, 242, 246},
		{15: 618},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 13, 13, 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 619},
		{3: 158, 8: 158, 10: 158, 158},
		// 395
		{15: 621},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 13, 13, 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 622},
		{3: 159, 8: 159, 10: 159, 159},
		{3: 163, 8: 163, 10: 163, 163},
		{3: 162, 8: 162, 10: 162, 162},
		// 400
		{3: 167},
		{3: 168, 8: 168, 168, 168, 168, 13: 168, 15: 168},
		{321, 328, 325, 4: 350, 327, 680, 322, 14: 324, 17: 126, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333, 62: 679, 678},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 643, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 676, 98: 308, 101: 307},
		{17: 315, 19: 669, 99: 670},
		// 405
		{275, 302, 277, 4: 301, 298, 306, 288, 9: 652, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 653, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{9: 633},
		{14, 14, 535, 4: 14, 14, 14, 14, 14: 14, 17: 147, 19: 147, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 62: 14, 14},
		{275, 302, 277, 4: 301, 298, 306, 288, 9: 634, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 635, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 645, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 646, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		// 410
		{321, 328, 325, 4: 350, 327, 7: 322, 9: 636, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{275, 302, 277, 4: 301, 298, 637, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 638, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 643, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 642, 98: 308, 101: 307},
		{321, 328, 325, 4: 350, 327, 639, 322, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 640},
		// 415
		{3: 641},
		{3: 169, 8: 169, 169, 169, 169, 13: 169, 15: 169},
		{3: 644},
		{10, 10, 10, 10, 10, 10, 10, 10, 233, 12: 10, 16: 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 77: 234, 79: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{3: 170, 8: 170, 170, 170, 170, 13: 170, 15: 170},
		// 420
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 643, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 650, 98: 308, 101: 307},
		{321, 328, 325, 4: 350, 327, 647, 322, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 648},
		{3: 649},
		{3: 171, 8: 171, 171, 171, 171, 13: 171, 15: 171},
		// 425
		{3: 651},
		{3: 172, 8: 172, 172, 172, 172, 13: 172, 15: 172},
		{275, 302, 277, 4: 301, 298, 662, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 663, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{321, 328, 325, 4: 350, 327, 7: 322, 9: 654, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{275, 302, 277, 4: 301, 298, 655, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 656, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		// 430
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 643, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 660, 98: 308, 101: 307},
		{321, 328, 325, 4: 350, 327, 657, 322, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 658},
		{3: 659},
		{3: 173, 8: 173, 173, 173, 173, 13: 173, 15: 173},
		// 435
		{3: 661},
		{3: 174, 8: 174, 174, 174, 174, 13: 174, 15: 174},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 643, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 667, 98: 308, 101: 307},
		{321, 328, 325, 4: 350, 327, 664, 322, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 665},
		// 440
		{3: 666},
		{3: 175, 8: 175, 175, 175, 175, 13: 175, 15: 175},
		{3: 668},
		{3: 176, 8: 176, 176, 176, 176, 13: 176, 15: 176},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 672, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		// 445
		{12: 671},
		{17: 146, 19: 146, 62: 146},
		{321, 328, 325, 4: 350, 327, 673, 322, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 674},
		{3: 675},
		// 450
		{3: 178, 8: 178, 178, 178, 178, 13: 178, 15: 178},
		{3: 677},
		{3: 179, 8: 179, 179, 179, 179, 13: 179, 15: 179},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 684, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 683, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		// 455
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 681},
		{3: 682},
		{3: 177, 8: 177, 177, 177, 177, 13: 177, 15: 177},
		{321, 328, 325, 185, 350, 327, 7: 322, 185, 185, 185, 185, 13: 185, 324, 185, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{321, 328, 325, 187, 350, 327, 7: 322, 187, 187, 187, 187, 13: 187, 324, 187, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		// 460
		{321, 328, 325, 4: 350, 327, 686, 322, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 687},
		{3: 688},
		{3: 182, 8: 182, 182, 182, 182, 13: 182, 15: 182, 104: 182},
		{6: 691, 79: 690},
		// 465
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 694, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 692},
		{3: 693},
		{3: 180, 8: 180, 180, 180, 180, 13: 180, 15: 180, 104: 180},
		{321, 328, 325, 4: 350, 327, 695, 322, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		// 470
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 696},
		{3: 697},
		{3: 181, 8: 181, 181, 181, 181, 13: 181, 15: 181, 104: 181},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 379, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 100: 701},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 379, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 100: 700},
		// 475
		{3: 184, 8: 184, 184, 184, 184, 13: 184, 15: 184, 17: 315, 99: 382},
		{3: 186, 8: 186, 186, 186, 186, 13: 186, 15: 186, 17: 315, 99: 382},
		{17: 315, 62: 704, 99: 670},
		{17: 147, 62: 147},
		{275, 302, 277, 4: 301, 298, 306, 288, 12: 297, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 379, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 100: 705},
		// 480
		{3: 188, 8: 188, 188, 188, 188, 13: 188, 15: 188, 17: 315, 99: 382},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 707},
		{3: 708},
		{138: 709},
		{6: 711, 12: 710},
		// 485
		{6: 718},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 712},
		{3: 713},
		{3: 192, 8: 192, 192, 192, 192, 13: 192, 15: 192, 129: 714},
		{6: 715},
		// 490
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 716},
		{3: 717},
		{3: 194, 8: 194, 194, 194, 194, 13: 194, 15: 194},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 719},
		{3: 720},
		// 495
		{3: 193, 8: 193, 193, 193, 193, 13: 193, 15: 193, 129: 721},
		{6: 722},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 723},
		{3: 724},
		{3: 195, 8: 195, 195, 195, 195, 13: 195, 15: 195},
		// 500
		{112, 112, 112, 197, 112, 112, 7: 112, 197, 197, 197, 197, 13: 197, 112, 197, 19: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		{111, 111, 111, 196, 111, 111, 7: 111, 196, 196, 196, 196, 13: 196, 111, 196, 19: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		{321, 328, 325, 4: 350, 327, 7: 322, 14: 324, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		{112, 112, 112, 199, 112, 112, 7: 112, 199, 199, 199, 199, 13: 199, 112, 199, 19: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		{111, 111, 111, 198, 111, 111, 7: 111, 198, 198, 198, 198, 13: 198, 111, 198, 19: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		// 505
		{6: 731},
		{13, 13, 13, 13, 13, 13, 13, 13, 233, 230, 12: 13, 16: 13, 45: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 77: 232, 231, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 94: 228, 229, 732},
		{3: 733},
		{3: 201, 8: 201, 201, 201, 201, 13: 201, 15: 201},
		{321, 328, 325, 202, 350, 327, 7: 322, 202, 202, 202, 202, 13: 202, 324, 202, 19: 323, 330, 326, 329, 338, 336, 319, 348, 351, 344, 343, 334, 337, 339, 341, 347, 342, 335, 320, 345, 349, 340, 346, 331, 332, 333},
		// 510
		{3: 203, 8: 203, 203, 203, 203, 13: 203, 15: 203},
		{3: 222, 8: 222, 10: 222, 222, 13: 222},
		{275, 302, 277, 12, 301, 298, 306, 288, 12, 10: 12, 12, 297, 12, 16: 305, 45: 299, 300, 289, 291, 290, 295, 303, 283, 304, 285, 296, 292, 293, 294, 60: 276, 64: 257, 280, 278, 279, 284, 274, 281, 272, 286, 287, 271, 282, 273, 79: 267, 264, 252, 253, 259, 268, 258, 256, 254, 269, 270, 255, 260, 100: 265, 105: 263, 262, 261, 238, 112: 738, 239, 240, 250, 251, 245, 249, 244, 266, 243, 241, 248, 247, 242, 246},
		{3: 220, 8: 220, 220, 220, 220, 13: 220},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 154

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			yyVAL.compstmt = nil
		}
	case 3:
		{
			yyVAL.compstmt = yyS[yypt-1].stmts
		}
	case 4:
		{
			yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		{
			yyS[yypt-2].stmts.Stmts = append(yyS[yypt-2].stmts.Stmts, yyS[yypt-0].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 6:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_var_or_lets
		}
	case 7:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_break
		}
	case 8:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_continue
		}
	case 9:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_return
		}
	case 10:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_throw
		}
	case 11:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_module
		}
	case 12:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 13:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_for
		}
	case 14:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_try
		}
	case 15:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_switch
		}
	case 16:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_select
		}
	case 17:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_go
		}
	case 18:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_defer
		}
	case 19:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_expr
		}
	case 20:
		{
			yyVAL.stmt_break = &ast.BreakStmt{}
			yyVAL.stmt_break.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 21:
		{
			yyVAL.stmt_continue = &ast.ContinueStmt{}
			yyVAL.stmt_continue.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 22:
		{
			yyVAL.stmt_return = &ast.ReturnStmt{Exprs: yyS[yypt-0].opt_exprs}
			yyVAL.stmt_return.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 23:
		{
			yyVAL.stmt_throw = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt_throw.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 24:
		{
			yyVAL.stmt_module = &ast.ModuleStmt{Name: yyS[yypt-3].tok.Lit, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_module.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 25:
		{
			yyVAL.stmt_expr = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt_expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 26:
		{
			callExpr := yyS[yypt-0].expr_call
			callExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: callExpr}
			yyVAL.stmt_go.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 27:
		{
			anonCallExpr := yyS[yypt-0].expr_anon_call
			anonCallExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: anonCallExpr}
			yyVAL.stmt_go.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 28:
		{
			callExpr := yyS[yypt-0].expr_call
			callExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: callExpr}
			yyVAL.stmt_defer.SetPosition(yyS[yypt-0].expr_call.Position())
		}
	case 29:
		{
			anonCallExpr := yyS[yypt-0].expr_anon_call
			anonCallExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: anonCallExpr}
			yyVAL.stmt_defer.SetPosition(yyS[yypt-0].expr_anon_call.Position())
		}
	case 30:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-10].compstmt, Var: yyS[yypt-7].tok.Lit, Catch: yyS[yypt-5].compstmt, Finally: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-12].tok.Position())
		}
	case 31:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-9].compstmt, Catch: yyS[yypt-5].compstmt, Finally: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-11].tok.Position())
		}
	case 32:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-6].compstmt, Var: yyS[yypt-3].tok.Lit, Catch: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 33:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-5].compstmt, Catch: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 34:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_var
		}
	case 35:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_typed_lets
		}
	case 36:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_lets
		}
	case 37:
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
			yyVAL.stmt_var.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 38:
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyS[yypt-2].expr}, Operator: "=", Rhss: []ast.Expr{yyS[yypt-0].expr}, Typed: true}
		}
	case 39:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
			}
			if len(yyS[yypt-2].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyS[yypt-2].exprs[0].Position())
			}
		}
	case 40:
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyS[yypt-2].expr}, Operator: "=", Rhss: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 41:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
			}
			if len(yyS[yypt-2].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyS[yypt-2].exprs[0].Position())
			}
		}
	case 42:
		{
			yyVAL.stmt_if = yyS[yypt-0].stmt_if_helper
			yyVAL.stmt_if.SetPosition(yyS[yypt-0].stmt_if_helper.Position())
		}
	case 43:
		{
			yyVAL.stmt_if_helper = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].compstmt, Else: nil}
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 44:
		{
			yyS[yypt-6].stmt_if_helper.(*ast.IfStmt).ElseIf = append(yyS[yypt-6].stmt_if_helper.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].compstmt})
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-6].stmt_if_helper.Position())
		}
	case 45:
		{
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-4].stmt_if_helper.Position())
			if yyVAL.stmt_if_helper.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if_helper.(*ast.IfStmt).Else = yyS[yypt-1].compstmt
			}
		}
	case 46:
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 47:
		{
			if len(yyS[yypt-5].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyS[yypt-5].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyS[yypt-5].expr_idents, Value: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
				yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
			}
		}
	case 48:
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 49:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 50:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 51:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyS[yypt-4].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 52:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 53:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-5].stmt_var_or_lets, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 54:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-6].stmt_var_or_lets, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 55:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-6].stmt_var_or_lets, Expr2: yyS[yypt-4].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 56:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-7].stmt_var_or_lets, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 57:
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt_select.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 58:
		{
			yyVAL.stmt_select_content = yyS[yypt-1].stmt_select_cases
		}
	case 59:
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 60:
		{
			yyVAL.stmt_select_cases = yyS[yypt-0].stmt_select_cases_helper
		}
	case 61:
		{
			yyVAL.stmt_select_cases_helper = yyS[yypt-0].stmt_select_body
		}
	case 62:
		{
			yyVAL.stmt_select_cases_helper.Cases = append(yyVAL.stmt_select_cases_helper.Cases, yyS[yypt-0].stmt_select_case)
		}
	case 63:
		{
			if yyVAL.stmt_select_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyVAL.stmt_select_cases_helper.Default = yyS[yypt-0].stmt_select_default
		}
	case 64:
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Default: yyS[yypt-0].stmt_select_default}
		}
	case 65:
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt_select_case}}
		}
	case 66:
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 67:
		{
			yyVAL.stmt_select_default = yyS[yypt-0].compstmt
		}
	case 68:
		{
			yyS[yypt-2].stmt_switch_cases.Expr = yyS[yypt-5].expr
			yyVAL.stmt_switch = yyS[yypt-2].stmt_switch_cases
			yyVAL.stmt_switch.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 69:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 70:
		{
			yyVAL.stmt_switch_cases = yyS[yypt-0].stmt_switch_cases_helper
		}
	case 71:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Default: yyS[yypt-0].stmt_switch_default}
		}
	case 72:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt_switch_case}}
		}
	case 73:
		{
			yyS[yypt-1].stmt_switch_cases_helper.Cases = append(yyS[yypt-1].stmt_switch_cases_helper.Cases, yyS[yypt-0].stmt_switch_case)
			yyVAL.stmt_switch_cases_helper = yyS[yypt-1].stmt_switch_cases_helper
		}
	case 74:
		{
			if yyS[yypt-1].stmt_switch_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyS[yypt-1].stmt_switch_cases_helper.Default = yyS[yypt-0].stmt_switch_default
		}
	case 75:
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyS[yypt-2].expr}, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 76:
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].opt_exprs, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 77:
		{
			yyVAL.stmt_switch_default = yyS[yypt-0].compstmt
		}
	case 78:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 79:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].tok.Lit)
		}
	case 80:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 81:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 82:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents1
		}
	case 83:
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 84:
		{
			yyVAL.opt_func_return_expr_idents1 = yyS[yypt-0].opt_func_return_expr_idents2
		}
	case 85:
		{
			yyVAL.opt_func_return_expr_idents2 = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 86:
		{
			yyVAL.opt_func_return_expr_idents2 = append(yyS[yypt-2].opt_func_return_expr_idents2, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 87:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 88:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents_not_empty
		}
	case 89:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_idents_last_untyped
		}
	case 90:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_typed_idents
		}
	case 91:
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 92:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-1].tok.Lit, TypeData: yyS[yypt-0].type_data}
		}
	case 93:
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyS[yypt-0].func_expr_untyped_ident}
		}
	case 94:
		{
			yyVAL.func_expr_idents_last_untyped = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_untyped_ident)
		}
	case 95:
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 96:
		{
			yyVAL.func_expr_typed_idents = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_typed_ident)
		}
	case 97:
		{
			yyVAL.opt_exprs = nil
		}
	case 98:
		{
			yyVAL.opt_exprs = yyS[yypt-0].exprs
		}
	case 99:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 100:
		{
			if len(yyS[yypt-2].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 101:
		{
			if len(yyS[yypt-2].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr_ident)
		}
	case 102:
		{
			yyVAL.expr = yyS[yypt-0].expr_member_or_ident
		}
	case 103:
		{
			yyVAL.expr = yyS[yypt-0].expr_literals
		}
	case 104:
		{
			yyVAL.expr = yyS[yypt-0].expr_unary
		}
	case 105:
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 106:
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 107:
		{
			yyVAL.expr = yyS[yypt-0].expr_func
		}
	case 108:
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 109:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-2].opt_exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 110:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-2].opt_exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-5].type_data, Dimensions: yyS[yypt-6].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 111:
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 112:
		{
			yyVAL.expr = yyS[yypt-0].expr_binary
		}
	case 113:
		{
			yyVAL.expr = yyS[yypt-0].expr_call
		}
	case 114:
		{
			yyVAL.expr = yyS[yypt-0].expr_anon_call
		}
	case 115:
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyS[yypt-3].expr_ident, Index: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].expr_ident.Position())
		}
	case 116:
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyS[yypt-3].expr, Index: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 117:
		{
			yyVAL.expr = yyS[yypt-0].expr_slice
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_slice.Position())
		}
	case 118:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 119:
		{
			yyVAL.expr = yyS[yypt-0].expr_dbg
		}
	case 120:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 121:
		{
			yyVAL.expr = yyS[yypt-0].expr_make
		}
	case 122:
		{
			yyVAL.expr = yyS[yypt-0].expr_map
		}
	case 123:
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 124:
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 125:
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 126:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 127:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 128:
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 129:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 130:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 131:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 132:
		{
			yyVAL.expr_literals = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 133:
		{
			yyVAL.expr_literals = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 134:
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 135:
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 136:
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 137:
		{
			yyVAL.expr_member_or_ident = yyS[yypt-0].expr_ident
		}
	case 138:
		{
			yyVAL.expr_member_or_ident = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr_member_or_ident.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 139:
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyS[yypt-4].tok.Lit, SubExprs: yyS[yypt-2].exprs, VarArg: true}
			yyVAL.expr_call.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 140:
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyS[yypt-3].tok.Lit, SubExprs: yyS[yypt-1].opt_exprs}
			yyVAL.expr_call.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 141:
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyS[yypt-4].expr, SubExprs: yyS[yypt-2].exprs, VarArg: true}
			yyVAL.expr_anon_call.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 142:
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].opt_exprs}
			yyVAL.expr_anon_call.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 143:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 144:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 145:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 146:
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: yyS[yypt-0].expr_ident}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_ident.Position())
		}
	case 147:
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 148:
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyS[yypt-0].expr_ident}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_ident.Position())
		}
	case 149:
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 150:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "+", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 151:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "-", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 152:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "*", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 153:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "/", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 154:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "%", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 155:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "**", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 156:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 157:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">>", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 158:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 159:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "!=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 160:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 161:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 162:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 163:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 164:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "+=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 165:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "-=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 166:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "*=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 167:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "/=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 168:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "&=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 169:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "|=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 170:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "++"}
			yyVAL.expr_binary.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 171:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "--"}
			yyVAL.expr_binary.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 172:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "|", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 173:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "||", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 174:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 175:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 176:
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-5].func_expr_idents, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt}
			yyVAL.expr_func.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 177:
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-6].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 178:
		{
			yyS[yypt-7].func_expr_idents_last_untyped[len(yyS[yypt-7].func_expr_idents_last_untyped)-1].TypeData = yyS[yypt-5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-7].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 179:
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-7].tok.Lit, Params: yyS[yypt-5].func_expr_idents, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt}
			yyVAL.expr_func.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 180:
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-8].tok.Lit, Params: yyS[yypt-6].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 181:
		{
			yyS[yypt-7].func_expr_idents_last_untyped[len(yyS[yypt-7].func_expr_idents_last_untyped)-1].TypeData = yyS[yypt-5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-9].tok.Lit, Params: yyS[yypt-7].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-10].tok.Position())
		}
	case 182:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr_make.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 183:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 184:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 185:
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 186:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 187:
		{
			if yyS[yypt-2].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyS[yypt-2].type_data.Env = append(yyS[yypt-2].type_data.Env, yyS[yypt-2].type_data.Name)
				yyS[yypt-2].type_data.Name = yyS[yypt-0].tok.Lit
			}
		}
	case 188:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 189:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 190:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 191:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 192:
		{
			yyVAL.type_data = yyS[yypt-2].type_data_struct
		}
	case 193:
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].type_data}}
		}
	case 194:
		{
			if yyS[yypt-3].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyS[yypt-1].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyS[yypt-0].type_data)
		}
	case 195:
		{
			yyVAL.slice_count = 1
		}
	case 196:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 197:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 198:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-5].type_data, SubType: yyS[yypt-3].type_data}
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 199:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-1].expr_map_content.Position())
		}
	case 200:
		{
			yyVAL.expr_map_content = &ast.MapExpr{}
		}
	case 201:
		{
			yyVAL.expr_map_content = yyS[yypt-1].expr_map_content_helper
		}
	case 202:
		{
			yyVAL.expr_map_content_helper = &ast.MapExpr{Keys: []ast.Expr{yyS[yypt-0].expr_map_key_value[0]}, Values: []ast.Expr{yyS[yypt-0].expr_map_key_value[1]}}
		}
	case 203:
		{
			if yyS[yypt-2].expr_map_content_helper.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map_content_helper.Keys = append(yyVAL.expr_map_content_helper.Keys, yyS[yypt-0].expr_map_key_value[0])
			yyVAL.expr_map_content_helper.Values = append(yyVAL.expr_map_content_helper.Values, yyS[yypt-0].expr_map_key_value[1])
		}
	case 204:
		{
			yyVAL.expr_map_key_value = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 205:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-5].expr_ident, Begin: yyS[yypt-3].expr, End: yyS[yypt-1].expr}
		}
	case 206:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-4].expr_ident, Begin: yyS[yypt-2].expr, End: nil}
		}
	case 207:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-4].expr_ident, Begin: nil, End: yyS[yypt-1].expr}
		}
	case 208:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-5].expr, Begin: yyS[yypt-3].expr, End: yyS[yypt-1].expr}
		}
	case 209:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-4].expr, Begin: yyS[yypt-2].expr, End: nil}
		}
	case 210:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-4].expr, Begin: nil, End: yyS[yypt-1].expr}
		}
	case 211:
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyS[yypt-0].tok.Position())
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
