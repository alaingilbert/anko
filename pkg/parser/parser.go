// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                      int
	stmts                    *ast.StmtsStmt
	else_if_list             []ast.Stmt
	else_if                  ast.Stmt
	stmt_switch_cases        *ast.SwitchStmt
	stmt_switch_cases_helper *ast.SwitchStmt
	stmt_select_content      *ast.SelectBodyStmt
	stmt_select_cases        []ast.Stmt
	stmt_select_cases_helper []ast.Stmt
	stmt                     ast.Stmt
	expr                     ast.Expr
	unary_op                 string
	expr_call_helper         struct {
		Exprs  []ast.Expr
		VarArg bool
	}
	exprs                         []ast.Expr
	expr_idents                   []string
	expr_for_idents               []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_args                struct {
		Params   []*ast.ParamExpr
		VarArg   bool
		TypeData *ast.TypeStruct
	}
	expr_typed_ident struct {
		Name     string
		TypeData *ast.TypeStruct
	}
	func_expr_typed_idents       []*ast.ParamExpr
	opt_func_return_expr_idents  []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1 []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents2 []*ast.FuncReturnValuesExpr
	expr_map_content             *ast.MapExpr
	expr_map_content_helper      *ast.MapExpr
	expr_map_key_value           []ast.Expr
	type_data                    *ast.TypeStruct
	slice_count                  int
	tok                          ast.Token
	opt_ident                    *ast.Token
	bin_op                       string
	op_assoc                     string
	op_assoc1                    string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57405
	yyEofCode   = 57344
	ANDAND      = 57364
	ANDEQ       = 57378
	ARRAY       = 57349
	BREAK       = 57380
	CASE        = 57389
	CATCH       = 57372
	CHAN        = 57393
	CLOSE       = 57399
	CONTINUE    = 57381
	DBG         = 57402
	DEFAULT     = 57390
	DEFER       = 57392
	DELETE      = 57398
	DIVEQ       = 57377
	ELSE        = 57356
	EQEQ        = 57359
	FALSE       = 57367
	FINALLY     = 57373
	FOR         = 57357
	FUNC        = 57351
	GE          = 57361
	GO          = 57391
	IDENT       = 57346
	IF          = 57355
	IN          = 57358
	LE          = 57362
	LEN         = 57397
	MAKE        = 57394
	MAP         = 57400
	MINUSEQ     = 57375
	MINUSMINUS  = 57383
	MODULE      = 57370
	MULEQ       = 57376
	NEQ         = 57360
	NEW         = 57365
	NIL         = 57368
	NILCOALESCE = 57369
	NUMBER      = 57347
	OPCHAN      = 57395
	OREQ        = 57379
	OROR        = 57363
	PLUSEQ      = 57374
	PLUSPLUS    = 57382
	POW         = 57384
	RETURN      = 57352
	SELECT      = 57388
	SHIFTLEFT   = 57385
	SHIFTRIGHT  = 57386
	STRING      = 57348
	STRUCT      = 57401
	SWITCH      = 57387
	THROW       = 57354
	TRUE        = 57366
	TRY         = 57371
	TYPE        = 57396
	UNARY       = 57404
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57403
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -244
)

var (
	yyPrec = map[int]int{
		POW:         0,
		'=':         1,
		PLUSEQ:      1,
		MINUSEQ:     1,
		DIVEQ:       1,
		MULEQ:       1,
		ANDEQ:       1,
		OREQ:        1,
		':':         2,
		OPCHAN:      3,
		'?':         4,
		NILCOALESCE: 4,
		OROR:        5,
		ANDAND:      6,
		EQEQ:        7,
		NEQ:         7,
		'<':         7,
		LE:          7,
		'>':         7,
		GE:          7,
		'+':         8,
		'-':         8,
		'|':         8,
		'^':         8,
		'*':         9,
		'/':         9,
		'%':         9,
		SHIFTLEFT:   9,
		SHIFTRIGHT:  9,
		'&':         9,
		IN:          10,
		PLUSPLUS:    11,
		MINUSMINUS:  11,
		UNARY:       12,
	}

	yyXLAT = map[int]int{
		91:    0,   // '[' (240x)
		42:    1,   // '*' (237x)
		40:    2,   // '(' (228x)
		123:   3,   // '{' (223x)
		125:   4,   // '}' (223x)
		38:    5,   // '&' (218x)
		45:    6,   // '-' (218x)
		57395: 7,   // OPCHAN (218x)
		10:    8,   // '\n' (191x)
		57390: 9,   // DEFAULT (156x)
		57389: 10,  // CASE (155x)
		59:    11,  // ';' (148x)
		57346: 12,  // IDENT (145x)
		57344: 13,  // $end (137x)
		58:    14,  // ':' (131x)
		57400: 15,  // MAP (131x)
		46:    16,  // '.' (130x)
		44:    17,  // ',' (127x)
		41:    18,  // ')' (122x)
		33:    19,  // '!' (110x)
		94:    20,  // '^' (110x)
		57399: 21,  // CLOSE (110x)
		57402: 22,  // DBG (110x)
		57398: 23,  // DELETE (110x)
		57367: 24,  // FALSE (110x)
		57351: 25,  // FUNC (110x)
		57358: 26,  // IN (110x)
		57397: 27,  // LEN (110x)
		57394: 28,  // MAKE (110x)
		57365: 29,  // NEW (110x)
		57368: 30,  // NIL (110x)
		57347: 31,  // NUMBER (110x)
		57348: 32,  // STRING (110x)
		57366: 33,  // TRUE (110x)
		37:    34,  // '%' (108x)
		43:    35,  // '+' (108x)
		47:    36,  // '/' (108x)
		60:    37,  // '<' (108x)
		62:    38,  // '>' (108x)
		63:    39,  // '?' (108x)
		124:   40,  // '|' (108x)
		57364: 41,  // ANDAND (108x)
		57378: 42,  // ANDEQ (108x)
		57377: 43,  // DIVEQ (108x)
		57359: 44,  // EQEQ (108x)
		57361: 45,  // GE (108x)
		57362: 46,  // LE (108x)
		57375: 47,  // MINUSEQ (108x)
		57383: 48,  // MINUSMINUS (108x)
		57376: 49,  // MULEQ (108x)
		57360: 50,  // NEQ (108x)
		57369: 51,  // NILCOALESCE (108x)
		57379: 52,  // OREQ (108x)
		57363: 53,  // OROR (108x)
		57374: 54,  // PLUSEQ (108x)
		57382: 55,  // PLUSPLUS (108x)
		57384: 56,  // POW (108x)
		57385: 57,  // SHIFTLEFT (108x)
		57386: 58,  // SHIFTRIGHT (108x)
		93:    59,  // ']' (105x)
		61:    60,  // '=' (80x)
		57350: 61,  // VARARG (79x)
		57403: 62,  // WALRUS (77x)
		57473: 63,  // slice_count (68x)
		57507: 64,  // typed_slice_count (66x)
		57425: 65,  // expr_ident (56x)
		57412: 66,  // expr (50x)
		57413: 67,  // expr_anon_call (50x)
		57414: 68,  // expr_array (50x)
		57415: 69,  // expr_assoc (50x)
		57416: 70,  // expr_binary (50x)
		57417: 71,  // expr_call (50x)
		57420: 72,  // expr_close (50x)
		57421: 73,  // expr_dbg (50x)
		57422: 74,  // expr_delete (50x)
		57424: 75,  // expr_func (50x)
		57427: 76,  // expr_in (50x)
		57428: 77,  // expr_item_or_slice (50x)
		57430: 78,  // expr_len (50x)
		57431: 79,  // expr_literals (50x)
		57432: 80,  // expr_literals_helper (50x)
		57433: 81,  // expr_make (50x)
		57434: 82,  // expr_map (50x)
		57438: 83,  // expr_member (50x)
		57439: 84,  // expr_member_or_ident (50x)
		57440: 85,  // expr_new (50x)
		57441: 86,  // expr_nil_coalesce (50x)
		57442: 87,  // expr_opchan (50x)
		57443: 88,  // expr_paren (50x)
		57445: 89,  // expr_ternary (50x)
		57447: 90,  // expr_unary (50x)
		57508: 91,  // unary_op (50x)
		57418: 92,  // expr_call_helper (38x)
		57457: 93,  // newline (37x)
		57406: 94,  // bin_op (36x)
		57444: 95,  // expr_slice_helper1 (36x)
		57459: 96,  // op_assoc (36x)
		57460: 97,  // op_assoc1 (36x)
		57458: 98,  // newlines (33x)
		57355: 99,  // IF (30x)
		57353: 100, // VAR (30x)
		57380: 101, // BREAK (29x)
		57393: 102, // CHAN (29x)
		57381: 103, // CONTINUE (29x)
		57392: 104, // DEFER (29x)
		57357: 105, // FOR (29x)
		57391: 106, // GO (29x)
		57370: 107, // MODULE (29x)
		57352: 108, // RETURN (29x)
		57388: 109, // SELECT (29x)
		57401: 110, // STRUCT (29x)
		57387: 111, // SWITCH (29x)
		57354: 112, // THROW (29x)
		57371: 113, // TRY (29x)
		57471: 114, // opt_term (19x)
		57504: 115, // term (19x)
		57409: 116, // compstmt (18x)
		57505: 117, // type_data (18x)
		57469: 118, // opt_newlines (14x)
		57407: 119, // comma_opt_newlines (12x)
		57448: 120, // exprs (11x)
		57356: 121, // ELSE (4x)
		57435: 122, // expr_map_content (4x)
		57446: 123, // expr_typed_ident (4x)
		57463: 124, // opt_exprs (4x)
		57483: 125, // stmt_lets (4x)
		57500: 126, // stmt_typed_lets (4x)
		57501: 127, // stmt_var (4x)
		57502: 128, // stmt_var_or_lets (4x)
		57475: 129, // stmt (3x)
		57476: 130, // stmt_break (3x)
		57477: 131, // stmt_continue (3x)
		57478: 132, // stmt_defer (3x)
		57479: 133, // stmt_expr (3x)
		57480: 134, // stmt_for (3x)
		57481: 135, // stmt_go (3x)
		57482: 136, // stmt_if (3x)
		57484: 137, // stmt_module (3x)
		57485: 138, // stmt_return (3x)
		57486: 139, // stmt_select (3x)
		57493: 140, // stmt_switch (3x)
		57498: 141, // stmt_throw (3x)
		57499: 142, // stmt_try (3x)
		57408: 143, // comma_separated_exprs (2x)
		57419: 144, // expr_callable (2x)
		57437: 145, // expr_map_key_value (2x)
		57453: 146, // func_expr_typed_ident (2x)
		57455: 147, // func_expr_untyped_ident (2x)
		57461: 148, // opt_comma_opt_newlines (2x)
		57462: 149, // opt_expr (2x)
		57468: 150, // opt_ident (2x)
		57487: 151, // stmt_select_case (2x)
		57494: 152, // stmt_switch_case (2x)
		57497: 153, // stmt_switch_default (2x)
		57372: 154, // CATCH (1x)
		57410: 155, // else_if (1x)
		57411: 156, // else_if_list (1x)
		57423: 157, // expr_for_idents (1x)
		57426: 158, // expr_idents (1x)
		57429: 159, // expr_iterable (1x)
		57436: 160, // expr_map_content_helper (1x)
		57373: 161, // FINALLY (1x)
		57449: 162, // func_expr_args (1x)
		57450: 163, // func_expr_idents (1x)
		57451: 164, // func_expr_idents_last_untyped (1x)
		57452: 165, // func_expr_idents_not_empty (1x)
		57454: 166, // func_expr_typed_idents (1x)
		57456: 167, // maybe_else (1x)
		57464: 168, // opt_finally (1x)
		57465: 169, // opt_func_return_expr_idents (1x)
		57466: 170, // opt_func_return_expr_idents1 (1x)
		57467: 171, // opt_func_return_expr_idents2 (1x)
		57470: 172, // opt_stmt_var_or_lets (1x)
		57472: 173, // slice (1x)
		57474: 174, // start (1x)
		57488: 175, // stmt_select_cases (1x)
		57489: 176, // stmt_select_cases_helper (1x)
		57490: 177, // stmt_select_content (1x)
		57491: 178, // stmt_select_default (1x)
		57492: 179, // stmt_select_opt_default (1x)
		57495: 180, // stmt_switch_cases (1x)
		57496: 181, // stmt_switch_cases_helper (1x)
		57503: 182, // stmts (1x)
		57396: 183, // TYPE (1x)
		57506: 184, // type_data_struct (1x)
		57405: 185, // $default (0x)
		57349: 186, // ARRAY (0x)
		57345: 187, // error (0x)
		57404: 188, // UNARY (0x)
	}

	yySymNames = []string{
		"'['",
		"'*'",
		"'('",
		"'{'",
		"'}'",
		"'&'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"DEFAULT",
		"CASE",
		"';'",
		"IDENT",
		"$end",
		"':'",
		"MAP",
		"'.'",
		"','",
		"')'",
		"'!'",
		"'^'",
		"CLOSE",
		"DBG",
		"DELETE",
		"FALSE",
		"FUNC",
		"IN",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"']'",
		"'='",
		"VARARG",
		"WALRUS",
		"slice_count",
		"typed_slice_count",
		"expr_ident",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_dbg",
		"expr_delete",
		"expr_func",
		"expr_in",
		"expr_item_or_slice",
		"expr_len",
		"expr_literals",
		"expr_literals_helper",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_nil_coalesce",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"unary_op",
		"expr_call_helper",
		"newline",
		"bin_op",
		"expr_slice_helper1",
		"op_assoc",
		"op_assoc1",
		"newlines",
		"IF",
		"VAR",
		"BREAK",
		"CHAN",
		"CONTINUE",
		"DEFER",
		"FOR",
		"GO",
		"MODULE",
		"RETURN",
		"SELECT",
		"STRUCT",
		"SWITCH",
		"THROW",
		"TRY",
		"opt_term",
		"term",
		"compstmt",
		"type_data",
		"opt_newlines",
		"comma_opt_newlines",
		"exprs",
		"ELSE",
		"expr_map_content",
		"expr_typed_ident",
		"opt_exprs",
		"stmt_lets",
		"stmt_typed_lets",
		"stmt_var",
		"stmt_var_or_lets",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_if",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"comma_separated_exprs",
		"expr_callable",
		"expr_map_key_value",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"opt_comma_opt_newlines",
		"opt_expr",
		"opt_ident",
		"stmt_select_case",
		"stmt_switch_case",
		"stmt_switch_default",
		"CATCH",
		"else_if",
		"else_if_list",
		"expr_for_idents",
		"expr_idents",
		"expr_iterable",
		"expr_map_content_helper",
		"FINALLY",
		"func_expr_args",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"maybe_else",
		"opt_finally",
		"opt_func_return_expr_idents",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"opt_stmt_var_or_lets",
		"slice",
		"start",
		"stmt_select_cases",
		"stmt_select_cases_helper",
		"stmt_select_content",
		"stmt_select_default",
		"stmt_select_opt_default",
		"stmt_switch_cases",
		"stmt_switch_cases_helper",
		"stmts",
		"TYPE",
		"type_data_struct",
		"$default",
		"ARRAY",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {174, 1},
		2:   {116, 1},
		3:   {116, 3},
		4:   {182, 1},
		5:   {182, 3},
		6:   {129, 1},
		7:   {129, 1},
		8:   {129, 1},
		9:   {129, 1},
		10:  {129, 1},
		11:  {129, 1},
		12:  {129, 1},
		13:  {129, 1},
		14:  {129, 1},
		15:  {129, 1},
		16:  {129, 1},
		17:  {129, 1},
		18:  {129, 1},
		19:  {129, 1},
		20:  {130, 1},
		21:  {131, 1},
		22:  {138, 2},
		23:  {141, 2},
		24:  {137, 5},
		25:  {133, 1},
		26:  {135, 2},
		27:  {132, 2},
		28:  {142, 10},
		29:  {168, 0},
		30:  {168, 4},
		31:  {172, 0},
		32:  {172, 1},
		33:  {128, 1},
		34:  {128, 1},
		35:  {128, 1},
		36:  {127, 4},
		37:  {126, 3},
		38:  {125, 3},
		39:  {136, 7},
		40:  {156, 0},
		41:  {156, 2},
		42:  {155, 6},
		43:  {167, 0},
		44:  {167, 4},
		45:  {134, 4},
		46:  {134, 5},
		47:  {134, 7},
		48:  {134, 9},
		49:  {159, 1},
		50:  {159, 1},
		51:  {159, 1},
		52:  {159, 1},
		53:  {159, 1},
		54:  {159, 1},
		55:  {157, 1},
		56:  {157, 3},
		57:  {139, 4},
		58:  {177, 0},
		59:  {177, 3},
		60:  {175, 0},
		61:  {175, 1},
		62:  {176, 1},
		63:  {176, 2},
		64:  {151, 4},
		65:  {179, 0},
		66:  {179, 1},
		67:  {178, 3},
		68:  {140, 7},
		69:  {180, 0},
		70:  {180, 1},
		71:  {181, 1},
		72:  {181, 1},
		73:  {181, 2},
		74:  {181, 2},
		75:  {152, 4},
		76:  {152, 4},
		77:  {153, 3},
		78:  {169, 0},
		79:  {169, 1},
		80:  {169, 3},
		81:  {170, 0},
		82:  {170, 1},
		83:  {171, 1},
		84:  {171, 3},
		85:  {163, 0},
		86:  {163, 1},
		87:  {165, 1},
		88:  {165, 1},
		89:  {147, 1},
		90:  {146, 1},
		91:  {164, 1},
		92:  {164, 3},
		93:  {166, 1},
		94:  {166, 3},
		95:  {124, 0},
		96:  {124, 1},
		97:  {120, 1},
		98:  {120, 3},
		99:  {149, 0},
		100: {149, 1},
		101: {66, 1},
		102: {66, 1},
		103: {66, 1},
		104: {66, 1},
		105: {66, 1},
		106: {66, 1},
		107: {66, 1},
		108: {66, 1},
		109: {66, 1},
		110: {66, 1},
		111: {66, 1},
		112: {66, 1},
		113: {66, 1},
		114: {66, 1},
		115: {66, 1},
		116: {66, 1},
		117: {66, 1},
		118: {66, 1},
		119: {66, 1},
		120: {66, 1},
		121: {66, 1},
		122: {73, 3},
		123: {73, 4},
		124: {73, 4},
		125: {78, 4},
		126: {88, 3},
		127: {68, 2},
		128: {68, 3},
		129: {68, 4},
		130: {143, 3},
		131: {86, 3},
		132: {89, 5},
		133: {85, 4},
		134: {87, 3},
		135: {87, 2},
		136: {76, 3},
		137: {74, 4},
		138: {74, 6},
		139: {72, 4},
		140: {79, 1},
		141: {80, 1},
		142: {80, 1},
		143: {80, 1},
		144: {80, 1},
		145: {80, 1},
		146: {84, 1},
		147: {84, 1},
		148: {65, 1},
		149: {123, 2},
		150: {150, 0},
		151: {150, 1},
		152: {83, 3},
		153: {144, 1},
		154: {144, 1},
		155: {71, 2},
		156: {67, 2},
		157: {92, 4},
		158: {92, 3},
		159: {91, 1},
		160: {91, 1},
		161: {91, 1},
		162: {90, 2},
		163: {90, 2},
		164: {90, 2},
		165: {94, 1},
		166: {94, 1},
		167: {94, 1},
		168: {94, 1},
		169: {94, 1},
		170: {94, 1},
		171: {94, 1},
		172: {94, 1},
		173: {94, 1},
		174: {94, 1},
		175: {94, 1},
		176: {94, 1},
		177: {70, 3},
		178: {70, 3},
		179: {70, 3},
		180: {70, 1},
		181: {96, 1},
		182: {96, 1},
		183: {96, 1},
		184: {96, 1},
		185: {96, 1},
		186: {96, 1},
		187: {69, 3},
		188: {69, 2},
		189: {69, 2},
		190: {97, 1},
		191: {97, 1},
		192: {97, 1},
		193: {97, 1},
		194: {97, 1},
		195: {75, 9},
		196: {162, 3},
		197: {162, 2},
		198: {162, 1},
		199: {81, 4},
		200: {81, 6},
		201: {81, 8},
		202: {81, 7},
		203: {117, 1},
		204: {117, 3},
		205: {117, 2},
		206: {117, 1},
		207: {117, 5},
		208: {117, 2},
		209: {117, 6},
		210: {184, 1},
		211: {184, 3},
		212: {64, 2},
		213: {63, 2},
		214: {63, 3},
		215: {82, 4},
		216: {82, 8},
		217: {82, 3},
		218: {122, 1},
		219: {122, 3},
		220: {160, 1},
		221: {160, 3},
		222: {145, 3},
		223: {77, 2},
		224: {95, 3},
		225: {173, 3},
		226: {173, 2},
		227: {173, 2},
		228: {173, 1},
		229: {158, 1},
		230: {158, 3},
		231: {114, 0},
		232: {114, 1},
		233: {115, 1},
		234: {115, 1},
		235: {115, 2},
		236: {118, 0},
		237: {118, 1},
		238: {98, 1},
		239: {98, 2},
		240: {93, 1},
		241: {119, 2},
		242: {148, 1},
		243: {148, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [428][]uint16{
		// 0
		{13, 13, 13, 13, 5: 13, 13, 13, 252, 11: 249, 13, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 246, 174: 245},
		{13: 244},
		{13: 243},
		{313, 333, 312, 339, 242, 332, 328, 316, 242, 242, 242, 12: 327, 242, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 276, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 99: 285, 283, 271, 103: 272, 278, 286, 277, 275, 273, 287, 111: 288, 274, 279, 120: 284, 125: 282, 281, 280, 257, 256, 258, 259, 269, 270, 264, 268, 263, 262, 260, 267, 266, 261, 265, 182: 255},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12: 12, 12, 15: 12, 19: 12, 12, 12, 12, 12, 12, 12, 27: 12, 12, 12, 12, 12, 12, 12, 99: 12, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 111: 12, 12, 12},
		// 5
		{11, 11, 11, 11, 11, 11, 11, 11, 252, 11, 11, 12: 11, 11, 15: 11, 19: 11, 11, 11, 11, 11, 11, 11, 27: 11, 11, 11, 11, 11, 11, 11, 93: 251, 98: 254, 11, 11, 11, 103: 11, 11, 11, 11, 11, 11, 11, 111: 11, 11, 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 252, 10, 10, 12: 10, 10, 15: 10, 19: 10, 10, 10, 10, 10, 10, 10, 27: 10, 10, 10, 10, 10, 10, 10, 93: 253, 99: 10, 10, 10, 103: 10, 10, 10, 10, 10, 10, 10, 111: 10, 10, 10},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 12: 6, 6, 15: 6, 17: 6, 19: 6, 6, 6, 6, 6, 6, 6, 27: 6, 6, 6, 6, 6, 6, 6, 59: 6, 99: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12: 4, 4, 15: 4, 17: 4, 19: 4, 4, 4, 4, 4, 4, 4, 27: 4, 4, 4, 4, 4, 4, 4, 59: 4, 99: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 12: 5, 5, 15: 5, 17: 5, 19: 5, 5, 5, 5, 5, 5, 5, 27: 5, 5, 5, 5, 5, 5, 5, 59: 5, 99: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		// 10
		{9, 9, 9, 9, 9, 9, 9, 9, 252, 9, 9, 12: 9, 9, 15: 9, 19: 9, 9, 9, 9, 9, 9, 9, 27: 9, 9, 9, 9, 9, 9, 9, 93: 253, 99: 9, 9, 9, 103: 9, 9, 9, 9, 9, 9, 9, 111: 9, 9, 9},
		{4: 13, 8: 252, 13, 13, 249, 13: 13, 93: 251, 98: 250, 114: 669, 670},
		{4: 240, 8: 240, 240, 240, 240, 13: 240},
		{4: 238, 8: 238, 238, 238, 238, 13: 238, 238},
		{4: 237, 8: 237, 237, 237, 237, 13: 237, 237},
		// 15
		{4: 236, 8: 236, 236, 236, 236, 13: 236, 236},
		{4: 235, 8: 235, 235, 235, 235, 13: 235, 235},
		{4: 234, 8: 234, 234, 234, 234, 13: 234, 234},
		{4: 233, 8: 233, 233, 233, 233, 13: 233, 233},
		{4: 232, 8: 232, 232, 232, 232, 13: 232, 232},
		// 20
		{4: 231, 8: 231, 231, 231, 231, 13: 231, 231},
		{4: 230, 8: 230, 230, 230, 230, 13: 230, 230},
		{4: 229, 8: 229, 229, 229, 229, 13: 229, 229},
		{4: 228, 8: 228, 228, 228, 228, 13: 228, 228},
		{4: 227, 8: 227, 227, 227, 227, 13: 227, 227},
		// 25
		{4: 226, 8: 226, 226, 226, 226, 13: 226, 226},
		{4: 225, 8: 225, 225, 225, 225, 13: 225, 225},
		{4: 224, 8: 224, 224, 224, 224, 13: 224, 224},
		{4: 223, 8: 223, 223, 223, 223, 13: 223, 223},
		{313, 333, 312, 339, 149, 332, 328, 316, 149, 149, 149, 149, 327, 149, 149, 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 404, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 120: 522, 124: 668},
		// 30
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 667, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{12: 663},
		{390, 361, 358, 4: 219, 369, 360, 354, 219, 219, 219, 219, 13: 219, 219, 16: 356, 147, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 60: 147, 62: 147, 92: 357, 94: 371, 389, 380, 373},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 502, 661, 295, 334, 297, 660, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 144: 662},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 502, 661, 295, 334, 297, 660, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 144: 659},
		// 35
		{3: 646},
		{4: 211, 8: 211, 211, 211, 211, 13: 211, 211},
		{4: 210, 8: 210, 210, 210, 210, 13: 210, 210},
		{4: 209, 8: 209, 209, 209, 209, 13: 209, 209},
		{12: 327, 65: 641, 158: 640},
		// 40
		{17: 348, 60: 637, 62: 636, 119: 407},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 620, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{313, 333, 312, 588, 5: 332, 328, 316, 11: 213, 592, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 589, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 100: 283, 120: 284, 125: 282, 281, 280, 587, 157: 590, 172: 591},
		{3: 570},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 549, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		// 45
		{143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 13: 143, 143, 16: 143, 143, 143, 26: 143, 34: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143},
		{142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 13: 142, 142, 16: 142, 142, 142, 26: 142, 34: 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142},
		{141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 13: 141, 141, 16: 141, 141, 141, 26: 141, 34: 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141},
		{140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 13: 140, 140, 16: 140, 140, 140, 26: 140, 34: 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140},
		{139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 13: 139, 139, 16: 139, 139, 139, 26: 139, 34: 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139},
		// 50
		{138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 13: 138, 138, 16: 138, 138, 138, 26: 138, 34: 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138},
		{137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 13: 137, 137, 16: 137, 137, 137, 26: 137, 34: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 13: 136, 136, 16: 136, 136, 136, 26: 136, 34: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 13: 135, 135, 16: 135, 135, 135, 26: 135, 34: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 13: 134, 134, 16: 134, 134, 134, 26: 134, 34: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134},
		// 55
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 13: 133, 133, 16: 133, 133, 133, 26: 133, 34: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 13: 132, 132, 16: 132, 132, 132, 26: 132, 34: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132},
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 13: 131, 131, 16: 131, 131, 131, 26: 131, 34: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 13: 130, 130, 16: 130, 130, 130, 26: 130, 34: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 13: 129, 129, 16: 129, 129, 129, 26: 129, 34: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129},
		// 60
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 13: 128, 128, 16: 128, 128, 128, 26: 128, 34: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 13: 127, 127, 16: 127, 127, 127, 26: 127, 34: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 13: 126, 126, 16: 126, 126, 126, 26: 126, 34: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 13: 125, 125, 16: 125, 125, 125, 26: 125, 34: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 13: 124, 124, 16: 124, 124, 124, 26: 124, 34: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124},
		// 65
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 13: 123, 123, 16: 123, 123, 123, 26: 123, 34: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123},
		{2: 535},
		{2: 532},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 530, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{8, 8, 8, 8, 5: 8, 8, 8, 252, 12: 8, 15: 8, 17: 8, 19: 8, 8, 8, 8, 8, 8, 8, 27: 8, 8, 8, 8, 8, 8, 8, 59: 527, 93: 251, 98: 342, 118: 521, 143: 528},
		// 70
		{3: 519},
		{2: 516},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 515, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{2: 509},
		{2: 506},
		// 75
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 13: 104, 104, 16: 104, 104, 104, 26: 104, 34: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 13: 103, 103, 16: 103, 103, 103, 26: 103, 34: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 13: 102, 102, 16: 102, 102, 102, 26: 102, 34: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 13: 101, 101, 16: 101, 101, 101, 26: 101, 34: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 13: 100, 100, 16: 100, 100, 100, 26: 100, 34: 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100},
		// 80
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 13: 99, 99, 16: 99, 99, 99, 26: 99, 34: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99},
		{98, 98, 358, 98, 98, 98, 98, 98, 98, 98, 98, 98, 13: 98, 98, 16: 98, 98, 98, 26: 98, 34: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 92: 505},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 13: 97, 97, 16: 97, 97, 97, 26: 97, 34: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 26: 96, 34: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 102: 96, 110: 96},
		{85, 85, 85, 85, 5: 85, 85, 85, 12: 85, 15: 85, 19: 85, 85, 85, 85, 85, 85, 85, 27: 85, 85, 85, 85, 85, 85, 85},
		// 85
		{84, 84, 84, 84, 5: 84, 84, 84, 12: 84, 15: 84, 19: 84, 84, 84, 84, 84, 84, 84, 27: 84, 84, 84, 84, 84, 84, 84},
		{83, 83, 83, 83, 5: 83, 83, 83, 12: 83, 15: 83, 19: 83, 83, 83, 83, 83, 83, 83, 27: 83, 83, 83, 83, 83, 83, 83},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 504, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 502, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 503, 303, 293, 306, 296, 292, 291, 331},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 502, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 501, 303, 293, 306, 296, 292, 291, 331},
		// 90
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 13: 64, 64, 16: 64, 64, 64, 26: 64, 34: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{2: 94, 12: 471, 150: 472},
		{2: 457},
		{428, 423, 12: 421, 15: 425, 63: 337, 424, 102: 426, 110: 427, 117: 456},
		{420, 3: 419},
		// 95
		{8, 8, 8, 8, 8, 8, 8, 8, 252, 12: 8, 15: 8, 19: 8, 8, 8, 8, 8, 8, 8, 27: 8, 8, 8, 8, 8, 8, 8, 93: 251, 98: 342, 118: 341, 122: 340},
		{4: 418},
		{313, 333, 312, 339, 26, 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 343, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 145: 345, 160: 344},
		{7, 7, 7, 7, 7, 7, 7, 7, 252, 7, 7, 12: 7, 15: 7, 17: 7, 19: 7, 7, 7, 7, 7, 7, 7, 27: 7, 7, 7, 7, 7, 7, 7, 59: 7, 93: 253, 102: 7, 110: 7},
		{390, 361, 358, 5: 369, 360, 354, 14: 388, 16: 356, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		// 100
		{4: 8, 8: 252, 17: 348, 93: 251, 98: 342, 118: 349, 347, 148: 346},
		{4: 24, 8: 24, 17: 24},
		{4: 25},
		{313, 333, 312, 339, 2, 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 343, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 145: 351},
		{8, 8, 8, 8, 8, 8, 8, 8, 252, 12: 8, 15: 8, 19: 8, 8, 8, 8, 8, 8, 8, 27: 8, 8, 8, 8, 8, 8, 8, 59: 8, 93: 251, 98: 342, 102: 8, 110: 8, 118: 350},
		// 105
		{4: 1, 59: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 12: 3, 15: 3, 19: 3, 3, 3, 3, 3, 3, 3, 27: 3, 3, 3, 3, 3, 3, 3, 59: 3, 102: 3, 110: 3},
		{4: 23, 8: 23, 17: 23},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 417, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 414, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		// 110
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 413, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 412, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{12: 411},
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 13: 88, 88, 16: 88, 88, 88, 26: 88, 34: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 18: 149, 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 404, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 120: 403, 124: 405},
		// 115
		{79, 79, 79, 79, 5: 79, 79, 79, 12: 79, 15: 79, 19: 79, 79, 79, 79, 79, 79, 79, 27: 79, 79, 79, 79, 79, 79, 79},
		{78, 78, 78, 78, 5: 78, 78, 78, 12: 78, 15: 78, 19: 78, 78, 78, 78, 78, 78, 78, 27: 78, 78, 78, 78, 78, 78, 78},
		{77, 77, 77, 77, 5: 77, 77, 77, 12: 77, 15: 77, 19: 77, 77, 77, 77, 77, 77, 77, 27: 77, 77, 77, 77, 77, 77, 77},
		{76, 76, 76, 76, 5: 76, 76, 76, 12: 76, 15: 76, 19: 76, 76, 76, 76, 76, 76, 76, 27: 76, 76, 76, 76, 76, 76, 76},
		{75, 75, 75, 75, 5: 75, 75, 75, 12: 75, 15: 75, 19: 75, 75, 75, 75, 75, 75, 75, 27: 75, 75, 75, 75, 75, 75, 75},
		// 120
		{74, 74, 74, 74, 5: 74, 74, 74, 12: 74, 15: 74, 19: 74, 74, 74, 74, 74, 74, 74, 27: 74, 74, 74, 74, 74, 74, 74},
		{73, 73, 73, 73, 5: 73, 73, 73, 12: 73, 15: 73, 19: 73, 73, 73, 73, 73, 73, 73, 27: 73, 73, 73, 73, 73, 73, 73},
		{72, 72, 72, 72, 5: 72, 72, 72, 12: 72, 15: 72, 19: 72, 72, 72, 72, 72, 72, 72, 27: 72, 72, 72, 72, 72, 72, 72},
		{71, 71, 71, 71, 5: 71, 71, 71, 12: 71, 15: 71, 19: 71, 71, 71, 71, 71, 71, 71, 27: 71, 71, 71, 71, 71, 71, 71},
		{70, 70, 70, 70, 5: 70, 70, 70, 12: 70, 15: 70, 19: 70, 70, 70, 70, 70, 70, 70, 27: 70, 70, 70, 70, 70, 70, 70},
		// 125
		{69, 69, 69, 69, 5: 69, 69, 69, 12: 69, 15: 69, 19: 69, 69, 69, 69, 69, 69, 69, 27: 69, 69, 69, 69, 69, 69, 69},
		{68, 68, 68, 68, 5: 68, 68, 68, 12: 68, 15: 68, 19: 68, 68, 68, 68, 68, 68, 68, 27: 68, 68, 68, 68, 68, 68, 68},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 402, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 401, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 400, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		// 130
		{63, 63, 63, 63, 5: 63, 63, 63, 12: 63, 15: 63, 19: 63, 63, 63, 63, 63, 63, 63, 27: 63, 63, 63, 63, 63, 63, 63},
		{62, 62, 62, 62, 5: 62, 62, 62, 12: 62, 15: 62, 19: 62, 62, 62, 62, 62, 62, 62, 27: 62, 62, 62, 62, 62, 62, 62},
		{61, 61, 61, 61, 5: 61, 61, 61, 12: 61, 15: 61, 19: 61, 61, 61, 61, 61, 61, 61, 27: 61, 61, 61, 61, 61, 61, 61},
		{60, 60, 60, 60, 5: 60, 60, 60, 12: 60, 15: 60, 19: 60, 60, 60, 60, 60, 60, 60, 27: 60, 60, 60, 60, 60, 60, 60},
		{59, 59, 59, 59, 5: 59, 59, 59, 12: 59, 15: 59, 19: 59, 59, 59, 59, 59, 59, 59, 27: 59, 59, 59, 59, 59, 59, 59},
		// 135
		{58, 58, 58, 58, 5: 58, 58, 58, 12: 58, 15: 58, 19: 58, 58, 58, 58, 58, 58, 58, 27: 58, 58, 58, 58, 58, 58, 58},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 399, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 13: 56, 56, 16: 56, 56, 56, 26: 56, 34: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 13: 55, 55, 16: 55, 55, 55, 26: 55, 34: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{54, 54, 54, 54, 5: 54, 54, 54, 12: 54, 15: 54, 19: 54, 54, 54, 54, 54, 54, 54, 27: 54, 54, 54, 54, 54, 54, 54},
		// 140
		{53, 53, 53, 53, 5: 53, 53, 53, 12: 53, 15: 53, 19: 53, 53, 53, 53, 53, 53, 53, 27: 53, 53, 53, 53, 53, 53, 53},
		{52, 52, 52, 52, 5: 52, 52, 52, 12: 52, 15: 52, 19: 52, 52, 52, 52, 52, 52, 52, 27: 52, 52, 52, 52, 52, 52, 52},
		{51, 51, 51, 51, 5: 51, 51, 51, 12: 51, 15: 51, 19: 51, 51, 51, 51, 51, 51, 51, 27: 51, 51, 51, 51, 51, 51, 51},
		{50, 50, 50, 50, 5: 50, 50, 50, 12: 50, 15: 50, 19: 50, 50, 50, 50, 50, 50, 50, 27: 50, 50, 50, 50, 50, 50, 50},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 398, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		// 145
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 13: 21, 21, 16: 21, 21, 21, 26: 21, 34: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 14: 393, 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 391, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 173: 392},
		{390, 361, 358, 5: 369, 360, 354, 14: 396, 16: 356, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 16, 92: 357, 94: 371, 389, 380, 373},
		{59: 395},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 394, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		// 150
		{390, 361, 358, 5: 369, 360, 354, 16: 356, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 17, 92: 357, 94: 371, 389, 380, 373},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 13: 20, 20, 16: 20, 20, 20, 26: 20, 34: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 59: 18, 63: 337, 314, 325, 397, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{390, 361, 358, 5: 369, 360, 354, 16: 356, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 19, 92: 357, 94: 371, 389, 380, 373},
		{390, 361, 358, 4: 22, 369, 360, 354, 22, 16: 356, 22, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		// 155
		{390, 361, 358, 57, 57, 369, 360, 354, 57, 57, 57, 57, 13: 57, 57, 16: 356, 57, 57, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 57, 57, 57, 57, 92: 357, 94: 371, 389, 380, 373},
		{390, 361, 358, 65, 65, 369, 360, 354, 65, 65, 65, 65, 13: 65, 65, 16: 356, 65, 65, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 65, 65, 65, 65, 92: 357, 94: 371, 389, 380, 373},
		{390, 361, 358, 66, 66, 369, 360, 66, 66, 66, 66, 66, 13: 66, 66, 16: 356, 66, 66, 26: 355, 34: 364, 359, 362, 66, 66, 66, 367, 66, 66, 66, 66, 66, 66, 66, 382, 66, 66, 66, 66, 66, 66, 381, 66, 365, 366, 66, 66, 66, 66, 92: 357, 94: 371, 389, 380, 373},
		{390, 361, 358, 67, 67, 369, 360, 354, 67, 67, 67, 67, 13: 67, 67, 16: 356, 67, 67, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 67, 67, 67, 67, 92: 357, 94: 371, 389, 380, 373},
		{17: 348, 148, 61: 408, 119: 407},
		// 160
		{390, 361, 358, 4: 147, 369, 360, 354, 147, 147, 147, 147, 13: 147, 147, 16: 356, 147, 147, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 147, 61: 147, 92: 357, 94: 371, 389, 380, 373},
		{18: 406},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 13: 86, 86, 16: 86, 86, 86, 26: 86, 34: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 410, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{18: 409},
		// 165
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 13: 87, 87, 16: 87, 87, 87, 26: 87, 34: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{390, 361, 358, 4: 146, 369, 360, 354, 146, 146, 146, 146, 13: 146, 146, 16: 356, 146, 146, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 146, 146, 146, 146, 92: 357, 94: 371, 389, 380, 373},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 13: 92, 92, 16: 92, 92, 92, 26: 92, 34: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{390, 108, 358, 108, 108, 108, 108, 108, 108, 108, 108, 108, 13: 108, 108, 16: 356, 108, 108, 26: 355, 34: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 382, 108, 108, 108, 108, 108, 108, 381, 108, 108, 108, 108, 108, 108, 108, 92: 357, 94: 371, 389, 380, 373},
		{390, 361, 358, 110, 110, 369, 360, 354, 110, 110, 110, 110, 13: 110, 110, 16: 356, 110, 110, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 110, 110, 372, 385, 387, 110, 382, 110, 383, 352, 110, 368, 110, 381, 110, 365, 366, 110, 110, 110, 110, 92: 357, 94: 371, 389, 380, 373},
		// 170
		{390, 361, 358, 5: 369, 360, 354, 14: 415, 16: 356, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 416, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{390, 361, 358, 112, 112, 369, 360, 354, 112, 112, 112, 112, 13: 112, 112, 16: 356, 112, 112, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 112, 112, 372, 385, 387, 112, 382, 112, 383, 352, 112, 368, 112, 381, 112, 365, 366, 112, 112, 112, 112, 92: 357, 94: 371, 389, 380, 373},
		{390, 361, 358, 113, 113, 369, 360, 113, 113, 113, 113, 113, 13: 113, 113, 16: 356, 113, 113, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 113, 113, 372, 385, 387, 113, 382, 113, 383, 352, 113, 368, 113, 381, 113, 365, 366, 113, 113, 113, 113, 92: 357, 94: 371, 389, 380, 373},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 13: 27, 27, 16: 27, 27, 27, 26: 27, 34: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		// 175
		{8, 8, 8, 8, 8, 8, 8, 8, 252, 12: 8, 15: 8, 19: 8, 8, 8, 8, 8, 8, 8, 27: 8, 8, 8, 8, 8, 8, 8, 93: 251, 98: 342, 118: 341, 122: 454},
		{428, 423, 12: 421, 15: 425, 63: 337, 424, 102: 426, 110: 427, 117: 422},
		{3: 41, 41, 8: 41, 16: 41, 41, 41, 59: 41},
		{16: 441, 59: 449},
		{428, 423, 12: 421, 15: 425, 63: 337, 424, 102: 426, 110: 427, 117: 448},
		// 180
		{3: 38, 38, 8: 38, 16: 38, 38, 38, 59: 38},
		{444},
		{428, 423, 12: 421, 15: 425, 63: 337, 424, 102: 426, 110: 427, 117: 443},
		{3: 431},
		{59: 429},
		// 185
		{428, 31, 12: 31, 15: 31, 63: 430, 102: 31, 110: 31},
		{30, 30, 12: 30, 15: 30, 102: 30, 110: 30},
		{8: 252, 12: 8, 93: 251, 98: 342, 118: 432},
		{12: 327, 65: 433, 123: 435, 184: 434},
		{428, 423, 12: 421, 15: 425, 63: 337, 424, 102: 426, 110: 427, 117: 440},
		// 190
		{4: 8, 8: 252, 17: 348, 93: 251, 98: 342, 118: 436, 437},
		{4: 34, 8: 34, 17: 34},
		{4: 439},
		{12: 327, 65: 433, 123: 438},
		{4: 33, 8: 33, 17: 33},
		// 195
		{3: 35, 35, 8: 35, 16: 35, 35, 35, 59: 35},
		{4: 95, 8: 95, 16: 441, 95, 95},
		{12: 442},
		{3: 40, 40, 8: 40, 16: 40, 40, 40, 59: 40},
		{3: 36, 36, 8: 36, 16: 441, 36, 36, 59: 36},
		// 200
		{428, 423, 12: 421, 15: 425, 63: 337, 424, 102: 426, 110: 427, 117: 445},
		{16: 441, 59: 446},
		{428, 423, 12: 421, 15: 425, 63: 337, 424, 102: 426, 110: 427, 117: 447},
		{3: 37, 37, 8: 37, 16: 441, 37, 37, 59: 37},
		{3: 39, 39, 8: 39, 16: 441, 39, 39, 59: 39},
		// 205
		{428, 423, 12: 421, 15: 425, 63: 337, 424, 102: 426, 110: 427, 117: 450},
		{3: 451, 16: 441},
		{8, 8, 8, 8, 8, 8, 8, 8, 252, 12: 8, 15: 8, 19: 8, 8, 8, 8, 8, 8, 8, 27: 8, 8, 8, 8, 8, 8, 8, 93: 251, 98: 342, 118: 341, 122: 452},
		{4: 453},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 13: 28, 28, 16: 28, 28, 28, 26: 28, 34: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		// 210
		{4: 455},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 13: 29, 29, 16: 29, 29, 29, 26: 29, 34: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{3: 32, 32, 8: 32, 16: 441, 32, 32, 59: 32},
		{428, 423, 12: 421, 15: 425, 63: 337, 424, 102: 426, 110: 427, 117: 458, 183: 459},
		{16: 441, 465, 464},
		// 215
		{12: 460},
		{17: 461},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 462, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{390, 361, 358, 5: 369, 360, 354, 16: 356, 18: 463, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 13: 42, 42, 16: 42, 42, 42, 26: 42, 34: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		// 220
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 13: 45, 45, 16: 45, 45, 45, 26: 45, 34: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 466, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{390, 361, 358, 5: 369, 360, 354, 16: 356, 468, 467, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 13: 44, 44, 16: 44, 44, 44, 26: 44, 34: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 469, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		// 225
		{390, 361, 358, 5: 369, 360, 354, 16: 356, 18: 470, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 13: 43, 43, 16: 43, 43, 43, 26: 43, 34: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{2: 93, 93},
		{2: 473},
		{12: 477, 18: 159, 65: 433, 123: 478, 146: 480, 479, 162: 481, 482, 475, 474, 476},
		// 230
		{17: 348, 158, 119: 498},
		{17: 157, 157, 61: 496},
		{17: 156, 156},
		{96, 96, 12: 96, 15: 96, 17: 155, 155, 61: 155, 102: 96, 110: 96},
		{17: 154, 154},
		// 235
		{17: 153, 153, 61: 153},
		{17: 151, 151},
		{18: 483},
		{18: 46},
		{428, 423, 485, 166, 12: 421, 15: 425, 63: 337, 424, 102: 426, 110: 427, 117: 484, 169: 486},
		// 240
		{3: 165, 16: 441},
		{428, 423, 12: 421, 15: 425, 18: 163, 63: 337, 424, 102: 426, 110: 427, 117: 492, 170: 490, 491},
		{3: 487},
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 11: 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 488},
		{4: 489},
		// 245
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 13: 49, 49, 16: 49, 49, 49, 26: 49, 34: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{18: 495},
		{17: 348, 162, 119: 493},
		{16: 441, 161, 161},
		{428, 423, 12: 421, 15: 425, 63: 337, 424, 102: 426, 110: 427, 117: 494},
		// 250
		{16: 441, 160, 160},
		{3: 164},
		{428, 423, 12: 421, 15: 425, 18: 47, 63: 337, 424, 102: 426, 110: 427, 117: 497},
		{16: 441, 18: 48},
		{12: 477, 65: 433, 123: 478, 146: 500, 499},
		// 255
		{17: 152, 152, 61: 152},
		{17: 150, 150},
		{143, 143, 143, 80, 80, 143, 143, 143, 80, 80, 80, 80, 13: 80, 80, 16: 143, 80, 80, 26: 143, 34: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 80, 80, 80, 80},
		{390, 361, 358, 5: 369, 360, 354, 16: 356, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{143, 143, 143, 81, 81, 143, 143, 143, 81, 81, 81, 81, 13: 81, 81, 16: 143, 81, 81, 26: 143, 34: 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 81, 81, 81, 81},
		// 260
		{390, 82, 358, 82, 82, 82, 82, 82, 82, 82, 82, 82, 13: 82, 82, 16: 356, 82, 82, 26: 82, 34: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 92: 357, 94: 371, 389, 380, 373},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 13: 89, 89, 16: 89, 89, 89, 26: 89, 34: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 507, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{390, 361, 358, 5: 369, 360, 354, 16: 356, 18: 508, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 13: 105, 105, 16: 105, 105, 105, 26: 105, 34: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105},
		// 265
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 510, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{390, 361, 358, 5: 369, 360, 354, 16: 356, 512, 511, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 13: 107, 107, 16: 107, 107, 107, 26: 107, 34: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 513, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{390, 361, 358, 5: 369, 360, 354, 16: 356, 18: 514, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		// 270
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 13: 106, 106, 16: 106, 106, 106, 26: 106, 34: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106},
		{390, 361, 358, 109, 109, 369, 360, 354, 109, 109, 109, 109, 13: 109, 109, 16: 356, 109, 109, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 109, 109, 372, 385, 387, 109, 382, 109, 383, 352, 109, 368, 109, 381, 109, 365, 366, 109, 109, 109, 109, 92: 357, 94: 371, 389, 380, 373},
		{428, 423, 12: 421, 15: 425, 63: 337, 424, 102: 426, 110: 427, 117: 517},
		{16: 441, 18: 518},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 13: 111, 111, 16: 111, 111, 111, 26: 111, 34: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		// 275
		{8, 8, 8, 8, 8, 8, 8, 8, 252, 12: 8, 15: 8, 17: 8, 19: 8, 8, 8, 8, 8, 8, 8, 27: 8, 8, 8, 8, 8, 8, 8, 93: 251, 98: 342, 118: 521, 143: 520},
		{4: 526},
		{313, 333, 312, 339, 149, 332, 328, 316, 149, 12: 327, 15: 338, 17: 149, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 59: 149, 63: 337, 314, 325, 404, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 120: 522, 124: 523},
		{4: 148, 8: 148, 148, 148, 148, 13: 148, 148, 17: 348, 59: 148, 119: 407},
		{4: 8, 8: 252, 17: 348, 59: 8, 93: 251, 98: 342, 118: 349, 525, 148: 524},
		// 280
		{4: 114, 59: 114},
		{4: 2, 59: 2},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 13: 115, 115, 16: 115, 115, 115, 26: 115, 34: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		{428, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 31, 117, 117, 31, 117, 117, 117, 26: 117, 34: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 430, 102: 31, 110: 31},
		{59: 529},
		// 285
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 13: 116, 116, 16: 116, 116, 116, 26: 116, 34: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116},
		{390, 361, 358, 5: 369, 360, 354, 16: 356, 18: 531, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 13: 118, 118, 16: 118, 118, 118, 26: 118, 34: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 533, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		{390, 361, 358, 5: 369, 360, 354, 16: 356, 18: 534, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		// 290
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 13: 119, 119, 16: 119, 119, 119, 26: 119, 34: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{313, 541, 312, 339, 5: 332, 328, 316, 12: 540, 15: 542, 18: 536, 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 539, 325, 537, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 102: 426, 110: 427, 117: 538},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 13: 122, 122, 16: 122, 122, 122, 26: 122, 34: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		{390, 361, 358, 5: 369, 360, 354, 16: 356, 18: 548, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{16: 441, 18: 547},
		// 295
		{3: 519, 16: 38, 18: 38},
		{96, 96, 96, 5: 96, 96, 96, 16: 96, 18: 96, 26: 96, 34: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		{313, 541, 312, 339, 5: 332, 328, 316, 12: 540, 15: 542, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 539, 325, 502, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 501, 303, 293, 306, 296, 292, 291, 331, 102: 426, 110: 427, 117: 448},
		{543, 3: 419},
		{428, 423, 12: 421, 15: 425, 63: 337, 424, 102: 426, 110: 427, 117: 544},
		// 300
		{16: 441, 59: 545},
		{428, 423, 12: 421, 15: 425, 63: 337, 424, 102: 426, 110: 427, 117: 546},
		{3: 451, 16: 441, 18: 37},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 13: 120, 120, 16: 120, 120, 120, 26: 120, 34: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 13: 121, 121, 16: 121, 121, 121, 26: 121, 34: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		// 305
		{390, 361, 358, 550, 5: 369, 360, 354, 16: 356, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{4: 8, 8: 252, 8, 8, 93: 251, 98: 342, 118: 551},
		{4: 175, 8: 175, 557, 556, 152: 555, 554, 180: 552, 553},
		{4: 8, 8: 252, 93: 251, 98: 342, 118: 568},
		{4: 174, 8: 174, 557, 556, 152: 566, 567},
		// 310
		{4: 173, 8: 173, 173, 173},
		{4: 172, 8: 172, 172, 172},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 14: 149, 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 560, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 120: 522, 124: 561},
		{14: 558},
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 13, 13, 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 559},
		// 315
		{4: 167, 8: 167, 167, 167},
		{390, 361, 358, 5: 369, 360, 354, 14: 564, 16: 356, 147, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{14: 562},
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 13, 13, 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 563},
		{4: 168, 8: 168, 168, 168},
		// 320
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 13, 13, 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 565},
		{4: 169, 8: 169, 169, 169},
		{4: 171, 8: 171, 171, 171},
		{4: 170, 8: 170, 170, 170},
		{4: 569},
		// 325
		{4: 176, 8: 176, 176, 176, 176, 13: 176, 176},
		{4: 186, 8: 252, 8, 8, 93: 251, 98: 342, 118: 572, 177: 571},
		{4: 586},
		{4: 184, 9: 184, 576, 151: 575, 175: 573, 574},
		{4: 179, 9: 583, 178: 582, 581},
		// 330
		{4: 183, 9: 183, 576, 151: 580},
		{4: 182, 9: 182, 182},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 276, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 99: 285, 283, 271, 103: 272, 278, 286, 277, 275, 273, 287, 111: 288, 274, 279, 120: 284, 125: 282, 281, 280, 257, 577, 258, 259, 269, 270, 264, 268, 263, 262, 260, 267, 266, 261, 265},
		{14: 578},
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 13, 13, 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 579},
		// 335
		{4: 180, 9: 180, 180},
		{4: 181, 9: 181, 181},
		{4: 185},
		{4: 178},
		{14: 584},
		// 340
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 11: 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 585},
		{4: 177},
		{4: 187, 8: 187, 187, 187, 187, 13: 187, 187},
		{11: 212},
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 11: 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 618, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 617, 118: 341, 122: 340},
		// 345
		{390, 361, 358, 614, 5: 369, 360, 354, 16: 356, 147, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 60: 147, 62: 147, 92: 357, 94: 371, 389, 380, 373},
		{26: 603},
		{11: 595},
		{96, 96, 96, 96, 5: 96, 96, 96, 16: 96, 593, 26: 189, 34: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 60: 96, 62: 96},
		{12: 594},
		// 350
		{26: 188},
		{313, 333, 312, 339, 5: 332, 328, 316, 11: 145, 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 597, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 149: 596},
		{11: 598},
		{390, 361, 358, 144, 5: 369, 360, 354, 11: 144, 16: 356, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 597, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 149: 599},
		// 355
		{3: 600},
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 11: 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 601},
		{4: 602},
		{4: 196, 8: 196, 196, 196, 196, 13: 196, 196},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 609, 502, 607, 606, 334, 297, 608, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 605, 610, 289, 303, 293, 306, 296, 292, 291, 331, 159: 604},
		// 360
		{3: 611},
		{127, 127, 127, 195, 5: 127, 127, 127, 16: 127, 26: 127, 34: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		{137, 137, 137, 194, 5: 137, 137, 137, 16: 137, 26: 137, 34: 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137},
		{133, 133, 133, 193, 5: 133, 133, 133, 16: 133, 26: 133, 34: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{134, 134, 134, 192, 5: 134, 134, 134, 16: 134, 26: 134, 34: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134},
		// 365
		{98, 98, 358, 191, 5: 98, 98, 98, 16: 98, 26: 98, 34: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 92: 505},
		{97, 97, 97, 190, 5: 97, 97, 97, 16: 97, 26: 97, 34: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97},
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 11: 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 612},
		{4: 613},
		{4: 197, 8: 197, 197, 197, 197, 13: 197, 197},
		// 370
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 11: 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 615},
		{4: 616},
		{4: 198, 8: 198, 198, 198, 198, 13: 198, 198},
		{4: 619},
		{10, 10, 10, 10, 10, 10, 10, 10, 252, 12: 10, 15: 10, 19: 10, 10, 10, 10, 10, 10, 10, 27: 10, 10, 10, 10, 10, 10, 10, 93: 253, 99: 10, 10, 10, 103: 10, 10, 10, 10, 10, 10, 10, 111: 10, 10, 10},
		// 375
		{4: 199, 8: 199, 199, 199, 199, 13: 199, 199},
		{390, 361, 358, 621, 5: 369, 360, 354, 16: 356, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 11: 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 622},
		{4: 623},
		{4: 204, 8: 204, 204, 204, 204, 13: 204, 204, 121: 204, 156: 624},
		// 380
		{4: 201, 8: 201, 201, 201, 201, 13: 201, 201, 121: 627, 155: 626, 167: 625},
		{4: 205, 8: 205, 205, 205, 205, 13: 205, 205},
		{4: 203, 8: 203, 203, 203, 203, 13: 203, 203, 121: 203},
		{3: 629, 99: 628},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 632, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331},
		// 385
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 11: 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 630},
		{4: 631},
		{4: 200, 8: 200, 200, 200, 200, 13: 200, 200},
		{390, 361, 358, 633, 5: 369, 360, 354, 16: 356, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 11: 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 634},
		// 390
		{4: 635},
		{4: 202, 8: 202, 202, 202, 202, 13: 202, 202, 121: 202},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 404, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 120: 639},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 404, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 120: 638},
		{4: 206, 8: 206, 206, 206, 206, 13: 206, 206, 17: 348, 119: 407},
		// 395
		{4: 207, 8: 207, 207, 207, 207, 13: 207, 207, 17: 348, 119: 407},
		{17: 348, 60: 642, 119: 643},
		{17: 15, 60: 15},
		{313, 333, 312, 339, 5: 332, 328, 316, 12: 327, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 404, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 120: 645},
		{12: 327, 65: 644},
		// 400
		{17: 14, 60: 14},
		{4: 208, 8: 208, 208, 208, 208, 13: 208, 208, 17: 348, 119: 407},
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 11: 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 647},
		{4: 648},
		{154: 649},
		// 405
		{3: 94, 12: 471, 150: 650},
		{3: 651},
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 11: 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 652},
		{4: 653},
		{4: 215, 8: 215, 215, 215, 215, 13: 215, 215, 161: 655, 168: 654},
		// 410
		{4: 216, 8: 216, 216, 216, 216, 13: 216, 216},
		{3: 656},
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 11: 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 657},
		{4: 658},
		{4: 214, 8: 214, 214, 214, 214, 13: 214, 214},
		// 415
		{4: 217, 8: 217, 217, 217, 217, 13: 217, 217},
		{134, 134, 134, 4: 91, 134, 134, 134, 91, 91, 91, 91, 13: 91, 91, 16: 134, 26: 134, 34: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134},
		{133, 133, 133, 4: 90, 133, 133, 133, 90, 90, 90, 90, 13: 90, 90, 16: 133, 26: 133, 34: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133},
		{4: 218, 8: 218, 218, 218, 218, 13: 218, 218},
		{3: 664},
		// 420
		{13, 13, 13, 13, 13, 13, 13, 13, 252, 11: 249, 13, 15: 13, 19: 13, 13, 13, 13, 13, 13, 13, 27: 13, 13, 13, 13, 13, 13, 13, 93: 251, 98: 250, 13, 13, 13, 103: 13, 13, 13, 13, 13, 13, 13, 111: 13, 13, 13, 247, 248, 665},
		{4: 666},
		{4: 220, 8: 220, 220, 220, 220, 13: 220, 220},
		{390, 361, 358, 4: 221, 369, 360, 354, 221, 221, 221, 221, 13: 221, 221, 16: 356, 26: 355, 34: 364, 359, 362, 386, 384, 353, 367, 370, 378, 377, 372, 385, 387, 375, 382, 376, 383, 352, 379, 368, 374, 381, 363, 365, 366, 92: 357, 94: 371, 389, 380, 373},
		{4: 222, 8: 222, 222, 222, 222, 13: 222, 222},
		// 425
		{4: 241, 8: 241, 241, 241, 13: 241},
		{313, 333, 312, 339, 12, 332, 328, 316, 12, 12, 12, 12: 327, 12, 15: 338, 19: 329, 330, 318, 310, 317, 323, 335, 27: 311, 336, 315, 324, 320, 321, 322, 63: 337, 314, 325, 276, 299, 295, 334, 297, 298, 307, 302, 308, 294, 309, 300, 301, 290, 319, 304, 305, 326, 289, 303, 293, 306, 296, 292, 291, 331, 99: 285, 283, 271, 103: 272, 278, 286, 277, 275, 273, 287, 111: 288, 274, 279, 120: 284, 125: 282, 281, 280, 257, 671, 258, 259, 269, 270, 264, 268, 263, 262, 260, 267, 266, 261, 265},
		{4: 239, 8: 239, 239, 239, 239, 13: 239},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 187

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmt
			}
		}
	case 2:
		{
			yyVAL.stmt = nil
		}
	case 3:
		{
			yyVAL.stmt = yyS[yypt-1].stmts
		}
	case 4:
		{
			yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 5:
		{
			yyS[yypt-2].stmts.Stmts = append(yyS[yypt-2].stmts.Stmts, yyS[yypt-0].stmt)
		}
	case 20:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 21:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 22:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 23:
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 24:
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyS[yypt-3].tok.Lit, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 25:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 26:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Go = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Go = true
			}
			yyVAL.stmt = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 27:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Defer = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Defer = true
			}
			yyVAL.stmt = &ast.DeferStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 28:
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyS[yypt-7].stmt, Var: yyS[yypt-4].opt_ident.Lit, Catch: yyS[yypt-2].stmt, Finally: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 29:
		{
			yyVAL.stmt = nil
		}
	case 30:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 31:
		{
			yyVAL.stmt = nil
		}
	case 32:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 33:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 34:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 35:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 36:
		{
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					arr := []ast.Expr{}
					for _, el := range yyS[yypt-2].expr_idents {
						arr = append(arr, &ast.IdentExpr{Lit: el})
					}
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: arr, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				}
			} else {
				yyVAL.stmt = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 37:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
				if len(yyS[yypt-2].exprs) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].exprs) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-2].exprs[0].Position())
		}
	case 38:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
				}
			} else {
				yyVAL.stmt = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].exprs) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].exprs) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-2].exprs[0].Position())
		}
	case 39:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-5].expr, Then: yyS[yypt-3].stmt, ElseIf: yyS[yypt-1].else_if_list, Else: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 40:
		{
			yyVAL.else_if_list = []ast.Stmt{}
		}
	case 41:
		{
			yyS[yypt-1].else_if_list = append(yyS[yypt-1].else_if_list, yyS[yypt-0].else_if)
			yyVAL.else_if_list = yyS[yypt-1].else_if_list
		}
	case 42:
		{
			yyVAL.else_if = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmt}
		}
	case 43:
		{
			yyVAL.stmt = nil
		}
	case 44:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 45:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 46:
		{
			yyVAL.stmt = &ast.LoopStmt{Expr: yyS[yypt-3].expr, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 47:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: yyS[yypt-5].expr_for_idents, Value: yyS[yypt-3].expr, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 48:
		{
			yyVAL.stmt = &ast.CForStmt{Stmt1: yyS[yypt-7].stmt, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 55:
		{
			yyVAL.expr_for_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 56:
		{
			yyVAL.expr_for_idents = []string{yyS[yypt-2].tok.Lit, yyS[yypt-0].tok.Lit}
		}
	case 57:
		{
			yyVAL.stmt = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 58:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{}
		}
	case 59:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{Cases: yyS[yypt-1].stmt_select_cases, Default: yyS[yypt-0].stmt}
		}
	case 60:
		{
			yyVAL.stmt_select_cases = nil
		}
	case 61:
		{
			yyVAL.stmt_select_cases = yyS[yypt-0].stmt_select_cases_helper
		}
	case 62:
		{
			yyVAL.stmt_select_cases_helper = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 63:
		{
			yyVAL.stmt_select_cases_helper = append(yyVAL.stmt_select_cases_helper, yyS[yypt-0].stmt)
		}
	case 64:
		{
			yyVAL.stmt = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 65:
		{
			yyVAL.stmt = nil
		}
	case 66:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 67:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 68:
		{
			yyS[yypt-2].stmt_switch_cases.Expr = yyS[yypt-5].expr
			yyVAL.stmt = yyS[yypt-2].stmt_switch_cases
			yyVAL.stmt.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 69:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 70:
		{
			yyVAL.stmt_switch_cases = yyS[yypt-0].stmt_switch_cases_helper
		}
	case 71:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Default: yyS[yypt-0].stmt}
		}
	case 72:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 73:
		{
			yyS[yypt-1].stmt_switch_cases_helper.Cases = append(yyS[yypt-1].stmt_switch_cases_helper.Cases, yyS[yypt-0].stmt)
			yyVAL.stmt_switch_cases_helper = yyS[yypt-1].stmt_switch_cases_helper
		}
	case 74:
		{
			if yyS[yypt-1].stmt_switch_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyS[yypt-1].stmt_switch_cases_helper.Default = yyS[yypt-0].stmt
		}
	case 75:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyS[yypt-2].expr}, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 76:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].exprs, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 77:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 78:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 79:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 80:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents1
		}
	case 81:
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 82:
		{
			yyVAL.opt_func_return_expr_idents1 = yyS[yypt-0].opt_func_return_expr_idents2
		}
	case 83:
		{
			yyVAL.opt_func_return_expr_idents2 = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 84:
		{
			yyVAL.opt_func_return_expr_idents2 = append(yyS[yypt-2].opt_func_return_expr_idents2, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 85:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 86:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents_not_empty
		}
	case 87:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_idents_last_untyped
		}
	case 88:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_typed_idents
		}
	case 89:
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 90:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].expr_typed_ident.Name, TypeData: yyS[yypt-0].expr_typed_ident.TypeData}
		}
	case 91:
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyS[yypt-0].func_expr_untyped_ident}
		}
	case 92:
		{
			yyVAL.func_expr_idents_last_untyped = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_untyped_ident)
		}
	case 93:
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 94:
		{
			yyVAL.func_expr_typed_idents = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_typed_ident)
		}
	case 95:
		{
			yyVAL.exprs = nil
		}
	case 96:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 97:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 98:
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 99:
		{
			yyVAL.expr = nil
		}
	case 100:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 122:
		{
			yyVAL.expr = &ast.DbgExpr{}
			yyVAL.expr.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 123:
		{
			yyVAL.expr = &ast.DbgExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 124:
		{
			yyVAL.expr = &ast.DbgExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 125:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 126:
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 127:
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 128:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 129:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprs, TypeData: yyS[yypt-3].type_data}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 130:
		{
			yyVAL.exprs = yyS[yypt-1].exprs
		}
	case 131:
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 132:
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 133:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 134:
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 135:
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 136:
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 137:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 138:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 139:
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 140:
		{
			yyVAL.expr = yyS[yypt-0].expr
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 141:
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 142:
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 143:
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 144:
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 145:
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 148:
		{
			yyVAL.expr = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 149:
		{
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: yyS[yypt-0].type_data}
		}
	case 150:
		{
			yyVAL.opt_ident = nil
		}
	case 151:
		{
			yyVAL.opt_ident = &yyS[yypt-0].tok
		}
	case 152:
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 155:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 156:
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyS[yypt-1].expr, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 157:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-2].exprs, VarArg: true}
		}
	case 158:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-1].exprs}
		}
	case 159:
		{
			yyVAL.unary_op = "-"
		}
	case 160:
		{
			yyVAL.unary_op = "!"
		}
	case 161:
		{
			yyVAL.unary_op = "^"
		}
	case 162:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: yyS[yypt-1].unary_op, Expr: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 163:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.IdentExpr); ok {
				yyVAL.expr = &ast.AddrExpr{Expr: el}
			} else if el, ok := yyS[yypt-0].expr.(*ast.MemberExpr); ok {
				yyVAL.expr = el
			}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 164:
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 165:
		{
			yyVAL.bin_op = "+"
		}
	case 166:
		{
			yyVAL.bin_op = "-"
		}
	case 167:
		{
			yyVAL.bin_op = "*"
		}
	case 168:
		{
			yyVAL.bin_op = "/"
		}
	case 169:
		{
			yyVAL.bin_op = yyS[yypt-0].tok.Lit
		}
	case 170:
		{
			yyVAL.bin_op = "%"
		}
	case 171:
		{
			yyVAL.bin_op = yyS[yypt-0].tok.Lit
		}
	case 172:
		{
			yyVAL.bin_op = yyS[yypt-0].tok.Lit
		}
	case 173:
		{
			yyVAL.bin_op = "|"
		}
	case 174:
		{
			yyVAL.bin_op = yyS[yypt-0].tok.Lit
		}
	case 175:
		{
			yyVAL.bin_op = "&"
		}
	case 176:
		{
			yyVAL.bin_op = yyS[yypt-0].tok.Lit
		}
	case 177:
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].bin_op, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 178:
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 179:
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].op_assoc1, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 180:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 181:
		{
			yyVAL.op_assoc = "+="
		}
	case 182:
		{
			yyVAL.op_assoc = "-="
		}
	case 183:
		{
			yyVAL.op_assoc = "*="
		}
	case 184:
		{
			yyVAL.op_assoc = "/="
		}
	case 185:
		{
			yyVAL.op_assoc = "&="
		}
	case 186:
		{
			yyVAL.op_assoc = "|="
		}
	case 187:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].op_assoc, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 188:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 189:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 190:
		{
			yyVAL.op_assoc1 = "!="
		}
	case 191:
		{
			yyVAL.op_assoc1 = ">"
		}
	case 192:
		{
			yyVAL.op_assoc1 = ">="
		}
	case 193:
		{
			yyVAL.op_assoc1 = "<"
		}
	case 194:
		{
			yyVAL.op_assoc1 = "<="
		}
	case 195:
		{
			f := &ast.FuncExpr{Params: yyS[yypt-5].func_expr_args.Params, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].stmt, VarArg: yyS[yypt-5].func_expr_args.VarArg}
			if yyS[yypt-5].func_expr_args.TypeData != nil {
				f.Params[len(f.Params)-1].TypeData = yyS[yypt-5].func_expr_args.TypeData
			}
			if yyS[yypt-7].opt_ident != nil {
				f.Name = yyS[yypt-7].opt_ident.Lit
			}
			yyVAL.expr = f
			yyVAL.expr.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 196:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-2].func_expr_idents_last_untyped, VarArg: true, TypeData: yyS[yypt-0].type_data}
		}
	case 197:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-1].func_expr_idents_last_untyped, VarArg: true, TypeData: nil}
		}
	case 198:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-0].func_expr_idents, VarArg: false, TypeData: nil}
		}
	case 199:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 200:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 201:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 202:
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 203:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 204:
		{
			if yyS[yypt-2].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyS[yypt-2].type_data.Env = append(yyS[yypt-2].type_data.Env, yyS[yypt-2].type_data.Name)
				yyS[yypt-2].type_data.Name = yyS[yypt-0].tok.Lit
			}
		}
	case 205:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 206:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 207:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 208:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 209:
		{
			yyVAL.type_data = yyS[yypt-2].type_data
		}
	case 210:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-0].expr_typed_ident.Name}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].expr_typed_ident.TypeData}}
		}
	case 211:
		{
			if yyS[yypt-2].type_data == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data.StructNames = append(yyVAL.type_data.StructNames, yyS[yypt-0].expr_typed_ident.Name)
			yyVAL.type_data.StructTypes = append(yyVAL.type_data.StructTypes, yyS[yypt-0].expr_typed_ident.TypeData)
		}
	case 212:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 213:
		{
			yyVAL.slice_count = 1
		}
	case 214:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 215:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyS[yypt-1].expr_map_content
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 216:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-5].type_data, SubType: yyS[yypt-3].type_data}
			yyVAL.expr = yyS[yypt-1].expr_map_content
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 217:
		{
			yyVAL.expr = yyS[yypt-1].expr_map_content
			yyVAL.expr.SetPosition(yyS[yypt-1].expr_map_content.Position())
		}
	case 218:
		{
			yyVAL.expr_map_content = &ast.MapExpr{}
		}
	case 219:
		{
			yyVAL.expr_map_content = yyS[yypt-1].expr_map_content_helper
		}
	case 220:
		{
			yyVAL.expr_map_content_helper = &ast.MapExpr{Keys: []ast.Expr{yyS[yypt-0].expr_map_key_value[0]}, Values: []ast.Expr{yyS[yypt-0].expr_map_key_value[1]}}
		}
	case 221:
		{
			yyVAL.expr_map_content_helper.Keys = append(yyVAL.expr_map_content_helper.Keys, yyS[yypt-0].expr_map_key_value[0])
			yyVAL.expr_map_content_helper.Values = append(yyVAL.expr_map_content_helper.Values, yyS[yypt-0].expr_map_key_value[1])
		}
	case 222:
		{
			yyVAL.expr_map_key_value = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 223:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-1].expr
			} else if el, ok := yyS[yypt-0].expr.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-1].expr
			}
			yyVAL.expr = yyS[yypt-0].expr
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 224:
		{
			yyVAL.expr = yyS[yypt-1].expr
		}
	case 225:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: yyS[yypt-0].expr}
		}
	case 226:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-1].expr, End: nil}
		}
	case 227:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: nil, End: yyS[yypt-0].expr}
		}
	case 228:
		{
			yyVAL.expr = &ast.ItemExpr{Index: yyS[yypt-0].expr}
		}
	case 229:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].expr.(*ast.IdentExpr).Lit}
		}
	case 230:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].expr.(*ast.IdentExpr).Lit)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
