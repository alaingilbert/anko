// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:43
type yySymType struct {
	yys                          int
	compstmt                     ast.Stmt
	stmts                        ast.Stmt
	stmt_var_or_lets             ast.Stmt
	stmt_var                     ast.Stmt
	stmt_lets                    ast.Stmt
	stmt_typed_lets              ast.Stmt
	stmt_if                      ast.Stmt
	stmt_for                     ast.Stmt
	stmt_switch                  ast.Stmt
	stmt_switch_cases            ast.Stmt
	stmt_switch_case             ast.Stmt
	stmt_switch_default          ast.Stmt
	stmt_select                  ast.Stmt
	stmt_select_cases            ast.Stmt
	stmt_select_case             ast.Stmt
	stmt_select_default          ast.Stmt
	stmt                         ast.Stmt
	expr                         ast.Expr
	exprs                        []ast.Expr
	expr_idents                  []string
	func_expr_idents             []*ast.ParamExpr
	func_expr_idents_not_empty   []*ast.ParamExpr
	func_expr_untyped_idents     []*ast.ParamExpr
	func_expr_typed_idents       []*ast.ParamExpr
	opt_func_return_expr_idents  []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1 []*ast.FuncReturnValuesExpr
	expr_map                     *ast.MapExpr
	type_data                    *ast.TypeStruct
	type_data_struct             *ast.TypeStruct
	slice_count                  int
	tok                          ast.Token
	expr_slice                   ast.Expr
	expr_ident                   ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"'?'",
	"':'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"'!'",
	"'^'",
	"'&'",
	"'.'",
	"'['",
	"']'",
	"'|'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1204

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	61, 86,
	62, 86,
	65, 86,
	78, 5,
	-2, 1,
	-1, 23,
	65, 87,
	-2, 28,
	-1, 28,
	61, 86,
	62, 86,
	-2, 69,
	-1, 60,
	61, 86,
	62, 86,
	65, 86,
	-2, 5,
	-1, 114,
	16, 70,
	65, 70,
	-2, 191,
	-1, 121,
	1, 95,
	8, 95,
	47, 95,
	48, 95,
	61, 95,
	62, 95,
	64, 95,
	65, 95,
	74, 95,
	75, 95,
	77, 95,
	78, 95,
	84, 95,
	86, 95,
	-2, 90,
	-1, 123,
	1, 97,
	8, 97,
	47, 97,
	48, 97,
	61, 97,
	62, 97,
	64, 97,
	65, 97,
	74, 97,
	75, 97,
	77, 97,
	78, 97,
	84, 97,
	86, 97,
	-2, 90,
	-1, 127,
	4, 180,
	51, 180,
	58, 180,
	59, 180,
	-2, 116,
	-1, 177,
	17, 0,
	18, 0,
	-2, 128,
	-1, 178,
	17, 0,
	18, 0,
	-2, 129,
	-1, 237,
	77, 171,
	82, 171,
	-2, 191,
	-1, 281,
	64, 5,
	-2, 86,
	-1, 294,
	75, 205,
	84, 205,
	-2, 197,
	-1, 315,
	75, 205,
	-2, 197,
	-1, 322,
	1, 89,
	8, 89,
	47, 89,
	48, 89,
	61, 89,
	62, 89,
	64, 89,
	65, 89,
	75, 89,
	77, 89,
	78, 89,
	84, 89,
	86, 89,
	-2, 90,
	-1, 328,
	1, 21,
	47, 21,
	48, 21,
	64, 21,
	75, 21,
	78, 21,
	86, 21,
	-2, 147,
	-1, 330,
	1, 23,
	47, 23,
	48, 23,
	64, 23,
	75, 23,
	78, 23,
	86, 23,
	-2, 149,
	-1, 332,
	1, 25,
	47, 25,
	48, 25,
	64, 25,
	75, 25,
	78, 25,
	86, 25,
	-2, 147,
	-1, 334,
	1, 27,
	47, 27,
	48, 27,
	64, 27,
	75, 27,
	78, 27,
	86, 27,
	-2, 149,
	-1, 374,
	75, 203,
	84, 203,
	-2, 198,
	-1, 393,
	1, 20,
	47, 20,
	48, 20,
	64, 20,
	75, 20,
	78, 20,
	86, 20,
	-2, 146,
	-1, 394,
	1, 22,
	47, 22,
	48, 22,
	64, 22,
	75, 22,
	78, 22,
	86, 22,
	-2, 148,
	-1, 395,
	1, 24,
	47, 24,
	48, 24,
	64, 24,
	75, 24,
	78, 24,
	86, 24,
	-2, 146,
	-1, 396,
	1, 26,
	47, 26,
	48, 26,
	64, 26,
	75, 26,
	78, 26,
	86, 26,
	-2, 148,
}

const yyPrivate = 57344

const yyLast = 4366

var yyAct = [...]int16{
	1, 295, 44, 352, 244, 214, 353, 215, 278, 9,
	279, 7, 5, 315, 213, 364, 31, 432, 62, 127,
	8, 8, 8, 355, 354, 375, 222, 294, 434, 222,
	144, 377, 281, 280, 8, 222, 222, 313, 8, 307,
	107, 86, 87, 89, 91, 101, 103, 133, 8, 228,
	520, 76, 117, 121, 123, 222, 92, 93, 94, 95,
	96, 97, 8, 310, 98, 99, 83, 84, 85, 159,
	155, 8, 137, 62, 144, 309, 504, 106, 225, 468,
	222, 222, 206, 145, 222, 73, 74, 75, 396, 439,
	88, 90, 78, 79, 80, 81, 82, 222, 203, 146,
	104, 333, 395, 58, 394, 102, 77, 105, 460, 100,
	199, 92, 93, 94, 95, 96, 97, 63, 423, 131,
	459, 83, 308, 222, 305, 221, 393, 222, 131, 222,
	219, 331, 106, 222, 380, 133, 133, 336, 133, 139,
	372, 62, 288, 128, 236, 133, 133, 218, 133, 80,
	81, 82, 371, 541, 287, 104, 131, 252, 154, 254,
	102, 77, 105, 162, 100, 126, 135, 160, 149, 539,
	334, 148, 143, 134, 136, 135, 92, 93, 94, 95,
	96, 97, 134, 136, 329, 132, 83, 142, 154, 141,
	140, 366, 538, 537, 132, 131, 533, 106, 137, 266,
	332, 508, 327, 135, 270, 532, 241, 137, 193, 530,
	134, 136, 62, 301, 523, 521, 208, 518, 507, 133,
	104, 505, 132, 501, 293, 102, 77, 105, 133, 100,
	131, 219, 220, 292, 499, 137, 261, 125, 236, 133,
	131, 154, 135, 230, 242, 485, 314, 312, 481, 134,
	136, 536, 123, 330, 251, 480, 249, 250, 479, 154,
	478, 132, 470, 469, 256, 257, 258, 259, 322, 391,
	154, 328, 344, 453, 137, 131, 449, 135, 447, 446,
	290, 445, 302, 442, 134, 136, 358, 135, 357, 438,
	133, 360, 133, 154, 134, 136, 132, 413, 399, 386,
	343, 157, 269, 487, 340, 262, 132, 276, 62, 137,
	133, 415, 325, 427, 384, 323, 133, 267, 255, 137,
	528, 297, 135, 527, 524, 390, 516, 300, 515, 134,
	136, 511, 493, 490, 465, 462, 443, 417, 227, 392,
	156, 132, 398, 116, 68, 154, 400, 401, 368, 403,
	456, 154, 320, 248, 137, 409, 202, 383, 408, 201,
	414, 410, 158, 152, 153, 359, 110, 154, 514, 133,
	500, 133, 326, 420, 133, 421, 133, 356, 429, 67,
	133, 10, 133, 492, 422, 461, 62, 425, 367, 373,
	370, 355, 354, 444, 251, 281, 280, 289, 495, 216,
	424, 376, 379, 448, 342, 450, 451, 311, 202, 298,
	113, 454, 286, 285, 168, 387, 457, 151, 458, 66,
	47, 4, 378, 418, 150, 60, 133, 133, 217, 2,
	133, 277, 466, 59, 421, 20, 351, 133, 365, 463,
	19, 17, 16, 467, 477, 25, 26, 24, 3, 0,
	0, 407, 0, 482, 0, 0, 483, 484, 0, 412,
	0, 0, 0, 489, 133, 0, 491, 0, 0, 0,
	0, 133, 426, 0, 0, 0, 0, 0, 431, 0,
	497, 0, 0, 130, 494, 0, 0, 0, 0, 133,
	133, 506, 0, 0, 510, 133, 0, 0, 133, 513,
	0, 0, 0, 503, 0, 0, 0, 133, 0, 0,
	0, 133, 522, 0, 0, 0, 525, 526, 64, 0,
	517, 23, 0, 133, 519, 531, 0, 0, 534, 535,
	0, 0, 471, 65, 0, 0, 529, 540, 0, 475,
	70, 72, 0, 0, 0, 0, 108, 111, 115, 0,
	0, 0, 118, 119, 120, 122, 124, 0, 0, 0,
	486, 0, 0, 0, 138, 0, 0, 0, 0, 0,
	0, 223, 224, 147, 226, 0, 0, 0, 0, 23,
	234, 239, 240, 0, 243, 0, 0, 0, 0, 0,
	0, 0, 164, 165, 166, 167, 0, 169, 170, 171,
	172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 0, 0, 189,
	190, 191, 192, 0, 194, 196, 197, 0, 0, 0,
	0, 205, 0, 6, 0, 0, 209, 0, 0, 61,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 291, 0, 0, 0, 231,
	233, 0, 0, 0, 299, 245, 0, 246, 247, 0,
	0, 0, 0, 0, 223, 306, 253, 129, 0, 0,
	0, 0, 107, 86, 87, 89, 91, 129, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 265, 0, 0, 0, 0, 106,
	268, 0, 0, 272, 0, 275, 0, 0, 369, 284,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 200, 0, 0, 381, 102, 77, 105,
	129, 100, 385, 0, 124, 46, 32, 38, 0, 0,
	42, 245, 0, 0, 0, 0, 0, 0, 0, 0,
	321, 0, 0, 0, 50, 39, 40, 41, 129, 335,
	0, 0, 0, 337, 0, 0, 0, 0, 129, 0,
	0, 0, 347, 349, 0, 0, 0, 0, 0, 0,
	23, 0, 361, 51, 54, 419, 48, 56, 55, 52,
	0, 49, 428, 0, 0, 210, 430, 0, 433, 0,
	33, 37, 0, 0, 0, 53, 0, 45, 0, 382,
	34, 35, 36, 0, 43, 388, 129, 0, 389, 0,
	0, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 296, 129, 0, 0, 0, 0,
	0, 129, 0, 464, 0, 0, 0, 0, 0, 406,
	0, 0, 0, 472, 411, 0, 0, 0, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 237, 32,
	38, 0, 0, 42, 0, 0, 0, 0, 0, 0,
	488, 0, 437, 0, 0, 200, 440, 50, 39, 40,
	41, 129, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 129, 502, 0, 0, 374, 0,
	0, 509, 0, 0, 512, 135, 51, 54, 0, 48,
	56, 55, 238, 136, 49, 0, 296, 0, 0, 374,
	0, 0, 0, 33, 235, 473, 0, 0, 53, 0,
	45, 232, 0, 34, 35, 36, 0, 43, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	200, 0, 200, 0, 0, 129, 0, 0, 0, 0,
	0, 0, 0, 0, 245, 498, 0, 0, 107, 86,
	87, 89, 91, 101, 103, 0, 129, 0, 0, 76,
	296, 0, 129, 0, 92, 93, 94, 95, 96, 97,
	0, 0, 98, 99, 83, 84, 85, 0, 0, 0,
	0, 0, 0, 0, 0, 106, 0, 0, 0, 200,
	0, 0, 0, 0, 0, 75, 0, 436, 88, 90,
	78, 79, 80, 81, 82, 0, 0, 0, 104, 435,
	0, 0, 0, 102, 77, 105, 129, 100, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 129, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 296, 75, 0, 319, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 318, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 283, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 282, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 264, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 263, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	73, 74, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 496, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 476, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 474, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 455, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 452, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 441, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 416, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 404, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 402, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 397, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 363, 100, 46, 32, 38, 0, 0,
	42, 13, 57, 14, 27, 0, 28, 0, 0, 0,
	0, 0, 0, 0, 50, 39, 40, 41, 0, 15,
	18, 0, 0, 0, 0, 0, 0, 0, 0, 11,
	12, 0, 0, 0, 0, 0, 29, 30, 0, 0,
	21, 22, 0, 51, 54, 0, 48, 56, 55, 52,
	0, 49, 0, 0, 0, 0, 0, 0, 0, 0,
	33, 37, 0, 0, 0, 53, 0, 45, 0, 0,
	34, 35, 36, 0, 43, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 350, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 345, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 341, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 339, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 324, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 317, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 316, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 304, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 303, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 273, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 260, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 229, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 207, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 198, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 212, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 211, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 163, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 75, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 161, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	101, 103, 0, 0, 0, 0, 76, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 0, 0, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 107, 86, 87, 89, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 93, 94, 95, 96, 97, 0, 0, 98,
	99, 83, 84, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 106, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 88, 90, 78, 79, 80,
	81, 82, 89, 91, 0, 104, 0, 0, 0, 0,
	102, 77, 105, 0, 100, 92, 93, 94, 95, 96,
	97, 0, 0, 98, 99, 83, 84, 85, 0, 0,
	0, 0, 0, 0, 0, 0, 106, 0, 0, 0,
	0, 46, 32, 38, 0, 0, 42, 0, 0, 88,
	90, 78, 79, 80, 81, 82, 0, 0, 0, 104,
	50, 39, 40, 41, 102, 77, 105, 0, 100, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 46,
	32, 38, 0, 0, 42, 0, 0, 0, 0, 51,
	54, 0, 48, 56, 55, 52, 0, 49, 50, 39,
	40, 41, 0, 0, 0, 0, 33, 37, 0, 0,
	0, 53, 0, 45, 0, 0, 34, 35, 36, 0,
	43, 362, 0, 0, 0, 0, 0, 51, 54, 0,
	48, 56, 55, 52, 0, 49, 0, 0, 0, 0,
	0, 237, 32, 38, 33, 37, 42, 0, 0, 53,
	0, 45, 0, 0, 34, 35, 36, 0, 43, 338,
	50, 39, 40, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 114,
	32, 38, 0, 0, 42, 0, 57, 0, 135, 51,
	54, 0, 48, 56, 55, 238, 136, 49, 50, 39,
	40, 41, 0, 0, 0, 0, 33, 235, 0, 0,
	0, 53, 0, 45, 0, 0, 34, 35, 36, 0,
	43, 46, 32, 38, 0, 0, 42, 51, 54, 0,
	48, 56, 55, 52, 0, 49, 0, 0, 0, 0,
	50, 39, 40, 41, 33, 37, 0, 0, 0, 109,
	0, 45, 0, 112, 34, 35, 36, 0, 43, 46,
	32, 38, 0, 0, 42, 0, 0, 0, 0, 51,
	54, 0, 48, 56, 55, 52, 0, 49, 50, 39,
	40, 41, 0, 0, 0, 0, 33, 37, 0, 0,
	0, 53, 0, 45, 0, 274, 34, 35, 36, 0,
	43, 46, 32, 38, 0, 0, 42, 51, 54, 0,
	48, 56, 55, 52, 0, 49, 0, 0, 0, 0,
	50, 39, 40, 41, 33, 37, 0, 0, 0, 53,
	0, 45, 0, 204, 34, 35, 36, 0, 43, 0,
	0, 0, 0, 46, 32, 38, 0, 0, 42, 51,
	54, 0, 48, 56, 55, 52, 0, 49, 0, 0,
	0, 195, 50, 39, 40, 41, 33, 37, 0, 0,
	0, 53, 0, 45, 0, 0, 34, 35, 36, 0,
	43, 46, 32, 38, 0, 0, 42, 0, 0, 0,
	0, 51, 54, 0, 48, 56, 55, 52, 0, 49,
	50, 39, 40, 41, 0, 0, 0, 0, 33, 37,
	0, 0, 0, 53, 0, 45, 0, 0, 34, 35,
	36, 0, 43, 46, 32, 38, 0, 0, 42, 51,
	54, 0, 48, 56, 55, 52, 0, 49, 0, 0,
	0, 0, 50, 39, 40, 41, 33, 37, 0, 0,
	0, 405, 0, 45, 0, 0, 34, 35, 36, 0,
	43, 46, 32, 38, 0, 0, 42, 0, 0, 0,
	0, 51, 54, 0, 48, 56, 55, 52, 0, 49,
	50, 39, 40, 41, 0, 0, 0, 0, 33, 37,
	0, 0, 0, 348, 0, 45, 0, 0, 34, 35,
	36, 0, 43, 46, 32, 38, 0, 0, 42, 51,
	54, 0, 48, 56, 55, 52, 0, 49, 0, 0,
	0, 0, 50, 39, 40, 41, 33, 37, 0, 0,
	0, 346, 0, 45, 0, 0, 34, 35, 36, 0,
	43, 71, 32, 38, 0, 0, 42, 0, 0, 0,
	0, 51, 54, 0, 48, 56, 55, 52, 0, 49,
	50, 39, 40, 41, 0, 0, 0, 0, 33, 37,
	0, 0, 0, 271, 0, 45, 0, 0, 34, 35,
	36, 0, 43, 69, 32, 38, 0, 0, 42, 51,
	54, 0, 48, 56, 55, 52, 0, 49, 0, 0,
	0, 0, 50, 39, 40, 41, 33, 37, 0, 0,
	0, 53, 0, 45, 0, 0, 34, 35, 36, 0,
	43, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 51, 54, 0, 48, 56, 55, 52, 0, 49,
	0, 0, 92, 93, 94, 95, 96, 97, 33, 37,
	98, 99, 83, 53, 0, 45, 0, 0, 34, 35,
	36, 0, 43, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 78, 79,
	80, 81, 82, 0, 0, 0, 104, 0, 0, 0,
	0, 102, 77, 105, 0, 100,
}

var yyPact = [...]int16{
	-66, -1000, 2131, -66, -1000, -64, -64, -1000, -1000, -1000,
	-1000, -1000, -1000, 4009, 4009, 415, 365, -1000, 270, -1000,
	-1000, 4249, 4207, 1279, -1000, -1000, -1000, 4009, 3845, 4009,
	269, -31, -1000, 4009, 4009, 4009, 4009, 4009, -1000, -1000,
	-1000, -1000, 161, -65, 191, 4009, 63, -1000, 114, 113,
	111, 96, 0, -64, 4009, 95, 92, 413, 302, -1000,
	2131, -64, -1000, 280, 3179, 3179, 266, 288, -66, 91,
	3459, 87, 3389, 4009, 4009, 4009, 4009, 410, 4009, 4009,
	4009, 4009, 4009, 4009, 4009, 4009, 4009, 4009, 4009, 4009,
	4009, 4009, 4009, 4009, 4009, 4009, 4009, 4009, -1000, -1000,
	4009, 4009, 4009, 4009, 4009, 3967, 4009, 4009, 3109, -66,
	343, 24, 3925, 4, 63, 3039, -64, 751, 144, 144,
	144, -31, 3319, -31, 3249, 395, 71, -11, 4009, -64,
	51, -1000, 191, 191, -5, 191, 264, -35, 2969, 4009,
	4009, 884, 191, 152, -64, 191, 4009, 3179, 4009, 4009,
	291, -1000, 4009, 4009, -64, -1000, -66, 4009, -66, 243,
	4009, 4009, 4009, 4009, 3179, 3179, 2899, 3529, -1000, 79,
	79, 144, 144, 144, 3179, 4280, 4280, 3653, 3653, 4280,
	4280, 4280, 4280, 3179, 3179, 3179, 3179, 3179, 3179, 3179,
	666, 3179, 3599, 228, 1209, 4009, 3179, 3599, -66, 242,
	-64, 4009, -64, -66, 4169, 2829, 3887, -64, 348, 1139,
	4009, 409, 408, 77, 389, 215, 191, -1000, 395, -1000,
	-38, -64, 405, -46, -46, 191, -46, -64, -11, -1000,
	205, 2759, -1000, 2689, 47, 3807, 191, 63, -44, 45,
	-2, 403, 4009, -47, -52, 2619, 2549, 1069, 4009, 280,
	280, 4009, 240, 2479, 237, 342, 194, 176, 123, 93,
	4009, 60, -1000, -1000, 3745, 2409, 229, -1000, 2339, 400,
	225, -66, 2269, 4127, 4089, 2199, 344, -15, -1000, -1000,
	301, 2131, -1000, 3707, 2049, -1000, -1000, 115, -64, 271,
	-64, -46, 75, 381, -64, -59, -64, 4009, -1000, -53,
	398, 57, -1000, -1000, -1000, -1000, 51, 191, -1000, -1000,
	4009, 292, -52, 191, 224, -64, 4009, -1000, -1000, 4009,
	280, 3179, -31, -1000, -66, -1000, 265, 49, -1000, 27,
	-1000, 25, -1000, 11, -1000, 3179, -1000, 1979, -1000, -1000,
	-1000, -66, -1000, -1000, 223, -66, -66, 1909, -66, 1839,
	4047, -24, -1000, -1000, 297, 4009, 222, -1000, -1000, -66,
	247, 1769, -1000, -1000, 263, -46, 191, 395, 115, 41,
	396, 115, -64, 236, -64, -1000, -38, 191, -48, 191,
	-1000, -56, 982, 4009, 214, 15, -1000, 4009, 3179, 1699,
	208, 262, -66, -1000, -1000, -1000, -1000, -1000, 206, -1000,
	204, 203, -66, 201, -66, -66, 1629, 198, -1000, -1000,
	-66, 1559, 286, -1000, -1000, -66, -1000, -66, 43, -46,
	377, 215, 261, 115, 191, 260, 395, 115, 2, 188,
	-46, 187, -64, -46, 191, -1000, 4009, 1489, -1000, -64,
	1419, -1000, -1000, -66, 185, -1000, -1000, -1000, 183, -1000,
	180, 173, -66, -1000, -1000, -66, -66, -1000, 170, -1000,
	-64, 226, -66, 259, -46, -66, 375, 258, 115, -1000,
	-1000, 394, 15, 1349, -1000, 4009, 4009, 159, 339, -1000,
	-1000, -1000, 148, -1000, -1000, -1000, 191, 115, -1, 146,
	-66, 143, 124, -66, 257, 191, -1000, -52, 3179, 337,
	254, -1000, -46, 252, 115, -1000, 142, -1000, 115, -27,
	140, -66, -46, 139, 250, -66, -66, 249, -1000, 246,
	115, -1000, 134, -1000, -66, 130, 121, -66, -66, 177,
	-1000, 118, -1000, -1000, 117, 94, -66, -1000, -1000, -1000,
	78, -1000,
}

var yyPgo = [...]int16{
	0, 0, 448, 9, 381, 447, 446, 445, 442, 441,
	440, 436, 6, 3, 435, 431, 10, 8, 103, 518,
	366, 14, 7, 5, 428, 15, 423, 438, 422, 2,
	4, 420, 16, 429, 421, 99, 1, 633, 11,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 5, 7, 7, 6, 6, 8, 8, 8,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 14, 15, 15, 15, 15, 15, 16, 16, 17,
	10, 11, 11, 11, 11, 11, 12, 12, 13, 20,
	20, 20, 25, 25, 25, 26, 26, 26, 21, 21,
	22, 22, 23, 23, 24, 24, 18, 18, 18, 18,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 27, 27, 27, 27, 27, 27, 27, 28, 28,
	29, 29, 30, 30, 30, 31, 31, 31, 31, 31,
	31, 32, 33, 33, 34, 34, 34, 35, 35, 37,
	37, 38, 36, 36, 36, 36,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 1, 1, 13, 12, 9, 8, 1, 1,
	6, 5, 6, 5, 6, 5, 6, 5, 1, 1,
	1, 1, 4, 3, 3, 3, 3, 5, 7, 5,
	4, 7, 5, 6, 7, 7, 8, 7, 8, 8,
	9, 6, 0, 1, 1, 2, 2, 4, 4, 3,
	7, 0, 1, 1, 2, 2, 4, 4, 3, 0,
	1, 4, 0, 1, 3, 0, 1, 4, 0, 1,
	1, 1, 1, 4, 2, 5, 0, 1, 4, 4,
	1, 1, 2, 2, 2, 2, 4, 2, 4, 1,
	1, 1, 1, 5, 3, 3, 8, 9, 10, 12,
	13, 9, 10, 11, 13, 14, 2, 5, 7, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 3, 3, 3, 5, 4, 5, 4,
	4, 4, 1, 4, 3, 4, 4, 4, 4, 6,
	8, 7, 6, 10, 5, 3, 2, 4, 4, 6,
	3, 1, 3, 2, 2, 5, 2, 6, 2, 5,
	2, 3, 0, 3, 6, 6, 5, 5, 6, 5,
	5, 1, 0, 1, 2, 1, 1, 0, 1, 1,
	2, 1, 0, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -33, -2, -34, 78, -37, -38, 86, -3,
	-4, 38, 39, 10, 12, 28, -8, -9, 29, -10,
	-14, 49, 50, -19, -5, -7, -6, 13, 15, 45,
	46, -32, 5, 69, 79, 80, 81, 70, 6, 24,
	25, 26, 9, 83, -29, 76, 4, -31, 55, 60,
	23, 52, 58, 74, 53, 57, 56, 11, -18, -33,
	-34, -37, -38, -18, -19, -19, 4, 14, 74, 4,
	-19, 4, -19, 61, 62, 63, 27, 82, 68, 69,
	70, 71, 72, 42, 43, 44, 17, 18, 66, 19,
	67, 20, 32, 33, 34, 35, 36, 37, 40, 41,
	85, 21, 81, 22, 76, 83, 53, 16, -19, 74,
	-20, -19, 78, -4, 4, -19, 74, 83, -19, -19,
	-19, -32, -19, -32, -19, 76, 4, 84, -35, -37,
	-27, 4, 70, -29, 58, 51, 59, 83, -19, 76,
	76, 76, 76, 76, 74, 83, -35, -19, 76, 76,
	-20, 4, 61, 62, 65, -3, 74, 13, 74, -1,
	76, 76, 76, 76, -19, -19, -19, -19, 4, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -18, -19, 64, -19, -19, 74, -1,
	-37, 16, 65, 74, 78, -19, 78, 74, -35, -19,
	64, 82, 82, -21, -23, -22, 4, -24, 76, -29,
	-18, 74, 82, -27, -27, 83, -27, 74, 84, 77,
	-18, -19, 77, -19, -27, 70, -29, 4, 58, -27,
	-27, 54, -35, -27, -30, -19, -19, -19, 62, -18,
	-18, -35, -1, -19, -1, 75, -18, -18, -18, -18,
	64, 8, 77, 84, 64, -19, -1, 75, -19, -35,
	-1, 74, -19, 78, 78, -19, -35, -15, -17, -16,
	48, 47, 84, 64, -19, 4, 4, 77, 65, 8,
	65, -27, -21, -23, 65, -36, -37, -35, 4, -27,
	-35, 8, 77, 77, 77, 77, -27, 83, 77, 77,
	65, 4, -30, 84, -36, 65, 64, 77, 77, 65,
	-18, -19, -32, 75, 74, 75, 30, 8, 77, 8,
	77, 8, 77, 8, 77, -19, 77, -19, 84, 84,
	75, 74, 4, 75, -1, 74, 74, -19, 74, -19,
	78, -11, -13, -12, 48, 47, -35, -16, -17, 64,
	-3, -19, 84, 84, -25, -27, 76, -35, 77, -27,
	-35, 77, 65, 8, -37, 84, -18, 84, -28, 4,
	77, -27, -19, 65, -36, -27, 75, -35, -19, -19,
	-1, 4, 74, 77, 77, 77, 77, 84, -1, 75,
	-1, -1, 74, -1, 74, 74, -19, -35, -12, -13,
	64, -19, -18, 75, -1, 64, 84, 74, -26, -27,
	-23, -22, -25, 77, 4, -25, -35, 77, -27, -36,
	-27, -35, 65, -27, 84, 77, 65, -19, 75, 74,
	-19, 77, 75, 74, -1, 75, 75, 75, -1, 75,
	-1, -1, 74, 75, -1, 64, 64, -1, -1, 77,
	65, 8, 74, -25, -27, 74, -23, -25, 77, 75,
	75, -35, -27, -19, 77, -35, 64, -1, 75, 75,
	75, 75, -1, -1, -1, 75, -35, 77, -27, -1,
	74, -1, 8, 74, -25, 4, 77, -30, -19, 75,
	31, 75, -27, -25, 77, 75, -1, 75, 77, -27,
	-1, 74, -27, -36, 31, 74, 74, -25, 75, -25,
	77, 75, -1, 75, 74, -1, -1, 74, 74, -25,
	75, -1, 75, 75, -1, -1, 74, 75, 75, 75,
	-1, 75,
}

var yyDef = [...]int16{
	192, -2, -2, 192, 193, 196, 195, 199, 201, 3,
	6, 7, 8, 86, 0, 0, 12, 13, 0, 18,
	19, 0, 0, -2, 29, 30, 31, 0, -2, 0,
	0, 90, 91, 0, 0, 0, 0, 0, 99, 100,
	101, 102, 0, 197, 0, 0, 191, 152, 0, 0,
	0, 0, 0, 197, 0, 0, 0, 69, 0, 2,
	-2, 194, 200, 9, 87, 10, 0, 0, 192, 191,
	0, 191, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 140, 141,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 192,
	0, 87, 0, 0, -2, 0, 197, 0, 92, 93,
	94, -2, 0, -2, 0, 78, 0, -2, 86, 198,
	0, 171, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 197, 0, 182, 166, 0, 0,
	0, 70, 86, 86, 197, 4, 192, 0, 192, 0,
	86, 86, 86, 86, 33, 35, 0, 104, 105, 120,
	121, 122, 123, 124, 125, 126, 127, -2, -2, 130,
	131, 132, 133, 134, 135, 136, 137, 138, 139, 142,
	143, 144, 145, 0, 0, 0, 165, 170, 192, 0,
	195, 0, 197, 192, 0, 0, 0, 197, 52, 0,
	0, 0, 0, 0, 80, 79, 82, 81, 78, 181,
	202, 197, 0, 173, 174, 0, 176, 197, 180, 119,
	0, 0, 154, 0, 0, 0, 0, -2, 0, 0,
	0, 0, 182, 0, 202, 0, 0, 0, 86, 34,
	36, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 149, 151, 0, 0, 0, 40, 0, 0,
	0, 192, 0, 0, 0, 0, 61, 197, 53, 54,
	0, -2, 150, 0, 0, 96, 98, 72, 197, 0,
	197, 84, 0, 80, -2, 0, 204, 86, 172, 0,
	0, 0, 147, 153, 155, 156, 174, 0, 157, 158,
	0, 0, 202, 0, 0, -2, 0, 167, 168, 0,
	32, 88, -2, 11, 192, 39, 0, 0, -2, 0,
	-2, 0, -2, 0, -2, 103, 148, 0, 189, 190,
	37, 192, 71, 42, 0, 192, 192, 0, 192, 0,
	0, 197, 62, 63, 0, 86, 0, 55, 56, 192,
	0, 0, 186, 187, 0, 73, 75, 0, 72, 0,
	0, 72, 197, 0, -2, 117, 202, 0, 197, 0,
	146, 0, 0, 0, 0, 0, 164, 0, 183, 0,
	0, 0, 192, -2, -2, -2, -2, 188, 0, 43,
	0, 0, 192, 0, 192, 192, 0, 0, 64, 65,
	192, 87, 0, 51, 59, 192, 185, 192, 0, 76,
	80, 0, 0, 72, 83, 0, 0, 72, 0, 0,
	175, 0, 197, 178, 0, 159, 0, 0, 162, 197,
	0, 169, 38, 192, 0, 41, 44, 45, 0, 47,
	0, 0, 192, 60, 68, 192, 192, 57, 0, 74,
	197, 0, 192, 0, 85, 192, 80, 0, 72, 118,
	177, 0, 175, 0, 161, 182, 0, 0, 17, 46,
	48, 49, 0, 66, 67, 106, 0, 72, 0, 0,
	192, 0, 0, 192, 0, 0, 160, 202, 184, 16,
	0, 50, 77, 0, 72, 107, 0, 111, 72, 0,
	0, 192, 179, 0, 0, 192, 192, 0, 108, 0,
	72, 112, 0, 163, 192, 0, 0, 192, 192, 0,
	113, 0, 15, 109, 0, 0, 192, 14, 110, 114,
	0, 115,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 72, 81, 3,
	76, 77, 70, 68, 65, 69, 82, 71, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 64, 78,
	67, 62, 66, 63, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 83, 3, 84, 80, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 85, 75,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	73,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:102
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:106
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:112
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:121
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:137
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:141
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:145
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:150
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:155
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:160
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:165
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:170
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:174
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 14:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:178
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:183
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:188
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:193
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:198
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:211
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:216
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:221
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:226
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:231
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:236
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:241
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:246
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:253
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:257
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:261
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:267
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:274
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:278
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:295
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:299
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:316
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:321
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:326
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:336
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:341
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:352
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:357
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:362
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:367
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:372
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:377
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:382
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:387
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:392
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:399
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:406
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:410
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:414
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:418
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:423
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:434
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:439
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:446
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 60:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:452
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:461
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:465
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:469
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:473
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:479
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:490
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:495
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:502
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:507
		{
			yyVAL.expr_idents = []string{}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:511
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:515
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:523
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:527
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:531
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:535
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:539
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:543
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:551
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:555
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:561
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_untyped_idents
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:565
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:571
		{
			yyVAL.func_expr_untyped_idents = []*ast.ParamExpr{{Name: yyDollar[1].tok.Lit}}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:575
		{
			if len(yyDollar[1].func_expr_idents_not_empty) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.func_expr_untyped_idents = append(yyDollar[1].func_expr_idents_not_empty, &ast.ParamExpr{Name: yyDollar[4].tok.Lit})
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:584
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}}
		}
	case 85:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:588
		{
			if len(yyDollar[1].func_expr_idents_not_empty) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, &ast.ParamExpr{Name: yyDollar[4].tok.Lit, TypeData: yyDollar[5].type_data})
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:596
		{
			yyVAL.exprs = nil
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:600
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:604
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:611
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:620
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:624
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:629
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 93:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:634
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:639
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:644
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:649
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:654
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 98:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:659
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:664
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:669
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:674
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:679
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:684
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:689
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:694
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 106:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:699
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 107:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:704
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_untyped_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 108:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:709
		{
			yyDollar[3].func_expr_untyped_idents[len(yyDollar[3].func_expr_untyped_idents)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_untyped_idents, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 109:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:715
		{
			if len(yyDollar[3].func_expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyDollar[3].func_expr_idents = append(yyDollar[3].func_expr_idents, yyDollar[6].func_expr_untyped_idents...)
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[9].opt_func_return_expr_idents, Stmt: yyDollar[11].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 110:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:724
		{
			if len(yyDollar[3].func_expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyDollar[6].func_expr_untyped_idents[len(yyDollar[6].func_expr_untyped_idents)-1].TypeData = yyDollar[8].type_data
			yyDollar[3].func_expr_idents = append(yyDollar[3].func_expr_idents, yyDollar[6].func_expr_untyped_idents...)
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[10].opt_func_return_expr_idents, Stmt: yyDollar[12].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:734
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 112:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:739
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_untyped_idents, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:744
		{
			yyDollar[4].func_expr_untyped_idents[len(yyDollar[4].func_expr_untyped_idents)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_untyped_idents, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 114:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:750
		{
			if len(yyDollar[4].func_expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyDollar[4].func_expr_idents = append(yyDollar[4].func_expr_idents, yyDollar[7].func_expr_untyped_idents...)
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[10].opt_func_return_expr_idents, Stmt: yyDollar[12].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 115:
		yyDollar = yyS[yypt-14 : yypt+1]
//line parser.go.y:759
		{
			if len(yyDollar[4].func_expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyDollar[7].func_expr_untyped_idents[len(yyDollar[7].func_expr_untyped_idents)-1].TypeData = yyDollar[9].type_data
			yyDollar[4].func_expr_idents = append(yyDollar[4].func_expr_idents, yyDollar[7].func_expr_untyped_idents...)
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[11].opt_func_return_expr_idents, Stmt: yyDollar[13].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:769
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:774
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 118:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:779
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:784
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:789
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:794
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:799
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:804
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:809
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:814
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:819
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:824
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:829
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:834
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:839
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:844
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:849
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:854
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:859
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:864
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:869
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:874
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:879
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:884
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:889
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:894
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:899
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:904
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:909
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:914
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:919
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:924
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:929
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:934
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:939
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:944
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:949
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 153:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:954
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:959
		{
			yyVAL.expr = &ast.DbgExpr{}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 155:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:964
		{
			yyVAL.expr = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 156:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:969
		{
			yyVAL.expr = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 157:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:974
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:984
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 159:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:989
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 160:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:994
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 161:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:999
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1004
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 163:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:1010
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 164:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1016
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1021
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1026
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1031
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 168:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1036
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 169:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1041
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 170:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1046
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1054
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1058
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1067
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1076
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1086
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1090
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 177:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1099
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1105
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 179:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1109
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1119
		{
			yyVAL.slice_count = 1
		}
	case 181:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1123
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1130
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1134
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 184:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1138
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 185:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1148
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 186:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1152
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 187:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1156
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 188:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1160
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1164
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 190:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1168
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1174
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
