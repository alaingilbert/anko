// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:57
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             ast.Stmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_unary                    ast.Expr
	expr_binary                   ast.Expr
	expr_member_or_ident          ast.Expr
	expr_call                     *ast.CallExpr
	expr_anon_call                *ast.AnonCallExpr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	opt_exprs                     []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"';'",
	"','",
	"'('",
	"')'",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1178

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	78, 6,
	-2, 2,
	-1, 24,
	79, 88,
	-2, 20,
	-1, 117,
	79, 202,
	-2, 197,
	-1, 122,
	16, 68,
	79, 68,
	-2, 196,
	-1, 126,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	77, 21,
	78, 21,
	86, 21,
	-2, 106,
	-1, 127,
	1, 22,
	47, 22,
	48, 22,
	63, 22,
	77, 22,
	78, 22,
	86, 22,
	-2, 107,
	-1, 129,
	1, 23,
	47, 23,
	48, 23,
	63, 23,
	77, 23,
	78, 23,
	86, 23,
	-2, 106,
	-1, 130,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	77, 24,
	78, 24,
	86, 24,
	-2, 107,
	-1, 131,
	4, 185,
	51, 185,
	58, 185,
	59, 185,
	-2, 101,
	-1, 160,
	1, 136,
	8, 136,
	47, 136,
	48, 136,
	61, 136,
	62, 136,
	63, 136,
	76, 136,
	77, 136,
	78, 136,
	79, 136,
	81, 136,
	83, 136,
	86, 136,
	-2, 127,
	-1, 162,
	1, 138,
	8, 138,
	47, 138,
	48, 138,
	61, 138,
	62, 138,
	63, 138,
	76, 138,
	77, 138,
	78, 138,
	79, 138,
	81, 138,
	83, 138,
	86, 138,
	-2, 127,
	-1, 210,
	79, 203,
	-2, 200,
	-1, 262,
	81, 176,
	84, 176,
	-2, 196,
	-1, 280,
	79, 202,
	-2, 197,
	-1, 307,
	77, 210,
	-2, 202,
	-1, 314,
	1, 90,
	8, 90,
	47, 90,
	48, 90,
	61, 90,
	62, 90,
	63, 90,
	77, 90,
	78, 90,
	79, 90,
	81, 90,
	83, 90,
	86, 90,
	-2, 127,
	-1, 315,
	1, 137,
	8, 137,
	47, 137,
	48, 137,
	61, 137,
	62, 137,
	63, 137,
	76, 137,
	77, 137,
	78, 137,
	79, 137,
	81, 137,
	83, 137,
	86, 137,
	-2, 128,
	-1, 316,
	1, 139,
	8, 139,
	47, 139,
	48, 139,
	61, 139,
	62, 139,
	63, 139,
	76, 139,
	77, 139,
	78, 139,
	79, 139,
	81, 139,
	83, 139,
	86, 139,
	-2, 128,
	-1, 346,
	79, 202,
	-2, 197,
	-1, 348,
	79, 202,
	-2, 197,
	-1, 375,
	77, 208,
	-2, 203,
	-1, 399,
	79, 202,
	-2, 197,
}

const yyPrivate = 57344

const yyLast = 4091

var yyAct = [...]int16{
	2, 292, 237, 378, 49, 253, 250, 353, 288, 289,
	248, 10, 247, 6, 354, 356, 355, 307, 9, 362,
	415, 9, 293, 223, 9, 291, 290, 9, 229, 9,
	131, 87, 8, 9, 87, 419, 330, 143, 329, 464,
	74, 223, 223, 223, 432, 223, 146, 77, 141, 135,
	426, 24, 328, 223, 9, 110, 111, 95, 110, 111,
	95, 96, 97, 78, 9, 222, 365, 223, 61, 326,
	160, 162, 223, 223, 75, 303, 116, 119, 223, 124,
	226, 128, 128, 76, 169, 90, 91, 112, 146, 92,
	93, 94, 114, 142, 147, 89, 139, 85, 89, 88,
	85, 386, 88, 138, 140, 149, 74, 305, 223, 384,
	157, 158, 159, 161, 163, 459, 136, 458, 209, 339,
	24, 324, 135, 317, 217, 380, 165, 141, 135, 173,
	174, 175, 176, 177, 179, 180, 274, 166, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 182, 323,
	204, 205, 206, 207, 183, 273, 74, 254, 215, 139,
	95, 266, 265, 268, 211, 139, 138, 140, 168, 167,
	151, 150, 138, 140, 145, 144, 154, 155, 389, 136,
	156, 231, 233, 319, 241, 136, 238, 216, 239, 240,
	141, 76, 164, 509, 156, 430, 141, 221, 89, 275,
	85, 212, 88, 508, 279, 258, 506, 502, 501, 267,
	87, 500, 495, 242, 243, 44, 272, 493, 401, 488,
	156, 487, 479, 473, 450, 255, 156, 212, 304, 306,
	135, 256, 470, 74, 110, 111, 95, 96, 97, 314,
	469, 468, 453, 452, 447, 441, 439, 438, 135, 277,
	437, 436, 281, 418, 284, 322, 409, 321, 162, 393,
	137, 373, 343, 340, 334, 92, 93, 94, 114, 332,
	301, 344, 285, 238, 89, 276, 85, 139, 88, 171,
	504, 499, 313, 497, 138, 140, 359, 358, 484, 482,
	402, 462, 460, 361, 445, 139, 371, 136, 422, 228,
	312, 163, 138, 140, 170, 125, 123, 335, 141, 336,
	411, 406, 360, 118, 498, 136, 489, 74, 356, 355,
	347, 349, 351, 148, 390, 381, 141, 291, 290, 24,
	48, 80, 392, 385, 318, 47, 394, 395, 368, 397,
	5, 11, 172, 3, 476, 72, 376, 220, 71, 377,
	405, 410, 137, 137, 76, 137, 412, 404, 252, 379,
	364, 137, 367, 137, 127, 130, 7, 132, 388, 126,
	129, 121, 342, 73, 152, 425, 331, 316, 429, 428,
	427, 315, 296, 260, 137, 181, 74, 440, 400, 442,
	443, 153, 79, 446, 407, 1, 50, 448, 74, 366,
	423, 251, 451, 249, 134, 46, 37, 52, 54, 42,
	133, 35, 420, 457, 287, 76, 21, 352, 20, 18,
	461, 408, 17, 133, 463, 22, 23, 435, 19, 26,
	27, 25, 4, 0, 0, 471, 472, 0, 0, 0,
	474, 475, 137, 0, 0, 220, 0, 0, 477, 219,
	0, 481, 0, 483, 0, 0, 0, 0, 485, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 137, 491,
	235, 0, 466, 494, 0, 496, 137, 0, 0, 260,
	244, 0, 0, 0, 210, 0, 0, 0, 503, 0,
	505, 0, 133, 238, 478, 507, 224, 225, 0, 227,
	0, 0, 0, 0, 0, 234, 0, 236, 0, 0,
	0, 0, 0, 133, 0, 0, 0, 0, 0, 0,
	0, 137, 0, 133, 0, 0, 0, 259, 264, 0,
	0, 0, 0, 137, 137, 0, 278, 0, 0, 0,
	0, 0, 286, 0, 137, 0, 295, 0, 0, 0,
	0, 0, 298, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 133,
	0, 137, 0, 137, 0, 133, 297, 0, 294, 133,
	0, 0, 0, 0, 0, 133, 137, 137, 0, 0,
	137, 137, 0, 0, 294, 0, 0, 0, 0, 0,
	0, 357, 320, 0, 0, 0, 0, 0, 0, 0,
	327, 0, 0, 224, 0, 0, 0, 0, 0, 0,
	0, 374, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 137, 383, 0, 0, 137, 210, 137, 0,
	0, 0, 0, 0, 133, 0, 0, 0, 0, 0,
	363, 0, 0, 0, 0, 372, 0, 0, 0, 0,
	0, 294, 0, 0, 375, 0, 403, 0, 382, 0,
	137, 0, 0, 0, 0, 0, 133, 0, 387, 0,
	414, 0, 137, 0, 0, 0, 137, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 210, 0, 210, 0, 0, 0, 133,
	0, 0, 0, 0, 0, 413, 0, 416, 0, 0,
	0, 294, 0, 133, 0, 0, 0, 0, 0, 454,
	424, 0, 0, 455, 0, 431, 0, 0, 0, 0,
	0, 0, 0, 68, 36, 38, 0, 0, 67, 14,
	60, 15, 28, 0, 29, 0, 210, 0, 0, 0,
	0, 0, 53, 39, 40, 41, 0, 16, 30, 0,
	0, 0, 133, 480, 0, 0, 133, 12, 13, 0,
	0, 0, 465, 0, 31, 32, 0, 0, 33, 34,
	0, 70, 57, 0, 51, 59, 58, 55, 0, 69,
	0, 0, 0, 0, 0, 0, 0, 62, 0, 64,
	66, 0, 0, 65, 0, 56, 133, 0, 0, 45,
	0, 43, 0, 0, 63, 0, 490, 0, 0, 0,
	492, 0, 0, 0, 294, 87, 98, 99, 101, 103,
	113, 115, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 104, 105, 106, 107, 108, 109, 0, 0, 110,
	111, 95, 96, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	81, 82, 0, 83, 102, 100, 90, 91, 112, 0,
	92, 93, 94, 114, 0, 213, 0, 0, 0, 89,
	0, 85, 0, 88, 87, 98, 99, 101, 103, 113,
	115, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	104, 105, 106, 107, 108, 109, 0, 0, 110, 111,
	95, 96, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 102, 100, 90, 91, 112, 0, 92,
	93, 94, 114, 0, 0, 0, 0, 434, 89, 433,
	85, 0, 88, 87, 98, 99, 101, 103, 113, 115,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 104,
	105, 106, 107, 108, 109, 0, 0, 110, 111, 95,
	96, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 102, 100, 90, 91, 112, 0, 92, 93,
	94, 114, 0, 0, 0, 0, 311, 89, 310, 85,
	0, 88, 87, 98, 99, 101, 103, 113, 115, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 104, 105,
	106, 107, 108, 109, 0, 0, 110, 111, 95, 96,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 300,
	83, 102, 100, 90, 91, 112, 0, 92, 93, 94,
	114, 0, 0, 0, 0, 0, 89, 0, 85, 299,
	88, 87, 98, 99, 101, 103, 113, 115, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 104, 105, 106,
	107, 108, 109, 0, 0, 110, 111, 95, 96, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 271, 83,
	102, 100, 90, 91, 112, 0, 92, 93, 94, 114,
	0, 0, 0, 0, 0, 89, 0, 85, 270, 88,
	87, 98, 99, 101, 103, 113, 115, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 104, 105, 106, 107,
	108, 109, 0, 0, 110, 111, 95, 96, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 81, 82, 0, 83, 102,
	100, 90, 91, 112, 0, 92, 93, 94, 114, 0,
	0, 0, 0, 0, 89, 0, 85, 0, 88, 87,
	98, 99, 101, 103, 113, 115, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 104, 105, 106, 107, 108,
	109, 0, 0, 110, 111, 95, 96, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 102, 100,
	90, 91, 112, 0, 92, 93, 94, 114, 0, 0,
	0, 0, 0, 89, 486, 85, 0, 88, 87, 98,
	99, 101, 103, 113, 115, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 104, 105, 106, 107, 108, 109,
	0, 0, 110, 111, 95, 96, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 102, 100, 90,
	91, 112, 0, 92, 93, 94, 114, 0, 0, 0,
	0, 0, 89, 467, 85, 0, 88, 87, 98, 99,
	101, 103, 113, 115, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 104, 105, 106, 107, 108, 109, 0,
	0, 110, 111, 95, 96, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 456, 83, 102, 100, 90, 91,
	112, 0, 92, 93, 94, 114, 0, 0, 0, 0,
	0, 89, 0, 85, 0, 88, 87, 98, 99, 101,
	103, 113, 115, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 104, 105, 106, 107, 108, 109, 0, 0,
	110, 111, 95, 96, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 449, 83, 102, 100, 90, 91, 112,
	0, 92, 93, 94, 114, 0, 0, 0, 0, 0,
	89, 0, 85, 0, 88, 87, 98, 99, 101, 103,
	113, 115, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 104, 105, 106, 107, 108, 109, 0, 0, 110,
	111, 95, 96, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 102, 100, 90, 91, 112, 0,
	92, 93, 94, 114, 0, 444, 0, 0, 0, 89,
	0, 85, 0, 88, 87, 98, 99, 101, 103, 113,
	115, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	104, 105, 106, 107, 108, 109, 0, 0, 110, 111,
	95, 96, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 102, 100, 90, 91, 112, 0, 92,
	93, 94, 114, 0, 0, 0, 0, 0, 89, 421,
	85, 0, 88, 87, 98, 99, 101, 103, 113, 115,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 104,
	105, 106, 107, 108, 109, 0, 0, 110, 111, 95,
	96, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 102, 100, 90, 91, 112, 0, 92, 93,
	94, 114, 0, 0, 0, 0, 0, 89, 0, 85,
	417, 88, 87, 98, 99, 101, 103, 113, 115, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 104, 105,
	106, 107, 108, 109, 0, 0, 110, 111, 95, 96,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 102, 100, 90, 91, 112, 0, 92, 93, 94,
	114, 0, 398, 0, 0, 0, 89, 0, 85, 0,
	88, 87, 98, 99, 101, 103, 113, 115, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 104, 105, 106,
	107, 108, 109, 0, 0, 110, 111, 95, 96, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	102, 100, 90, 91, 112, 0, 92, 93, 94, 114,
	0, 396, 0, 0, 0, 89, 0, 85, 0, 88,
	87, 98, 99, 101, 103, 113, 115, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 104, 105, 106, 107,
	108, 109, 0, 0, 110, 111, 95, 96, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 102,
	100, 90, 91, 112, 0, 92, 93, 94, 114, 0,
	0, 0, 0, 0, 89, 0, 85, 391, 88, 87,
	98, 99, 101, 103, 113, 115, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 104, 105, 106, 107, 108,
	109, 0, 0, 110, 111, 95, 96, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 102, 100,
	90, 91, 112, 0, 92, 93, 94, 114, 0, 0,
	0, 0, 0, 89, 0, 85, 370, 88, 87, 98,
	99, 101, 103, 113, 115, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 104, 105, 106, 107, 108, 109,
	0, 0, 110, 111, 95, 96, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 102, 100, 90,
	91, 112, 0, 92, 93, 94, 114, 0, 0, 0,
	350, 0, 89, 0, 85, 0, 88, 87, 98, 99,
	101, 103, 113, 115, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 104, 105, 106, 107, 108, 109, 0,
	0, 110, 111, 95, 96, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 102, 100, 90, 91,
	112, 0, 92, 93, 94, 114, 0, 345, 0, 0,
	0, 89, 0, 85, 0, 88, 87, 98, 99, 101,
	103, 113, 115, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 104, 105, 106, 107, 108, 109, 0, 0,
	110, 111, 95, 96, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 102, 100, 90, 91, 112,
	0, 92, 93, 94, 114, 0, 341, 0, 0, 0,
	89, 0, 85, 0, 88, 87, 98, 99, 101, 103,
	113, 115, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 104, 105, 106, 107, 108, 109, 0, 0, 110,
	111, 95, 96, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 102, 100, 90, 91, 112, 0,
	92, 93, 94, 114, 0, 0, 0, 0, 0, 89,
	0, 85, 338, 88, 87, 98, 99, 101, 103, 113,
	115, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	104, 105, 106, 107, 108, 109, 0, 0, 110, 111,
	95, 96, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 102, 100, 90, 91, 112, 0, 92,
	93, 94, 114, 0, 333, 0, 0, 0, 89, 0,
	85, 0, 88, 87, 98, 99, 101, 103, 113, 115,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 104,
	105, 106, 107, 108, 109, 0, 0, 110, 111, 95,
	96, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 102, 100, 90, 91, 112, 0, 92, 93,
	94, 114, 0, 0, 0, 0, 0, 89, 325, 85,
	0, 88, 87, 98, 99, 101, 103, 113, 115, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 104, 105,
	106, 107, 108, 109, 0, 0, 110, 111, 95, 96,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 102, 100, 90, 91, 112, 0, 92, 93, 94,
	114, 0, 0, 0, 0, 0, 89, 309, 85, 0,
	88, 87, 98, 99, 101, 103, 113, 115, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 104, 105, 106,
	107, 108, 109, 0, 0, 110, 111, 95, 96, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 308, 83,
	102, 100, 90, 91, 112, 0, 92, 93, 94, 114,
	0, 0, 0, 0, 0, 89, 0, 85, 0, 88,
	87, 98, 99, 101, 103, 113, 115, 0, 0, 0,
	0, 84, 0, 0, 0, 0, 104, 105, 106, 107,
	108, 109, 0, 0, 110, 111, 95, 96, 97, 0,
	0, 0, 0, 0, 0, 0, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 102,
	100, 90, 91, 112, 0, 92, 93, 94, 114, 0,
	0, 0, 0, 0, 89, 302, 85, 0, 88, 87,
	98, 99, 101, 103, 113, 115, 0, 0, 0, 0,
	84, 0, 0, 0, 0, 104, 105, 106, 107, 108,
	109, 0, 0, 110, 111, 95, 96, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 83, 102, 100,
	90, 91, 112, 0, 92, 93, 94, 114, 0, 0,
	0, 282, 0, 89, 0, 85, 0, 88, 87, 98,
	99, 101, 103, 113, 115, 0, 0, 0, 0, 84,
	0, 0, 0, 0, 104, 105, 106, 107, 108, 109,
	0, 0, 110, 111, 95, 96, 97, 0, 0, 0,
	0, 0, 0, 0, 0, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 269, 83, 102, 100, 90,
	91, 112, 0, 92, 93, 94, 114, 0, 0, 0,
	0, 0, 89, 0, 85, 0, 88, 87, 98, 99,
	101, 103, 113, 115, 0, 0, 0, 0, 84, 0,
	0, 0, 0, 104, 105, 106, 107, 108, 109, 0,
	0, 110, 111, 95, 96, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 102, 100, 90, 91,
	112, 0, 92, 93, 94, 114, 0, 0, 0, 0,
	0, 89, 230, 85, 0, 88, 87, 98, 99, 101,
	103, 113, 115, 0, 0, 0, 0, 84, 0, 0,
	0, 0, 104, 105, 106, 107, 108, 109, 0, 0,
	110, 111, 95, 96, 97, 0, 0, 0, 0, 0,
	0, 0, 0, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 102, 100, 90, 91, 112,
	0, 92, 93, 94, 114, 0, 218, 0, 0, 0,
	89, 0, 85, 0, 88, 87, 98, 99, 101, 103,
	113, 115, 0, 0, 0, 0, 84, 0, 0, 0,
	0, 104, 105, 106, 107, 108, 109, 0, 0, 110,
	111, 95, 96, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 83, 102, 100, 90, 91, 112, 0,
	92, 93, 94, 114, 0, 208, 0, 0, 0, 89,
	0, 85, 0, 88, 87, 98, 99, 101, 103, 113,
	115, 0, 0, 0, 0, 84, 0, 0, 0, 0,
	104, 105, 106, 107, 108, 109, 0, 0, 110, 111,
	95, 96, 97, 0, 0, 0, 0, 0, 0, 0,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 83, 102, 100, 90, 91, 112, 0, 92,
	93, 94, 114, 0, 0, 0, 0, 0, 89, 0,
	85, 0, 88, 87, 98, 99, 101, 103, 113, 115,
	0, 0, 0, 0, 84, 0, 0, 0, 0, 104,
	105, 106, 107, 108, 109, 0, 0, 110, 111, 95,
	96, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 102, 100, 90, 91, 112, 0, 92, 93,
	94, 114, 0, 0, 0, 0, 0, 89, 0, 85,
	0, 246, 87, 98, 99, 101, 103, 113, 115, 0,
	0, 0, 0, 84, 0, 0, 0, 0, 104, 105,
	106, 107, 108, 109, 0, 0, 110, 111, 95, 96,
	97, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	83, 102, 100, 90, 91, 112, 0, 92, 93, 94,
	114, 0, 0, 0, 0, 0, 89, 0, 85, 0,
	245, 87, 98, 99, 101, 103, 113, 115, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 111, 95, 96, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 86, 0,
	0, 262, 36, 38, 0, 0, 67, 0, 0, 83,
	102, 100, 90, 91, 112, 0, 92, 93, 94, 114,
	53, 39, 40, 41, 0, 89, 0, 85, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 262,
	36, 38, 0, 0, 67, 0, 0, 0, 139, 70,
	57, 0, 51, 59, 58, 261, 140, 69, 53, 39,
	40, 41, 0, 0, 0, 62, 0, 64, 263, 0,
	0, 65, 0, 56, 0, 0, 0, 45, 257, 43,
	0, 0, 63, 0, 0, 0, 139, 70, 57, 0,
	51, 59, 58, 261, 140, 69, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 64, 263, 0, 0, 65,
	0, 56, 0, 0, 0, 45, 0, 43, 0, 0,
	63, 87, 98, 99, 101, 103, 113, 115, 0, 0,
	0, 0, 84, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 110, 111, 95, 96, 97,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 122, 36, 38, 0, 0, 67, 0, 60, 83,
	102, 100, 90, 91, 112, 0, 92, 93, 94, 114,
	53, 39, 40, 41, 0, 89, 0, 85, 0, 88,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	36, 38, 0, 0, 67, 0, 0, 0, 0, 70,
	57, 0, 51, 59, 58, 55, 0, 69, 53, 39,
	40, 41, 0, 0, 0, 62, 0, 64, 66, 0,
	0, 65, 0, 117, 0, 120, 0, 45, 0, 43,
	0, 0, 63, 0, 0, 0, 0, 70, 57, 0,
	51, 59, 58, 55, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 64, 66, 0, 0, 65,
	0, 56, 0, 0, 0, 45, 0, 43, 369, 0,
	63, 68, 36, 38, 0, 0, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 39, 40, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	36, 38, 0, 0, 67, 0, 0, 0, 0, 70,
	57, 0, 51, 59, 58, 55, 0, 69, 53, 39,
	40, 41, 0, 0, 0, 62, 0, 64, 66, 0,
	0, 65, 0, 56, 0, 0, 0, 45, 0, 43,
	337, 0, 63, 0, 0, 0, 0, 70, 57, 0,
	51, 59, 58, 55, 0, 69, 0, 0, 0, 0,
	0, 0, 0, 62, 0, 64, 66, 0, 0, 65,
	0, 56, 0, 283, 0, 45, 0, 43, 0, 0,
	63, 68, 36, 38, 0, 0, 67, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	53, 39, 40, 41, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 36, 38, 0, 0, 67, 0, 70,
	57, 0, 51, 59, 58, 55, 0, 69, 0, 0,
	232, 53, 39, 40, 41, 62, 0, 64, 66, 0,
	0, 65, 0, 56, 0, 0, 0, 45, 0, 43,
	0, 0, 63, 68, 36, 38, 0, 0, 67, 0,
	70, 57, 0, 51, 59, 58, 55, 0, 69, 0,
	0, 0, 53, 39, 40, 41, 62, 0, 64, 66,
	0, 0, 65, 0, 56, 0, 214, 0, 45, 0,
	43, 0, 0, 63, 68, 36, 38, 0, 0, 67,
	0, 70, 57, 0, 51, 59, 58, 55, 0, 69,
	0, 0, 178, 53, 39, 40, 41, 62, 0, 64,
	66, 0, 0, 65, 0, 56, 0, 0, 0, 45,
	0, 43, 0, 0, 63, 68, 36, 38, 0, 0,
	67, 0, 70, 57, 0, 51, 59, 58, 55, 0,
	69, 0, 0, 0, 53, 39, 40, 41, 62, 0,
	64, 66, 0, 0, 65, 0, 56, 0, 0, 0,
	45, 0, 43, 0, 0, 63, 68, 36, 38, 0,
	0, 67, 0, 70, 57, 0, 51, 59, 58, 55,
	0, 69, 0, 0, 0, 53, 39, 40, 41, 62,
	0, 64, 66, 0, 0, 65, 0, 399, 0, 0,
	0, 45, 0, 43, 0, 0, 63, 68, 36, 38,
	0, 0, 67, 0, 70, 57, 0, 51, 59, 58,
	55, 0, 69, 0, 0, 0, 53, 39, 40, 41,
	62, 0, 64, 66, 0, 0, 65, 0, 348, 0,
	0, 0, 45, 0, 43, 0, 0, 63, 68, 36,
	38, 0, 0, 67, 0, 70, 57, 0, 51, 59,
	58, 55, 0, 69, 0, 0, 0, 53, 39, 40,
	41, 62, 0, 64, 66, 0, 0, 65, 0, 346,
	0, 0, 0, 45, 0, 43, 0, 0, 63, 0,
	0, 0, 0, 0, 0, 0, 70, 57, 0, 51,
	59, 58, 55, 0, 69, 0, 0, 87, 98, 99,
	101, 103, 62, 115, 64, 66, 0, 0, 65, 0,
	280, 0, 0, 0, 45, 0, 43, 0, 0, 63,
	0, 110, 111, 95, 96, 97, 0, 0, 0, 0,
	0, 0, 87, 98, 99, 101, 103, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 102, 100, 90, 91,
	112, 0, 92, 93, 94, 114, 110, 111, 95, 96,
	97, 89, 0, 85, 0, 88, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 102, 100, 90, 91, 112, 0, 92, 93, 94,
	114, 0, 0, 0, 0, 0, 89, 0, 85, 0,
	88,
}

var yyPact = [...]int16{
	-65, -1000, -1000, 759, -65, -1000, -68, -68, -1000, -1000,
	-1000, -1000, -1000, -1000, 3760, 3760, 398, 327, -1000, -1000,
	-1000, -1000, -1000, -1000, 1184, -1000, -1000, -1000, 3760, 3397,
	240, 3760, 239, 3760, 3760, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -53, 236, 3760, -1000, -1000, -1000, -45,
	-1000, 105, -1000, 104, -1000, 12, -68, 3760, 101, 100,
	397, 125, 3760, 3760, 3760, 3760, 3760, 122, 57, 99,
	98, -1000, 759, -68, -1000, -1000, 111, 2978, 2978, 238,
	276, 3760, 3760, 3760, 3760, 3719, 3760, 3760, 391, 3760,
	3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760,
	3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760, 3760,
	-1000, -1000, 3760, 3760, 3760, 3760, 2909, -65, 158, 839,
	3678, 119, 57, -65, 2840, -68, -1000, -1000, 2978, -1000,
	-1000, -34, 3760, -68, -11, -1000, 236, 236, -2, 236,
	233, -55, 2771, 3637, 3760, 236, -68, 236, 3760, 3185,
	3760, 3760, 132, -1000, 3760, 3760, -68, 128, 128, 128,
	-45, 3116, -45, 3047, 364, 87, 3760, 3237, 118, -1000,
	-65, 3760, -65, 2978, 2978, 2702, 3345, 1115, 3760, 3185,
	15, -1000, 157, 55, 204, 204, 15, 15, 15, 2978,
	15, 15, 18, 18, 18, 18, 18, 18, 2978, 2978,
	2978, 2978, 2978, 2978, 204, 3971, 15, 4006, -65, 208,
	-68, 3760, -68, -65, 3924, 2633, 3555, 205, -68, 290,
	-1000, -57, -68, 388, -61, -61, 236, -61, -68, -34,
	-1000, 1046, 3760, 2564, -6, 3760, 24, -62, 2495, 2426,
	977, 3760, 111, 111, 3760, 387, 383, 42, 336, 114,
	-1000, -1000, 236, -1000, 364, 151, 40, -1000, 2357, -12,
	236, -30, 57, 3275, -43, 382, 202, 2288, 197, 3760,
	-1000, 3517, 2219, 38, -1000, 196, -1000, 2150, 378, 195,
	-65, 2081, 3883, 3842, 2012, 302, 281, -22, -1000, -1000,
	259, 759, -64, -68, -68, 3760, -1000, -17, 368, -1000,
	3435, 1943, -1000, -1000, -62, 236, 194, -68, 3760, -1000,
	-1000, 3760, 111, 2978, -45, -1000, -1000, 45, 254, -68,
	-61, 28, 335, 20, -1000, -1000, -1000, -11, 236, -1000,
	3760, 109, -1000, -65, -1000, 3185, 1874, -1000, -1000, -1000,
	-1000, -65, -1000, -1000, 192, -65, -65, 1805, -65, 1736,
	3801, 224, -32, -1000, -1000, 258, 3760, 189, -1000, -1000,
	-65, 257, -1000, -68, -57, 236, -59, 236, 1667, -1000,
	-1000, 186, -41, -1000, 3760, -68, 2978, 1598, 232, -61,
	236, 45, -31, 364, 45, 124, -1000, -39, 908, 3760,
	184, -1000, 183, -1000, 180, 179, -65, 178, -65, -65,
	1529, 228, -65, 177, -1000, -1000, -65, 1460, 171, -1000,
	-1000, -65, 176, -61, 175, -68, -61, -1000, -1000, -68,
	1391, -1000, -65, 36, -61, 226, 45, -1000, -1000, 225,
	45, -42, 236, -1000, 3760, 1322, -1000, -1000, -1000, -1000,
	174, -1000, 173, 165, -65, -65, 156, -1000, -1000, -65,
	-65, -1000, -1000, -1000, 350, 3760, 3760, 155, -1000, -68,
	-65, 223, -65, 222, 45, -41, 1253, -1000, -1000, -1000,
	-1000, 154, 152, 295, -1000, -1000, 236, -62, 2978, -1000,
	236, 150, -65, 145, -65, 217, -1000, -1000, 293, 215,
	-61, 144, -61, -1000, 141, -1000, 140, -65, 214, -65,
	-1000, -1000, -1000, 139, -65, 136, -1000, 126, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 0, 442, 11, 351, 441, 440, 439, 438, 436,
	435, 432, 429, 428, 427, 14, 7, 426, 424, 9,
	8, 68, 74, 47, 421, 345, 340, 419, 418, 417,
	416, 415, 323, 12, 413, 6, 5, 10, 411, 3,
	410, 369, 409, 225, 2, 406, 4, 405, 353, 350,
	333, 1, 376, 32,
}

var yyR1 = [...]int8{
	0, 47, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 10, 10, 9, 9, 8, 8, 8, 8, 4,
	4, 4, 5, 7, 7, 6, 6, 11, 11, 11,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 17, 18, 18, 18, 18, 18, 19, 20, 13,
	14, 14, 14, 14, 14, 15, 15, 16, 32, 32,
	39, 39, 39, 40, 40, 40, 33, 33, 34, 34,
	35, 36, 37, 37, 38, 38, 22, 22, 21, 21,
	21, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 29, 29, 29, 24, 24, 25,
	25, 26, 26, 30, 30, 30, 30, 30, 30, 30,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 27, 27, 27, 27,
	27, 27, 28, 28, 28, 28, 41, 41, 41, 41,
	41, 41, 41, 42, 42, 43, 43, 44, 44, 44,
	45, 45, 45, 45, 45, 45, 46, 48, 48, 49,
	49, 49, 50, 50, 52, 52, 53, 51, 51, 51,
	51,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 3, 0, 1, 1, 1,
	2, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 13, 12, 9, 8, 1,
	1, 1, 4, 3, 3, 3, 3, 5, 7, 5,
	4, 7, 5, 6, 7, 7, 8, 7, 8, 8,
	9, 6, 0, 1, 1, 2, 2, 4, 3, 7,
	0, 1, 1, 2, 2, 4, 4, 3, 1, 4,
	0, 1, 3, 0, 1, 4, 0, 1, 1, 1,
	1, 2, 1, 4, 1, 4, 0, 1, 1, 4,
	4, 1, 1, 1, 1, 1, 1, 1, 5, 3,
	1, 2, 5, 7, 3, 1, 1, 1, 4, 4,
	1, 4, 1, 4, 1, 6, 10, 5, 3, 2,
	4, 4, 6, 3, 3, 4, 4, 1, 3, 5,
	4, 5, 4, 2, 2, 2, 2, 4, 2, 4,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 3, 3, 3, 3, 8, 9, 10, 9,
	10, 11, 4, 6, 8, 7, 1, 3, 2, 2,
	5, 2, 6, 2, 5, 2, 3, 0, 3, 6,
	6, 5, 5, 6, 5, 5, 1, 0, 1, 2,
	1, 1, 0, 1, 1, 2, 1, 0, 2, 1,
	1,
}

var yyChk = [...]int16{
	-1000, -47, -1, -48, -2, -49, 78, -52, -53, 86,
	-3, -4, 38, 39, 10, 12, 28, -11, -12, -8,
	-13, -17, -10, -9, -23, -5, -7, -6, 13, 15,
	29, 45, 46, 49, 50, -24, 5, -30, 6, 24,
	25, 26, -27, 82, -43, 80, -31, -25, -26, -46,
	-45, 55, -29, 23, -28, 58, 76, 53, 57, 56,
	11, -21, 68, 85, 70, 74, 71, 9, 4, 60,
	52, -48, -49, -52, -53, -22, -21, -23, -23, 4,
	14, 61, 62, 64, 27, 82, 53, 16, 84, 80,
	67, 68, 71, 72, 73, 42, 43, 44, 17, 18,
	66, 19, 65, 20, 32, 33, 34, 35, 36, 37,
	40, 41, 69, 21, 74, 22, -23, 76, -32, -23,
	78, -4, 4, 76, -23, 76, -25, -26, -23, -25,
	-26, 83, -50, -52, -41, 4, 71, -43, 58, 51,
	59, 82, -23, 82, 80, 80, 76, 82, -50, -23,
	80, 80, -32, 4, 61, 62, 79, -23, -23, -23,
	-46, -23, -46, -23, 80, 4, 80, 80, 80, -3,
	76, 13, 76, -23, -23, -23, -23, -23, 63, -23,
	-23, 4, -21, -22, -23, -23, -23, -23, -23, -23,
	-23, -23, -23, -23, -23, -23, -23, -23, -23, -23,
	-23, -23, -23, -23, -23, -23, -23, -23, 76, -1,
	-52, 16, 79, 76, 78, -23, 78, -1, 76, -50,
	-43, -22, 76, 84, -41, -41, 82, -41, 76, 83,
	81, -23, 63, -23, -41, -50, -41, -44, -23, -23,
	-23, 62, -21, -21, -50, 84, 84, -33, -37, -34,
	-35, -38, 4, -36, 80, -21, -22, 81, -23, -41,
	-43, 58, 4, 71, -41, 54, -1, -23, -1, 63,
	83, 63, -23, 8, 81, -1, 77, -23, -50, -1,
	76, -23, 78, 78, -23, 77, -50, -18, -20, -19,
	48, 47, -51, 79, -52, -50, 4, -41, -50, 83,
	63, -23, 81, 81, -44, 83, -51, 79, 63, 81,
	81, 79, -21, -23, -46, 4, 4, 81, 8, 79,
	-41, -33, -37, 8, 81, 81, 81, -41, 82, 81,
	79, 4, 77, 76, 77, -23, -23, 83, 83, 81,
	77, 76, 4, 77, -1, 76, 76, -23, 76, -23,
	78, 30, -14, -16, -15, 48, 47, -50, -19, -20,
	63, -3, 83, -52, -22, 83, -42, 4, -23, 83,
	83, -51, -41, 77, -50, -52, -23, -23, -39, -41,
	80, 81, -41, -50, 81, 8, 81, -41, -23, 79,
	-1, 83, -1, 77, -1, -1, 76, -1, 76, 76,
	-23, 4, 76, -50, -15, -16, 63, -23, -22, 77,
	-1, 63, -51, -41, -50, 79, -41, 83, 77, 76,
	-23, 81, 76, -40, -41, -39, 81, -35, -36, -39,
	81, -41, 83, 81, 79, -23, 77, 77, 77, 77,
	-1, 77, -1, -1, 76, 76, -1, 77, -1, 63,
	63, -1, 77, 77, -50, -50, 63, -1, 81, 79,
	76, -39, 76, -39, 81, -41, -23, 81, 77, 77,
	77, -1, -1, 77, -1, -1, 4, -44, -23, 77,
	-50, -1, 76, -1, 76, -39, 81, 77, 77, 31,
	-41, -51, -41, 77, -1, 77, -1, 76, 31, 76,
	77, 77, 77, -1, 76, -1, 77, -1, 77, 77,
}

var yyDef = [...]int16{
	197, -2, 1, -2, 197, 198, 201, 200, 204, 206,
	4, 7, 8, 9, 86, 0, 0, 13, 14, 15,
	16, 17, 18, 19, -2, 29, 30, 31, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 94, 95,
	96, 97, 100, 202, 0, 0, 105, 106, 107, 127,
	110, 0, 112, 0, 114, 0, 202, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 196, 0,
	0, 3, 6, 199, 205, 10, 87, 88, 11, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	160, 161, 0, 0, 0, 0, 0, -2, 0, 88,
	0, 0, -2, 197, 0, 202, -2, -2, 0, -2,
	-2, -2, 86, 203, 0, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 202, 0, 187, 119,
	0, 0, 0, 68, 0, 0, 202, 133, 134, 135,
	-2, 0, -2, 0, 76, 0, 86, 0, 0, 5,
	197, 0, 197, 33, 35, 0, 99, 0, 0, 118,
	123, 128, 87, 0, 140, 141, 142, 143, 144, 145,
	146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 162, 163, 164, 165, 197, 0,
	-2, 0, 202, 197, 0, 0, 0, 0, 202, 52,
	186, 207, 202, 0, 178, 179, 0, 181, 202, 185,
	104, 0, 0, 0, 0, 187, 0, 207, 0, 0,
	0, 0, 34, 36, 0, 0, 0, 0, 78, 77,
	82, 79, 80, 84, 76, 87, 0, 124, 0, 0,
	0, 0, -2, 0, 0, 0, 0, 0, 0, 0,
	109, 0, 0, 0, 132, 0, 40, 0, 0, 0,
	-2, 0, 0, 0, 0, 0, 60, 202, 53, 54,
	0, 6, 0, 210, 209, 86, 177, 0, 0, 108,
	0, 0, 111, 113, 207, 0, 0, -2, 0, 120,
	121, 0, 32, 89, -2, -2, -2, 70, 0, 202,
	81, 0, 78, 0, 130, 125, 126, 179, 0, 172,
	0, 0, 12, 197, 39, 98, 0, 194, 195, 131,
	37, 197, 69, 42, 0, 197, -2, 0, -2, 0,
	0, 0, 202, 61, 62, 0, 86, 0, 55, 56,
	197, 0, 102, 208, 207, 0, 202, 0, 0, 191,
	192, 0, 0, 117, 0, -2, 188, 0, 0, 71,
	73, 70, 0, 0, 70, 0, 129, 0, 0, 0,
	0, 193, 0, 43, 0, 0, 197, 0, 197, -2,
	0, 0, 197, 0, 63, 64, 197, 88, 0, 51,
	58, 197, 0, 180, 0, 202, 183, 190, 115, 202,
	0, 122, 197, 0, 74, 0, 70, 83, 85, 0,
	70, 0, 0, 173, 0, 0, 38, 41, 44, 45,
	0, 47, 0, 0, 197, 197, 0, 59, 67, 197,
	197, 57, 103, 182, 0, 187, 0, 0, 72, 202,
	197, 0, 197, 0, 70, 180, 0, 175, 46, 48,
	49, 0, 0, 28, 65, 66, 0, 207, 189, 166,
	0, 0, 197, 0, 197, 0, 174, 50, 27, 0,
	184, 0, 75, 167, 0, 169, 0, 197, 0, 197,
	116, 168, 170, 0, 197, 0, 171, 0, 26, 25,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 85, 3, 3, 3, 73, 74, 3,
	80, 81, 71, 67, 79, 68, 84, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 78,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 82, 3, 83, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:130
		{
			yyVAL.compstmt = nil
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:134
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:140
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:149
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:165
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:166
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:168
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:173
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:178
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].opt_exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:183
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:188
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:193
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:198
		{
			yyVAL.stmt = yyDollar[1].stmt_try
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:199
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:200
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:201
		{
			yyVAL.stmt = yyDollar[1].stmt_go
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.stmt = yyDollar[1].stmt_defer
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:204
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:211
		{
			callExpr := yyDollar[2].expr_call
			callExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: callExpr}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:218
		{
			anonCallExpr := yyDollar[2].expr_anon_call
			anonCallExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: anonCallExpr}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:227
		{
			callExpr := yyDollar[2].expr_call
			callExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: callExpr}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr_call.Position())
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:234
		{
			anonCallExpr := yyDollar[2].expr_anon_call
			anonCallExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: anonCallExpr}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr_anon_call.Position())
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:243
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:248
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:253
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:258
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:264
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:265
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:270
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:277
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:281
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:298
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:302
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:319
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:324
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:329
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:344
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:355
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:360
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:365
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:370
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:375
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:380
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:385
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:390
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:395
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:402
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:409
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:413
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:417
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:421
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:426
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:437
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:444
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:450
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:459
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:463
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:467
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:471
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:477
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:488
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:493
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].opt_exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:500
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:506
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:510
		{
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:515
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:519
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:523
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:527
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:531
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:535
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:543
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:546
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:549
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:550
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:554
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:560
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:566
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:570
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:576
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:580
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:585
		{
			yyVAL.opt_exprs = nil
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:588
		{
			yyVAL.opt_exprs = yyDollar[1].exprs
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:592
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:596
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:603
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:611
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:613
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:617
		{
			yyVAL.expr = yyDollar[1].expr_unary
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:619
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:624
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:629
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:634
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:639
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:644
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:648
		{
			yyVAL.expr = yyDollar[1].expr_func
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:650
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 102:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:655
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].opt_exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 103:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:660
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].opt_exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:665
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:669
		{
			yyVAL.expr = yyDollar[1].expr_binary
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:670
		{
			yyVAL.expr = yyDollar[1].expr_call
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:671
		{
			yyVAL.expr = yyDollar[1].expr_anon_call
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:673
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:678
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:683
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 111:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:688
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:692
		{
			yyVAL.expr = yyDollar[1].expr_dbg
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:694
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:703
		{
			yyVAL.expr = yyDollar[1].expr_make
		}
	case 115:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:705
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 116:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:711
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 117:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:717
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:722
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:727
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:732
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:737
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 122:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:742
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:747
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:754
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 125:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:759
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:764
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:770
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:772
		{
			yyVAL.expr_member_or_ident = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member_or_ident.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:779
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr_call.SetPosition(yyDollar[1].tok.Position())
		}
	case 130:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:784
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].opt_exprs}
			yyVAL.expr_call.SetPosition(yyDollar[1].tok.Position())
		}
	case 131:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:791
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr_anon_call.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:796
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].opt_exprs}
			yyVAL.expr_anon_call.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:803
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:808
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:813
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:818
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 137:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:823
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:828
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 139:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:833
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:840
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:845
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:850
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:855
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:860
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:865
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:870
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:875
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:880
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:885
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:890
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:895
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:900
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:905
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:910
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:915
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:920
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:925
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:930
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:935
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:940
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:945
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:950
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:955
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:960
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:965
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:972
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 167:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:977
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 168:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:982
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 169:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:988
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 170:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:993
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 171:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:998
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 172:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1006
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 173:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1011
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 174:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:1016
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 175:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:1021
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 176:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1028
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1032
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1041
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1050
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1060
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1064
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 182:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1073
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1079
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 184:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1083
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1093
		{
			yyVAL.slice_count = 1
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1097
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 187:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1104
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1108
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 189:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1112
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1122
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1126
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1130
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 193:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1134
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 194:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1138
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1142
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 196:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1148
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
