// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:40
type yySymType struct {
	yys                          int
	compstmt                     ast.Stmt
	stmts                        ast.Stmt
	stmt_var_or_lets             ast.Stmt
	stmt_var                     ast.Stmt
	stmt_lets                    ast.Stmt
	stmt_typed_lets              ast.Stmt
	stmt_if                      ast.Stmt
	stmt_for                     ast.Stmt
	stmt_switch                  ast.Stmt
	stmt_switch_cases            ast.Stmt
	stmt_switch_case             ast.Stmt
	stmt_switch_default          ast.Stmt
	stmt_select                  ast.Stmt
	stmt_select_cases            ast.Stmt
	stmt_select_case             ast.Stmt
	stmt_select_default          ast.Stmt
	stmt                         ast.Stmt
	expr                         ast.Expr
	exprs                        []ast.Expr
	expr_idents                  []string
	func_expr_idents             []*ast.ParamExpr
	opt_func_return_expr_idents  []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1 []*ast.FuncReturnValuesExpr
	expr_map                     *ast.MapExpr
	type_data                    *ast.TypeStruct
	type_data_struct             *ast.TypeStruct
	slice_count                  int
	tok                          ast.Token
	expr_slice                   ast.Expr
	expr_ident                   ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"'?'",
	"':'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"'!'",
	"'^'",
	"'&'",
	"'.'",
	"'['",
	"']'",
	"'|'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1130

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	61, 83,
	62, 83,
	65, 83,
	78, 5,
	-2, 1,
	-1, 23,
	65, 84,
	-2, 28,
	-1, 28,
	61, 83,
	62, 83,
	-2, 69,
	-1, 60,
	61, 83,
	62, 83,
	65, 83,
	-2, 5,
	-1, 114,
	16, 70,
	65, 70,
	-2, 182,
	-1, 121,
	1, 92,
	8, 92,
	47, 92,
	48, 92,
	61, 92,
	62, 92,
	64, 92,
	65, 92,
	74, 92,
	75, 92,
	77, 92,
	78, 92,
	84, 92,
	86, 92,
	-2, 87,
	-1, 123,
	1, 94,
	8, 94,
	47, 94,
	48, 94,
	61, 94,
	62, 94,
	64, 94,
	65, 94,
	74, 94,
	75, 94,
	77, 94,
	78, 94,
	84, 94,
	86, 94,
	-2, 87,
	-1, 127,
	4, 171,
	51, 171,
	58, 171,
	59, 171,
	-2, 107,
	-1, 177,
	17, 0,
	18, 0,
	-2, 119,
	-1, 178,
	17, 0,
	18, 0,
	-2, 120,
	-1, 234,
	77, 162,
	82, 162,
	-2, 182,
	-1, 278,
	64, 5,
	-2, 83,
	-1, 289,
	75, 196,
	84, 196,
	-2, 188,
	-1, 310,
	75, 196,
	-2, 188,
	-1, 317,
	1, 86,
	8, 86,
	47, 86,
	48, 86,
	61, 86,
	62, 86,
	64, 86,
	65, 86,
	75, 86,
	77, 86,
	78, 86,
	84, 86,
	86, 86,
	-2, 87,
	-1, 323,
	1, 21,
	47, 21,
	48, 21,
	64, 21,
	75, 21,
	78, 21,
	86, 21,
	-2, 138,
	-1, 325,
	1, 23,
	47, 23,
	48, 23,
	64, 23,
	75, 23,
	78, 23,
	86, 23,
	-2, 140,
	-1, 327,
	1, 25,
	47, 25,
	48, 25,
	64, 25,
	75, 25,
	78, 25,
	86, 25,
	-2, 138,
	-1, 329,
	1, 27,
	47, 27,
	48, 27,
	64, 27,
	75, 27,
	78, 27,
	86, 27,
	-2, 140,
	-1, 366,
	75, 194,
	84, 194,
	-2, 189,
	-1, 385,
	1, 20,
	47, 20,
	48, 20,
	64, 20,
	75, 20,
	78, 20,
	86, 20,
	-2, 137,
	-1, 386,
	1, 22,
	47, 22,
	48, 22,
	64, 22,
	75, 22,
	78, 22,
	86, 22,
	-2, 139,
	-1, 387,
	1, 24,
	47, 24,
	48, 24,
	64, 24,
	75, 24,
	78, 24,
	86, 24,
	-2, 137,
	-1, 388,
	1, 26,
	47, 26,
	48, 26,
	64, 26,
	75, 26,
	78, 26,
	86, 26,
	-2, 139,
}

const yyPrivate = 57344

const yyLast = 4236

var yyAct = [...]int16{
	64, 347, 290, 23, 360, 348, 9, 213, 5, 350,
	349, 241, 275, 8, 31, 65, 8, 276, 278, 277,
	310, 367, 70, 72, 419, 127, 225, 8, 108, 111,
	115, 219, 289, 421, 118, 119, 120, 122, 124, 117,
	144, 8, 1, 137, 222, 8, 138, 7, 8, 302,
	144, 121, 123, 8, 62, 147, 219, 8, 369, 145,
	219, 23, 308, 426, 219, 218, 448, 155, 206, 131,
	415, 219, 131, 219, 164, 165, 166, 167, 447, 169,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 365,
	305, 189, 190, 191, 192, 328, 194, 196, 197, 62,
	131, 159, 304, 205, 388, 303, 135, 219, 209, 135,
	219, 326, 387, 134, 136, 6, 134, 136, 300, 324,
	386, 61, 385, 219, 322, 132, 372, 296, 132, 363,
	44, 228, 230, 331, 362, 139, 215, 242, 137, 243,
	244, 137, 199, 286, 162, 361, 284, 135, 250, 126,
	238, 160, 154, 149, 134, 136, 148, 494, 364, 129,
	258, 143, 142, 493, 329, 141, 132, 62, 154, 129,
	140, 154, 489, 488, 482, 133, 154, 481, 490, 137,
	327, 154, 479, 477, 154, 468, 262, 464, 325, 249,
	130, 251, 265, 323, 487, 269, 297, 272, 463, 462,
	284, 281, 461, 453, 452, 440, 92, 93, 94, 95,
	96, 97, 285, 288, 98, 99, 83, 154, 436, 434,
	383, 125, 433, 124, 432, 200, 429, 106, 425, 259,
	242, 263, 129, 405, 309, 391, 267, 123, 62, 316,
	378, 307, 78, 79, 80, 81, 82, 338, 330, 157,
	104, 335, 332, 317, 320, 102, 77, 105, 216, 100,
	129, 342, 344, 133, 133, 318, 133, 264, 252, 23,
	129, 356, 233, 133, 133, 355, 133, 353, 220, 221,
	472, 223, 352, 450, 449, 430, 410, 231, 236, 237,
	384, 240, 224, 156, 116, 68, 374, 443, 154, 201,
	376, 339, 380, 152, 153, 381, 245, 154, 375, 202,
	158, 146, 407, 402, 354, 350, 349, 110, 129, 278,
	277, 486, 478, 129, 321, 10, 67, 473, 409, 62,
	371, 337, 306, 291, 129, 293, 398, 214, 401, 283,
	129, 403, 400, 282, 168, 133, 151, 66, 202, 47,
	370, 411, 382, 133, 113, 128, 216, 291, 413, 414,
	287, 416, 274, 233, 133, 20, 424, 4, 294, 390,
	427, 60, 346, 392, 393, 150, 395, 2, 220, 301,
	19, 59, 17, 16, 200, 25, 26, 406, 24, 3,
	129, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 62, 366, 0, 0, 0, 0,
	451, 0, 0, 0, 456, 0, 133, 431, 0, 0,
	58, 0, 0, 291, 0, 0, 366, 435, 208, 437,
	438, 0, 0, 133, 63, 441, 0, 0, 0, 133,
	444, 0, 0, 446, 0, 0, 0, 0, 373, 242,
	476, 0, 0, 0, 377, 0, 239, 200, 0, 200,
	475, 0, 129, 460, 0, 0, 248, 0, 485, 0,
	0, 0, 465, 0, 0, 466, 467, 0, 0, 0,
	0, 0, 470, 471, 291, 0, 129, 0, 0, 0,
	0, 0, 0, 133, 133, 133, 0, 0, 0, 0,
	133, 0, 133, 0, 0, 483, 0, 0, 412, 0,
	0, 0, 0, 200, 266, 417, 0, 420, 0, 273,
	491, 0, 0, 492, 0, 193, 0, 0, 0, 0,
	292, 0, 0, 0, 0, 129, 295, 0, 0, 0,
	133, 0, 129, 0, 0, 0, 133, 0, 0, 217,
	0, 0, 133, 0, 0, 445, 0, 0, 0, 0,
	227, 0, 0, 0, 129, 0, 0, 455, 0, 0,
	0, 0, 0, 246, 247, 0, 0, 0, 0, 0,
	0, 253, 254, 255, 256, 0, 351, 0, 0, 0,
	0, 291, 0, 0, 0, 0, 359, 0, 0, 0,
	133, 248, 0, 0, 133, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 480, 0, 0, 0, 484,
	0, 0, 379, 107, 86, 87, 89, 91, 101, 103,
	0, 0, 0, 0, 76, 0, 0, 0, 0, 92,
	93, 94, 95, 96, 97, 0, 0, 98, 99, 83,
	84, 85, 0, 0, 0, 0, 0, 0, 399, 0,
	106, 0, 0, 0, 0, 0, 315, 0, 73, 74,
	75, 0, 0, 88, 90, 78, 79, 80, 81, 82,
	0, 203, 418, 104, 0, 0, 0, 0, 102, 77,
	105, 0, 100, 0, 0, 0, 0, 0, 107, 86,
	87, 89, 91, 101, 103, 0, 0, 0, 0, 76,
	0, 0, 0, 368, 92, 93, 94, 95, 96, 97,
	0, 0, 98, 99, 83, 84, 85, 0, 0, 0,
	0, 454, 0, 0, 0, 106, 0, 0, 458, 0,
	0, 0, 0, 0, 0, 75, 0, 423, 88, 90,
	78, 79, 80, 81, 82, 0, 0, 0, 104, 422,
	469, 0, 0, 102, 77, 105, 0, 100, 0, 0,
	0, 404, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 314, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 313, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	280, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	279, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	261, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	260, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 73, 74, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 474, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	459, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 457, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	442, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	439, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 428, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	408, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	396, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	394, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	389, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	358, 100, 46, 32, 38, 0, 0, 42, 13, 57,
	14, 27, 0, 28, 0, 0, 0, 0, 0, 0,
	0, 50, 39, 40, 41, 0, 15, 18, 0, 0,
	0, 0, 0, 0, 0, 0, 11, 12, 0, 0,
	0, 0, 0, 29, 30, 0, 0, 21, 22, 0,
	51, 54, 0, 48, 56, 55, 52, 0, 49, 0,
	0, 0, 0, 0, 0, 0, 0, 33, 37, 0,
	0, 0, 53, 0, 45, 0, 0, 34, 35, 36,
	0, 43, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 345, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	340, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	336, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	334, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	319, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 312, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	311, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 299, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 298, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 270, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	257, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 226, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	207, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	198, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 212, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 211, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 163, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 75,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 161, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 101, 103, 0,
	0, 0, 0, 76, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 0, 103, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 0,
	0, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 107, 86, 87, 89, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 93,
	94, 95, 96, 97, 0, 0, 98, 99, 83, 84,
	85, 0, 0, 0, 0, 0, 0, 0, 0, 106,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 88, 90, 78, 79, 80, 81, 82, 89,
	91, 0, 104, 0, 0, 0, 0, 102, 77, 105,
	0, 100, 92, 93, 94, 95, 96, 97, 0, 0,
	98, 99, 83, 84, 85, 0, 0, 0, 0, 0,
	0, 0, 0, 106, 0, 0, 0, 0, 234, 32,
	38, 0, 0, 42, 0, 0, 88, 90, 78, 79,
	80, 81, 82, 0, 0, 0, 104, 50, 39, 40,
	41, 102, 77, 105, 0, 100, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 46, 32, 38, 0,
	0, 42, 0, 0, 0, 135, 51, 54, 0, 48,
	56, 55, 235, 136, 49, 50, 39, 40, 41, 0,
	0, 0, 0, 33, 232, 0, 0, 0, 53, 0,
	45, 229, 0, 34, 35, 36, 0, 43, 46, 32,
	38, 0, 0, 42, 51, 54, 0, 48, 56, 55,
	52, 0, 49, 0, 0, 0, 0, 50, 39, 40,
	41, 33, 37, 0, 0, 0, 53, 0, 45, 0,
	0, 34, 35, 36, 0, 43, 357, 234, 32, 38,
	0, 0, 42, 0, 0, 0, 51, 54, 0, 48,
	56, 55, 52, 0, 49, 0, 50, 39, 40, 41,
	0, 0, 0, 33, 37, 0, 0, 0, 53, 0,
	45, 0, 0, 34, 35, 36, 0, 43, 333, 0,
	0, 0, 0, 0, 135, 51, 54, 0, 48, 56,
	55, 235, 136, 49, 0, 0, 0, 0, 0, 114,
	32, 38, 33, 232, 42, 0, 57, 53, 0, 45,
	0, 0, 34, 35, 36, 0, 43, 0, 50, 39,
	40, 41, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 46, 32, 38,
	0, 0, 42, 0, 0, 0, 0, 51, 54, 0,
	48, 56, 55, 52, 0, 49, 50, 39, 40, 41,
	0, 0, 0, 0, 33, 37, 0, 0, 0, 109,
	0, 45, 0, 112, 34, 35, 36, 0, 43, 46,
	32, 38, 0, 0, 42, 51, 54, 0, 48, 56,
	55, 52, 0, 49, 0, 0, 0, 0, 50, 39,
	40, 41, 33, 37, 0, 0, 0, 53, 0, 45,
	0, 271, 34, 35, 36, 0, 43, 0, 0, 0,
	0, 46, 32, 38, 0, 0, 42, 51, 54, 0,
	48, 56, 55, 52, 0, 49, 0, 0, 0, 210,
	50, 39, 40, 41, 33, 37, 0, 0, 0, 53,
	0, 45, 0, 0, 34, 35, 36, 0, 43, 46,
	32, 38, 0, 0, 42, 0, 0, 0, 0, 51,
	54, 0, 48, 56, 55, 52, 0, 49, 50, 39,
	40, 41, 0, 0, 0, 0, 33, 37, 0, 0,
	0, 53, 0, 45, 0, 204, 34, 35, 36, 0,
	43, 46, 32, 38, 0, 0, 42, 51, 54, 0,
	48, 56, 55, 52, 0, 49, 0, 0, 0, 195,
	50, 39, 40, 41, 33, 37, 0, 0, 0, 53,
	0, 45, 0, 0, 34, 35, 36, 0, 43, 46,
	32, 38, 0, 0, 42, 0, 0, 0, 0, 51,
	54, 0, 48, 56, 55, 52, 0, 49, 50, 39,
	40, 41, 0, 0, 0, 0, 33, 37, 0, 0,
	0, 53, 0, 45, 0, 0, 34, 35, 36, 0,
	43, 46, 32, 38, 0, 0, 42, 51, 54, 0,
	48, 56, 55, 52, 0, 49, 0, 0, 0, 0,
	50, 39, 40, 41, 33, 37, 0, 0, 0, 397,
	0, 45, 0, 0, 34, 35, 36, 0, 43, 46,
	32, 38, 0, 0, 42, 0, 0, 0, 0, 51,
	54, 0, 48, 56, 55, 52, 0, 49, 50, 39,
	40, 41, 0, 0, 0, 0, 33, 37, 0, 0,
	0, 343, 0, 45, 0, 0, 34, 35, 36, 0,
	43, 46, 32, 38, 0, 0, 42, 51, 54, 0,
	48, 56, 55, 52, 0, 49, 0, 0, 0, 0,
	50, 39, 40, 41, 33, 37, 0, 0, 0, 341,
	0, 45, 0, 0, 34, 35, 36, 0, 43, 71,
	32, 38, 0, 0, 42, 0, 0, 0, 0, 51,
	54, 0, 48, 56, 55, 52, 0, 49, 50, 39,
	40, 41, 0, 0, 0, 0, 33, 37, 0, 0,
	0, 268, 0, 45, 0, 0, 34, 35, 36, 0,
	43, 69, 32, 38, 0, 0, 42, 51, 54, 0,
	48, 56, 55, 52, 0, 49, 0, 0, 0, 0,
	50, 39, 40, 41, 33, 37, 0, 0, 0, 53,
	0, 45, 0, 0, 34, 35, 36, 0, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 51,
	54, 0, 48, 56, 55, 52, 0, 49, 92, 93,
	94, 95, 96, 97, 0, 0, 33, 37, 83, 0,
	0, 53, 0, 45, 0, 0, 34, 35, 36, 106,
	43, 0, 92, 93, 94, 95, 96, 97, 0, 0,
	0, 0, 83, 0, 0, 0, 80, 81, 82, 0,
	0, 0, 104, 106, 0, 0, 0, 102, 77, 105,
	0, 100, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 104, 0, 0, 0,
	0, 102, 77, 105, 0, 100,
}

var yyPact = [...]int16{
	-70, -1000, 1828, -70, -1000, -73, -73, -1000, -1000, -1000,
	-1000, -1000, -1000, 3857, 3857, 353, 322, -1000, 231, -1000,
	-1000, 4097, 4055, 976, -1000, -1000, -1000, 3857, 3655, 3857,
	230, -44, -1000, 3857, 3857, 3857, 3857, 3857, -1000, -1000,
	-1000, -1000, 155, -59, 65, 3857, 69, -1000, 104, 99,
	96, 95, -24, -73, 3857, 90, 87, 352, 252, -1000,
	1828, -73, -1000, 116, 2876, 2876, 229, 246, -70, 85,
	3156, 78, 3086, 3857, 3857, 3857, 3857, 350, 3857, 3857,
	3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857,
	3857, 3857, 3857, 3857, 3857, 3857, 3857, 3857, -1000, -1000,
	3857, 3857, 3857, 3857, 3857, 3815, 3857, 3857, 2806, -70,
	293, 617, 3777, -10, 69, 2736, -73, 3735, 4150, 4150,
	4150, -44, 3016, -44, 2946, 343, 70, -40, 3857, -73,
	-9, -1000, 65, 65, -39, 65, 228, -58, 2666, 3857,
	3857, 3474, 65, 106, -73, 65, 3857, 2876, 3857, 3857,
	254, -1000, 3857, 3857, -73, -1000, -70, 3857, -70, 203,
	3857, 3857, 3857, 3857, 2876, 2876, 2596, 3226, -1000, 4126,
	4126, 4150, 4150, 4150, 2876, 184, 184, 3420, 3420, 184,
	184, 184, 184, 2876, 2876, 2876, 2876, 2876, 2876, 2876,
	3296, 2876, 3366, 162, 906, 3857, 2876, 3366, -70, 202,
	-73, 3857, -73, -70, 4017, 2526, 3693, -73, 282, 836,
	3857, 349, 345, 145, 65, 343, -1000, -33, -73, 341,
	-18, -18, 65, -18, -73, -40, -1000, 129, 2456, -1000,
	2386, 51, 3593, 65, 69, -34, 38, 35, 338, 3857,
	-22, -45, 2316, 2246, 766, 3857, 116, 116, 3857, 200,
	2176, 189, 304, 126, 121, 113, 97, 3857, 66, -1000,
	-1000, 3554, 2106, 186, -1000, 2036, 337, 182, -70, 1966,
	3975, 3937, 1896, 278, -29, -1000, -1000, 260, 1828, -1000,
	3512, 1746, -1000, -1000, -73, 68, 62, -18, 91, -73,
	-63, -73, 3857, -1000, -26, 336, 59, -1000, -1000, -1000,
	-1000, -9, 65, -1000, -1000, 3857, 253, -45, 65, 175,
	-73, 3857, -1000, -1000, 3857, 116, 2876, -44, -1000, -70,
	-1000, 226, 55, -1000, 53, -1000, 45, -1000, 37, -1000,
	2876, -1000, 1676, -1000, -1000, -1000, -70, -1000, -1000, 170,
	-70, -70, 1606, -70, 1536, 3895, -38, -1000, -1000, 259,
	3857, 168, -1000, -1000, -70, 258, 1466, -1000, -1000, 334,
	222, -18, 65, 68, 68, -7, -73, -1000, -33, 65,
	-41, 65, -1000, -51, 692, 3857, 163, -11, -1000, 3857,
	2876, 1396, 161, 221, -70, -1000, -1000, -1000, -1000, -1000,
	159, -1000, 157, 154, -70, 153, -70, -70, 1326, 140,
	-1000, -1000, -70, 1256, 243, -1000, -1000, -70, -1000, 65,
	-70, 1, -18, 220, 219, 68, 139, -18, 138, -73,
	-18, 65, -1000, 3857, 1186, -1000, -73, 1116, -1000, -1000,
	-70, 137, -1000, -1000, -1000, 134, -1000, 133, 122, -70,
	-1000, -1000, -70, -70, -1000, -18, 120, -1000, -73, -70,
	-70, 216, -1000, -1000, 333, -11, 1046, -1000, 3857, 3857,
	118, 301, -1000, -1000, -1000, 117, -1000, -1000, -1000, 65,
	112, 109, -70, 65, -1000, -45, 2876, 300, 130, -1000,
	-18, -1000, -1000, 108, -18, 107, 114, -70, -1000, -1000,
	-70, 98, 92, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 42, 399, 6, 335, 398, 396, 395, 393, 392,
	390, 382, 5, 1, 375, 372, 17, 12, 430, 0,
	327, 7, 4, 361, 155, 360, 140, 11, 359, 14,
	387, 377, 321, 2, 125, 47,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 4,
	4, 4, 5, 7, 7, 6, 6, 8, 8, 8,
	9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
	9, 14, 15, 15, 15, 15, 15, 16, 16, 17,
	10, 11, 11, 11, 11, 11, 12, 12, 13, 20,
	20, 20, 22, 22, 22, 23, 23, 23, 21, 21,
	21, 21, 21, 18, 18, 18, 18, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 24, 24, 24, 24, 24, 24, 24, 25,
	25, 26, 26, 27, 27, 27, 28, 28, 28, 28,
	28, 28, 29, 30, 30, 31, 31, 31, 32, 32,
	34, 34, 35, 33, 33, 33, 33,
}

var yyR2 = [...]int8{
	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 1, 1, 13, 12, 9, 8, 1, 1,
	6, 5, 6, 5, 6, 5, 6, 5, 1, 1,
	1, 1, 4, 3, 3, 3, 3, 5, 7, 5,
	4, 7, 5, 6, 7, 7, 8, 7, 8, 8,
	9, 6, 0, 1, 1, 2, 2, 4, 4, 3,
	7, 0, 1, 1, 2, 2, 4, 4, 3, 0,
	1, 4, 0, 1, 3, 0, 1, 4, 0, 1,
	2, 4, 5, 0, 1, 4, 4, 1, 1, 2,
	2, 2, 2, 4, 2, 4, 1, 1, 1, 1,
	5, 3, 3, 8, 9, 9, 10, 2, 5, 7,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 3, 3, 3, 5, 4, 5,
	4, 4, 4, 1, 4, 3, 4, 4, 4, 4,
	6, 8, 7, 6, 10, 5, 3, 2, 4, 4,
	6, 3, 1, 3, 2, 2, 5, 2, 6, 2,
	5, 2, 3, 0, 3, 6, 6, 5, 5, 6,
	5, 5, 1, 0, 1, 2, 1, 1, 0, 1,
	1, 2, 1, 0, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -1, -30, -2, -31, 78, -34, -35, 86, -3,
	-4, 38, 39, 10, 12, 28, -8, -9, 29, -10,
	-14, 49, 50, -19, -5, -7, -6, 13, 15, 45,
	46, -29, 5, 69, 79, 80, 81, 70, 6, 24,
	25, 26, 9, 83, -26, 76, 4, -28, 55, 60,
	23, 52, 58, 74, 53, 57, 56, 11, -18, -30,
	-31, -34, -35, -18, -19, -19, 4, 14, 74, 4,
	-19, 4, -19, 61, 62, 63, 27, 82, 68, 69,
	70, 71, 72, 42, 43, 44, 17, 18, 66, 19,
	67, 20, 32, 33, 34, 35, 36, 37, 40, 41,
	85, 21, 81, 22, 76, 83, 53, 16, -19, 74,
	-20, -19, 78, -4, 4, -19, 74, 83, -19, -19,
	-19, -29, -19, -29, -19, 76, 4, 84, -32, -34,
	-24, 4, 70, -26, 58, 51, 59, 83, -19, 76,
	76, 76, 76, 76, 74, 83, -32, -19, 76, 76,
	-20, 4, 61, 62, 65, -3, 74, 13, 74, -1,
	76, 76, 76, 76, -19, -19, -19, -19, 4, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -19, -19, -19, -19, -19, -19, -19,
	-19, -19, -19, -18, -19, 64, -19, -19, 74, -1,
	-34, 16, 65, 74, 78, -19, 78, 74, -32, -19,
	64, 82, 82, -21, 4, 76, -26, -18, 74, 82,
	-24, -24, 83, -24, 74, 84, 77, -18, -19, 77,
	-19, -24, 70, -26, 4, 58, -24, -24, 54, -32,
	-24, -27, -19, -19, -19, 62, -18, -18, -32, -1,
	-19, -1, 75, -18, -18, -18, -18, 64, 8, 77,
	84, 64, -19, -1, 75, -19, -32, -1, 74, -19,
	78, 78, -19, -32, -15, -17, -16, 48, 47, 84,
	64, -19, 4, 4, 65, 77, 8, -24, -21, 65,
	-33, -34, -32, 4, -24, -32, 8, 77, 77, 77,
	77, -24, 83, 77, 77, 65, 4, -27, 84, -33,
	65, 64, 77, 77, 65, -18, -19, -29, 75, 74,
	75, 30, 8, 77, 8, 77, 8, 77, 8, 77,
	-19, 77, -19, 84, 84, 75, 74, 4, 75, -1,
	74, 74, -19, 74, -19, 78, -11, -13, -12, 48,
	47, -32, -16, -17, 64, -3, -19, 84, 84, -32,
	-22, -24, 76, 77, 77, 8, -34, 84, -18, 84,
	-25, 4, 77, -24, -19, 65, -33, -24, 75, -32,
	-19, -19, -1, 4, 74, 77, 77, 77, 77, 84,
	-1, 75, -1, -1, 74, -1, 74, 74, -19, -32,
	-12, -13, 64, -19, -18, 75, -1, 64, 84, 4,
	74, -23, -24, -22, -22, 77, -33, -24, -32, 65,
	-24, 84, 77, 65, -19, 75, 74, -19, 77, 75,
	74, -1, 75, 75, 75, -1, 75, -1, -1, 74,
	75, -1, 64, 64, -1, -24, -1, 77, 65, 74,
	74, -22, 75, 75, -32, -24, -19, 77, -32, 64,
	-1, 75, 75, 75, 75, -1, -1, -1, 75, -32,
	-1, -1, 74, 4, 77, -27, -19, 75, 31, 75,
	-24, 75, 75, -1, -24, -33, 31, 74, 75, 75,
	74, -1, -1, 75, 75,
}

var yyDef = [...]int16{
	183, -2, -2, 183, 184, 187, 186, 190, 192, 3,
	6, 7, 8, 83, 0, 0, 12, 13, 0, 18,
	19, 0, 0, -2, 29, 30, 31, 0, -2, 0,
	0, 87, 88, 0, 0, 0, 0, 0, 96, 97,
	98, 99, 0, 188, 0, 0, 182, 143, 0, 0,
	0, 0, 0, 188, 0, 0, 0, 69, 0, 2,
	-2, 185, 191, 9, 84, 10, 0, 0, 183, 182,
	0, 182, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 131, 132,
	0, 0, 0, 0, 83, 0, 0, 0, 0, 183,
	0, 84, 0, 0, -2, 0, 188, 0, 89, 90,
	91, -2, 0, -2, 0, 78, 0, -2, 83, 189,
	0, 162, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 0, 0, 0, 188, 0, 173, 157, 0, 0,
	0, 70, 83, 83, 188, 4, 183, 0, 183, 0,
	83, 83, 83, 83, 33, 35, 0, 101, 102, 111,
	112, 113, 114, 115, 116, 117, 118, -2, -2, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 133,
	134, 135, 136, 0, 0, 0, 156, 161, 183, 0,
	186, 0, 188, 183, 0, 0, 0, 188, 52, 0,
	0, 0, 0, 0, 79, 78, 172, 193, 188, 0,
	164, 165, 0, 167, 188, 171, 110, 0, 0, 145,
	0, 0, 0, 0, -2, 0, 0, 0, 0, 173,
	0, 193, 0, 0, 0, 83, 34, 36, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 140,
	142, 0, 0, 0, 40, 0, 0, 0, 183, 0,
	0, 0, 0, 61, 188, 53, 54, 0, -2, 141,
	0, 0, 93, 95, 188, 72, 0, 80, 0, -2,
	0, 195, 83, 163, 0, 0, 0, 138, 144, 146,
	147, 165, 0, 148, 149, 0, 0, 193, 0, 0,
	-2, 0, 158, 159, 0, 32, 85, -2, 11, 183,
	39, 0, 0, -2, 0, -2, 0, -2, 0, -2,
	100, 139, 0, 180, 181, 37, 183, 71, 42, 0,
	183, 183, 0, 183, 0, 0, 188, 62, 63, 0,
	83, 0, 55, 56, 183, 0, 0, 177, 178, 0,
	0, 73, 75, 72, 72, 0, -2, 108, 193, 0,
	188, 0, 137, 0, 0, 0, 0, 0, 155, 0,
	174, 0, 0, 0, 183, -2, -2, -2, -2, 179,
	0, 43, 0, 0, 183, 0, 183, 183, 0, 0,
	64, 65, 183, 84, 0, 51, 59, 183, 176, 81,
	183, 0, 76, 0, 0, 72, 0, 166, 0, 188,
	169, 0, 150, 0, 0, 153, 188, 0, 160, 38,
	183, 0, 41, 44, 45, 0, 47, 0, 0, 183,
	60, 68, 183, 183, 57, 82, 0, 74, 188, 183,
	183, 0, 109, 168, 0, 166, 0, 152, 173, 0,
	0, 17, 46, 48, 49, 0, 66, 67, 103, 0,
	0, 0, 183, 0, 151, 193, 175, 16, 0, 50,
	77, 104, 105, 0, 170, 0, 0, 183, 106, 154,
	183, 0, 0, 15, 14,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 72, 81, 3,
	76, 77, 70, 68, 65, 69, 82, 71, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 64, 78,
	67, 62, 66, 63, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 83, 3, 84, 80, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 74, 85, 75,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	73,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:96
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:100
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:106
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:115
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:131
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:135
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:139
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:144
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:149
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:154
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:159
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:168
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 14:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:172
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:177
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:182
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:192
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:200
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:205
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:210
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 23:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:215
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:220
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:225
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:230
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:235
		{
			yyVAL.stmt = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:240
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:247
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:251
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:255
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:261
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:268
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:272
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:289
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:293
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:310
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:315
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:320
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:330
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:335
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:346
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:351
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:356
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:361
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:366
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:371
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:376
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:381
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:386
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:393
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:400
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:404
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:408
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:412
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:417
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:428
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:433
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:440
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 60:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:446
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 61:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:455
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:459
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:463
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:467
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:473
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:484
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:489
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:496
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:501
		{
			yyVAL.expr_idents = []string{}
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:505
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:509
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:517
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:521
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:525
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:529
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:533
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:537
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:545
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:549
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{{Name: yyDollar[1].tok.Lit}}
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:553
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:557
		{
			if len(yyDollar[1].func_expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.func_expr_idents = append(yyDollar[1].func_expr_idents, &ast.ParamExpr{Name: yyDollar[4].tok.Lit})
		}
	case 82:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:564
		{
			if len(yyDollar[1].func_expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.func_expr_idents = append(yyDollar[1].func_expr_idents, &ast.ParamExpr{Name: yyDollar[4].tok.Lit, TypeData: yyDollar[5].type_data})
		}
	case 83:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:572
		{
			yyVAL.exprs = nil
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:576
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:580
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:587
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:596
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:600
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:605
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:610
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 91:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:615
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:620
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:625
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 94:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:630
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:635
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:640
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:645
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:650
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:655
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:660
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:665
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:670
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 103:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:675
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 104:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:680
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 105:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:685
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 106:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:690
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:695
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 108:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:700
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 109:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:705
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 110:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:710
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 111:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:715
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:720
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 113:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:725
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:730
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:735
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:740
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:745
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:750
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:755
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:760
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:765
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:770
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:775
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:780
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:785
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:790
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:795
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:800
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:805
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:810
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:815
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:820
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:825
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:830
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:835
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:840
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:845
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:850
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 139:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:855
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:860
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:865
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:870
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:875
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:880
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:885
		{
			yyVAL.expr = &ast.DbgExpr{}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:890
		{
			yyVAL.expr = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 147:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:895
		{
			yyVAL.expr = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:900
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 149:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:910
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 150:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:915
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 151:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:920
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 152:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:925
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 153:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:930
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 154:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:936
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:942
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:947
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:952
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:957
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 159:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:962
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 160:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:967
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:972
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:980
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:984
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 164:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:993
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1002
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 166:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1012
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1016
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 168:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1025
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1031
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 170:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1035
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1045
		{
			yyVAL.slice_count = 1
		}
	case 172:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1049
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1056
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1060
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 175:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1064
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 176:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1074
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1078
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 178:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1082
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1086
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 180:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1090
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1094
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1100
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
