// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:50
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             ast.Stmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_func                     ast.Expr
	exprs                         []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"';'",
	"','",
	"'!'",
	"'.'",
	"'['",
	"']'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1158

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	61, 90,
	62, 90,
	80, 6,
	81, 90,
	-2, 2,
	-1, 24,
	81, 91,
	-2, 20,
	-1, 66,
	61, 90,
	62, 90,
	81, 90,
	-2, 6,
	-1, 115,
	16, 72,
	81, 72,
	-2, 193,
	-1, 127,
	1, 99,
	8, 99,
	47, 99,
	48, 99,
	61, 99,
	62, 99,
	63, 99,
	76, 99,
	77, 99,
	79, 99,
	80, 99,
	81, 99,
	85, 99,
	86, 99,
	-2, 94,
	-1, 129,
	1, 101,
	8, 101,
	47, 101,
	48, 101,
	61, 101,
	62, 101,
	63, 101,
	76, 101,
	77, 101,
	79, 101,
	80, 101,
	81, 101,
	85, 101,
	86, 101,
	-2, 94,
	-1, 131,
	4, 182,
	51, 182,
	58, 182,
	59, 182,
	-2, 111,
	-1, 258,
	79, 173,
	83, 173,
	-2, 193,
	-1, 285,
	63, 6,
	-2, 90,
	-1, 295,
	77, 207,
	85, 207,
	-2, 199,
	-1, 312,
	77, 207,
	-2, 199,
	-1, 319,
	1, 93,
	8, 93,
	47, 93,
	48, 93,
	61, 93,
	62, 93,
	63, 93,
	77, 93,
	79, 93,
	80, 93,
	81, 93,
	85, 93,
	86, 93,
	-2, 94,
	-1, 361,
	1, 22,
	47, 22,
	48, 22,
	63, 22,
	77, 22,
	80, 22,
	86, 22,
	-2, 142,
	-1, 363,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	77, 24,
	80, 24,
	86, 24,
	-2, 144,
	-1, 365,
	1, 26,
	47, 26,
	48, 26,
	63, 26,
	77, 26,
	80, 26,
	86, 26,
	-2, 142,
	-1, 367,
	1, 28,
	47, 28,
	48, 28,
	63, 28,
	77, 28,
	80, 28,
	86, 28,
	-2, 144,
	-1, 371,
	77, 205,
	85, 205,
	-2, 200,
	-1, 417,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	77, 21,
	80, 21,
	86, 21,
	-2, 141,
	-1, 418,
	1, 23,
	47, 23,
	48, 23,
	63, 23,
	77, 23,
	80, 23,
	86, 23,
	-2, 143,
	-1, 419,
	1, 25,
	47, 25,
	48, 25,
	63, 25,
	77, 25,
	80, 25,
	86, 25,
	-2, 141,
	-1, 420,
	1, 27,
	47, 27,
	48, 27,
	63, 27,
	77, 27,
	80, 27,
	86, 27,
	-2, 143,
}

const yyPrivate = 57344

const yyLast = 4288

var yyAct = [...]int16{
	70, 351, 237, 386, 24, 10, 251, 248, 352, 246,
	312, 296, 282, 283, 35, 9, 71, 245, 2, 354,
	353, 285, 284, 425, 9, 6, 372, 84, 9, 109,
	112, 9, 117, 228, 120, 122, 131, 9, 124, 125,
	126, 128, 130, 295, 8, 123, 147, 222, 9, 444,
	142, 222, 68, 374, 329, 127, 129, 147, 9, 150,
	9, 141, 222, 105, 310, 148, 431, 24, 78, 106,
	475, 225, 161, 222, 222, 165, 166, 167, 168, 135,
	170, 171, 172, 173, 174, 175, 176, 177, 178, 179,
	180, 181, 182, 183, 184, 185, 186, 187, 188, 189,
	222, 157, 190, 191, 192, 193, 438, 195, 197, 198,
	222, 202, 68, 327, 206, 7, 366, 222, 50, 36,
	42, 305, 67, 63, 215, 222, 139, 379, 306, 200,
	307, 322, 222, 138, 140, 208, 221, 54, 43, 44,
	45, 207, 364, 222, 459, 231, 136, 135, 420, 469,
	238, 470, 239, 240, 442, 419, 418, 135, 417, 141,
	362, 254, 157, 133, 261, 392, 55, 58, 360, 52,
	60, 59, 56, 133, 64, 135, 203, 302, 68, 377,
	264, 260, 37, 262, 39, 41, 48, 367, 40, 157,
	57, 241, 49, 143, 139, 334, 38, 268, 47, 369,
	320, 138, 140, 271, 139, 159, 275, 518, 278, 252,
	203, 138, 140, 365, 136, 157, 213, 292, 269, 211,
	135, 388, 139, 273, 136, 234, 201, 141, 160, 138,
	140, 363, 389, 157, 133, 137, 238, 141, 309, 361,
	152, 157, 136, 151, 146, 318, 68, 517, 303, 311,
	157, 265, 145, 157, 144, 141, 515, 130, 511, 319,
	155, 156, 325, 133, 333, 510, 509, 139, 335, 504,
	324, 129, 502, 133, 138, 140, 406, 345, 347, 158,
	157, 497, 496, 489, 482, 479, 24, 136, 478, 477,
	462, 359, 368, 342, 357, 356, 461, 456, 450, 448,
	141, 447, 446, 445, 430, 414, 398, 382, 378, 341,
	338, 332, 330, 279, 384, 270, 163, 385, 219, 133,
	513, 380, 508, 137, 137, 133, 137, 506, 494, 492,
	473, 471, 137, 137, 454, 137, 297, 133, 434, 227,
	149, 162, 68, 133, 118, 116, 108, 257, 407, 405,
	395, 416, 410, 297, 411, 412, 387, 358, 397, 409,
	354, 353, 399, 400, 507, 402, 285, 284, 498, 111,
	99, 100, 84, 85, 86, 349, 11, 415, 73, 164,
	429, 393, 321, 485, 432, 422, 5, 3, 132, 250,
	201, 66, 65, 437, 376, 340, 441, 133, 440, 439,
	308, 81, 82, 83, 103, 134, 114, 299, 105, 294,
	293, 371, 137, 78, 106, 219, 68, 169, 154, 72,
	449, 1, 451, 452, 51, 297, 455, 375, 371, 464,
	457, 153, 435, 62, 249, 460, 247, 137, 133, 53,
	46, 281, 472, 257, 137, 21, 474, 350, 69, 20,
	18, 17, 22, 468, 23, 19, 108, 26, 27, 210,
	201, 25, 201, 4, 0, 0, 133, 238, 488, 487,
	0, 0, 480, 481, 0, 0, 0, 483, 484, 495,
	99, 100, 84, 0, 0, 0, 0, 0, 235, 297,
	491, 133, 493, 223, 224, 0, 226, 137, 244, 500,
	0, 0, 232, 233, 0, 236, 0, 137, 137, 0,
	0, 503, 0, 505, 0, 0, 137, 255, 105, 0,
	201, 0, 0, 78, 106, 512, 0, 514, 0, 0,
	0, 0, 516, 0, 0, 0, 0, 0, 0, 194,
	0, 133, 0, 0, 272, 0, 0, 133, 0, 0,
	280, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 137, 298, 137, 0, 0, 220, 0, 301, 0,
	0, 0, 0, 0, 0, 137, 137, 230, 0, 137,
	137, 0, 300, 0, 0, 0, 133, 0, 0, 242,
	243, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 297, 0, 0, 0, 323, 0, 0,
	0, 0, 0, 223, 328, 0, 0, 0, 0, 0,
	0, 0, 355, 0, 0, 137, 0, 0, 0, 137,
	0, 137, 0, 0, 0, 0, 244, 0, 0, 0,
	0, 0, 0, 0, 0, 286, 287, 288, 289, 0,
	0, 0, 0, 383, 0, 108, 87, 88, 90, 92,
	102, 104, 137, 391, 0, 0, 77, 381, 0, 0,
	0, 0, 137, 0, 0, 317, 0, 137, 390, 99,
	100, 84, 85, 86, 0, 0, 394, 0, 0, 0,
	0, 408, 107, 0, 0, 0, 0, 0, 0, 0,
	108, 0, 0, 76, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 0, 0, 424, 105, 0, 0,
	0, 0, 78, 106, 99, 100, 84, 85, 86, 0,
	0, 423, 373, 426, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 436, 0, 0, 0, 0,
	443, 79, 80, 101, 0, 81, 82, 83, 103, 0,
	0, 0, 105, 0, 0, 0, 463, 78, 106, 0,
	0, 0, 466, 0, 50, 36, 42, 0, 0, 63,
	14, 61, 15, 28, 0, 29, 0, 0, 413, 0,
	0, 0, 0, 54, 43, 44, 45, 0, 16, 30,
	0, 476, 0, 0, 0, 0, 0, 0, 12, 13,
	0, 490, 0, 0, 0, 31, 32, 0, 0, 33,
	34, 0, 55, 58, 0, 52, 60, 59, 56, 0,
	64, 0, 0, 0, 0, 0, 0, 0, 37, 0,
	39, 41, 499, 0, 40, 0, 57, 501, 49, 0,
	0, 0, 38, 0, 47, 108, 87, 88, 90, 92,
	102, 104, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 93, 94, 95, 96, 97, 98, 0, 0, 99,
	100, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 291, 76, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 0, 0, 0, 105, 0, 0,
	0, 0, 78, 106, 290, 108, 87, 88, 90, 92,
	102, 104, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 93, 94, 95, 96, 97, 98, 0, 0, 99,
	100, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 267, 76, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 0, 0, 0, 105, 0, 0,
	0, 0, 78, 106, 266, 108, 87, 88, 90, 92,
	102, 104, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 93, 94, 95, 96, 97, 98, 0, 0, 99,
	100, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	74, 75, 0, 76, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 0, 204, 0, 105, 0, 0,
	0, 0, 78, 106, 108, 87, 88, 90, 92, 102,
	104, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	93, 94, 95, 96, 97, 98, 0, 0, 99, 100,
	84, 85, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 91, 89, 79, 80, 101, 0, 81,
	82, 83, 103, 0, 0, 0, 105, 427, 0, 428,
	0, 78, 106, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 0, 0, 105, 0, 0, 0, 0,
	78, 106, 421, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 0, 0, 105, 0, 0, 0, 0,
	78, 106, 396, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 0, 0, 105, 0, 0, 0, 0,
	78, 106, 370, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 0, 0, 105, 0, 0, 0, 0,
	78, 106, 337, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 0, 0, 105, 315, 0, 316, 0,
	78, 106, 108, 87, 88, 90, 92, 102, 104, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 93, 94,
	95, 96, 97, 98, 0, 0, 99, 100, 84, 85,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 74, 75, 0,
	76, 91, 89, 79, 80, 101, 0, 81, 82, 83,
	103, 0, 0, 0, 105, 0, 0, 0, 0, 78,
	106, 108, 87, 88, 90, 92, 102, 104, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 93, 94, 95,
	96, 97, 98, 0, 0, 99, 100, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	91, 89, 79, 80, 101, 0, 81, 82, 83, 103,
	0, 0, 0, 105, 486, 0, 0, 0, 78, 106,
	108, 87, 88, 90, 92, 102, 104, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 93, 94, 95, 96,
	97, 98, 0, 0, 99, 100, 84, 85, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 467, 76, 91,
	89, 79, 80, 101, 0, 81, 82, 83, 103, 0,
	0, 0, 105, 0, 0, 0, 0, 78, 106, 108,
	87, 88, 90, 92, 102, 104, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 93, 94, 95, 96, 97,
	98, 0, 0, 99, 100, 84, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 91, 89,
	79, 80, 101, 0, 81, 82, 83, 103, 0, 0,
	0, 105, 465, 0, 0, 0, 78, 106, 108, 87,
	88, 90, 92, 102, 104, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 93, 94, 95, 96, 97, 98,
	0, 0, 99, 100, 84, 85, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 458, 76, 91, 89, 79,
	80, 101, 0, 81, 82, 83, 103, 0, 0, 0,
	105, 0, 0, 0, 0, 78, 106, 108, 87, 88,
	90, 92, 102, 104, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 93, 94, 95, 96, 97, 98, 0,
	0, 99, 100, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 91, 89, 79, 80,
	101, 0, 81, 82, 83, 103, 0, 453, 0, 105,
	0, 0, 0, 0, 78, 106, 108, 87, 88, 90,
	92, 102, 104, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 93, 94, 95, 96, 97, 98, 0, 0,
	99, 100, 84, 85, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 91, 89, 79, 80, 101,
	0, 81, 82, 83, 103, 0, 0, 0, 105, 433,
	0, 0, 0, 78, 106, 108, 87, 88, 90, 92,
	102, 104, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 93, 94, 95, 96, 97, 98, 0, 0, 99,
	100, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 0, 403, 0, 105, 0, 0,
	0, 0, 78, 106, 108, 87, 88, 90, 92, 102,
	104, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	93, 94, 95, 96, 97, 98, 0, 0, 99, 100,
	84, 85, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 76, 91, 89, 79, 80, 101, 0, 81,
	82, 83, 103, 0, 401, 0, 105, 0, 0, 0,
	0, 78, 106, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 0, 0, 105, 0, 348, 0, 0,
	78, 106, 108, 87, 88, 90, 92, 102, 104, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 93, 94,
	95, 96, 97, 98, 0, 0, 99, 100, 84, 85,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 91, 89, 79, 80, 101, 0, 81, 82, 83,
	103, 0, 343, 0, 105, 0, 0, 0, 0, 78,
	106, 108, 87, 88, 90, 92, 102, 104, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 93, 94, 95,
	96, 97, 98, 0, 0, 99, 100, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	91, 89, 79, 80, 101, 0, 81, 82, 83, 103,
	0, 339, 0, 105, 0, 0, 0, 0, 78, 106,
	108, 87, 88, 90, 92, 102, 104, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 93, 94, 95, 96,
	97, 98, 0, 0, 99, 100, 84, 85, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 91,
	89, 79, 80, 101, 0, 81, 82, 83, 103, 0,
	331, 0, 105, 0, 0, 0, 0, 78, 106, 108,
	87, 88, 90, 92, 102, 104, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 93, 94, 95, 96, 97,
	98, 0, 0, 99, 100, 84, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 91, 89,
	79, 80, 101, 0, 81, 82, 83, 103, 0, 0,
	0, 105, 326, 0, 0, 0, 78, 106, 108, 87,
	88, 90, 92, 102, 104, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 93, 94, 95, 96, 97, 98,
	0, 0, 99, 100, 84, 85, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 91, 89, 79,
	80, 101, 0, 81, 82, 83, 103, 0, 0, 0,
	105, 314, 0, 0, 0, 78, 106, 108, 87, 88,
	90, 92, 102, 104, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 93, 94, 95, 96, 97, 98, 0,
	0, 99, 100, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 313, 76, 91, 89, 79, 80,
	101, 0, 81, 82, 83, 103, 0, 0, 0, 105,
	0, 0, 0, 0, 78, 106, 108, 87, 88, 90,
	92, 102, 104, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 93, 94, 95, 96, 97, 98, 0, 0,
	99, 100, 84, 85, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 91, 89, 79, 80, 101,
	0, 81, 82, 83, 103, 0, 0, 0, 105, 304,
	0, 0, 0, 78, 106, 108, 87, 88, 90, 92,
	102, 104, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 93, 94, 95, 96, 97, 98, 0, 0, 99,
	100, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 0, 0, 0, 105, 0, 276,
	0, 0, 78, 106, 108, 87, 88, 90, 92, 102,
	104, 0, 0, 0, 0, 77, 0, 0, 0, 0,
	93, 94, 95, 96, 97, 98, 0, 0, 99, 100,
	84, 85, 86, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 263, 76, 91, 89, 79, 80, 101, 0, 81,
	82, 83, 103, 0, 0, 0, 105, 0, 0, 0,
	0, 78, 106, 108, 87, 88, 90, 92, 102, 104,
	0, 0, 0, 0, 77, 0, 0, 0, 0, 93,
	94, 95, 96, 97, 98, 0, 0, 99, 100, 84,
	85, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	107, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 76, 91, 89, 79, 80, 101, 0, 81, 82,
	83, 103, 0, 0, 0, 105, 229, 0, 0, 0,
	78, 106, 108, 87, 88, 90, 92, 102, 104, 0,
	0, 0, 0, 77, 0, 0, 0, 0, 93, 94,
	95, 96, 97, 98, 0, 0, 99, 100, 84, 85,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 107,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	76, 91, 89, 79, 80, 101, 0, 81, 82, 83,
	103, 0, 209, 0, 105, 0, 0, 0, 0, 78,
	106, 108, 87, 88, 90, 92, 102, 104, 0, 0,
	0, 0, 77, 0, 0, 0, 0, 93, 94, 95,
	96, 97, 98, 0, 0, 99, 100, 84, 85, 86,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 76,
	91, 89, 79, 80, 101, 0, 81, 82, 83, 103,
	0, 199, 0, 105, 0, 0, 0, 0, 78, 106,
	108, 87, 88, 90, 92, 102, 104, 0, 0, 0,
	0, 77, 0, 0, 0, 0, 93, 94, 95, 96,
	97, 98, 0, 0, 99, 100, 84, 85, 86, 0,
	0, 0, 0, 0, 0, 0, 0, 107, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 76, 91,
	89, 79, 80, 101, 0, 81, 82, 83, 103, 0,
	0, 0, 105, 0, 0, 0, 0, 78, 106, 108,
	87, 88, 90, 92, 102, 104, 0, 0, 0, 0,
	77, 0, 0, 0, 0, 93, 94, 95, 96, 97,
	98, 0, 0, 99, 100, 84, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 107, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 76, 91, 89,
	79, 80, 101, 0, 81, 82, 83, 103, 0, 0,
	0, 105, 0, 0, 0, 0, 218, 106, 108, 87,
	88, 90, 92, 102, 104, 0, 0, 0, 0, 77,
	0, 0, 0, 0, 93, 94, 95, 96, 97, 98,
	0, 0, 99, 100, 84, 85, 86, 0, 0, 0,
	0, 0, 0, 0, 0, 107, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 76, 91, 89, 79,
	80, 101, 0, 81, 82, 83, 103, 0, 0, 0,
	105, 0, 0, 0, 0, 217, 106, 108, 87, 88,
	90, 92, 102, 104, 0, 0, 0, 0, 77, 0,
	0, 0, 0, 93, 94, 95, 96, 97, 98, 0,
	0, 99, 100, 84, 85, 86, 0, 0, 0, 0,
	0, 0, 0, 0, 107, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 91, 89, 79, 80,
	101, 0, 81, 82, 83, 103, 0, 0, 0, 214,
	0, 0, 0, 0, 78, 106, 108, 87, 88, 90,
	92, 102, 104, 0, 0, 0, 0, 77, 0, 0,
	0, 0, 93, 94, 95, 96, 97, 98, 0, 0,
	99, 100, 84, 85, 86, 0, 0, 0, 0, 0,
	0, 0, 0, 107, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 76, 91, 89, 79, 80, 101,
	0, 81, 82, 83, 103, 0, 0, 0, 212, 0,
	0, 0, 0, 78, 106, 108, 87, 88, 90, 92,
	102, 104, 0, 0, 0, 0, 77, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	100, 84, 85, 86, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 258, 36, 42, 105, 0, 63,
	0, 0, 78, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 43, 44, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 36, 42, 0, 0, 63, 0, 0,
	0, 139, 55, 58, 0, 52, 60, 59, 259, 140,
	64, 54, 43, 44, 45, 0, 0, 0, 37, 0,
	39, 256, 0, 0, 40, 0, 57, 0, 49, 253,
	0, 0, 38, 0, 47, 0, 0, 0, 0, 0,
	55, 58, 0, 52, 60, 59, 56, 0, 64, 0,
	0, 0, 0, 0, 0, 0, 37, 0, 39, 41,
	0, 0, 40, 0, 57, 0, 49, 0, 0, 0,
	38, 0, 47, 336, 258, 36, 42, 0, 0, 63,
	0, 0, 0, 115, 36, 42, 0, 0, 63, 0,
	61, 0, 0, 54, 43, 44, 45, 0, 0, 0,
	0, 0, 54, 43, 44, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 139, 55, 58, 0, 52, 60, 59, 259, 140,
	64, 55, 58, 0, 52, 60, 59, 56, 37, 64,
	39, 256, 0, 0, 40, 0, 57, 37, 49, 39,
	41, 0, 38, 40, 47, 110, 0, 49, 0, 113,
	0, 38, 0, 47, 50, 36, 42, 0, 0, 63,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 43, 44, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 50, 36, 42, 0, 0, 63, 0, 0,
	0, 0, 55, 58, 0, 52, 60, 59, 56, 0,
	64, 54, 43, 44, 45, 0, 0, 0, 37, 0,
	39, 41, 0, 0, 40, 0, 57, 0, 49, 0,
	277, 0, 38, 0, 47, 0, 0, 0, 0, 0,
	55, 58, 0, 52, 60, 59, 56, 0, 64, 0,
	0, 216, 0, 0, 0, 0, 37, 0, 39, 41,
	0, 0, 40, 0, 57, 0, 49, 0, 0, 0,
	38, 0, 47, 50, 36, 42, 0, 0, 63, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 54, 43, 44, 45, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 50, 36, 42, 0, 0, 63, 0, 0, 0,
	0, 55, 58, 0, 52, 60, 59, 56, 0, 64,
	54, 43, 44, 45, 0, 0, 0, 37, 0, 39,
	41, 0, 0, 40, 0, 57, 0, 49, 0, 205,
	0, 38, 0, 47, 0, 0, 0, 0, 0, 55,
	58, 0, 52, 60, 59, 56, 0, 64, 0, 0,
	196, 0, 0, 0, 0, 37, 0, 39, 41, 0,
	0, 40, 0, 57, 0, 49, 0, 0, 0, 38,
	0, 47, 50, 36, 42, 0, 0, 63, 0, 0,
	0, 50, 36, 42, 0, 0, 63, 0, 0, 0,
	0, 54, 43, 44, 45, 0, 0, 0, 0, 0,
	54, 43, 44, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 58, 0, 52, 60, 59, 56, 0, 64, 55,
	58, 0, 52, 60, 59, 56, 37, 64, 39, 41,
	0, 0, 40, 0, 57, 37, 49, 39, 41, 0,
	38, 40, 47, 404, 0, 49, 0, 0, 0, 38,
	0, 47, 50, 36, 42, 0, 0, 63, 0, 0,
	0, 50, 36, 42, 0, 0, 63, 0, 0, 0,
	0, 54, 43, 44, 45, 0, 0, 0, 0, 0,
	54, 43, 44, 45, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 58, 0, 52, 60, 59, 56, 0, 64, 55,
	58, 0, 52, 60, 59, 56, 37, 64, 39, 41,
	0, 0, 40, 0, 346, 37, 49, 39, 41, 0,
	38, 40, 47, 344, 0, 49, 0, 0, 0, 38,
	0, 47, 50, 36, 42, 0, 0, 63, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 54, 43, 44, 45, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 108, 87, 88, 90, 92,
	0, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 58, 0, 52, 60, 59, 56, 0, 64, 99,
	100, 84, 85, 86, 0, 0, 37, 0, 39, 41,
	0, 0, 40, 0, 274, 0, 49, 0, 0, 0,
	38, 0, 47, 0, 91, 89, 79, 80, 101, 0,
	81, 82, 83, 103, 121, 36, 42, 105, 0, 63,
	0, 0, 78, 106, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 54, 43, 44, 45, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 119, 36, 42, 0, 0, 63, 0, 0,
	0, 0, 55, 58, 0, 52, 60, 59, 56, 0,
	64, 54, 43, 44, 45, 0, 0, 0, 37, 0,
	39, 41, 0, 0, 40, 0, 57, 0, 49, 0,
	0, 0, 38, 0, 47, 0, 0, 0, 0, 0,
	55, 58, 0, 52, 60, 59, 56, 0, 64, 108,
	87, 88, 90, 92, 0, 0, 37, 0, 39, 41,
	0, 0, 40, 0, 57, 0, 49, 0, 0, 0,
	38, 0, 47, 99, 100, 84, 85, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 91, 89,
	79, 80, 101, 0, 81, 82, 83, 103, 0, 0,
	0, 105, 0, 0, 0, 0, 78, 106,
}

var yyPact = [...]int16{
	-55, -1000, -1000, 770, -55, -1000, -62, -62, -1000, -1000,
	-1000, -1000, -1000, -1000, 3848, 3848, 415, 364, -1000, -1000,
	-1000, -1000, -1000, -1000, 1466, -1000, -1000, -1000, 3848, 3529,
	269, 3848, 268, 4158, 4120, -39, -1000, 3848, 3848, 3848,
	3848, 3848, -1000, -1000, -1000, -1000, -1000, -49, 216, 3848,
	115, -1000, 176, -1000, 174, 166, -19, -62, 3848, 165,
	162, 414, 199, 201, 150, -1000, 770, -62, -1000, 20,
	2984, 2984, 265, 303, 3848, 3848, 3848, 3848, 413, 3848,
	3848, 3848, 3848, 3848, 3848, 3848, 3848, 3848, 3848, 3848,
	3848, 3848, 3848, 3848, 3848, 3848, 3848, 3848, 3848, -1000,
	-1000, 3848, 3848, 3848, 3848, 3848, 3767, 3848, 3848, 2915,
	-55, 95, 979, 3729, 61, 115, -55, 2846, -62, 141,
	3260, 138, 3191, 3648, -15, -15, -15, -39, 3122, -39,
	3053, -23, 3848, -62, 60, -1000, 216, 216, -13, 216,
	263, -52, 2777, 3848, 3848, 216, 171, -62, 216, 3848,
	639, 3848, 3848, 129, -1000, 3848, 3848, -62, 385, 131,
	3400, -1000, -55, 3848, -55, 2984, 2984, 2708, 3329, -1000,
	330, 330, 440, 440, 440, 2984, 440, 440, 684, 684,
	684, 684, 684, 684, 2984, 2984, 2984, 2984, 2984, 2984,
	330, 4049, 440, 4203, 172, 909, 3848, 639, 440, -55,
	238, -62, 3848, -62, -55, 4028, 2639, 3610, 236, -62,
	319, 3848, 3848, 3848, 3848, 839, 3848, 406, 405, -1000,
	-38, -62, 403, 17, 17, 216, 17, -62, -23, -1000,
	169, 2570, 42, 49, 396, 3848, -21, -71, 2501, 2432,
	1397, 3848, 20, 20, 3848, 121, 374, 50, -1000, -1000,
	216, -1000, 385, -1000, 2363, 34, 3520, 216, 115, -30,
	235, 2294, 234, 3848, 116, -1000, -1000, 3438, 1327, 233,
	-1000, 2225, 391, 232, -55, 2156, 3947, 3938, 2087, 345,
	313, -26, -1000, -1000, 294, 770, 160, 152, 134, 108,
	-1000, 114, 1257, -1000, -1000, -62, -59, -62, 3848, -1000,
	-32, 390, 100, -1000, -1000, -1000, -1000, 3848, 46, -71,
	216, 230, -62, 3848, -1000, -1000, 3848, 20, 2984, -39,
	143, 153, -62, 17, 86, 373, -1000, -1000, 60, 216,
	-1000, -55, -1000, 639, -1000, 1187, -1000, -1000, -1000, -55,
	-1000, -1000, 229, -55, -55, 2018, -55, 1949, 3857, 272,
	-28, -1000, -1000, 291, 3848, 228, -1000, -1000, -55, 288,
	79, -1000, 77, -1000, 76, -1000, 69, -1000, 1117, -1000,
	-1000, -62, -1000, -38, 216, -58, 216, -1000, 1048, 3848,
	227, -10, -1000, 3848, 2984, 1880, 262, 17, 216, 143,
	27, 385, 143, 75, -36, 226, -1000, 225, -1000, 224,
	222, -55, 221, -55, -55, 1811, 258, -55, 220, -1000,
	-1000, -55, 1742, 81, -1000, -1000, -55, -1000, -1000, -1000,
	-1000, -1000, 219, 17, 213, -62, 17, -1000, 3848, 1673,
	-1000, -62, 1604, -1000, -55, 70, 17, 255, 143, -1000,
	-1000, 254, 143, -9, 216, -1000, -1000, -1000, -1000, 212,
	-1000, 211, 208, -55, -55, 207, -1000, -1000, -55, -55,
	-1000, -1000, -1000, 379, 1535, -1000, 3848, 3848, 206, -1000,
	-62, -55, 253, -55, 252, 143, -10, -1000, -1000, -1000,
	205, 204, 337, -1000, -1000, 216, -1000, -71, 2984, -1000,
	216, 195, -55, 192, -55, 251, -1000, 333, 246, 17,
	189, 17, -1000, 188, -1000, 181, -55, 244, -55, -1000,
	-1000, -1000, 179, -55, 170, -1000, 130, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 18, 463, 5, 376, 461, 458, 457, 455, 454,
	452, 451, 450, 449, 447, 8, 1, 445, 441, 13,
	12, 433, 0, 440, 439, 369, 17, 436, 7, 6,
	9, 434, 3, 432, 356, 427, 186, 2, 424, 14,
	421, 387, 386, 340, 11, 115, 44,
}

var yyR1 = [...]int8{
	0, 40, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 10, 10, 10, 10, 9, 9, 9, 9, 8,
	8, 8, 8, 4, 4, 4, 5, 7, 7, 6,
	6, 11, 11, 11, 12, 12, 12, 12, 12, 12,
	12, 12, 12, 12, 12, 17, 18, 18, 18, 18,
	18, 19, 20, 13, 14, 14, 14, 14, 14, 15,
	15, 16, 25, 25, 32, 32, 32, 33, 33, 33,
	26, 26, 27, 27, 28, 29, 30, 30, 31, 31,
	21, 21, 21, 21, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 24, 24, 24, 23, 23, 23,
	23, 23, 23, 34, 34, 34, 34, 34, 34, 34,
	35, 35, 36, 36, 37, 37, 37, 38, 38, 38,
	38, 38, 38, 39, 41, 41, 42, 42, 42, 43,
	43, 45, 45, 46, 44, 44, 44, 44,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 3, 0, 1, 1, 1,
	2, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 5, 6, 5, 6, 5, 6, 5, 13,
	12, 9, 8, 1, 1, 1, 4, 3, 3, 3,
	3, 5, 7, 5, 4, 7, 5, 6, 7, 7,
	8, 7, 8, 8, 9, 6, 0, 1, 1, 2,
	2, 4, 3, 7, 0, 1, 1, 2, 2, 4,
	4, 3, 1, 4, 0, 1, 3, 0, 1, 4,
	0, 1, 1, 1, 1, 2, 1, 4, 1, 4,
	0, 1, 4, 4, 1, 1, 2, 2, 2, 2,
	4, 2, 4, 1, 1, 1, 1, 5, 3, 3,
	1, 2, 5, 7, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 2, 2, 3, 3, 3,
	3, 5, 4, 5, 4, 4, 4, 1, 4, 1,
	4, 4, 6, 8, 7, 6, 10, 5, 3, 2,
	4, 4, 6, 3, 3, 4, 4, 8, 9, 10,
	9, 10, 11, 1, 3, 2, 2, 5, 2, 6,
	2, 5, 2, 3, 0, 3, 6, 6, 5, 5,
	6, 5, 5, 1, 0, 1, 2, 1, 1, 0,
	1, 1, 2, 1, 0, 2, 1, 1,
}

var yyChk = [...]int16{
	-1000, -40, -1, -41, -2, -42, 80, -45, -46, 86,
	-3, -4, 38, 39, 10, 12, 28, -11, -12, -8,
	-13, -17, -10, -9, -22, -5, -7, -6, 13, 15,
	29, 45, 46, 49, 50, -39, 5, 68, 82, 70,
	74, 71, 6, 24, 25, 26, -23, 84, -36, 78,
	4, -38, 55, -24, 23, 52, 58, 76, 53, 57,
	56, 11, -21, 9, 60, -41, -42, -45, -46, -21,
	-22, -22, 4, 14, 61, 62, 64, 27, 83, 67,
	68, 71, 72, 73, 42, 43, 44, 17, 18, 66,
	19, 65, 20, 32, 33, 34, 35, 36, 37, 40,
	41, 69, 21, 74, 22, 78, 84, 53, 16, -22,
	76, -25, -22, 80, -4, 4, 76, -22, 76, 4,
	-22, 4, -22, 84, -22, -22, -22, -39, -22, -39,
	-22, 85, -43, -45, -34, 4, 71, -36, 58, 51,
	59, 84, -22, 78, 78, 78, 78, 76, 84, -43,
	-22, 78, 78, -25, 4, 61, 62, 81, 78, 4,
	78, -3, 76, 13, 76, -22, -22, -22, -22, 4,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -22, -22, -22, -22, -22, -22,
	-22, -22, -22, -22, -21, -22, 63, -22, -22, 76,
	-1, -45, 16, 81, 76, 80, -22, 80, -1, 76,
	-43, 78, 78, 78, 78, -22, 63, 83, 83, -36,
	-21, 76, 83, -34, -34, 84, -34, 76, 85, 79,
	-21, -22, -34, -34, 54, -43, -34, -37, -22, -22,
	-22, 62, -21, -21, -43, -26, -30, -27, -28, -31,
	4, -29, 78, 79, -22, -34, 71, -36, 4, 58,
	-1, -22, -1, 63, 8, 79, 85, 63, -22, -1,
	77, -22, -43, -1, 76, -22, 80, 80, -22, 77,
	-43, -18, -20, -19, 48, 47, -21, -21, -21, -21,
	85, 63, -22, 4, 4, 81, -44, -45, -43, 4,
	-34, -43, 8, 79, 79, 79, 79, 81, 4, -37,
	85, -44, 81, 63, 79, 79, 81, -21, -22, -39,
	79, 8, 81, -34, -26, -30, 79, 79, -34, 84,
	77, 76, 77, -22, 79, -22, 85, 85, 77, 76,
	4, 77, -1, 76, 76, -22, 76, -22, 80, 30,
	-14, -16, -15, 48, 47, -43, -19, -20, 63, -3,
	8, 79, 8, 79, 8, 79, 8, 79, -22, 85,
	85, -45, 85, -21, 85, -35, 4, 79, -22, 81,
	-44, -34, 77, -43, -22, -22, -32, -34, 78, 79,
	-34, -43, 79, 8, -34, -1, 85, -1, 77, -1,
	-1, 76, -1, 76, 76, -22, 4, 76, -43, -15,
	-16, 63, -22, -21, 77, -1, 63, 79, 79, 79,
	79, 85, -44, -34, -43, 81, -34, 79, 81, -22,
	77, 76, -22, 79, 76, -33, -34, -32, 79, -28,
	-29, -32, 79, -34, 85, 77, 77, 77, 77, -1,
	77, -1, -1, 76, 76, -1, 77, -1, 63, 63,
	-1, 77, 77, -43, -22, 79, -43, 63, -1, 79,
	81, 76, -32, 76, -32, 79, -34, 77, 77, 77,
	-1, -1, 77, -1, -1, 4, 79, -37, -22, 77,
	-43, -1, 76, -1, 76, -32, 77, 77, 31, -34,
	-44, -34, 77, -1, 77, -1, 76, 31, 76, 77,
	77, 77, -1, 76, -1, 77, -1, 77, 77,
}

var yyDef = [...]int16{
	194, -2, 1, -2, 194, 195, 198, 197, 201, 203,
	4, 7, 8, 9, 90, 0, 0, 13, 14, 15,
	16, 17, 18, 19, -2, 33, 34, 35, 0, 90,
	0, 0, 0, 0, 0, 94, 95, 0, 0, 0,
	0, 0, 103, 104, 105, 106, 110, 199, 0, 0,
	193, 147, 0, 149, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 0, 3, -2, 196, 202, 10,
	91, 11, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	136, 0, 0, 0, 0, 90, 0, 0, 0, 0,
	194, 0, 91, 0, 0, -2, 194, 0, 199, 193,
	0, 193, 0, 0, 96, 97, 98, -2, 0, -2,
	0, -2, 90, 200, 0, 173, 0, 0, 0, 0,
	0, 0, 0, 90, 0, 0, 0, 199, 0, 184,
	159, 0, 0, 0, 72, 90, 90, 199, 80, 0,
	0, 5, 194, 0, 194, 37, 39, 0, 108, 109,
	115, 116, 117, 118, 119, 120, 121, 122, 123, 124,
	125, 126, 127, 128, 129, 130, 131, 132, 133, 134,
	137, 138, 139, 140, 0, 0, 0, 158, 163, 194,
	0, 197, 0, 199, 194, 0, 0, 0, 0, 199,
	56, 90, 90, 90, 90, 0, 0, 0, 0, 183,
	204, 199, 0, 175, 176, 0, 178, 199, 182, 114,
	0, 0, 0, 0, 0, 184, 0, 204, 0, 0,
	0, 90, 38, 40, 0, 0, 82, 81, 86, 83,
	84, 88, 80, 164, 0, 0, 0, 0, -2, 0,
	0, 0, 0, 0, 0, 144, 146, 0, 0, 0,
	44, 0, 0, 0, 194, 0, 0, 0, 0, 0,
	64, 199, 57, 58, 0, -2, 0, 0, 0, 0,
	145, 0, 0, 100, 102, -2, 0, 206, 90, 174,
	0, 0, 0, 142, 148, 150, 151, 0, 0, 204,
	0, 0, -2, 0, 160, 161, 0, 36, 92, -2,
	74, 0, 199, 85, 0, 82, 165, 166, 176, 0,
	12, 194, 43, 107, 143, 0, 191, 192, 41, 194,
	73, 46, 0, 194, 194, 0, 194, 0, 0, 0,
	199, 65, 66, 0, 90, 0, 59, 60, 194, 0,
	0, -2, 0, -2, 0, -2, 0, -2, 0, 188,
	189, -2, 112, 204, 0, 199, 0, 141, 0, 0,
	0, 0, 157, 0, 185, 0, 0, 75, 77, 74,
	0, 0, 74, 0, 0, 0, 190, 0, 47, 0,
	0, 194, 0, 194, 194, 0, 0, 194, 0, 67,
	68, 194, 91, 0, 55, 62, 194, -2, -2, -2,
	-2, 187, 0, 177, 0, 199, 180, 152, 0, 0,
	155, 199, 0, 162, 194, 0, 78, 0, 74, 87,
	89, 0, 74, 0, 0, 42, 45, 48, 49, 0,
	51, 0, 0, 194, 194, 0, 63, 71, 194, 194,
	61, 113, 179, 0, 0, 154, 184, 0, 0, 76,
	199, 194, 0, 194, 0, 74, 177, 50, 52, 53,
	0, 0, 32, 69, 70, 0, 153, 204, 186, 167,
	0, 0, 194, 0, 194, 0, 54, 31, 0, 181,
	0, 79, 168, 0, 170, 0, 194, 0, 194, 156,
	169, 171, 0, 194, 0, 172, 0, 30, 29,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 73, 74, 3,
	78, 79, 71, 67, 81, 68, 83, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 80,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 84, 3, 85, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:116
		{
			yyVAL.compstmt = nil
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:120
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:126
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:135
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:151
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:152
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:154
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:159
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:164
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:169
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:174
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:179
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:183
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:184
		{
			yyVAL.stmt = yyDollar[1].stmt_try
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:185
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:187
		{
			yyVAL.stmt = yyDollar[1].stmt_go
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:188
		{
			yyVAL.stmt = yyDollar[1].stmt_defer
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:197
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:207
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[2].expr.Position())
		}
	case 24:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:212
		{
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:219
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:224
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:229
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr.Position())
		}
	case 28:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:234
		{
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Defer: true}}
			yyVAL.stmt_defer.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:241
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:246
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 31:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:251
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 32:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:256
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:262
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:263
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:264
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:268
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:275
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:279
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:296
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:300
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:317
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:322
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 43:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:327
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:337
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:342
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:353
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:358
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:363
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:368
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:373
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:378
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:383
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:388
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 54:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:393
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:400
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:407
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:411
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:415
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:419
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:424
		{
			body := yyVAL.stmt_select_cases.(*ast.SelectBodyStmt)
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:435
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:442
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 63:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:448
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:457
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:461
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:465
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:469
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:475
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:486
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:491
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:498
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:504
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:508
		{
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:513
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:517
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:521
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:525
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:529
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:533
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:541
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:544
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:547
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:548
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:552
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:558
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:564
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:568
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:574
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:578
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:583
		{
			yyVAL.exprs = nil
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:587
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:591
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:598
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:606
		{
			yyVAL.expr = yyDollar[1].expr_ident
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:608
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:613
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:618
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:623
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:628
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 100:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:633
		{
			yyVAL.expr = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:638
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:643
		{
			yyVAL.expr = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:648
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:653
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:658
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:663
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 107:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:668
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:673
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:678
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:683
		{
			yyVAL.expr = yyDollar[1].expr_func
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:687
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 112:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:692
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 113:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:697
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:702
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:707
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:712
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:717
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:722
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:727
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:732
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:737
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:742
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:747
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:752
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:757
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:762
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:767
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:772
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:777
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:782
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:787
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:792
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:797
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:802
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:807
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:812
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:817
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:822
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:827
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:832
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:837
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 142:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:842
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 143:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:847
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:852
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:857
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 146:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:862
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:867
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 148:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:872
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:876
		{
			yyVAL.expr = yyDollar[1].expr_dbg
		}
	case 150:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:878
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:888
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 152:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:893
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 153:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:898
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 154:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:903
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 155:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:908
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 156:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:914
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 157:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:920
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:925
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:930
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:935
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 161:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:940
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 162:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:945
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:950
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:957
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 165:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:962
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 166:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:967
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 167:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:974
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 168:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:979
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 169:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:984
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 170:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:990
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 171:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:995
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 172:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:1000
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 173:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1008
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1012
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1021
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1030
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1040
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1044
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 179:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1053
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1059
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1063
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1073
		{
			yyVAL.slice_count = 1
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1077
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1084
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1088
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 186:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1092
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 187:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1102
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 188:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1106
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 189:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1110
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1114
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 191:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1118
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1122
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1128
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
