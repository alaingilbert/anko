// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                      int
	compstmt                 ast.Stmt
	stmts                    *ast.StmtsStmt
	stmt_var_or_lets         ast.Stmt
	stmt_var                 ast.Stmt
	stmt_lets                ast.Stmt
	stmt_typed_lets          ast.Stmt
	stmt_try                 ast.Stmt
	stmt_defer               ast.Stmt
	stmt_go                  ast.Stmt
	stmt_if                  ast.Stmt
	stmt_if_helper           ast.Stmt
	stmt_for                 ast.Stmt
	stmt_switch              ast.Stmt
	stmt_switch_cases        *ast.SwitchStmt
	stmt_switch_cases_helper *ast.SwitchStmt
	stmt_switch_case         ast.Stmt
	stmt_switch_default      ast.Stmt
	stmt_select              ast.Stmt
	stmt_select_body         *ast.SelectBodyStmt
	stmt_select_content      *ast.SelectBodyStmt
	stmt_select_cases        *ast.SelectBodyStmt
	stmt_select_cases_helper *ast.SelectBodyStmt
	stmt_select_case         ast.Stmt
	stmt_select_default      ast.Stmt
	stmt                     ast.Stmt
	stmt_module              ast.Stmt
	stmt_break               ast.Stmt
	stmt_return              ast.Stmt
	stmt_continue            ast.Stmt
	stmt_throw               ast.Stmt
	stmt_expr                *ast.ExprStmt
	expr                     ast.Expr
	expr_dbg                 ast.Expr
	expr_literals            ast.Expr
	expr_literals_helper     ast.Expr
	expr_close               ast.Expr
	expr_delete              ast.Expr
	expr_in                  ast.Expr
	expr_opchan              ast.Expr
	expr_new                 ast.Expr
	expr_array               ast.Expr
	expr_paren               ast.Expr
	expr_nil_coalesce        ast.Expr
	expr_ternary             ast.Expr
	expr_len                 ast.Expr
	expr_unary               ast.Expr
	expr_binary              ast.Expr
	op_comparison            ast.Expr
	expr_assoc               ast.Expr
	expr_member_or_ident     ast.Expr
	expr_member              ast.Expr
	expr_call                *ast.CallExpr
	expr_call_helper         struct {
		Exprs  []ast.Expr
		VarArg bool
	}
	expr_anon_call                *ast.AnonCallExpr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	opt_exprs                     []ast.Expr
	expr_idents                   []string
	expr_for_idents               []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents2  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	expr_map_content              *ast.MapExpr
	expr_map_content_helper       *ast.MapExpr
	expr_map_key_value            []ast.Expr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_item_or_slice            ast.Expr
	expr_slice_helper1            ast.Expr
	expr_ident                    ast.Expr
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57405
	yyEofCode   = 57344
	ANDAND      = 57364
	ANDEQ       = 57378
	ARRAY       = 57349
	BREAK       = 57380
	CASE        = 57389
	CATCH       = 57372
	CHAN        = 57393
	CLOSE       = 57399
	CONTINUE    = 57381
	DBG         = 57402
	DEFAULT     = 57390
	DEFER       = 57392
	DELETE      = 57398
	DIVEQ       = 57377
	ELSE        = 57356
	EQEQ        = 57359
	FALSE       = 57367
	FINALLY     = 57373
	FOR         = 57357
	FUNC        = 57351
	GE          = 57361
	GO          = 57391
	IDENT       = 57346
	IF          = 57355
	IN          = 57358
	LE          = 57362
	LEN         = 57397
	MAKE        = 57394
	MAP         = 57400
	MINUSEQ     = 57375
	MINUSMINUS  = 57383
	MODULE      = 57370
	MULEQ       = 57376
	NEQ         = 57360
	NEW         = 57365
	NIL         = 57368
	NILCOALESCE = 57369
	NUMBER      = 57347
	OPCHAN      = 57395
	OREQ        = 57379
	OROR        = 57363
	PLUSEQ      = 57374
	PLUSPLUS    = 57382
	POW         = 57384
	RETURN      = 57352
	SELECT      = 57388
	SHIFTLEFT   = 57385
	SHIFTRIGHT  = 57386
	STRING      = 57348
	STRUCT      = 57401
	SWITCH      = 57387
	THROW       = 57354
	TRUE        = 57366
	TRY         = 57371
	TYPE        = 57396
	UNARY       = 57404
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57403
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -233
)

var (
	yyPrec = map[int]int{
		'=':         0,
		PLUSEQ:      0,
		MINUSEQ:     0,
		MULEQ:       0,
		DIVEQ:       0,
		ANDEQ:       0,
		OREQ:        0,
		':':         1,
		OPCHAN:      2,
		'?':         3,
		NILCOALESCE: 3,
		OROR:        4,
		ANDAND:      5,
		EQEQ:        6,
		NEQ:         6,
		'<':         6,
		LE:          6,
		'>':         6,
		GE:          6,
		'+':         7,
		'-':         7,
		'|':         7,
		'^':         7,
		'*':         8,
		'/':         8,
		'%':         8,
		SHIFTLEFT:   8,
		SHIFTRIGHT:  8,
		'&':         8,
		IN:          9,
		PLUSPLUS:    10,
		MINUSMINUS:  10,
		UNARY:       11,
	}

	yyXLAT = map[int]int{
		91:    0,   // '[' (297x)
		42:    1,   // '*' (294x)
		125:   2,   // '}' (287x)
		40:    3,   // '(' (280x)
		123:   4,   // '{' (274x)
		38:    5,   // '&' (266x)
		45:    6,   // '-' (266x)
		57395: 7,   // OPCHAN (266x)
		10:    8,   // '\n' (252x)
		59:    9,   // ';' (199x)
		57389: 10,  // CASE (197x)
		57390: 11,  // DEFAULT (197x)
		57344: 12,  // $end (174x)
		57346: 13,  // IDENT (169x)
		58:    14,  // ':' (168x)
		46:    15,  // '.' (166x)
		44:    16,  // ',' (159x)
		41:    17,  // ')' (155x)
		57400: 18,  // MAP (154x)
		57358: 19,  // IN (143x)
		37:    20,  // '%' (141x)
		43:    21,  // '+' (141x)
		47:    22,  // '/' (141x)
		60:    23,  // '<' (141x)
		62:    24,  // '>' (141x)
		63:    25,  // '?' (141x)
		124:   26,  // '|' (141x)
		57364: 27,  // ANDAND (141x)
		57378: 28,  // ANDEQ (141x)
		57377: 29,  // DIVEQ (141x)
		57359: 30,  // EQEQ (141x)
		57361: 31,  // GE (141x)
		57362: 32,  // LE (141x)
		57375: 33,  // MINUSEQ (141x)
		57383: 34,  // MINUSMINUS (141x)
		57376: 35,  // MULEQ (141x)
		57360: 36,  // NEQ (141x)
		57369: 37,  // NILCOALESCE (141x)
		57379: 38,  // OREQ (141x)
		57363: 39,  // OROR (141x)
		57374: 40,  // PLUSEQ (141x)
		57382: 41,  // PLUSPLUS (141x)
		57384: 42,  // POW (141x)
		57385: 43,  // SHIFTLEFT (141x)
		57386: 44,  // SHIFTRIGHT (141x)
		93:    45,  // ']' (133x)
		33:    46,  // '!' (125x)
		94:    47,  // '^' (125x)
		57399: 48,  // CLOSE (125x)
		57402: 49,  // DBG (125x)
		57398: 50,  // DELETE (125x)
		57367: 51,  // FALSE (125x)
		57351: 52,  // FUNC (125x)
		57397: 53,  // LEN (125x)
		57394: 54,  // MAKE (125x)
		57365: 55,  // NEW (125x)
		57368: 56,  // NIL (125x)
		57347: 57,  // NUMBER (125x)
		57348: 58,  // STRING (125x)
		57366: 59,  // TRUE (125x)
		61:    60,  // '=' (111x)
		57350: 61,  // VARARG (111x)
		57403: 62,  // WALRUS (108x)
		57458: 63,  // slice_count (105x)
		57408: 64,  // expr (77x)
		57409: 65,  // expr_anon_call (77x)
		57410: 66,  // expr_array (77x)
		57411: 67,  // expr_assoc (77x)
		57412: 68,  // expr_binary (77x)
		57413: 69,  // expr_call (77x)
		57415: 70,  // expr_close (77x)
		57416: 71,  // expr_dbg (77x)
		57417: 72,  // expr_delete (77x)
		57419: 73,  // expr_func (77x)
		57420: 74,  // expr_ident (77x)
		57422: 75,  // expr_in (77x)
		57423: 76,  // expr_item_or_slice (77x)
		57424: 77,  // expr_len (77x)
		57425: 78,  // expr_literals (77x)
		57426: 79,  // expr_literals_helper (77x)
		57427: 80,  // expr_make (77x)
		57428: 81,  // expr_map (77x)
		57432: 82,  // expr_member (77x)
		57433: 83,  // expr_member_or_ident (77x)
		57434: 84,  // expr_new (77x)
		57435: 85,  // expr_nil_coalesce (77x)
		57436: 86,  // expr_opchan (77x)
		57437: 87,  // expr_paren (77x)
		57439: 88,  // expr_ternary (77x)
		57440: 89,  // expr_unary (77x)
		57450: 90,  // op_comparison (77x)
		57414: 91,  // expr_call_helper (67x)
		57438: 92,  // expr_slice_helper1 (64x)
		57448: 93,  // newline (53x)
		57449: 94,  // newlines (49x)
		57355: 95,  // IF (44x)
		57353: 96,  // VAR (44x)
		57380: 97,  // BREAK (43x)
		57381: 98,  // CONTINUE (43x)
		57392: 99,  // DEFER (43x)
		57357: 100, // FOR (43x)
		57391: 101, // GO (43x)
		57370: 102, // MODULE (43x)
		57352: 103, // RETURN (43x)
		57388: 104, // SELECT (43x)
		57387: 105, // SWITCH (43x)
		57354: 106, // THROW (43x)
		57371: 107, // TRY (43x)
		57393: 108, // CHAN (37x)
		57401: 109, // STRUCT (37x)
		57457: 110, // opt_term (33x)
		57490: 111, // term (33x)
		57407: 112, // compstmt (32x)
		57491: 113, // type_data (28x)
		57456: 114, // opt_newlines (20x)
		57406: 115, // comma_opt_newlines (13x)
		57441: 116, // exprs (12x)
		57429: 117, // expr_map_content (8x)
		57453: 118, // opt_func_return_expr_idents (6x)
		57452: 119, // opt_exprs (5x)
		57356: 120, // ELSE (4x)
		57469: 121, // stmt_lets (4x)
		57486: 122, // stmt_typed_lets (4x)
		57487: 123, // stmt_var (4x)
		57488: 124, // stmt_var_or_lets (4x)
		57445: 125, // func_expr_typed_ident (3x)
		57447: 126, // func_expr_untyped_ident (3x)
		57451: 127, // opt_comma_opt_newlines (3x)
		57460: 128, // stmt (3x)
		57461: 129, // stmt_break (3x)
		57462: 130, // stmt_continue (3x)
		57463: 131, // stmt_defer (3x)
		57464: 132, // stmt_expr (3x)
		57465: 133, // stmt_for (3x)
		57466: 134, // stmt_go (3x)
		57467: 135, // stmt_if (3x)
		57468: 136, // stmt_if_helper (3x)
		57470: 137, // stmt_module (3x)
		57471: 138, // stmt_return (3x)
		57472: 139, // stmt_select (3x)
		57479: 140, // stmt_switch (3x)
		57484: 141, // stmt_throw (3x)
		57485: 142, // stmt_try (3x)
		57431: 143, // expr_map_key_value (2x)
		57373: 144, // FINALLY (2x)
		57442: 145, // func_expr_idents (2x)
		57443: 146, // func_expr_idents_last_untyped (2x)
		57444: 147, // func_expr_idents_not_empty (2x)
		57446: 148, // func_expr_typed_idents (2x)
		57474: 149, // stmt_select_case (2x)
		57478: 150, // stmt_select_default (2x)
		57480: 151, // stmt_switch_case (2x)
		57483: 152, // stmt_switch_default (2x)
		57372: 153, // CATCH (1x)
		57418: 154, // expr_for_idents (1x)
		57421: 155, // expr_idents (1x)
		57430: 156, // expr_map_content_helper (1x)
		57454: 157, // opt_func_return_expr_idents1 (1x)
		57455: 158, // opt_func_return_expr_idents2 (1x)
		57459: 159, // start (1x)
		57473: 160, // stmt_select_body (1x)
		57475: 161, // stmt_select_cases (1x)
		57476: 162, // stmt_select_cases_helper (1x)
		57477: 163, // stmt_select_content (1x)
		57481: 164, // stmt_switch_cases (1x)
		57482: 165, // stmt_switch_cases_helper (1x)
		57489: 166, // stmts (1x)
		57396: 167, // TYPE (1x)
		57492: 168, // type_data_struct (1x)
		57405: 169, // $default (0x)
		57349: 170, // ARRAY (0x)
		57345: 171, // error (0x)
		57404: 172, // UNARY (0x)
	}

	yySymNames = []string{
		"'['",
		"'*'",
		"'}'",
		"'('",
		"'{'",
		"'&'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"';'",
		"CASE",
		"DEFAULT",
		"$end",
		"IDENT",
		"':'",
		"'.'",
		"','",
		"')'",
		"MAP",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"']'",
		"'!'",
		"'^'",
		"CLOSE",
		"DBG",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"'='",
		"VARARG",
		"WALRUS",
		"slice_count",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_dbg",
		"expr_delete",
		"expr_func",
		"expr_ident",
		"expr_in",
		"expr_item_or_slice",
		"expr_len",
		"expr_literals",
		"expr_literals_helper",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_nil_coalesce",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"op_comparison",
		"expr_call_helper",
		"expr_slice_helper1",
		"newline",
		"newlines",
		"IF",
		"VAR",
		"BREAK",
		"CONTINUE",
		"DEFER",
		"FOR",
		"GO",
		"MODULE",
		"RETURN",
		"SELECT",
		"SWITCH",
		"THROW",
		"TRY",
		"CHAN",
		"STRUCT",
		"opt_term",
		"term",
		"compstmt",
		"type_data",
		"opt_newlines",
		"comma_opt_newlines",
		"exprs",
		"expr_map_content",
		"opt_func_return_expr_idents",
		"opt_exprs",
		"ELSE",
		"stmt_lets",
		"stmt_typed_lets",
		"stmt_var",
		"stmt_var_or_lets",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"opt_comma_opt_newlines",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_if",
		"stmt_if_helper",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"expr_map_key_value",
		"FINALLY",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"stmt_select_case",
		"stmt_select_default",
		"stmt_switch_case",
		"stmt_switch_default",
		"CATCH",
		"expr_for_idents",
		"expr_idents",
		"expr_map_content_helper",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"start",
		"stmt_select_body",
		"stmt_select_cases",
		"stmt_select_cases_helper",
		"stmt_select_content",
		"stmt_switch_cases",
		"stmt_switch_cases_helper",
		"stmts",
		"TYPE",
		"type_data_struct",
		"$default",
		"ARRAY",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {159, 1},
		2:   {112, 1},
		3:   {112, 3},
		4:   {166, 1},
		5:   {166, 3},
		6:   {128, 1},
		7:   {128, 1},
		8:   {128, 1},
		9:   {128, 1},
		10:  {128, 1},
		11:  {128, 1},
		12:  {128, 1},
		13:  {128, 1},
		14:  {128, 1},
		15:  {128, 1},
		16:  {128, 1},
		17:  {128, 1},
		18:  {128, 1},
		19:  {128, 1},
		20:  {129, 1},
		21:  {130, 1},
		22:  {138, 2},
		23:  {141, 2},
		24:  {137, 5},
		25:  {132, 1},
		26:  {134, 2},
		27:  {134, 2},
		28:  {131, 2},
		29:  {131, 2},
		30:  {142, 13},
		31:  {142, 12},
		32:  {142, 9},
		33:  {142, 8},
		34:  {124, 1},
		35:  {124, 1},
		36:  {124, 1},
		37:  {123, 4},
		38:  {122, 3},
		39:  {121, 3},
		40:  {135, 1},
		41:  {136, 5},
		42:  {136, 7},
		43:  {136, 5},
		44:  {133, 4},
		45:  {133, 7},
		46:  {133, 5},
		47:  {133, 6},
		48:  {133, 7},
		49:  {133, 7},
		50:  {133, 8},
		51:  {133, 7},
		52:  {133, 8},
		53:  {133, 8},
		54:  {133, 9},
		55:  {154, 1},
		56:  {154, 3},
		57:  {139, 4},
		58:  {163, 3},
		59:  {161, 0},
		60:  {161, 1},
		61:  {162, 1},
		62:  {162, 2},
		63:  {162, 2},
		64:  {160, 1},
		65:  {160, 1},
		66:  {149, 4},
		67:  {150, 3},
		68:  {140, 7},
		69:  {164, 0},
		70:  {164, 1},
		71:  {165, 1},
		72:  {165, 1},
		73:  {165, 2},
		74:  {165, 2},
		75:  {151, 4},
		76:  {151, 4},
		77:  {152, 3},
		78:  {118, 0},
		79:  {118, 1},
		80:  {118, 3},
		81:  {157, 0},
		82:  {157, 1},
		83:  {158, 1},
		84:  {158, 3},
		85:  {145, 0},
		86:  {145, 1},
		87:  {147, 1},
		88:  {147, 1},
		89:  {126, 1},
		90:  {125, 2},
		91:  {146, 1},
		92:  {146, 3},
		93:  {148, 1},
		94:  {148, 3},
		95:  {119, 0},
		96:  {119, 1},
		97:  {116, 1},
		98:  {116, 3},
		99:  {64, 1},
		100: {64, 1},
		101: {64, 1},
		102: {64, 1},
		103: {64, 1},
		104: {64, 1},
		105: {64, 1},
		106: {64, 1},
		107: {64, 1},
		108: {64, 1},
		109: {64, 1},
		110: {64, 1},
		111: {64, 1},
		112: {64, 1},
		113: {64, 1},
		114: {64, 1},
		115: {64, 1},
		116: {64, 1},
		117: {64, 1},
		118: {64, 1},
		119: {64, 1},
		120: {71, 3},
		121: {71, 4},
		122: {71, 4},
		123: {77, 4},
		124: {87, 3},
		125: {66, 2},
		126: {66, 5},
		127: {66, 7},
		128: {85, 3},
		129: {88, 5},
		130: {84, 4},
		131: {86, 3},
		132: {86, 2},
		133: {75, 3},
		134: {72, 4},
		135: {72, 6},
		136: {70, 4},
		137: {78, 1},
		138: {79, 1},
		139: {79, 1},
		140: {79, 1},
		141: {79, 1},
		142: {79, 1},
		143: {83, 1},
		144: {83, 1},
		145: {74, 1},
		146: {82, 3},
		147: {69, 2},
		148: {65, 2},
		149: {91, 4},
		150: {91, 3},
		151: {89, 2},
		152: {89, 2},
		153: {89, 2},
		154: {89, 2},
		155: {89, 2},
		156: {68, 3},
		157: {68, 3},
		158: {68, 3},
		159: {68, 3},
		160: {68, 3},
		161: {68, 3},
		162: {68, 3},
		163: {68, 3},
		164: {68, 1},
		165: {68, 1},
		166: {68, 3},
		167: {68, 3},
		168: {68, 3},
		169: {68, 3},
		170: {67, 3},
		171: {67, 3},
		172: {67, 3},
		173: {67, 3},
		174: {67, 3},
		175: {67, 3},
		176: {67, 2},
		177: {67, 2},
		178: {90, 3},
		179: {90, 3},
		180: {90, 3},
		181: {90, 3},
		182: {90, 3},
		183: {90, 3},
		184: {73, 8},
		185: {73, 9},
		186: {73, 10},
		187: {73, 9},
		188: {73, 10},
		189: {73, 11},
		190: {80, 4},
		191: {80, 6},
		192: {80, 8},
		193: {80, 7},
		194: {113, 1},
		195: {113, 3},
		196: {113, 2},
		197: {113, 2},
		198: {113, 5},
		199: {113, 2},
		200: {113, 6},
		201: {168, 2},
		202: {168, 4},
		203: {63, 2},
		204: {63, 3},
		205: {81, 4},
		206: {81, 8},
		207: {81, 3},
		208: {117, 1},
		209: {117, 3},
		210: {156, 1},
		211: {156, 3},
		212: {143, 3},
		213: {76, 2},
		214: {92, 3},
		215: {92, 5},
		216: {92, 4},
		217: {92, 4},
		218: {155, 1},
		219: {155, 3},
		220: {110, 0},
		221: {110, 1},
		222: {111, 1},
		223: {111, 1},
		224: {111, 2},
		225: {114, 0},
		226: {114, 1},
		227: {94, 1},
		228: {94, 2},
		229: {93, 1},
		230: {115, 2},
		231: {127, 1},
		232: {127, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [506][]uint16{
		// 0
		{13, 13, 3: 13, 13, 13, 13, 13, 241, 238, 12: 13, 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 235, 159: 234},
		{12: 233},
		{12: 232},
		{303, 322, 231, 302, 328, 321, 318, 306, 231, 10: 231, 231, 231, 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 265, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 95: 275, 272, 260, 261, 267, 276, 266, 264, 262, 277, 278, 263, 268, 116: 273, 121: 271, 270, 269, 246, 128: 245, 247, 248, 258, 259, 253, 257, 252, 274, 251, 249, 256, 255, 250, 254, 166: 244},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 10: 12, 12, 12, 12, 18: 12, 46: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 95: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		// 5
		{11, 11, 11, 11, 11, 11, 11, 11, 241, 10: 11, 11, 11, 11, 18: 11, 46: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 93: 240, 243, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 241, 10: 10, 10, 10, 10, 18: 10, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 93: 242, 95: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 10: 6, 6, 6, 6, 16: 6, 18: 6, 45: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 95: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 10: 4, 4, 4, 4, 16: 4, 18: 4, 45: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 95: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 10: 5, 5, 5, 5, 16: 5, 18: 5, 45: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 95: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		// 10
		{9, 9, 9, 9, 9, 9, 9, 9, 241, 10: 9, 9, 9, 9, 18: 9, 46: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 93: 242, 95: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{2: 13, 8: 241, 238, 13, 13, 13, 93: 240, 239, 110: 736, 737},
		{2: 229, 8: 229, 229, 229, 229, 229},
		{2: 227, 8: 227, 227, 227, 227, 227, 14: 227},
		{2: 226, 8: 226, 226, 226, 226, 226, 14: 226},
		// 15
		{2: 225, 8: 225, 225, 225, 225, 225, 14: 225},
		{2: 224, 8: 224, 224, 224, 224, 224, 14: 224},
		{2: 223, 8: 223, 223, 223, 223, 223, 14: 223},
		{2: 222, 8: 222, 222, 222, 222, 222, 14: 222},
		{2: 221, 8: 221, 221, 221, 221, 221, 14: 221},
		// 20
		{2: 220, 8: 220, 220, 220, 220, 220, 14: 220},
		{2: 219, 8: 219, 219, 219, 219, 219, 14: 219},
		{2: 218, 8: 218, 218, 218, 218, 218, 14: 218},
		{2: 217, 8: 217, 217, 217, 217, 217, 14: 217},
		{2: 216, 8: 216, 216, 216, 216, 216, 14: 216},
		// 25
		{2: 215, 8: 215, 215, 215, 215, 215, 14: 215},
		{2: 214, 8: 214, 214, 214, 214, 214, 14: 214},
		{2: 213, 8: 213, 213, 213, 213, 213, 14: 213},
		{2: 212, 8: 212, 212, 212, 212, 212, 14: 212},
		{303, 322, 138, 302, 328, 321, 318, 306, 138, 138, 138, 138, 138, 317, 138, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 412, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 116: 560, 119: 735},
		// 30
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 734, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{13: 730},
		{376, 350, 208, 347, 5: 358, 349, 343, 208, 208, 208, 208, 208, 14: 208, 345, 136, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 60: 136, 62: 136, 91: 346, 375},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 538, 729, 285, 324, 287, 728, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 538, 727, 285, 324, 287, 726, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		// 35
		{4: 707},
		{2: 199, 8: 199, 199, 199, 199, 199, 14: 199},
		{2: 198, 8: 198, 198, 198, 198, 198, 14: 198},
		{2: 197, 8: 197, 197, 197, 197, 197, 14: 197},
		{13: 702, 155: 701},
		// 40
		{16: 337, 60: 698, 62: 697, 115: 415},
		{2: 193, 8: 193, 193, 193, 193, 193, 14: 193, 120: 688},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 684, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 630, 321, 318, 306, 9: 633, 13: 635, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 632, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 96: 272, 116: 273, 121: 271, 270, 269, 634, 154: 631},
		{4: 611},
		// 45
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 590, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 14: 134, 134, 134, 134, 19: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 60: 134, 134, 134},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 14: 133, 133, 133, 133, 19: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 60: 133, 133, 133},
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 14: 132, 132, 132, 132, 19: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 60: 132, 132, 132},
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 14: 131, 131, 131, 131, 19: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 60: 131, 131, 131},
		// 50
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 14: 130, 130, 130, 130, 19: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 60: 130, 130, 130},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 14: 129, 129, 129, 129, 19: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 60: 129, 129, 129},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 14: 128, 128, 128, 128, 19: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 60: 128, 128, 128},
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 14: 127, 127, 127, 127, 19: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 60: 127, 127, 127},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 14: 126, 126, 126, 126, 19: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 60: 126, 126, 126},
		// 55
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 14: 125, 125, 125, 125, 19: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 60: 125, 125, 125},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 14: 124, 124, 124, 124, 19: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 60: 124, 124, 124},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 14: 123, 123, 123, 123, 19: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 60: 123, 123, 123},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 14: 122, 122, 122, 122, 19: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 60: 122, 122, 122},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 14: 121, 121, 121, 121, 19: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 60: 121, 121, 121},
		// 60
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 14: 120, 120, 120, 120, 19: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 60: 120, 120, 120},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 14: 119, 119, 119, 119, 19: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 60: 119, 119, 119},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 14: 118, 118, 118, 118, 19: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 60: 118, 118, 118},
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 14: 117, 117, 117, 117, 19: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 60: 117, 117, 117},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 14: 116, 116, 116, 116, 19: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 60: 116, 116, 116},
		// 65
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 14: 115, 115, 115, 115, 19: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 60: 115, 115, 115},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 14: 114, 114, 114, 114, 19: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 60: 114, 114, 114},
		{3: 575},
		{3: 572},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 570, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		// 70
		{8, 8, 3: 8, 8, 8, 8, 8, 241, 13: 8, 16: 8, 18: 8, 45: 565, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 240, 331, 114: 566},
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 557},
		{3: 554},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 553, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{3: 547},
		// 75
		{3: 544},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 14: 96, 96, 96, 96, 19: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 60: 96, 96, 96},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 14: 95, 95, 95, 95, 19: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 60: 95, 95, 95},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 14: 94, 94, 94, 94, 19: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 60: 94, 94, 94},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 14: 93, 93, 93, 93, 19: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 60: 93, 93, 93},
		// 80
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 14: 92, 92, 92, 92, 19: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 60: 92, 92, 92},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 14: 91, 91, 91, 91, 19: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 60: 91, 91, 91},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 14: 90, 90, 90, 90, 19: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 60: 90, 90, 90},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 14: 89, 89, 89, 89, 19: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 60: 89, 89, 89},
		{88, 88, 88, 347, 88, 88, 88, 88, 88, 88, 88, 88, 88, 14: 88, 88, 88, 88, 19: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 60: 88, 88, 88, 91: 543},
		// 85
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 542, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 541, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 540, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 538, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 539, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 538, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 537, 293, 283, 296, 286, 282, 281, 323},
		// 90
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 14: 69, 69, 69, 69, 19: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 60: 69, 69, 69},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 14: 68, 68, 68, 68, 19: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 60: 68, 68, 68},
		{3: 479, 13: 480},
		{3: 465},
		{428, 4: 427},
		// 95
		{8, 8, 8, 8, 8, 8, 8, 8, 241, 13: 8, 18: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 240, 331, 114: 330, 117: 329},
		{2: 426},
		{303, 322, 25, 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 332, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 143: 334, 156: 333},
		{7, 7, 7, 7, 7, 7, 7, 7, 241, 10: 7, 7, 13: 7, 16: 7, 18: 7, 45: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 93: 242, 108: 7, 7},
		{376, 350, 3: 347, 5: 358, 349, 343, 14: 374, 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		// 100
		{2: 8, 8: 241, 16: 337, 93: 240, 331, 114: 338, 336, 127: 335},
		{2: 23, 8: 23, 16: 23},
		{2: 24},
		{303, 322, 2, 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 332, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 143: 340},
		{8, 8, 8, 8, 8, 8, 8, 8, 241, 13: 8, 18: 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 240, 331, 108: 8, 8, 114: 339},
		// 105
		{2: 1, 45: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 13: 3, 18: 3, 45: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 108: 3, 3},
		{2: 22, 8: 22, 16: 22},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 425, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 422, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		// 110
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 421, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 420, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{13: 419},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 14: 85, 85, 85, 85, 19: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 60: 85, 85, 85},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 17: 138, 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 412, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 116: 411, 119: 413},
		// 115
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 410, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 409, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 408, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 407, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 406, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		// 120
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 405, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 404, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 403, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 402, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 401, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		// 125
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 400, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 399, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 398, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 397, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 396, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		// 130
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 395, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 394, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 393, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 14: 57, 57, 57, 57, 19: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 60: 57, 57, 57},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 14: 56, 56, 56, 56, 19: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 60: 56, 56, 56},
		// 135
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 392, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 391, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 390, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 389, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 388, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		// 140
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 387, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 386, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14: 20, 20, 20, 20, 19: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60: 20, 20, 20},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 378, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 377, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{376, 350, 3: 347, 5: 358, 349, 343, 14: 382, 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 381, 91: 346, 375},
		// 145
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 379, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{376, 350, 3: 347, 5: 358, 349, 343, 15: 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 380, 91: 346, 375},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 14: 16, 16, 16, 16, 19: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 60: 16, 16, 16},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 14: 19, 19, 19, 19, 19: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 60: 19, 19, 19},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 45: 384, 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 383, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		// 150
		{376, 350, 3: 347, 5: 358, 349, 343, 15: 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 385, 91: 346, 375},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 14: 17, 17, 17, 17, 19: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 60: 17, 17, 17},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14: 18, 18, 18, 18, 19: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 60: 18, 18, 18},
		{376, 350, 21, 347, 5: 358, 349, 343, 21, 15: 345, 21, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{376, 350, 50, 347, 50, 358, 349, 50, 50, 50, 50, 50, 50, 14: 50, 345, 50, 50, 19: 344, 352, 348, 351, 50, 50, 50, 356, 50, 50, 50, 50, 50, 50, 50, 367, 50, 50, 50, 50, 50, 50, 366, 353, 354, 355, 50, 60: 50, 50, 50, 91: 346, 375},
		// 155
		{376, 350, 51, 347, 51, 358, 349, 51, 51, 51, 51, 51, 51, 14: 51, 345, 51, 51, 19: 344, 352, 348, 351, 51, 51, 51, 356, 51, 51, 51, 51, 51, 51, 51, 367, 51, 51, 51, 51, 51, 51, 366, 353, 354, 355, 51, 60: 51, 51, 51, 91: 346, 375},
		{376, 350, 52, 347, 52, 358, 349, 52, 52, 52, 52, 52, 52, 14: 52, 345, 52, 52, 19: 344, 352, 348, 351, 52, 52, 52, 356, 52, 52, 52, 52, 52, 52, 52, 367, 52, 52, 52, 52, 52, 52, 366, 353, 354, 355, 52, 60: 52, 52, 52, 91: 346, 375},
		{376, 350, 53, 347, 53, 358, 349, 53, 53, 53, 53, 53, 53, 14: 53, 345, 53, 53, 19: 344, 352, 348, 351, 53, 53, 53, 356, 53, 53, 53, 53, 53, 53, 53, 367, 53, 53, 53, 53, 53, 53, 366, 353, 354, 355, 53, 60: 53, 53, 53, 91: 346, 375},
		{376, 350, 54, 347, 54, 358, 349, 54, 54, 54, 54, 54, 54, 14: 54, 345, 54, 54, 19: 344, 352, 348, 351, 54, 54, 54, 356, 54, 54, 54, 54, 54, 54, 54, 367, 54, 54, 54, 54, 54, 54, 366, 353, 354, 355, 54, 60: 54, 54, 54, 91: 346, 375},
		{376, 350, 55, 347, 55, 358, 349, 55, 55, 55, 55, 55, 55, 14: 55, 345, 55, 55, 19: 344, 352, 348, 351, 55, 55, 55, 356, 55, 55, 55, 55, 55, 55, 55, 367, 55, 55, 55, 55, 55, 55, 366, 353, 354, 355, 55, 60: 55, 55, 55, 91: 346, 375},
		// 160
		{376, 350, 58, 347, 58, 358, 349, 343, 58, 58, 58, 58, 58, 14: 58, 345, 58, 58, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 58, 60: 58, 58, 58, 91: 346, 375},
		{376, 350, 59, 347, 59, 358, 349, 343, 59, 59, 59, 59, 59, 14: 59, 345, 59, 59, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 59, 60: 59, 59, 59, 91: 346, 375},
		{376, 350, 60, 347, 60, 358, 349, 343, 60, 60, 60, 60, 60, 14: 60, 345, 60, 60, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 60, 60: 60, 60, 60, 91: 346, 375},
		{376, 350, 61, 347, 61, 358, 349, 343, 61, 61, 61, 61, 61, 14: 61, 345, 61, 61, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 61, 60: 61, 61, 61, 91: 346, 375},
		{376, 350, 62, 347, 62, 358, 349, 343, 62, 62, 62, 62, 62, 14: 62, 345, 62, 62, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 62, 60: 62, 62, 62, 91: 346, 375},
		// 165
		{376, 350, 63, 347, 63, 358, 349, 343, 63, 63, 63, 63, 63, 14: 63, 345, 63, 63, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 63, 60: 63, 63, 63, 91: 346, 375},
		{376, 350, 64, 347, 64, 358, 349, 64, 64, 64, 64, 64, 64, 14: 64, 345, 64, 64, 19: 344, 352, 348, 351, 372, 370, 64, 356, 64, 64, 64, 368, 371, 373, 64, 367, 64, 369, 64, 64, 64, 64, 366, 353, 354, 355, 64, 60: 64, 64, 64, 91: 346, 375},
		{376, 65, 65, 347, 65, 65, 65, 65, 65, 65, 65, 65, 65, 14: 65, 345, 65, 65, 19: 344, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 367, 65, 65, 65, 65, 65, 65, 366, 353, 65, 65, 65, 60: 65, 65, 65, 91: 346, 375},
		{376, 350, 66, 347, 66, 358, 349, 66, 66, 66, 66, 66, 66, 14: 66, 345, 66, 66, 19: 344, 352, 348, 351, 372, 370, 66, 356, 359, 66, 66, 368, 371, 373, 66, 367, 66, 369, 66, 66, 66, 66, 366, 353, 354, 355, 66, 60: 66, 66, 66, 91: 346, 375},
		{376, 350, 67, 347, 67, 358, 67, 67, 67, 67, 67, 67, 67, 14: 67, 345, 67, 67, 19: 344, 352, 67, 351, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 367, 67, 67, 67, 67, 67, 67, 366, 353, 354, 355, 67, 60: 67, 67, 67, 91: 346, 375},
		// 170
		{376, 70, 70, 347, 70, 70, 70, 70, 70, 70, 70, 70, 70, 14: 70, 345, 70, 70, 19: 344, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 367, 70, 70, 70, 70, 70, 70, 366, 353, 70, 70, 70, 60: 70, 70, 70, 91: 346, 375},
		{376, 71, 71, 347, 71, 71, 71, 71, 71, 71, 71, 71, 71, 14: 71, 345, 71, 71, 19: 344, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 367, 71, 71, 71, 71, 71, 71, 366, 353, 71, 71, 71, 60: 71, 71, 71, 91: 346, 375},
		{376, 350, 72, 347, 72, 358, 349, 343, 72, 72, 72, 72, 72, 14: 72, 345, 72, 72, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 72, 60: 72, 72, 72, 91: 346, 375},
		{376, 73, 73, 347, 73, 73, 73, 73, 73, 73, 73, 73, 73, 14: 73, 345, 73, 73, 19: 344, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 367, 73, 73, 73, 73, 73, 73, 366, 353, 73, 73, 73, 60: 73, 73, 73, 91: 346, 375},
		{376, 74, 74, 347, 74, 74, 74, 74, 74, 74, 74, 74, 74, 14: 74, 345, 74, 74, 19: 344, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 367, 74, 74, 74, 74, 74, 74, 366, 353, 74, 74, 74, 60: 74, 74, 74, 91: 346, 375},
		// 175
		{376, 75, 75, 347, 75, 75, 75, 75, 75, 75, 75, 75, 75, 14: 75, 345, 75, 75, 19: 344, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 367, 75, 75, 75, 75, 75, 75, 366, 353, 75, 75, 75, 60: 75, 75, 75, 91: 346, 375},
		{376, 350, 76, 347, 76, 358, 76, 76, 76, 76, 76, 76, 76, 14: 76, 345, 76, 76, 19: 344, 352, 76, 351, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 367, 76, 76, 76, 76, 76, 76, 366, 353, 354, 355, 76, 60: 76, 76, 76, 91: 346, 375},
		{376, 350, 77, 347, 77, 358, 77, 77, 77, 77, 77, 77, 77, 14: 77, 345, 77, 77, 19: 344, 352, 77, 351, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 367, 77, 77, 77, 77, 77, 77, 366, 353, 354, 355, 77, 60: 77, 77, 77, 91: 346, 375},
		{16: 337, 137, 61: 416, 115: 415},
		{376, 350, 136, 347, 5: 358, 349, 343, 136, 136, 136, 136, 136, 14: 136, 345, 136, 136, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 136, 61: 136, 91: 346, 375},
		// 180
		{17: 414},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 14: 83, 83, 83, 83, 19: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 60: 83, 83, 83},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 418, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{17: 417},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 14: 84, 84, 84, 84, 19: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 60: 84, 84, 84},
		// 185
		{376, 350, 135, 347, 5: 358, 349, 343, 135, 135, 135, 135, 135, 14: 135, 345, 135, 135, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 135, 60: 135, 135, 135, 91: 346, 375},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 14: 87, 87, 87, 87, 19: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 60: 87, 87, 87},
		{376, 100, 100, 347, 100, 100, 100, 100, 100, 100, 100, 100, 100, 14: 100, 345, 100, 100, 19: 344, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 367, 100, 100, 100, 100, 100, 100, 366, 353, 100, 100, 100, 60: 100, 100, 100, 91: 346, 375},
		{376, 350, 102, 347, 102, 358, 349, 343, 102, 102, 102, 102, 102, 14: 102, 345, 102, 102, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 102, 102, 368, 371, 373, 102, 367, 102, 369, 341, 102, 357, 102, 366, 353, 354, 355, 102, 60: 102, 102, 102, 91: 346, 375},
		{376, 350, 3: 347, 5: 358, 349, 343, 14: 423, 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		// 190
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 424, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{376, 350, 104, 347, 104, 358, 349, 343, 104, 104, 104, 104, 104, 14: 104, 345, 104, 104, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 104, 104, 368, 371, 373, 104, 367, 104, 369, 341, 104, 357, 104, 366, 353, 354, 355, 104, 60: 104, 104, 104, 91: 346, 375},
		{376, 350, 105, 347, 105, 358, 349, 105, 105, 105, 105, 105, 105, 14: 105, 345, 105, 105, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 105, 105, 368, 371, 373, 105, 367, 105, 369, 341, 105, 357, 105, 366, 353, 354, 355, 105, 60: 105, 105, 105, 91: 346, 375},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 14: 26, 26, 26, 26, 19: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 60: 26, 26, 26},
		{8, 8, 8, 8, 8, 8, 8, 8, 241, 13: 8, 18: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 240, 331, 114: 330, 117: 463},
		// 195
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 430},
		{2: 39, 4: 39, 8: 39, 15: 39, 39, 39, 45: 39},
		{15: 444, 45: 458},
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 457},
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 456},
		// 200
		{452},
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 451},
		{4: 439},
		{45: 437},
		{436, 30, 13: 30, 18: 30, 63: 438, 108: 30, 30},
		// 205
		{29, 29, 13: 29, 18: 29, 108: 29, 29},
		{8: 241, 13: 8, 93: 240, 331, 114: 440},
		{13: 442, 168: 441},
		{2: 8, 8: 241, 16: 337, 93: 240, 331, 114: 446, 447},
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 443},
		// 210
		{2: 32, 8: 32, 15: 444, 32},
		{13: 445},
		{2: 38, 4: 38, 8: 38, 15: 38, 38, 38, 45: 38},
		{2: 450},
		{13: 448},
		// 215
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 449},
		{2: 31, 8: 31, 15: 444, 31},
		{2: 33, 4: 33, 8: 33, 15: 33, 33, 33, 45: 33},
		{2: 34, 4: 34, 8: 34, 15: 444, 34, 34, 45: 34},
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 453},
		// 220
		{15: 444, 45: 454},
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 455},
		{2: 35, 4: 35, 8: 35, 15: 444, 35, 35, 45: 35},
		{2: 36, 4: 36, 8: 36, 15: 444, 36, 36, 45: 36},
		{2: 37, 4: 37, 8: 37, 15: 444, 37, 37, 45: 37},
		// 225
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 459},
		{4: 460, 15: 444},
		{8, 8, 8, 8, 8, 8, 8, 8, 241, 13: 8, 18: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 240, 331, 114: 330, 117: 461},
		{2: 462},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 14: 27, 27, 27, 27, 19: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 60: 27, 27, 27},
		// 230
		{2: 464},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 14: 28, 28, 28, 28, 19: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 60: 28, 28, 28},
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 466, 167: 467},
		{15: 444, 473, 472},
		{13: 468},
		// 235
		{16: 469},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 470, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{376, 350, 3: 347, 5: 358, 349, 343, 15: 345, 17: 471, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 14: 40, 40, 40, 40, 19: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 60: 40, 40, 40},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 14: 43, 43, 43, 43, 19: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 60: 43, 43, 43},
		// 240
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 474, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{376, 350, 3: 347, 5: 358, 349, 343, 15: 345, 476, 475, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 14: 42, 42, 42, 42, 19: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 60: 42, 42, 42},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 477, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{376, 350, 3: 347, 5: 358, 349, 343, 15: 345, 17: 478, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		// 245
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 14: 41, 41, 41, 41, 19: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 60: 41, 41, 41},
		{13: 485, 17: 148, 125: 487, 486, 145: 519, 518, 482, 484},
		{3: 481},
		{13: 485, 17: 148, 125: 487, 486, 145: 488, 483, 482, 484},
		{16: 337, 147, 115: 515},
		// 250
		{16: 146, 146, 61: 503},
		{16: 145, 145},
		{436, 431, 13: 429, 16: 144, 144, 433, 61: 144, 63: 432, 108: 434, 435, 113: 502},
		{16: 142, 142, 61: 142},
		{16: 140, 140},
		// 255
		{17: 489},
		{436, 431, 3: 491, 155, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 490, 118: 492},
		{4: 154, 15: 444},
		{436, 431, 13: 429, 17: 152, 433, 63: 432, 108: 434, 435, 113: 498, 157: 496, 497},
		{4: 493},
		// 260
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 494},
		{2: 495},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 14: 46, 46, 46, 46, 19: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 60: 46, 46, 46},
		{17: 501},
		{16: 337, 151, 115: 499},
		// 265
		{15: 444, 150, 150},
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 500},
		{15: 444, 149, 149},
		{4: 153},
		{15: 444, 143, 143},
		// 270
		{436, 431, 13: 429, 17: 504, 433, 63: 432, 108: 434, 435, 113: 505},
		{436, 431, 3: 491, 155, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 490, 118: 511},
		{15: 444, 17: 506},
		{436, 431, 3: 491, 155, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 490, 118: 507},
		{4: 508},
		// 275
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 509},
		{2: 510},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 14: 44, 44, 44, 44, 19: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 60: 44, 44, 44},
		{4: 512},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 513},
		// 280
		{2: 514},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 14: 45, 45, 45, 45, 19: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 60: 45, 45, 45},
		{13: 485, 125: 517, 516},
		{16: 141, 141, 61: 141},
		{16: 139, 139},
		// 285
		{16: 146, 146, 61: 525},
		{17: 520},
		{436, 431, 3: 491, 155, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 490, 118: 521},
		{4: 522},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 523},
		// 290
		{2: 524},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 14: 49, 49, 49, 49, 19: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 60: 49, 49, 49},
		{436, 431, 13: 429, 17: 526, 433, 63: 432, 108: 434, 435, 113: 527},
		{436, 431, 3: 491, 155, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 490, 118: 533},
		{15: 444, 17: 528},
		// 295
		{436, 431, 3: 491, 155, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 490, 118: 529},
		{4: 530},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 531},
		{2: 532},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 14: 47, 47, 47, 47, 19: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 60: 47, 47, 47},
		// 300
		{4: 534},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 535},
		{2: 536},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 14: 48, 48, 48, 48, 19: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 60: 48, 48, 48},
		{134, 134, 78, 134, 78, 134, 134, 134, 78, 78, 78, 78, 78, 14: 78, 134, 78, 78, 19: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 78, 60: 78, 78, 78},
		// 305
		{376, 350, 3: 347, 5: 358, 349, 343, 15: 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{134, 134, 79, 134, 79, 134, 134, 134, 79, 79, 79, 79, 79, 14: 79, 134, 79, 79, 19: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 79, 60: 79, 79, 79},
		{376, 80, 80, 347, 80, 80, 80, 80, 80, 80, 80, 80, 80, 14: 80, 345, 80, 80, 19: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 353, 80, 80, 80, 60: 80, 80, 80, 91: 346, 375},
		{376, 81, 81, 347, 81, 81, 81, 81, 81, 81, 81, 81, 81, 14: 81, 345, 81, 81, 19: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 353, 81, 81, 81, 60: 81, 81, 81, 91: 346, 375},
		{376, 82, 82, 347, 82, 82, 82, 82, 82, 82, 82, 82, 82, 14: 82, 345, 82, 82, 19: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 353, 82, 82, 82, 60: 82, 82, 82, 91: 346, 375},
		// 310
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 14: 86, 86, 86, 86, 19: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 60: 86, 86, 86},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 545, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{376, 350, 3: 347, 5: 358, 349, 343, 15: 345, 17: 546, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 14: 97, 97, 97, 97, 19: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 60: 97, 97, 97},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 548, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		// 315
		{376, 350, 3: 347, 5: 358, 349, 343, 15: 345, 550, 549, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 14: 99, 99, 99, 99, 19: 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 60: 99, 99, 99},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 551, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{376, 350, 3: 347, 5: 358, 349, 343, 15: 345, 17: 552, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 14: 98, 98, 98, 98, 19: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 60: 98, 98, 98},
		// 320
		{376, 350, 101, 347, 101, 358, 349, 343, 101, 101, 101, 101, 101, 14: 101, 345, 101, 101, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 101, 101, 368, 371, 373, 101, 367, 101, 369, 341, 101, 357, 101, 366, 353, 354, 355, 101, 60: 101, 101, 101, 91: 346, 375},
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 555},
		{15: 444, 17: 556},
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 14: 103, 103, 103, 103, 19: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 60: 103, 103, 103},
		{4: 558, 15: 444},
		// 325
		{8, 8, 8, 8, 8, 8, 8, 8, 241, 13: 8, 16: 8, 18: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 240, 331, 114: 559},
		{303, 322, 138, 302, 328, 321, 318, 306, 138, 13: 317, 16: 138, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 412, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 116: 560, 119: 561},
		{2: 137, 8: 137, 137, 137, 137, 137, 14: 137, 16: 337, 45: 137, 115: 415},
		{2: 8, 8: 241, 16: 337, 93: 240, 331, 114: 338, 563, 127: 562},
		{2: 564},
		// 330
		{2: 2, 45: 2},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 14: 106, 106, 106, 106, 19: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 60: 106, 106, 106},
		{436, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 30, 108, 108, 108, 108, 30, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 60: 108, 108, 108, 438, 108: 30, 30},
		{303, 322, 3: 302, 328, 321, 318, 306, 138, 13: 317, 16: 138, 18: 327, 45: 138, 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 412, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 116: 560, 119: 567},
		{8: 241, 16: 337, 45: 8, 93: 240, 331, 114: 338, 563, 127: 568},
		// 335
		{45: 569},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 14: 107, 107, 107, 107, 19: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 60: 107, 107, 107},
		{376, 350, 3: 347, 5: 358, 349, 343, 15: 345, 17: 571, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 14: 109, 109, 109, 109, 19: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 60: 109, 109, 109},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 573, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		// 340
		{376, 350, 3: 347, 5: 358, 349, 343, 15: 345, 17: 574, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 14: 110, 110, 110, 110, 19: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 60: 110, 110, 110},
		{303, 581, 3: 302, 328, 321, 318, 306, 13: 580, 17: 576, 582, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 579, 577, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 108: 434, 435, 113: 578},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 14: 113, 113, 113, 113, 19: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 60: 113, 113, 113},
		{376, 350, 3: 347, 5: 358, 349, 343, 15: 345, 17: 589, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		// 345
		{15: 444, 17: 588},
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 587},
		{88, 88, 3: 347, 5: 88, 88, 88, 15: 88, 17: 88, 19: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 91: 543},
		{303, 581, 3: 302, 328, 321, 318, 306, 13: 580, 18: 582, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 579, 538, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 537, 293, 283, 296, 286, 282, 281, 323, 108: 434, 435, 113: 457},
		{583, 4: 427},
		// 350
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 584},
		{15: 444, 45: 585},
		{436, 431, 13: 429, 18: 433, 63: 432, 108: 434, 435, 113: 586},
		{4: 460, 15: 444, 17: 35},
		{4: 558, 15: 444, 17: 36},
		// 355
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 14: 111, 111, 111, 111, 19: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 60: 111, 111, 111},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 14: 112, 112, 112, 112, 19: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 60: 112, 112, 112},
		{376, 350, 3: 347, 591, 358, 349, 343, 15: 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{2: 8, 8: 241, 10: 8, 8, 93: 240, 331, 114: 592},
		{2: 164, 8: 164, 10: 597, 598, 151: 596, 595, 164: 593, 594},
		// 360
		{2: 8, 8: 241, 93: 240, 331, 114: 609},
		{2: 163, 8: 163, 10: 597, 598, 151: 607, 608},
		{2: 162, 8: 162, 10: 162, 162},
		{2: 161, 8: 161, 10: 161, 161},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 138, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 601, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 116: 560, 119: 602},
		// 365
		{14: 599},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13, 13, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 600},
		{2: 156, 8: 156, 10: 156, 156},
		{376, 350, 3: 347, 5: 358, 349, 343, 14: 605, 345, 136, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{14: 603},
		// 370
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13, 13, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 604},
		{2: 157, 8: 157, 10: 157, 157},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13, 13, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 606},
		{2: 158, 8: 158, 10: 158, 158},
		{2: 160, 8: 160, 10: 160, 160},
		// 375
		{2: 159, 8: 159, 10: 159, 159},
		{2: 610},
		{2: 165, 8: 165, 165, 165, 165, 165, 14: 165},
		{2: 8, 8: 241, 10: 8, 8, 93: 240, 331, 114: 613, 163: 612},
		{2: 629},
		// 380
		{2: 174, 8: 174, 10: 619, 620, 149: 618, 617, 160: 616, 614, 615},
		{2: 8, 8: 241, 93: 240, 331, 114: 628},
		{2: 173, 8: 173, 10: 619, 620, 149: 626, 627},
		{2: 172, 8: 172, 10: 172, 172},
		{2: 169, 8: 169, 10: 169, 169},
		// 385
		{2: 168, 8: 168, 10: 168, 168},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 265, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 95: 275, 272, 260, 261, 267, 276, 266, 264, 262, 277, 278, 263, 268, 116: 273, 121: 271, 270, 269, 246, 128: 623, 247, 248, 258, 259, 253, 257, 252, 274, 251, 249, 256, 255, 250, 254},
		{14: 621},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13, 13, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 622},
		{2: 166, 8: 166, 10: 166, 166},
		// 390
		{14: 624},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13, 13, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 625},
		{2: 167, 8: 167, 10: 167, 167},
		{2: 171, 8: 171, 10: 171, 171},
		{2: 170, 8: 170, 10: 170, 170},
		// 395
		{2: 175},
		{2: 176, 8: 176, 176, 176, 176, 176, 14: 176},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 648, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 682, 114: 330, 117: 329},
		{19: 677},
		{376, 350, 3: 347, 674, 358, 349, 343, 15: 345, 136, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 60: 136, 62: 136, 91: 346, 375},
		// 400
		{303, 322, 3: 302, 328, 321, 318, 306, 9: 657, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 658, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{9: 638},
		{88, 88, 3: 347, 88, 88, 88, 88, 15: 88, 636, 19: 178, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 60: 88, 62: 88, 91: 543},
		{13: 637},
		{19: 177},
		// 405
		{303, 322, 3: 302, 328, 321, 318, 306, 9: 639, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 640, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{303, 322, 3: 302, 650, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 651, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{376, 350, 3: 347, 5: 358, 349, 343, 9: 641, 15: 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{303, 322, 3: 302, 642, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 643, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 648, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 647, 114: 330, 117: 329},
		// 410
		{376, 350, 3: 347, 644, 358, 349, 343, 15: 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 645},
		{2: 646},
		{2: 179, 8: 179, 179, 179, 179, 179, 14: 179},
		{2: 649},
		// 415
		{10, 10, 10, 10, 10, 10, 10, 10, 241, 13: 10, 18: 10, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 93: 242, 95: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{2: 180, 8: 180, 180, 180, 180, 180, 14: 180},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 648, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 655, 114: 330, 117: 329},
		{376, 350, 3: 347, 652, 358, 349, 343, 15: 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 653},
		// 420
		{2: 654},
		{2: 181, 8: 181, 181, 181, 181, 181, 14: 181},
		{2: 656},
		{2: 182, 8: 182, 182, 182, 182, 182, 14: 182},
		{303, 322, 3: 302, 667, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 668, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		// 425
		{376, 350, 3: 347, 5: 358, 349, 343, 9: 659, 15: 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{303, 322, 3: 302, 660, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 661, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 648, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 665, 114: 330, 117: 329},
		{376, 350, 3: 347, 662, 358, 349, 343, 15: 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 663},
		// 430
		{2: 664},
		{2: 183, 8: 183, 183, 183, 183, 183, 14: 183},
		{2: 666},
		{2: 184, 8: 184, 184, 184, 184, 184, 14: 184},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 648, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 672, 114: 330, 117: 329},
		// 435
		{376, 350, 3: 347, 669, 358, 349, 343, 15: 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 670},
		{2: 671},
		{2: 185, 8: 185, 185, 185, 185, 185, 14: 185},
		{2: 673},
		// 440
		{2: 186, 8: 186, 186, 186, 186, 186, 14: 186},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 675},
		{2: 676},
		{2: 187, 8: 187, 187, 187, 187, 187, 14: 187},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 678, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		// 445
		{376, 350, 3: 347, 679, 358, 349, 343, 15: 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 680},
		{2: 681},
		{2: 188, 8: 188, 188, 188, 188, 188, 14: 188},
		{2: 683},
		// 450
		{2: 189, 8: 189, 189, 189, 189, 189, 14: 189},
		{376, 350, 3: 347, 685, 358, 349, 343, 15: 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 686},
		{2: 687},
		{2: 192, 8: 192, 192, 192, 192, 192, 14: 192, 120: 192},
		// 455
		{4: 690, 95: 689},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 693, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 691},
		{2: 692},
		{2: 190, 8: 190, 190, 190, 190, 190, 14: 190, 120: 190},
		// 460
		{376, 350, 3: 347, 694, 358, 349, 343, 15: 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 695},
		{2: 696},
		{2: 191, 8: 191, 191, 191, 191, 191, 14: 191, 120: 191},
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 412, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 116: 700},
		// 465
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 412, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 116: 699},
		{2: 194, 8: 194, 194, 194, 194, 194, 14: 194, 16: 337, 115: 415},
		{2: 195, 8: 195, 195, 195, 195, 195, 14: 195, 16: 337, 115: 415},
		{16: 337, 60: 703, 115: 704},
		{16: 15, 60: 15},
		// 470
		{303, 322, 3: 302, 328, 321, 318, 306, 13: 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 412, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 116: 706},
		{13: 705},
		{16: 14, 60: 14},
		{2: 196, 8: 196, 196, 196, 196, 196, 14: 196, 16: 337, 115: 415},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 708},
		// 475
		{2: 709},
		{153: 710},
		{4: 712, 13: 711},
		{4: 719},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 713},
		// 480
		{2: 714},
		{2: 200, 8: 200, 200, 200, 200, 200, 14: 200, 144: 715},
		{4: 716},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 717},
		{2: 718},
		// 485
		{2: 202, 8: 202, 202, 202, 202, 202, 14: 202},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 720},
		{2: 721},
		{2: 201, 8: 201, 201, 201, 201, 201, 14: 201, 144: 722},
		{4: 723},
		// 490
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 724},
		{2: 725},
		{2: 203, 8: 203, 203, 203, 203, 203, 14: 203},
		{125, 125, 205, 125, 5: 125, 125, 125, 205, 205, 205, 205, 205, 14: 205, 125, 19: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		{124, 124, 204, 124, 5: 124, 124, 124, 204, 204, 204, 204, 204, 14: 204, 124, 19: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124},
		// 495
		{125, 125, 207, 125, 5: 125, 125, 125, 207, 207, 207, 207, 207, 14: 207, 125, 19: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125},
		{124, 124, 206, 124, 5: 124, 124, 124, 206, 206, 206, 206, 206, 14: 206, 124, 19: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124},
		{4: 731},
		{13, 13, 13, 13, 13, 13, 13, 13, 241, 238, 13: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 93: 240, 239, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 110: 236, 237, 732},
		{2: 733},
		// 500
		{2: 209, 8: 209, 209, 209, 209, 209, 14: 209},
		{376, 350, 210, 347, 5: 358, 349, 343, 210, 210, 210, 210, 210, 14: 210, 345, 19: 344, 352, 348, 351, 372, 370, 342, 356, 359, 364, 363, 368, 371, 373, 361, 367, 362, 369, 341, 365, 357, 360, 366, 353, 354, 355, 91: 346, 375},
		{2: 211, 8: 211, 211, 211, 211, 211, 14: 211},
		{2: 230, 8: 230, 10: 230, 230, 230},
		{303, 322, 12, 302, 328, 321, 318, 306, 12, 10: 12, 12, 12, 317, 18: 327, 46: 319, 320, 308, 300, 307, 313, 325, 301, 326, 305, 314, 310, 311, 312, 63: 304, 265, 289, 285, 324, 287, 288, 297, 292, 298, 284, 315, 299, 290, 291, 280, 309, 294, 295, 316, 279, 293, 283, 296, 286, 282, 281, 323, 95: 275, 272, 260, 261, 267, 276, 266, 264, 262, 277, 278, 263, 268, 116: 273, 121: 271, 270, 269, 246, 128: 738, 247, 248, 258, 259, 253, 257, 252, 274, 251, 249, 256, 255, 250, 254},
		// 505
		{2: 228, 8: 228, 228, 228, 228, 228},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 171

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			yyVAL.compstmt = nil
		}
	case 3:
		{
			yyVAL.compstmt = yyS[yypt-1].stmts
		}
	case 4:
		{
			yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		{
			yyS[yypt-2].stmts.Stmts = append(yyS[yypt-2].stmts.Stmts, yyS[yypt-0].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 6:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_var_or_lets
		}
	case 7:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_break
		}
	case 8:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_continue
		}
	case 9:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_return
		}
	case 10:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_throw
		}
	case 11:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_module
		}
	case 12:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 13:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_for
		}
	case 14:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_try
		}
	case 15:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_switch
		}
	case 16:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_select
		}
	case 17:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_go
		}
	case 18:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_defer
		}
	case 19:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_expr
		}
	case 20:
		{
			yyVAL.stmt_break = &ast.BreakStmt{}
			yyVAL.stmt_break.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 21:
		{
			yyVAL.stmt_continue = &ast.ContinueStmt{}
			yyVAL.stmt_continue.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 22:
		{
			yyVAL.stmt_return = &ast.ReturnStmt{Exprs: yyS[yypt-0].opt_exprs}
			yyVAL.stmt_return.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 23:
		{
			yyVAL.stmt_throw = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt_throw.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 24:
		{
			yyVAL.stmt_module = &ast.ModuleStmt{Name: yyS[yypt-3].tok.Lit, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_module.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 25:
		{
			yyVAL.stmt_expr = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt_expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 26:
		{
			callExpr := yyS[yypt-0].expr_call
			callExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: callExpr}
			yyVAL.stmt_go.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 27:
		{
			anonCallExpr := yyS[yypt-0].expr_anon_call
			anonCallExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: anonCallExpr}
			yyVAL.stmt_go.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 28:
		{
			callExpr := yyS[yypt-0].expr_call
			callExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: callExpr}
			yyVAL.stmt_defer.SetPosition(yyS[yypt-0].expr_call.Position())
		}
	case 29:
		{
			anonCallExpr := yyS[yypt-0].expr_anon_call
			anonCallExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: anonCallExpr}
			yyVAL.stmt_defer.SetPosition(yyS[yypt-0].expr_anon_call.Position())
		}
	case 30:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-10].compstmt, Var: yyS[yypt-7].tok.Lit, Catch: yyS[yypt-5].compstmt, Finally: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-12].tok.Position())
		}
	case 31:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-9].compstmt, Catch: yyS[yypt-5].compstmt, Finally: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-11].tok.Position())
		}
	case 32:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-6].compstmt, Var: yyS[yypt-3].tok.Lit, Catch: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 33:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-5].compstmt, Catch: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 34:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_var
		}
	case 35:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_typed_lets
		}
	case 36:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_lets
		}
	case 37:
		{
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				} else {
					yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				}
			} else {
				yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt_var.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 38:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
				if len(yyS[yypt-2].exprs) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].exprs) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt_typed_lets.SetPosition(yyS[yypt-2].exprs[0].Position())
		}
	case 39:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].exprs) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].exprs) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt_lets.SetPosition(yyS[yypt-2].exprs[0].Position())
		}
	case 40:
		{
			yyVAL.stmt_if = yyS[yypt-0].stmt_if_helper
			yyVAL.stmt_if.SetPosition(yyS[yypt-0].stmt_if_helper.Position())
		}
	case 41:
		{
			yyVAL.stmt_if_helper = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].compstmt, Else: nil}
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 42:
		{
			yyS[yypt-6].stmt_if_helper.(*ast.IfStmt).ElseIf = append(yyS[yypt-6].stmt_if_helper.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].compstmt})
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-6].stmt_if_helper.Position())
		}
	case 43:
		{
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-4].stmt_if_helper.Position())
			if yyVAL.stmt_if_helper.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if_helper.(*ast.IfStmt).Else = yyS[yypt-1].compstmt
			}
		}
	case 44:
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 45:
		{
			yyVAL.stmt_for = &ast.ForStmt{Vars: yyS[yypt-5].expr_for_idents, Value: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 46:
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 47:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 48:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 49:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyS[yypt-4].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 50:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 51:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-5].stmt_var_or_lets, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 52:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-6].stmt_var_or_lets, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 53:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-6].stmt_var_or_lets, Expr2: yyS[yypt-4].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 54:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-7].stmt_var_or_lets, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 55:
		{
			yyVAL.expr_for_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 56:
		{
			yyVAL.expr_for_idents = []string{yyS[yypt-2].tok.Lit, yyS[yypt-0].tok.Lit}
		}
	case 57:
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt_select.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 58:
		{
			yyVAL.stmt_select_content = yyS[yypt-1].stmt_select_cases
		}
	case 59:
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 60:
		{
			yyVAL.stmt_select_cases = yyS[yypt-0].stmt_select_cases_helper
		}
	case 61:
		{
			yyVAL.stmt_select_cases_helper = yyS[yypt-0].stmt_select_body
		}
	case 62:
		{
			yyVAL.stmt_select_cases_helper.Cases = append(yyVAL.stmt_select_cases_helper.Cases, yyS[yypt-0].stmt_select_case)
		}
	case 63:
		{
			if yyVAL.stmt_select_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyVAL.stmt_select_cases_helper.Default = yyS[yypt-0].stmt_select_default
		}
	case 64:
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Default: yyS[yypt-0].stmt_select_default}
		}
	case 65:
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt_select_case}}
		}
	case 66:
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 67:
		{
			yyVAL.stmt_select_default = yyS[yypt-0].compstmt
		}
	case 68:
		{
			yyS[yypt-2].stmt_switch_cases.Expr = yyS[yypt-5].expr
			yyVAL.stmt_switch = yyS[yypt-2].stmt_switch_cases
			yyVAL.stmt_switch.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 69:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 70:
		{
			yyVAL.stmt_switch_cases = yyS[yypt-0].stmt_switch_cases_helper
		}
	case 71:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Default: yyS[yypt-0].stmt_switch_default}
		}
	case 72:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt_switch_case}}
		}
	case 73:
		{
			yyS[yypt-1].stmt_switch_cases_helper.Cases = append(yyS[yypt-1].stmt_switch_cases_helper.Cases, yyS[yypt-0].stmt_switch_case)
			yyVAL.stmt_switch_cases_helper = yyS[yypt-1].stmt_switch_cases_helper
		}
	case 74:
		{
			if yyS[yypt-1].stmt_switch_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyS[yypt-1].stmt_switch_cases_helper.Default = yyS[yypt-0].stmt_switch_default
		}
	case 75:
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyS[yypt-2].expr}, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 76:
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].opt_exprs, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 77:
		{
			yyVAL.stmt_switch_default = yyS[yypt-0].compstmt
		}
	case 78:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 79:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 80:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents1
		}
	case 81:
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 82:
		{
			yyVAL.opt_func_return_expr_idents1 = yyS[yypt-0].opt_func_return_expr_idents2
		}
	case 83:
		{
			yyVAL.opt_func_return_expr_idents2 = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 84:
		{
			yyVAL.opt_func_return_expr_idents2 = append(yyS[yypt-2].opt_func_return_expr_idents2, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 85:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 86:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents_not_empty
		}
	case 87:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_idents_last_untyped
		}
	case 88:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_typed_idents
		}
	case 89:
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 90:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-1].tok.Lit, TypeData: yyS[yypt-0].type_data}
		}
	case 91:
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyS[yypt-0].func_expr_untyped_ident}
		}
	case 92:
		{
			yyVAL.func_expr_idents_last_untyped = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_untyped_ident)
		}
	case 93:
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 94:
		{
			yyVAL.func_expr_typed_idents = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_typed_ident)
		}
	case 95:
		{
			yyVAL.opt_exprs = nil
		}
	case 96:
		{
			yyVAL.opt_exprs = yyS[yypt-0].exprs
		}
	case 97:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 98:
		{
			if len(yyS[yypt-2].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 99:
		{
			yyVAL.expr = yyS[yypt-0].expr_member_or_ident
		}
	case 100:
		{
			yyVAL.expr = yyS[yypt-0].expr_literals
		}
	case 101:
		{
			yyVAL.expr = yyS[yypt-0].expr_unary
		}
	case 102:
		{
			yyVAL.expr = yyS[yypt-0].expr_ternary
		}
	case 103:
		{
			yyVAL.expr = yyS[yypt-0].expr_nil_coalesce
		}
	case 104:
		{
			yyVAL.expr = yyS[yypt-0].expr_func
		}
	case 105:
		{
			yyVAL.expr = yyS[yypt-0].expr_array
		}
	case 106:
		{
			yyVAL.expr = yyS[yypt-0].expr_paren
		}
	case 107:
		{
			yyVAL.expr = yyS[yypt-0].expr_binary
		}
	case 108:
		{
			yyVAL.expr = yyS[yypt-0].expr_call
		}
	case 109:
		{
			yyVAL.expr = yyS[yypt-0].expr_anon_call
		}
	case 110:
		{
			yyVAL.expr = yyS[yypt-0].expr_item_or_slice
		}
	case 111:
		{
			yyVAL.expr = yyS[yypt-0].expr_len
		}
	case 112:
		{
			yyVAL.expr = yyS[yypt-0].expr_dbg
		}
	case 113:
		{
			yyVAL.expr = yyS[yypt-0].expr_new
		}
	case 114:
		{
			yyVAL.expr = yyS[yypt-0].expr_make
		}
	case 115:
		{
			yyVAL.expr = yyS[yypt-0].expr_map
		}
	case 116:
		{
			yyVAL.expr = yyS[yypt-0].expr_opchan
		}
	case 117:
		{
			yyVAL.expr = yyS[yypt-0].expr_close
		}
	case 118:
		{
			yyVAL.expr = yyS[yypt-0].expr_delete
		}
	case 119:
		{
			yyVAL.expr = yyS[yypt-0].expr_in
		}
	case 120:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 121:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 122:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 123:
		{
			yyVAL.expr_len = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr_len.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 124:
		{
			yyVAL.expr_paren = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_paren.SetPosition(l.pos)
			}
		}
	case 125:
		{
			yyVAL.expr_array = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 126:
		{
			yyVAL.expr_array = &ast.ArrayExpr{Exprs: yyS[yypt-2].opt_exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 127:
		{
			yyVAL.expr_array = &ast.ArrayExpr{Exprs: yyS[yypt-2].opt_exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-5].type_data, Dimensions: yyS[yypt-6].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 128:
		{
			yyVAL.expr_nil_coalesce = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_nil_coalesce.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 129:
		{
			yyVAL.expr_ternary = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_ternary.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 130:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr_new = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr_new = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr_new.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 131:
		{
			yyVAL.expr_opchan = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_opchan.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 132:
		{
			yyVAL.expr_opchan = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr_opchan.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 133:
		{
			yyVAL.expr_in = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr_in.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 134:
		{
			yyVAL.expr_delete = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr_delete.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 135:
		{
			yyVAL.expr_delete = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr_delete.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 136:
		{
			yyVAL.expr_close = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr_close.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 137:
		{
			yyVAL.expr_literals = yyS[yypt-0].expr_literals_helper
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].expr_literals_helper.Position())
		}
	case 138:
		{
			yyVAL.expr_literals_helper = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 139:
		{
			yyVAL.expr_literals_helper = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 140:
		{
			yyVAL.expr_literals_helper = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 141:
		{
			yyVAL.expr_literals_helper = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 142:
		{
			yyVAL.expr_literals_helper = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 143:
		{
			yyVAL.expr_member_or_ident = yyS[yypt-0].expr_ident
		}
	case 144:
		{
			yyVAL.expr_member_or_ident = yyS[yypt-0].expr_member
		}
	case 145:
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 146:
		{
			yyVAL.expr_member = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr_member.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 147:
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyS[yypt-1].tok.Lit, SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}
			yyVAL.expr_call.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 148:
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyS[yypt-1].expr, SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}
			yyVAL.expr_anon_call.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 149:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-2].exprs, VarArg: true}
		}
	case 150:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-1].opt_exprs}
		}
	case 151:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 152:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 153:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 154:
		{
			if el, ok := yyS[yypt-0].expr_member_or_ident.(*ast.IdentExpr); ok {
				yyVAL.expr_unary = &ast.AddrExpr{Expr: el}
			} else if el, ok := yyS[yypt-0].expr_member_or_ident.(*ast.MemberExpr); ok {
				yyVAL.expr_unary = el
			}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_member_or_ident.Position())
		}
	case 155:
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyS[yypt-0].expr_member_or_ident}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_member_or_ident.Position())
		}
	case 156:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "+", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 157:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "-", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 158:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "*", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 159:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "/", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 160:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "%", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 161:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "**", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 162:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 163:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">>", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 164:
		{
			yyVAL.expr_binary = yyS[yypt-0].op_comparison
		}
	case 165:
		{
			yyVAL.expr_binary = yyS[yypt-0].expr_assoc
		}
	case 166:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "|", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 167:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "||", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 168:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 169:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 170:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "+=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 171:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "-=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 172:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "*=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 173:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "/=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 174:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "&=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 175:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "|=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 176:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "++"}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 177:
		{
			yyVAL.expr_assoc = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "--"}
			yyVAL.expr_assoc.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 178:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 179:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "!=", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 180:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 181:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">=", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 182:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 183:
		{
			yyVAL.op_comparison = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<=", Rhs: yyS[yypt-0].expr}
			yyVAL.op_comparison.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 184:
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-5].func_expr_idents, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt}
			yyVAL.expr_func.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 185:
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-6].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 186:
		{
			yyS[yypt-7].func_expr_idents_last_untyped[len(yyS[yypt-7].func_expr_idents_last_untyped)-1].TypeData = yyS[yypt-5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-7].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 187:
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-7].tok.Lit, Params: yyS[yypt-5].func_expr_idents, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt}
			yyVAL.expr_func.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 188:
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-8].tok.Lit, Params: yyS[yypt-6].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 189:
		{
			yyS[yypt-7].func_expr_idents_last_untyped[len(yyS[yypt-7].func_expr_idents_last_untyped)-1].TypeData = yyS[yypt-5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-9].tok.Lit, Params: yyS[yypt-7].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-10].tok.Position())
		}
	case 190:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr_make.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 191:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 192:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 193:
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 194:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 195:
		{
			if yyS[yypt-2].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyS[yypt-2].type_data.Env = append(yyS[yypt-2].type_data.Env, yyS[yypt-2].type_data.Name)
				yyS[yypt-2].type_data.Name = yyS[yypt-0].tok.Lit
			}
		}
	case 196:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 197:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 198:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 199:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 200:
		{
			yyVAL.type_data = yyS[yypt-2].type_data_struct
		}
	case 201:
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].type_data}}
		}
	case 202:
		{
			if yyS[yypt-3].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyS[yypt-1].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyS[yypt-0].type_data)
		}
	case 203:
		{
			yyVAL.slice_count = 1
		}
	case 204:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 205:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 206:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-5].type_data, SubType: yyS[yypt-3].type_data}
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 207:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-1].expr_map_content.Position())
		}
	case 208:
		{
			yyVAL.expr_map_content = &ast.MapExpr{}
		}
	case 209:
		{
			yyVAL.expr_map_content = yyS[yypt-1].expr_map_content_helper
		}
	case 210:
		{
			yyVAL.expr_map_content_helper = &ast.MapExpr{Keys: []ast.Expr{yyS[yypt-0].expr_map_key_value[0]}, Values: []ast.Expr{yyS[yypt-0].expr_map_key_value[1]}}
		}
	case 211:
		{
			if yyS[yypt-2].expr_map_content_helper.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map_content_helper.Keys = append(yyVAL.expr_map_content_helper.Keys, yyS[yypt-0].expr_map_key_value[0])
			yyVAL.expr_map_content_helper.Values = append(yyVAL.expr_map_content_helper.Values, yyS[yypt-0].expr_map_key_value[1])
		}
	case 212:
		{
			yyVAL.expr_map_key_value = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 213:
		{
			if el, ok := yyS[yypt-0].expr_slice_helper1.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-1].expr
			} else if el, ok := yyS[yypt-0].expr_slice_helper1.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-1].expr
			}
			yyVAL.expr_item_or_slice = yyS[yypt-0].expr_slice_helper1
			yyVAL.expr_item_or_slice.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 214:
		{
			yyVAL.expr_slice_helper1 = &ast.ItemExpr{Index: yyS[yypt-1].expr}
		}
	case 215:
		{
			yyVAL.expr_slice_helper1 = &ast.SliceExpr{Begin: yyS[yypt-3].expr, End: yyS[yypt-1].expr}
		}
	case 216:
		{
			yyVAL.expr_slice_helper1 = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: nil}
		}
	case 217:
		{
			yyVAL.expr_slice_helper1 = &ast.SliceExpr{Begin: nil, End: yyS[yypt-1].expr}
		}
	case 218:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 219:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].tok.Lit)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
