// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                 int
	stmtsStmt           *ast.StmtsStmt
	stmt                ast.Stmt
	expr                ast.Expr
	exprs               []ast.Expr
	stmts               []ast.Stmt
	stmt_select_content *ast.SelectBodyStmt
	expr_call_helper    struct {
		Exprs  []ast.Expr
		VarArg bool
	}
	expr_idents           []string
	func_expr_idents      []*ast.ParamExpr
	func_expr_typed_ident *ast.ParamExpr
	func_expr_args        struct {
		Params   []*ast.ParamExpr
		VarArg   bool
		TypeData *ast.TypeStruct
	}
	expr_typed_ident struct {
		Name     string
		TypeData *ast.TypeStruct
	}
	stmt_lets_helper struct {
		Exprs1, Exprs2 []ast.Expr
		Typed, Mutable bool
	}
	opt_func_return_expr_idents []*ast.FuncReturnValuesExpr
	expr_map                    *ast.MapExpr
	type_data                   *ast.TypeStruct
	slice_count                 int
	tok                         ast.Token
	opt_ident                   *ast.Token
	str                         string
	op_lets                     bool
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57408
	yyEofCode   = 57344
	ANDAND      = 57365
	ANDEQ       = 57379
	ARRAY       = 57349
	BREAK       = 57381
	CASE        = 57390
	CATCH       = 57373
	CHAN        = 57394
	CLOSE       = 57400
	CONTINUE    = 57382
	DBG         = 57403
	DEFAULT     = 57391
	DEFER       = 57393
	DELETE      = 57399
	DIVEQ       = 57378
	ELSE        = 57356
	EMPTYARR    = 57405
	EQEQ        = 57360
	FALSE       = 57368
	FINALLY     = 57374
	FOR         = 57357
	FUNC        = 57351
	GE          = 57362
	GO          = 57392
	IDENT       = 57346
	IF          = 57355
	IN          = 57359
	LE          = 57363
	LEN         = 57398
	LOOP        = 57358
	MAKE        = 57395
	MAP         = 57401
	MINUSEQ     = 57376
	MINUSMINUS  = 57384
	MODULE      = 57371
	MULEQ       = 57377
	MUT         = 57406
	NEQ         = 57361
	NEW         = 57366
	NIL         = 57369
	NILCOALESCE = 57370
	NUMBER      = 57347
	OPCHAN      = 57396
	OREQ        = 57380
	OROR        = 57364
	PLUSEQ      = 57375
	PLUSPLUS    = 57383
	POW         = 57385
	RETURN      = 57352
	SELECT      = 57389
	SHIFTLEFT   = 57386
	SHIFTRIGHT  = 57387
	STRING      = 57348
	STRUCT      = 57402
	SWITCH      = 57388
	THROW       = 57354
	TRUE        = 57367
	TRY         = 57372
	TYPE        = 57397
	UNARY       = 57407
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57404
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -243
)

var (
	yyPrec = map[int]int{
		POW:         0,
		'=':         1,
		PLUSEQ:      1,
		MINUSEQ:     1,
		DIVEQ:       1,
		MULEQ:       1,
		ANDEQ:       1,
		OREQ:        1,
		':':         2,
		OPCHAN:      3,
		'?':         4,
		NILCOALESCE: 4,
		OROR:        5,
		ANDAND:      6,
		EQEQ:        7,
		NEQ:         7,
		'<':         7,
		LE:          7,
		'>':         7,
		GE:          7,
		'+':         8,
		'-':         8,
		'|':         8,
		'^':         8,
		'*':         9,
		'/':         9,
		'%':         9,
		SHIFTLEFT:   9,
		SHIFTRIGHT:  9,
		'&':         9,
		IN:          10,
		PLUSPLUS:    11,
		MINUSMINUS:  11,
		UNARY:       12,
	}

	yyXLAT = map[int]int{
		42:    0,   // '*' (212x)
		125:   1,   // '}' (208x)
		40:    2,   // '(' (206x)
		123:   3,   // '{' (205x)
		91:    4,   // '[' (197x)
		38:    5,   // '&' (196x)
		45:    6,   // '-' (196x)
		57396: 7,   // OPCHAN (196x)
		10:    8,   // '\n' (165x)
		57391: 9,   // DEFAULT (142x)
		57390: 10,  // CASE (140x)
		57346: 11,  // IDENT (138x)
		59:    12,  // ';' (136x)
		57344: 13,  // $end (129x)
		57405: 14,  // EMPTYARR (123x)
		57401: 15,  // MAP (123x)
		44:    16,  // ',' (121x)
		58:    17,  // ':' (121x)
		41:    18,  // ')' (118x)
		33:    19,  // '!' (105x)
		94:    20,  // '^' (105x)
		57400: 21,  // CLOSE (105x)
		57399: 22,  // DELETE (105x)
		57368: 23,  // FALSE (105x)
		57351: 24,  // FUNC (105x)
		57398: 25,  // LEN (105x)
		57395: 26,  // MAKE (105x)
		57366: 27,  // NEW (105x)
		57369: 28,  // NIL (105x)
		57347: 29,  // NUMBER (105x)
		57348: 30,  // STRING (105x)
		57367: 31,  // TRUE (105x)
		93:    32,  // ']' (95x)
		46:    33,  // '.' (94x)
		57359: 34,  // IN (93x)
		37:    35,  // '%' (91x)
		43:    36,  // '+' (91x)
		47:    37,  // '/' (91x)
		60:    38,  // '<' (91x)
		62:    39,  // '>' (91x)
		63:    40,  // '?' (91x)
		124:   41,  // '|' (91x)
		57365: 42,  // ANDAND (91x)
		57379: 43,  // ANDEQ (91x)
		57378: 44,  // DIVEQ (91x)
		57360: 45,  // EQEQ (91x)
		57362: 46,  // GE (91x)
		57363: 47,  // LE (91x)
		57376: 48,  // MINUSEQ (91x)
		57384: 49,  // MINUSMINUS (91x)
		57377: 50,  // MULEQ (91x)
		57361: 51,  // NEQ (91x)
		57370: 52,  // NILCOALESCE (91x)
		57380: 53,  // OREQ (91x)
		57364: 54,  // OROR (91x)
		57375: 55,  // PLUSEQ (91x)
		57383: 56,  // PLUSPLUS (91x)
		57385: 57,  // POW (91x)
		57386: 58,  // SHIFTLEFT (91x)
		57387: 59,  // SHIFTRIGHT (91x)
		61:    60,  // '=' (70x)
		57350: 61,  // VARARG (69x)
		57404: 62,  // WALRUS (69x)
		57479: 63,  // slice_count (60x)
		57459: 64,  // map_type (58x)
		57518: 65,  // typed_slice_count (58x)
		57429: 66,  // expr_ident (51x)
		57438: 67,  // expr_map_container (46x)
		57413: 68,  // const_expr (44x)
		57417: 69,  // expr (44x)
		57418: 70,  // expr_anon_call (44x)
		57419: 71,  // expr_array (44x)
		57420: 72,  // expr_assoc (44x)
		57421: 73,  // expr_binary (44x)
		57422: 74,  // expr_call (44x)
		57425: 75,  // expr_close (44x)
		57426: 76,  // expr_delete (44x)
		57428: 77,  // expr_func (44x)
		57431: 78,  // expr_item_or_slice (44x)
		57432: 79,  // expr_iterable (44x)
		57433: 80,  // expr_len (44x)
		57434: 81,  // expr_literals (44x)
		57435: 82,  // expr_literals_helper (44x)
		57436: 83,  // expr_make (44x)
		57437: 84,  // expr_map (44x)
		57442: 85,  // expr_member (44x)
		57443: 86,  // expr_member_or_ident (44x)
		57444: 87,  // expr_new (44x)
		57445: 88,  // expr_opchan (44x)
		57446: 89,  // expr_paren (44x)
		57447: 90,  // expr_ternary (44x)
		57449: 91,  // expr_unary (44x)
		57519: 92,  // unary_op (44x)
		57406: 93,  // MUT (34x)
		57423: 94,  // expr_call_helper (31x)
		57409: 95,  // bin_op (30x)
		57463: 96,  // op_assoc1 (30x)
		57461: 97,  // newline (29x)
		57355: 98,  // IF (27x)
		57462: 99,  // newlines (27x)
		57353: 100, // VAR (27x)
		57381: 101, // BREAK (26x)
		57394: 102, // CHAN (26x)
		57382: 103, // CONTINUE (26x)
		57403: 104, // DBG (26x)
		57393: 105, // DEFER (26x)
		57357: 106, // FOR (26x)
		57392: 107, // GO (26x)
		57358: 108, // LOOP (26x)
		57371: 109, // MODULE (26x)
		57352: 110, // RETURN (26x)
		57389: 111, // SELECT (26x)
		57402: 112, // STRUCT (26x)
		57388: 113, // SWITCH (26x)
		57354: 114, // THROW (26x)
		57372: 115, // TRY (26x)
		57477: 116, // opt_term (16x)
		57512: 117, // term (16x)
		57412: 118, // compstmt (15x)
		57514: 119, // type_data_helper (15x)
		57515: 120, // type_data_idents (15x)
		57410: 121, // comma_opt_newlines (13x)
		57450: 122, // exprs (12x)
		57513: 123, // type_data (12x)
		57473: 124, // opt_newlines (11x)
		57356: 125, // ELSE (4x)
		57448: 126, // expr_typed_ident (4x)
		57467: 127, // opt_exprs (4x)
		57490: 128, // stmt_lets (4x)
		57491: 129, // stmt_lets_helper (4x)
		57508: 130, // stmt_var (4x)
		57509: 131, // stmt_var_or_lets (4x)
		57466: 132, // opt_expr (3x)
		57481: 133, // stmt (3x)
		57482: 134, // stmt_break (3x)
		57483: 135, // stmt_continue (3x)
		57484: 136, // stmt_dbg (3x)
		57485: 137, // stmt_defer (3x)
		57486: 138, // stmt_expr (3x)
		57487: 139, // stmt_for (3x)
		57488: 140, // stmt_go (3x)
		57489: 141, // stmt_if (3x)
		57492: 142, // stmt_loop (3x)
		57493: 143, // stmt_module (3x)
		57494: 144, // stmt_return (3x)
		57495: 145, // stmt_select (3x)
		57501: 146, // stmt_switch (3x)
		57506: 147, // stmt_throw (3x)
		57507: 148, // stmt_try (3x)
		57411: 149, // comma_separated_exprs (2x)
		57424: 150, // expr_callable (2x)
		57441: 151, // expr_map_key_value (2x)
		57456: 152, // func_expr_typed_ident (2x)
		57458: 153, // func_expr_untyped_ident (2x)
		57465: 154, // opt_comma_opt_newlines (2x)
		57472: 155, // opt_ident (2x)
		57496: 156, // stmt_select_case (2x)
		57502: 157, // stmt_switch_case (2x)
		57373: 158, // CATCH (1x)
		57414: 159, // dbg_content (1x)
		57415: 160, // else_if (1x)
		57416: 161, // else_if_list (1x)
		57427: 162, // expr_for_idents (1x)
		57430: 163, // expr_idents (1x)
		57439: 164, // expr_map_content (1x)
		57440: 165, // expr_map_content_helper (1x)
		57374: 166, // FINALLY (1x)
		57451: 167, // for_content (1x)
		57452: 168, // func_expr_args (1x)
		57453: 169, // func_expr_idents (1x)
		57454: 170, // func_expr_idents_last_untyped (1x)
		57455: 171, // func_expr_idents_not_empty (1x)
		57457: 172, // func_expr_typed_idents (1x)
		57460: 173, // maybe_else (1x)
		57464: 174, // op_lets (1x)
		57468: 175, // opt_finally (1x)
		57469: 176, // opt_func_return_expr_idents (1x)
		57470: 177, // opt_func_return_expr_idents1 (1x)
		57471: 178, // opt_func_return_expr_idents2 (1x)
		57474: 179, // opt_stmt_select_cases (1x)
		57475: 180, // opt_stmt_switch_cases (1x)
		57476: 181, // opt_stmt_var_or_lets (1x)
		57478: 182, // slice (1x)
		57480: 183, // start (1x)
		57497: 184, // stmt_select_cases (1x)
		57498: 185, // stmt_select_content (1x)
		57499: 186, // stmt_select_default (1x)
		57500: 187, // stmt_select_opt_default (1x)
		57503: 188, // stmt_switch_cases (1x)
		57504: 189, // stmt_switch_default (1x)
		57505: 190, // stmt_switch_opt_default (1x)
		57510: 191, // stmtsStmt (1x)
		57511: 192, // switch_content (1x)
		57397: 193, // TYPE (1x)
		57516: 194, // type_data_struct (1x)
		57517: 195, // type_struct_content (1x)
		57408: 196, // $default (0x)
		57349: 197, // ARRAY (0x)
		57345: 198, // error (0x)
		57407: 199, // UNARY (0x)
	}

	yySymNames = []string{
		"'*'",
		"'}'",
		"'('",
		"'{'",
		"'['",
		"'&'",
		"'-'",
		"OPCHAN",
		"'\\n'",
		"DEFAULT",
		"CASE",
		"IDENT",
		"';'",
		"$end",
		"EMPTYARR",
		"MAP",
		"','",
		"':'",
		"')'",
		"'!'",
		"'^'",
		"CLOSE",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"']'",
		"'.'",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"'='",
		"VARARG",
		"WALRUS",
		"slice_count",
		"map_type",
		"typed_slice_count",
		"expr_ident",
		"expr_map_container",
		"const_expr",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_assoc",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_delete",
		"expr_func",
		"expr_item_or_slice",
		"expr_iterable",
		"expr_len",
		"expr_literals",
		"expr_literals_helper",
		"expr_make",
		"expr_map",
		"expr_member",
		"expr_member_or_ident",
		"expr_new",
		"expr_opchan",
		"expr_paren",
		"expr_ternary",
		"expr_unary",
		"unary_op",
		"MUT",
		"expr_call_helper",
		"bin_op",
		"op_assoc1",
		"newline",
		"IF",
		"newlines",
		"VAR",
		"BREAK",
		"CHAN",
		"CONTINUE",
		"DBG",
		"DEFER",
		"FOR",
		"GO",
		"LOOP",
		"MODULE",
		"RETURN",
		"SELECT",
		"STRUCT",
		"SWITCH",
		"THROW",
		"TRY",
		"opt_term",
		"term",
		"compstmt",
		"type_data_helper",
		"type_data_idents",
		"comma_opt_newlines",
		"exprs",
		"type_data",
		"opt_newlines",
		"ELSE",
		"expr_typed_ident",
		"opt_exprs",
		"stmt_lets",
		"stmt_lets_helper",
		"stmt_var",
		"stmt_var_or_lets",
		"opt_expr",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_dbg",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_if",
		"stmt_loop",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"comma_separated_exprs",
		"expr_callable",
		"expr_map_key_value",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"opt_comma_opt_newlines",
		"opt_ident",
		"stmt_select_case",
		"stmt_switch_case",
		"CATCH",
		"dbg_content",
		"else_if",
		"else_if_list",
		"expr_for_idents",
		"expr_idents",
		"expr_map_content",
		"expr_map_content_helper",
		"FINALLY",
		"for_content",
		"func_expr_args",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"maybe_else",
		"op_lets",
		"opt_finally",
		"opt_func_return_expr_idents",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"opt_stmt_select_cases",
		"opt_stmt_switch_cases",
		"opt_stmt_var_or_lets",
		"slice",
		"start",
		"stmt_select_cases",
		"stmt_select_content",
		"stmt_select_default",
		"stmt_select_opt_default",
		"stmt_switch_cases",
		"stmt_switch_default",
		"stmt_switch_opt_default",
		"stmtsStmt",
		"switch_content",
		"TYPE",
		"type_data_struct",
		"type_struct_content",
		"$default",
		"ARRAY",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {183, 1},
		2:   {118, 1},
		3:   {118, 3},
		4:   {191, 1},
		5:   {191, 3},
		6:   {133, 1},
		7:   {133, 1},
		8:   {133, 1},
		9:   {133, 1},
		10:  {133, 1},
		11:  {133, 1},
		12:  {133, 1},
		13:  {133, 1},
		14:  {133, 1},
		15:  {133, 1},
		16:  {133, 1},
		17:  {133, 1},
		18:  {133, 1},
		19:  {133, 1},
		20:  {133, 1},
		21:  {133, 1},
		22:  {69, 1},
		23:  {69, 1},
		24:  {69, 1},
		25:  {69, 1},
		26:  {69, 1},
		27:  {69, 1},
		28:  {69, 1},
		29:  {69, 1},
		30:  {69, 1},
		31:  {69, 1},
		32:  {69, 1},
		33:  {79, 1},
		34:  {79, 1},
		35:  {79, 1},
		36:  {79, 1},
		37:  {79, 1},
		38:  {79, 1},
		39:  {79, 1},
		40:  {79, 1},
		41:  {134, 1},
		42:  {135, 1},
		43:  {144, 2},
		44:  {147, 2},
		45:  {143, 5},
		46:  {138, 1},
		47:  {140, 2},
		48:  {137, 2},
		49:  {148, 10},
		50:  {175, 0},
		51:  {175, 4},
		52:  {181, 0},
		53:  {181, 1},
		54:  {131, 1},
		55:  {131, 1},
		56:  {130, 4},
		57:  {128, 1},
		58:  {129, 3},
		59:  {129, 4},
		60:  {174, 1},
		61:  {174, 1},
		62:  {141, 7},
		63:  {161, 0},
		64:  {161, 2},
		65:  {160, 6},
		66:  {173, 0},
		67:  {173, 4},
		68:  {142, 4},
		69:  {139, 5},
		70:  {167, 1},
		71:  {167, 3},
		72:  {167, 5},
		73:  {162, 1},
		74:  {162, 3},
		75:  {145, 4},
		76:  {185, 3},
		77:  {179, 0},
		78:  {179, 1},
		79:  {184, 1},
		80:  {184, 2},
		81:  {156, 4},
		82:  {187, 0},
		83:  {187, 1},
		84:  {186, 3},
		85:  {146, 5},
		86:  {192, 3},
		87:  {180, 0},
		88:  {180, 1},
		89:  {188, 1},
		90:  {188, 2},
		91:  {157, 4},
		92:  {190, 0},
		93:  {190, 1},
		94:  {189, 3},
		95:  {176, 0},
		96:  {176, 1},
		97:  {176, 3},
		98:  {177, 0},
		99:  {177, 1},
		100: {178, 1},
		101: {178, 3},
		102: {169, 0},
		103: {169, 1},
		104: {171, 1},
		105: {171, 1},
		106: {153, 1},
		107: {152, 1},
		108: {170, 1},
		109: {170, 3},
		110: {172, 1},
		111: {172, 3},
		112: {127, 0},
		113: {127, 1},
		114: {122, 1},
		115: {122, 3},
		116: {132, 0},
		117: {132, 1},
		118: {136, 4},
		119: {159, 1},
		120: {159, 1},
		121: {80, 4},
		122: {89, 3},
		123: {71, 1},
		124: {71, 3},
		125: {71, 4},
		126: {149, 3},
		127: {90, 5},
		128: {87, 4},
		129: {88, 2},
		130: {76, 4},
		131: {76, 6},
		132: {75, 4},
		133: {81, 1},
		134: {82, 1},
		135: {82, 1},
		136: {82, 1},
		137: {68, 1},
		138: {68, 1},
		139: {68, 1},
		140: {86, 1},
		141: {86, 1},
		142: {66, 1},
		143: {126, 2},
		144: {126, 3},
		145: {155, 0},
		146: {155, 1},
		147: {85, 3},
		148: {150, 1},
		149: {150, 1},
		150: {74, 2},
		151: {70, 2},
		152: {94, 4},
		153: {94, 3},
		154: {92, 1},
		155: {92, 1},
		156: {92, 1},
		157: {92, 1},
		158: {92, 1},
		159: {91, 2},
		160: {95, 1},
		161: {95, 1},
		162: {95, 1},
		163: {95, 1},
		164: {95, 1},
		165: {95, 1},
		166: {95, 1},
		167: {95, 1},
		168: {95, 1},
		169: {95, 1},
		170: {95, 1},
		171: {95, 1},
		172: {95, 1},
		173: {95, 1},
		174: {95, 1},
		175: {95, 1},
		176: {95, 1},
		177: {95, 1},
		178: {95, 1},
		179: {95, 1},
		180: {95, 1},
		181: {95, 1},
		182: {95, 1},
		183: {95, 1},
		184: {95, 1},
		185: {73, 3},
		186: {73, 3},
		187: {73, 3},
		188: {73, 1},
		189: {96, 1},
		190: {96, 1},
		191: {72, 2},
		192: {77, 9},
		193: {168, 3},
		194: {168, 2},
		195: {168, 1},
		196: {83, 4},
		197: {83, 6},
		198: {83, 8},
		199: {83, 7},
		200: {123, 1},
		201: {120, 1},
		202: {120, 3},
		203: {119, 1},
		204: {119, 2},
		205: {119, 1},
		206: {119, 1},
		207: {119, 2},
		208: {119, 4},
		209: {64, 5},
		210: {195, 3},
		211: {194, 1},
		212: {194, 3},
		213: {65, 2},
		214: {63, 1},
		215: {63, 2},
		216: {84, 2},
		217: {84, 1},
		218: {67, 3},
		219: {164, 1},
		220: {164, 3},
		221: {165, 1},
		222: {165, 3},
		223: {151, 3},
		224: {78, 4},
		225: {182, 3},
		226: {182, 2},
		227: {182, 2},
		228: {182, 1},
		229: {163, 1},
		230: {163, 3},
		231: {116, 0},
		232: {116, 1},
		233: {117, 1},
		234: {117, 2},
		235: {124, 0},
		236: {124, 1},
		237: {99, 1},
		238: {99, 2},
		239: {97, 1},
		240: {121, 2},
		241: {154, 1},
		242: {154, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [404][]uint16{
		// 0
		{12, 2: 12, 12, 12, 12, 12, 12, 251, 11: 12, 249, 12, 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 245, 183: 244},
		{13: 243},
		{13: 242},
		{335, 241, 314, 345, 316, 336, 332, 319, 9: 241, 241, 331, 13: 241, 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 297, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 306, 98: 307, 100: 303, 292, 103: 293, 312, 299, 309, 298, 308, 296, 294, 310, 113: 311, 295, 300, 122: 305, 128: 302, 304, 301, 257, 133: 256, 258, 259, 272, 270, 271, 265, 269, 263, 264, 262, 260, 268, 267, 261, 266, 191: 255},
		{11, 11, 11, 11, 11, 11, 11, 11, 9: 11, 11, 11, 13: 11, 11, 11, 19: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 93: 11, 98: 11, 100: 11, 11, 103: 11, 11, 11, 11, 11, 11, 11, 11, 11, 113: 11, 11, 11},
		// 5
		{10, 10, 10, 10, 10, 10, 10, 10, 251, 10, 10, 10, 13: 10, 10, 10, 19: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 93: 10, 97: 254, 10, 100: 10, 10, 103: 10, 10, 10, 10, 10, 10, 10, 10, 10, 113: 10, 10, 10},
		{8, 8, 8, 8, 8, 8, 8, 8, 251, 8, 8, 8, 13: 8, 8, 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 8, 97: 250, 8, 253, 8, 8, 103: 8, 8, 8, 8, 8, 8, 8, 8, 8, 113: 8, 8, 8, 124: 252},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 13: 6, 6, 6, 6, 19: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 93: 6, 98: 6, 100: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 13: 4, 4, 4, 4, 19: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 93: 4, 98: 4, 100: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{9, 9, 9, 9, 9, 9, 9, 9, 9: 9, 9, 9, 13: 9, 9, 9, 19: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 93: 9, 98: 9, 100: 9, 9, 103: 9, 9, 9, 9, 9, 9, 9, 9, 9, 113: 9, 9, 9},
		// 10
		{7, 7, 7, 7, 7, 7, 7, 7, 251, 7, 7, 7, 13: 7, 7, 7, 7, 19: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 93: 7, 97: 254, 7, 100: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 13: 5, 5, 5, 5, 19: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 93: 5, 98: 5, 100: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{1: 12, 8: 251, 12, 12, 12: 249, 12, 97: 250, 99: 248, 116: 644, 645},
		{1: 239, 8: 239, 239, 239, 12: 239, 239},
		{1: 237, 8: 237, 237, 237, 12: 237, 237, 17: 237},
		// 15
		{1: 236, 8: 236, 236, 236, 12: 236, 236, 17: 236},
		{1: 235, 8: 235, 235, 235, 12: 235, 235, 17: 235},
		{1: 234, 8: 234, 234, 234, 12: 234, 234, 17: 234},
		{1: 233, 8: 233, 233, 233, 12: 233, 233, 17: 233},
		{1: 232, 8: 232, 232, 232, 12: 232, 232, 17: 232},
		// 20
		{1: 231, 8: 231, 231, 231, 12: 231, 231, 17: 231},
		{1: 230, 8: 230, 230, 230, 12: 230, 230, 17: 230},
		{1: 229, 8: 229, 229, 229, 12: 229, 229, 17: 229},
		{1: 228, 8: 228, 228, 228, 12: 228, 228, 17: 228},
		{1: 227, 8: 227, 227, 227, 12: 227, 227, 17: 227},
		// 25
		{1: 226, 8: 226, 226, 226, 12: 226, 226, 17: 226},
		{1: 225, 8: 225, 225, 225, 12: 225, 225, 17: 225},
		{1: 224, 8: 224, 224, 224, 12: 224, 224, 17: 224},
		{1: 223, 8: 223, 223, 223, 12: 223, 223, 17: 223},
		{1: 222, 8: 222, 222, 222, 12: 222, 222, 17: 222},
		// 30
		{221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 12: 221, 221, 16: 221, 221, 221, 32: 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221},
		{220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 12: 220, 220, 16: 220, 220, 220, 32: 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220},
		{219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 12: 219, 219, 16: 219, 219, 219, 32: 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219, 219},
		{218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 12: 218, 218, 16: 218, 218, 218, 32: 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218},
		{217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 12: 217, 217, 16: 217, 217, 217, 32: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217},
		// 35
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 12: 216, 216, 16: 216, 216, 216, 32: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 12: 215, 215, 16: 215, 215, 215, 32: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215},
		{214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 12: 214, 214, 16: 214, 214, 214, 32: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214},
		{213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 12: 213, 213, 16: 213, 213, 213, 32: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
		{212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 12: 212, 212, 16: 212, 212, 212, 32: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
		// 40
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 12: 211, 211, 16: 211, 211, 211, 32: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211},
		{210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 12: 210, 210, 16: 210, 210, 210, 32: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
		{209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 12: 209, 209, 16: 209, 209, 209, 32: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
		{208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 12: 208, 208, 16: 208, 208, 208, 32: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208},
		{207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 12: 207, 207, 16: 207, 207, 207, 32: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
		// 45
		{206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 12: 206, 206, 16: 206, 206, 206, 32: 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206},
		{205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 12: 205, 205, 16: 205, 205, 205, 32: 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
		{204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 12: 204, 204, 16: 204, 204, 204, 32: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204},
		{203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 12: 203, 203, 16: 203, 203, 203, 32: 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203, 203},
		{1: 202, 8: 202, 202, 202, 12: 202, 202, 17: 202},
		// 50
		{1: 201, 8: 201, 201, 201, 12: 201, 201, 17: 201},
		{335, 131, 314, 345, 316, 336, 332, 319, 131, 131, 131, 331, 131, 131, 315, 341, 17: 131, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 406, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 122: 514, 127: 643},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 642, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{11: 638},
		{363, 197, 360, 4: 393, 371, 362, 385, 197, 197, 197, 12: 197, 197, 16: 129, 197, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 129, 62: 129, 94: 359, 386, 391},
		// 55
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 585, 634, 286, 338, 277, 635, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 150: 637},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 585, 634, 286, 338, 277, 635, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 150: 636},
		{3: 621},
		{1: 189, 8: 189, 189, 189, 12: 189, 189, 17: 189},
		{1: 188, 8: 188, 188, 188, 12: 188, 188, 17: 188},
		// 60
		{11: 331, 66: 616, 163: 615},
		{1: 186, 8: 186, 186, 186, 12: 186, 186, 17: 186},
		{16: 353, 60: 613, 62: 612, 121: 409, 174: 611},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 406, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 122: 608},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 592, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		// 65
		{3: 589},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 576, 191, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 573, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 306, 100: 303, 122: 305, 128: 302, 304, 301, 571, 162: 574, 167: 572, 181: 575},
		{3: 554},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 536, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{2: 526},
		// 70
		{2: 523},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 521, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 29, 120, 120, 428, 29, 120, 120, 120, 32: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 429, 102: 29, 112: 29},
		{8, 2: 8, 8, 8, 8, 8, 8, 251, 11: 8, 14: 8, 8, 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 97: 250, 99: 253, 124: 513, 149: 519},
		{3: 511},
		// 75
		{2: 508},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 507, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{2: 501},
		{2: 498},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 12: 110, 110, 16: 110, 110, 110, 32: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110},
		// 80
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 12: 109, 109, 16: 109, 109, 109, 32: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109},
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 12: 108, 108, 16: 108, 108, 108, 32: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108},
		{107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 12: 107, 107, 16: 107, 107, 107, 32: 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 12: 106, 106, 16: 106, 106, 106, 32: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 12: 105, 105, 16: 105, 105, 105, 32: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105},
		// 85
		{104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 12: 104, 104, 16: 104, 104, 104, 32: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		{103, 103, 360, 103, 103, 103, 103, 103, 103, 103, 103, 12: 103, 103, 16: 103, 103, 103, 32: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 94: 497},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 12: 102, 102, 16: 102, 102, 102, 32: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 32: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102: 101, 112: 101},
		{89, 2: 89, 89, 89, 89, 89, 89, 11: 89, 14: 89, 89, 19: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89},
		// 90
		{88, 2: 88, 88, 88, 88, 88, 88, 11: 88, 14: 88, 88, 19: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88},
		{87, 2: 87, 87, 87, 87, 87, 87, 11: 87, 14: 87, 87, 19: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87},
		{86, 2: 86, 86, 86, 86, 86, 86, 11: 86, 14: 86, 86, 19: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86},
		{85, 2: 85, 85, 85, 85, 85, 85, 11: 85, 14: 85, 85, 19: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 496, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		// 95
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 12: 55, 55, 16: 55, 55, 55, 32: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{2: 98, 11: 466, 155: 467},
		{2: 452},
		{4: 448},
		{422, 11: 420, 14: 428, 341, 63: 342, 424, 423, 102: 425, 112: 426, 119: 419, 421, 123: 427},
		// 100
		{3: 345, 67: 418},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 12: 26, 26, 16: 26, 26, 26, 32: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{8, 8, 8, 8, 8, 8, 8, 8, 251, 11: 8, 14: 8, 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 97: 250, 99: 253, 124: 347, 164: 346},
		{1: 417},
		{335, 24, 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 348, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 151: 350, 165: 349},
		// 105
		{363, 2: 360, 4: 393, 371, 362, 385, 17: 392, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		{1: 8, 8: 251, 16: 353, 97: 250, 99: 253, 121: 352, 124: 354, 154: 351},
		{1: 22, 8: 22, 16: 22},
		{1: 23},
		{335, 2, 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 348, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 151: 356},
		// 110
		{8, 8, 8, 8, 8, 8, 8, 8, 251, 11: 8, 14: 8, 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 93: 8, 97: 250, 99: 253, 102: 8, 112: 8, 124: 355},
		{1: 1, 32: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 11: 3, 14: 3, 3, 19: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 93: 3, 102: 3, 112: 3},
		{1: 21, 8: 21, 16: 21},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 414, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		// 115
		{11: 413},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 12: 92, 92, 16: 92, 92, 92, 32: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 18: 131, 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 406, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 122: 405, 127: 407},
		{83, 2: 83, 83, 83, 83, 83, 83, 11: 83, 14: 83, 83, 19: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83},
		{82, 2: 82, 82, 82, 82, 82, 82, 11: 82, 14: 82, 82, 19: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82},
		// 120
		{81, 2: 81, 81, 81, 81, 81, 81, 11: 81, 14: 81, 81, 19: 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81},
		{80, 2: 80, 80, 80, 80, 80, 80, 11: 80, 14: 80, 80, 19: 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
		{79, 2: 79, 79, 79, 79, 79, 79, 11: 79, 14: 79, 79, 19: 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{78, 2: 78, 78, 78, 78, 78, 78, 11: 78, 14: 78, 78, 19: 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78},
		{77, 2: 77, 77, 77, 77, 77, 77, 11: 77, 14: 77, 77, 19: 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		// 125
		{76, 2: 76, 76, 76, 76, 76, 76, 11: 76, 14: 76, 76, 19: 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76},
		{75, 2: 75, 75, 75, 75, 75, 75, 11: 75, 14: 75, 75, 19: 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{74, 2: 74, 74, 74, 74, 74, 74, 11: 74, 14: 74, 74, 19: 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74},
		{73, 2: 73, 73, 73, 73, 73, 73, 11: 73, 14: 73, 73, 19: 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73},
		{72, 2: 72, 72, 72, 72, 72, 72, 11: 72, 14: 72, 72, 19: 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72},
		// 130
		{71, 2: 71, 71, 71, 71, 71, 71, 11: 71, 14: 71, 71, 19: 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		{70, 2: 70, 70, 70, 70, 70, 70, 11: 70, 14: 70, 70, 19: 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{69, 2: 69, 69, 69, 69, 69, 69, 11: 69, 14: 69, 69, 19: 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{68, 2: 68, 68, 68, 68, 68, 68, 11: 68, 14: 68, 68, 19: 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		{67, 2: 67, 67, 67, 67, 67, 67, 11: 67, 14: 67, 67, 19: 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		// 135
		{66, 2: 66, 66, 66, 66, 66, 66, 11: 66, 14: 66, 66, 19: 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{65, 2: 65, 65, 65, 65, 65, 65, 11: 65, 14: 65, 65, 19: 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		{64, 2: 64, 64, 64, 64, 64, 64, 11: 64, 14: 64, 64, 19: 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{63, 2: 63, 63, 63, 63, 63, 63, 11: 63, 14: 63, 63, 19: 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		{62, 2: 62, 62, 62, 62, 62, 62, 11: 62, 14: 62, 62, 19: 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		// 140
		{61, 2: 61, 61, 61, 61, 61, 61, 11: 61, 14: 61, 61, 19: 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{60, 2: 60, 60, 60, 60, 60, 60, 11: 60, 14: 60, 60, 19: 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{59, 2: 59, 59, 59, 59, 59, 59, 11: 59, 14: 59, 59, 19: 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 404, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 403, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		// 145
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 402, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 12: 54, 54, 16: 54, 54, 54, 32: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 12: 53, 53, 16: 53, 53, 53, 32: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 12: 52, 52, 16: 52, 52, 52, 32: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 401, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		// 150
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 17: 396, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 394, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 182: 395},
		{363, 2: 360, 4: 393, 371, 362, 385, 17: 399, 32: 15, 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		{32: 398},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 397, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{363, 2: 360, 4: 393, 371, 362, 385, 32: 16, 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		// 155
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 12: 19, 19, 16: 19, 19, 19, 32: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 17, 63: 342, 343, 317, 329, 344, 325, 400, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{363, 2: 360, 4: 393, 371, 362, 385, 32: 18, 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		{363, 20, 360, 4: 393, 371, 362, 385, 20, 16: 20, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		{56, 56, 360, 56, 393, 56, 56, 56, 56, 56, 56, 12: 56, 56, 16: 56, 56, 56, 32: 56, 358, 388, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 390, 56, 56, 56, 56, 56, 56, 389, 56, 56, 56, 56, 56, 56, 94: 359, 386, 391},
		// 160
		{363, 57, 360, 57, 393, 371, 362, 57, 57, 57, 57, 12: 57, 57, 16: 57, 57, 57, 32: 57, 358, 388, 366, 361, 364, 57, 57, 57, 369, 57, 57, 57, 57, 57, 57, 57, 390, 57, 57, 57, 57, 57, 57, 389, 57, 367, 368, 57, 57, 57, 94: 359, 386, 391},
		{363, 58, 360, 58, 393, 371, 362, 385, 58, 58, 58, 12: 58, 58, 16: 58, 58, 58, 32: 58, 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 58, 58, 58, 94: 359, 386, 391},
		{16: 353, 18: 130, 61: 410, 121: 409},
		{363, 129, 360, 4: 393, 371, 362, 385, 129, 129, 129, 12: 129, 129, 16: 129, 129, 129, 32: 129, 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 61: 129, 129, 94: 359, 386, 391},
		{18: 408},
		// 165
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 12: 90, 90, 16: 90, 90, 90, 32: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 412, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{18: 411},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 12: 91, 91, 16: 91, 91, 91, 32: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91},
		{363, 128, 360, 4: 393, 371, 362, 385, 128, 128, 128, 12: 128, 128, 16: 128, 128, 128, 32: 128, 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 128, 128, 128, 94: 359, 386, 391},
		// 170
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 12: 96, 96, 16: 96, 96, 96, 32: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96},
		{363, 2: 360, 4: 393, 371, 362, 385, 17: 415, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 416, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{363, 116, 360, 116, 393, 371, 362, 385, 116, 116, 116, 12: 116, 116, 16: 116, 116, 116, 32: 116, 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 116, 116, 387, 375, 377, 116, 390, 116, 373, 378, 116, 370, 116, 389, 116, 367, 368, 116, 116, 116, 94: 359, 386, 391},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 12: 25, 25, 16: 25, 25, 25, 32: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		// 175
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 12: 27, 27, 16: 27, 27, 27, 32: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{1: 43, 3: 43, 8: 43, 16: 43, 18: 43, 32: 43},
		{1: 42, 3: 42, 8: 42, 16: 42, 18: 42, 32: 42, 42},
		{1: 40, 3: 40, 8: 40, 16: 40, 18: 40, 32: 40, 446},
		{422, 11: 420, 14: 428, 341, 63: 342, 424, 423, 102: 425, 112: 426, 119: 445, 421},
		// 180
		{1: 38, 3: 38, 8: 38, 16: 38, 18: 38, 32: 38},
		{1: 37, 3: 37, 8: 37, 16: 37, 18: 37, 32: 37},
		{422, 11: 420, 14: 428, 341, 63: 342, 424, 423, 102: 425, 112: 426, 119: 444, 421},
		{3: 430},
		{1: 30, 3: 30, 8: 30, 16: 30, 18: 30, 32: 30},
		// 185
		{29, 11: 29, 14: 428, 29, 63: 429, 102: 29, 112: 29},
		{28, 11: 28, 14: 28, 28, 102: 28, 112: 28},
		{8: 251, 11: 8, 93: 8, 97: 250, 99: 253, 124: 432, 195: 431},
		{1: 443},
		{11: 331, 66: 433, 93: 434, 126: 436, 194: 435},
		// 190
		{422, 11: 420, 14: 428, 341, 63: 342, 424, 423, 102: 425, 112: 426, 119: 419, 421, 123: 442},
		{11: 331, 66: 440},
		{1: 8, 8: 251, 16: 353, 97: 250, 99: 253, 121: 438, 124: 437},
		{1: 32, 8: 32, 16: 32},
		{1: 33},
		// 195
		{11: 331, 66: 433, 93: 434, 126: 439},
		{1: 31, 8: 31, 16: 31},
		{422, 11: 420, 14: 428, 341, 63: 342, 424, 423, 102: 425, 112: 426, 119: 419, 421, 123: 441},
		{1: 99, 8: 99, 16: 99, 18: 99},
		{1: 100, 8: 100, 16: 100, 18: 100},
		// 200
		{1: 35, 3: 35, 8: 35, 16: 35, 18: 35, 32: 35},
		{1: 36, 3: 36, 8: 36, 16: 36, 18: 36, 32: 36},
		{1: 39, 3: 39, 8: 39, 16: 39, 18: 39, 32: 39},
		{11: 447},
		{1: 41, 3: 41, 8: 41, 16: 41, 18: 41, 32: 41, 41},
		// 205
		{422, 11: 420, 14: 428, 341, 63: 342, 424, 423, 102: 425, 112: 426, 119: 419, 421, 123: 449},
		{32: 450},
		{422, 11: 420, 14: 428, 341, 63: 342, 424, 423, 102: 425, 112: 426, 119: 419, 421, 123: 451},
		{1: 34, 3: 34, 8: 34, 16: 34, 18: 34, 32: 34},
		{422, 11: 420, 14: 428, 341, 63: 342, 424, 423, 102: 425, 112: 426, 119: 419, 421, 123: 453, 193: 454},
		// 210
		{16: 460, 18: 459},
		{11: 455},
		{16: 456},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 457, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{363, 2: 360, 4: 393, 371, 362, 385, 18: 458, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		// 215
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 12: 44, 44, 16: 44, 44, 44, 32: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 12: 47, 47, 16: 47, 47, 47, 32: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 461, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{363, 2: 360, 4: 393, 371, 362, 385, 16: 463, 18: 462, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 12: 46, 46, 16: 46, 46, 46, 32: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		// 220
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 464, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{363, 2: 360, 4: 393, 371, 362, 385, 18: 465, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 12: 45, 45, 16: 45, 45, 45, 32: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{2: 97, 97},
		{2: 468},
		// 225
		{11: 472, 18: 141, 66: 433, 93: 434, 126: 473, 152: 475, 474, 168: 476, 477, 470, 469, 471},
		{16: 353, 18: 140, 121: 493},
		{16: 139, 18: 139, 61: 491},
		{16: 138, 18: 138},
		{101, 11: 101, 14: 101, 101, 137, 18: 137, 61: 137, 102: 101, 112: 101},
		// 230
		{16: 136, 18: 136},
		{16: 135, 18: 135, 61: 135},
		{16: 133, 18: 133},
		{18: 478},
		{18: 48},
		// 235
		{422, 2: 480, 148, 11: 420, 14: 428, 341, 63: 342, 424, 423, 102: 425, 112: 426, 119: 419, 421, 123: 479, 176: 481},
		{3: 147},
		{422, 11: 420, 14: 428, 341, 18: 145, 63: 342, 424, 423, 102: 425, 112: 426, 119: 419, 421, 123: 487, 177: 485, 486},
		{3: 482},
		{12, 12, 12, 12, 12, 12, 12, 12, 251, 11: 12, 249, 14: 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 483},
		// 240
		{1: 484},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 12: 51, 51, 16: 51, 51, 51, 32: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{18: 490},
		{16: 353, 18: 144, 121: 488},
		{16: 143, 18: 143},
		// 245
		{422, 11: 420, 14: 428, 341, 63: 342, 424, 423, 102: 425, 112: 426, 119: 419, 421, 123: 489},
		{16: 142, 18: 142},
		{3: 146},
		{422, 11: 420, 14: 428, 341, 18: 49, 63: 342, 424, 423, 102: 425, 112: 426, 119: 419, 421, 123: 492},
		{18: 50},
		// 250
		{11: 472, 66: 433, 93: 434, 126: 473, 152: 495, 494},
		{16: 134, 18: 134, 61: 134},
		{16: 132, 18: 132},
		{84, 84, 360, 84, 393, 84, 84, 84, 84, 84, 84, 12: 84, 84, 16: 84, 84, 84, 32: 84, 358, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 94: 359, 386, 391},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 12: 93, 93, 16: 93, 93, 93, 32: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93},
		// 255
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 499, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{363, 2: 360, 4: 393, 371, 362, 385, 18: 500, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 12: 111, 111, 16: 111, 111, 111, 32: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 502, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{363, 2: 360, 4: 393, 371, 362, 385, 16: 504, 18: 503, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		// 260
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 12: 113, 113, 16: 113, 113, 113, 32: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 505, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{363, 2: 360, 4: 393, 371, 362, 385, 18: 506, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 12: 112, 112, 16: 112, 112, 112, 32: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112},
		{363, 114, 360, 114, 393, 371, 362, 385, 114, 114, 114, 12: 114, 114, 16: 114, 114, 114, 32: 114, 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 114, 114, 387, 375, 377, 114, 390, 114, 373, 378, 114, 370, 114, 389, 114, 367, 368, 114, 114, 114, 94: 359, 386, 391},
		// 265
		{422, 11: 420, 14: 428, 341, 63: 342, 424, 423, 102: 425, 112: 426, 119: 419, 421, 123: 509},
		{18: 510},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 12: 115, 115, 16: 115, 115, 115, 32: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115},
		{8, 8, 8, 8, 8, 8, 8, 8, 251, 11: 8, 14: 8, 8, 8, 19: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 97: 250, 99: 253, 124: 513, 149: 512},
		{1: 518},
		// 270
		{335, 131, 314, 345, 316, 336, 332, 319, 131, 11: 331, 14: 315, 341, 131, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 131, 63: 342, 343, 317, 329, 344, 325, 406, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 122: 514, 127: 515},
		{1: 130, 8: 130, 130, 130, 12: 130, 130, 16: 353, 130, 32: 130, 121: 409},
		{1: 8, 8: 251, 16: 353, 32: 8, 97: 250, 99: 253, 121: 517, 124: 354, 154: 516},
		{1: 117, 32: 117},
		{1: 2, 32: 2},
		// 275
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 12: 118, 118, 16: 118, 118, 118, 32: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118},
		{32: 520},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 12: 119, 119, 16: 119, 119, 119, 32: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119},
		{363, 2: 360, 4: 393, 371, 362, 385, 18: 522, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 12: 121, 121, 16: 121, 121, 121, 32: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121},
		// 280
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 524, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{363, 2: 360, 4: 393, 371, 362, 385, 18: 525, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 12: 122, 122, 16: 122, 122, 122, 32: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122},
		{533, 2: 314, 345, 316, 336, 332, 319, 11: 532, 14: 315, 341, 18: 127, 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 534, 531, 329, 344, 325, 527, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 102: 425, 112: 426, 119: 419, 421, 123: 530, 132: 529, 159: 528},
		{363, 2: 360, 126, 393, 371, 362, 385, 12: 126, 18: 126, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		// 285
		{18: 535},
		{18: 124},
		{18: 123},
		{3: 511, 18: 38},
		{101, 2: 101, 4: 101, 101, 101, 101, 18: 101, 33: 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101},
		// 290
		{86, 2: 86, 86, 86, 86, 86, 86, 11: 420, 14: 428, 341, 19: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 63: 342, 424, 423, 102: 425, 112: 426, 119: 445, 421},
		{3: 345, 18: 37, 67: 418},
		{1: 125, 8: 125, 125, 125, 12: 125, 125, 17: 125},
		{363, 2: 360, 537, 393, 371, 362, 385, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		{1: 8, 8: 251, 8, 8, 97: 250, 99: 253, 124: 539, 192: 538},
		// 295
		{1: 553},
		{1: 156, 9: 156, 543, 157: 542, 180: 540, 188: 541},
		{1: 151, 9: 550, 189: 549, 548},
		{1: 155, 9: 155, 543, 157: 547},
		{1: 154, 9: 154, 154},
		// 300
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 17: 131, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 406, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 122: 514, 127: 544},
		{17: 545},
		{12, 12, 12, 12, 12, 12, 12, 12, 251, 12, 12, 12, 249, 14: 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 546},
		{1: 152, 9: 152, 152},
		{1: 153, 9: 153, 153},
		// 305
		{1: 157},
		{1: 150},
		{17: 551},
		{12, 12, 12, 12, 12, 12, 12, 12, 251, 11: 12, 249, 14: 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 552},
		{1: 149},
		// 310
		{1: 158, 8: 158, 158, 158, 12: 158, 158, 17: 158},
		{1: 8, 8: 251, 8, 8, 97: 250, 99: 253, 124: 556, 185: 555},
		{1: 570},
		{1: 166, 9: 166, 560, 156: 559, 179: 557, 184: 558},
		{1: 161, 9: 567, 186: 566, 565},
		// 315
		{1: 165, 9: 165, 560, 156: 564},
		{1: 164, 9: 164, 164},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 297, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 306, 98: 307, 100: 303, 292, 103: 293, 312, 299, 309, 298, 308, 296, 294, 310, 113: 311, 295, 300, 122: 305, 128: 302, 304, 301, 257, 133: 561, 258, 259, 272, 270, 271, 265, 269, 263, 264, 262, 260, 268, 267, 261, 266},
		{17: 562},
		{12, 12, 12, 12, 12, 12, 12, 12, 251, 12, 12, 12, 249, 14: 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 563},
		// 320
		{1: 162, 9: 162, 162},
		{1: 163, 9: 163, 163},
		{1: 167},
		{1: 160},
		{17: 568},
		// 325
		{12, 12, 12, 12, 12, 12, 12, 12, 251, 11: 12, 249, 14: 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 569},
		{1: 159},
		{1: 168, 8: 168, 168, 168, 12: 168, 168, 17: 168},
		{12: 190},
		{3: 586},
		// 330
		{363, 2: 360, 173, 393, 371, 362, 385, 16: 129, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 129, 62: 129, 94: 359, 386, 391},
		{34: 583},
		{12: 579},
		{101, 2: 101, 101, 101, 101, 101, 101, 16: 577, 33: 101, 170, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 62: 101},
		{11: 578},
		// 335
		{34: 169},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 127, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 527, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 132: 580},
		{12: 581},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 527, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 132: 582},
		{3: 171},
		// 340
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 585, 287, 286, 338, 277, 288, 282, 283, 276, 290, 584, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{221, 2: 221, 172, 221, 221, 221, 221, 33: 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221, 221},
		{363, 2: 360, 4: 393, 371, 362, 385, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		{12, 12, 12, 12, 12, 12, 12, 12, 251, 11: 12, 249, 14: 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 587},
		{1: 588},
		// 345
		{1: 174, 8: 174, 174, 174, 12: 174, 174, 17: 174},
		{12, 12, 12, 12, 12, 12, 12, 12, 251, 11: 12, 249, 14: 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 590},
		{1: 591},
		{1: 175, 8: 175, 175, 175, 12: 175, 175, 17: 175},
		{363, 2: 360, 593, 393, 371, 362, 385, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		// 350
		{12, 12, 12, 12, 12, 12, 12, 12, 251, 11: 12, 249, 14: 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 594},
		{1: 595},
		{1: 180, 8: 180, 180, 180, 12: 180, 180, 17: 180, 125: 180, 161: 596},
		{1: 177, 8: 177, 177, 177, 12: 177, 177, 17: 177, 125: 599, 160: 598, 173: 597},
		{1: 181, 8: 181, 181, 181, 12: 181, 181, 17: 181},
		// 355
		{1: 179, 8: 179, 179, 179, 12: 179, 179, 17: 179, 125: 179},
		{3: 601, 98: 600},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 604, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337},
		{12, 12, 12, 12, 12, 12, 12, 12, 251, 11: 12, 249, 14: 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 602},
		{1: 603},
		// 360
		{1: 176, 8: 176, 176, 176, 12: 176, 176, 17: 176},
		{363, 2: 360, 605, 393, 371, 362, 385, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		{12, 12, 12, 12, 12, 12, 12, 12, 251, 11: 12, 249, 14: 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 606},
		{1: 607},
		{1: 178, 8: 178, 178, 178, 12: 178, 178, 17: 178, 125: 178},
		// 365
		{16: 353, 62: 609, 121: 409},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 406, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 122: 610},
		{1: 184, 8: 184, 184, 184, 12: 184, 184, 16: 353, 184, 121: 409},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 406, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 122: 614},
		{183, 2: 183, 183, 183, 183, 183, 183, 11: 183, 14: 183, 183, 19: 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183},
		// 370
		{182, 2: 182, 182, 182, 182, 182, 182, 11: 182, 14: 182, 182, 19: 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182},
		{1: 185, 8: 185, 185, 185, 12: 185, 185, 16: 353, 185, 121: 409},
		{16: 353, 60: 617, 121: 618},
		{16: 14, 60: 14},
		{335, 2: 314, 345, 316, 336, 332, 319, 11: 331, 14: 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 406, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 122: 620},
		// 375
		{11: 331, 66: 619},
		{16: 13, 60: 13},
		{1: 187, 8: 187, 187, 187, 12: 187, 187, 16: 353, 187, 121: 409},
		{12, 12, 12, 12, 12, 12, 12, 12, 251, 11: 12, 249, 14: 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 622},
		{1: 623},
		// 380
		{158: 624},
		{3: 98, 11: 466, 155: 625},
		{3: 626},
		{12, 12, 12, 12, 12, 12, 12, 12, 251, 11: 12, 249, 14: 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 627},
		{1: 628},
		// 385
		{1: 193, 8: 193, 193, 193, 12: 193, 193, 17: 193, 166: 630, 175: 629},
		{1: 194, 8: 194, 194, 194, 12: 194, 194, 17: 194},
		{3: 631},
		{12, 12, 12, 12, 12, 12, 12, 12, 251, 11: 12, 249, 14: 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 632},
		{1: 633},
		// 390
		{1: 192, 8: 192, 192, 192, 12: 192, 192, 17: 192},
		{207, 94, 207, 4: 207, 207, 207, 207, 94, 94, 94, 12: 94, 94, 17: 94, 33: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
		{206, 95, 206, 4: 206, 206, 206, 206, 95, 95, 95, 12: 95, 95, 17: 95, 33: 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206},
		{1: 195, 8: 195, 195, 195, 12: 195, 195, 17: 195},
		{1: 196, 8: 196, 196, 196, 12: 196, 196, 17: 196},
		// 395
		{3: 639},
		{12, 12, 12, 12, 12, 12, 12, 12, 251, 11: 12, 249, 14: 12, 12, 19: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 93: 12, 97: 250, 12, 248, 12, 12, 103: 12, 12, 12, 12, 12, 12, 12, 12, 12, 113: 12, 12, 12, 246, 247, 640},
		{1: 641},
		{1: 198, 8: 198, 198, 198, 12: 198, 198, 17: 198},
		{363, 199, 360, 4: 393, 371, 362, 385, 199, 199, 199, 12: 199, 199, 17: 199, 33: 358, 388, 366, 361, 364, 376, 374, 357, 369, 372, 383, 382, 387, 375, 377, 380, 390, 381, 373, 378, 384, 370, 379, 389, 365, 367, 368, 94: 359, 386, 391},
		// 400
		{1: 200, 8: 200, 200, 200, 12: 200, 200, 17: 200},
		{1: 240, 9: 240, 240, 13: 240},
		{335, 11, 314, 345, 316, 336, 332, 319, 9: 11, 11, 331, 13: 11, 315, 341, 19: 333, 334, 321, 320, 327, 339, 313, 340, 318, 328, 323, 324, 326, 63: 342, 343, 317, 329, 344, 325, 297, 287, 286, 338, 277, 288, 282, 283, 276, 290, 273, 278, 274, 322, 280, 284, 330, 289, 279, 281, 285, 291, 275, 337, 306, 98: 307, 100: 303, 292, 103: 293, 312, 299, 309, 298, 308, 296, 294, 310, 113: 311, 295, 300, 122: 305, 128: 302, 304, 301, 257, 133: 646, 258, 259, 272, 270, 271, 265, 269, 263, 264, 262, 260, 268, 267, 261, 266},
		{1: 238, 8: 238, 238, 238, 12: 238, 238},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 198

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmt
			}
		}
	case 2:
		{
			yyVAL.stmt = nil
		}
	case 3:
		{
			yyVAL.stmt = yyS[yypt-1].stmtsStmt
		}
	case 4:
		{
			yyVAL.stmtsStmt = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
		}
	case 5:
		{
			yyS[yypt-2].stmtsStmt.Stmts = append(yyS[yypt-2].stmtsStmt.Stmts, yyS[yypt-0].stmt)
		}
	case 41:
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 42:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 43:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 44:
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 45:
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyS[yypt-3].tok.Lit, Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 46:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 47:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Go = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Go = true
			}
			yyVAL.stmt = &ast.GoroutineStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 48:
		{
			if el, ok := yyS[yypt-0].expr.(*ast.CallExpr); ok {
				el.Defer = true
			} else if el, ok := yyS[yypt-0].expr.(*ast.AnonCallExpr); ok {
				el.Defer = true
			}
			yyVAL.stmt = &ast.DeferStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 49:
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyS[yypt-7].stmt, Var: yyS[yypt-4].opt_ident.Lit, Catch: yyS[yypt-2].stmt, Finally: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 50:
		{
			yyVAL.stmt = nil
		}
	case 51:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 52:
		{
			yyVAL.stmt = nil
		}
	case 53:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 56:
		{
			isItem := false
			if len(yyS[yypt-2].expr_idents) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					isItem = true
					arr := []ast.Expr{}
					for _, el := range yyS[yypt-2].expr_idents {
						arr = append(arr, &ast.IdentExpr{Lit: el})
					}
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: arr, Rhs: yyS[yypt-0].exprs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
				if len(yyS[yypt-2].expr_idents) != len(yyS[yypt-0].exprs) && !(len(yyS[yypt-0].exprs) == 1 && len(yyS[yypt-2].expr_idents) > len(yyS[yypt-0].exprs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 57:
		{
			lhs := yyS[yypt-0].stmt_lets_helper.Exprs1
			rhs := yyS[yypt-0].stmt_lets_helper.Exprs2
			isItem := false
			if len(lhs) == 2 && len(rhs) == 1 {
				if _, ok := rhs[0].(*ast.ItemExpr); ok {
					isItem = true
					yyVAL.stmt = &ast.LetMapItemStmt{Lhss: lhs, Rhs: rhs[0]}
				}
			}
			if !isItem {
				yyVAL.stmt = &ast.LetsStmt{Lhss: lhs, Operator: "=", Rhss: rhs, Typed: yyS[yypt-0].stmt_lets_helper.Typed, Mutable: yyS[yypt-0].stmt_lets_helper.Mutable}
				if len(lhs) != len(rhs) && !(len(rhs) == 1 && len(lhs) > len(rhs)) {
					yylex.Error("unexpected ','")
				}
			}
			yyVAL.stmt.SetPosition(lhs[0].Position())
		}
	case 58:
		{
			yyVAL.stmt_lets_helper = struct {
				Exprs1, Exprs2 []ast.Expr
				Typed, Mutable bool
			}{Exprs1: yyS[yypt-2].exprs, Exprs2: yyS[yypt-0].exprs, Typed: yyS[yypt-1].op_lets, Mutable: false}
		}
	case 59:
		{
			yyVAL.stmt_lets_helper = struct {
				Exprs1, Exprs2 []ast.Expr
				Typed, Mutable bool
			}{Exprs1: yyS[yypt-2].exprs, Exprs2: yyS[yypt-0].exprs, Typed: true, Mutable: true}
		}
	case 60:
		{
			yyVAL.op_lets = true
		}
	case 61:
		{
			yyVAL.op_lets = false
		}
	case 62:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-5].expr, Then: yyS[yypt-3].stmt, ElseIf: yyS[yypt-1].stmts, Else: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 63:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 64:
		{
			yyS[yypt-1].stmts = append(yyS[yypt-1].stmts, yyS[yypt-0].stmt)
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 65:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmt}
		}
	case 66:
		{
			yyVAL.stmt = nil
		}
	case 67:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
		}
	case 68:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmt: yyS[yypt-1].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 69:
		{
			if el, ok := yyS[yypt-3].stmt.(*ast.LoopStmt); ok {
				el.Stmt = yyS[yypt-1].stmt
			} else if el, ok := yyS[yypt-3].stmt.(*ast.ForStmt); ok {
				el.Stmt = yyS[yypt-1].stmt
			} else if el, ok := yyS[yypt-3].stmt.(*ast.CForStmt); ok {
				el.Stmt = yyS[yypt-1].stmt
			}
			yyVAL.stmt = yyS[yypt-3].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 70:
		{
			yyVAL.stmt = &ast.LoopStmt{Expr: yyS[yypt-0].expr}
		}
	case 71:
		{
			yyVAL.stmt = &ast.ForStmt{Vars: yyS[yypt-2].expr_idents, Value: yyS[yypt-0].expr}
		}
	case 72:
		{
			yyVAL.stmt = &ast.CForStmt{Stmt1: yyS[yypt-4].stmt, Expr2: yyS[yypt-2].expr, Expr3: yyS[yypt-0].expr}
		}
	case 73:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 74:
		{
			yyVAL.expr_idents = []string{yyS[yypt-2].tok.Lit, yyS[yypt-0].tok.Lit}
		}
	case 75:
		{
			yyVAL.stmt = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 76:
		{
			yyVAL.stmt_select_content = &ast.SelectBodyStmt{Cases: yyS[yypt-1].stmts, Default: yyS[yypt-0].stmt}
		}
	case 77:
		{
			yyVAL.stmts = nil
		}
	case 78:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 79:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 80:
		{
			yyVAL.stmts = append(yyVAL.stmts, yyS[yypt-0].stmt)
		}
	case 81:
		{
			yyVAL.stmt = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 82:
		{
			yyVAL.stmt = nil
		}
	case 83:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 84:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 85:
		{
			yyS[yypt-1].stmt.(*ast.SwitchStmt).Expr = yyS[yypt-3].expr
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 86:
		{
			yyVAL.stmt = &ast.SwitchStmt{Cases: yyS[yypt-1].stmts, Default: yyS[yypt-0].stmt}
		}
	case 87:
		{
			yyVAL.stmts = nil
		}
	case 88:
		{
			yyVAL.stmts = yyS[yypt-0].stmts
		}
	case 89:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 90:
		{
			yyVAL.stmts = append(yyVAL.stmts, yyS[yypt-0].stmt)
		}
	case 91:
		{
			yyVAL.stmt = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].exprs, Stmt: yyS[yypt-0].stmt}
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 92:
		{
			yyVAL.stmt = nil
		}
	case 93:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 94:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 95:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 96:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 97:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents
		}
	case 98:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{}
		}
	case 99:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-0].opt_func_return_expr_idents
		}
	case 100:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 101:
		{
			yyVAL.opt_func_return_expr_idents = append(yyS[yypt-2].opt_func_return_expr_idents, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 102:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 103:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents
		}
	case 106:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 107:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-0].expr_typed_ident.Name, TypeData: yyS[yypt-0].expr_typed_ident.TypeData}
		}
	case 108:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 109:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 110:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 111:
		{
			yyVAL.func_expr_idents = append(yyS[yypt-2].func_expr_idents, yyS[yypt-0].func_expr_typed_ident)
		}
	case 112:
		{
			yyVAL.exprs = nil
		}
	case 113:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 114:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 115:
		{
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 116:
		{
			yyVAL.expr = nil
		}
	case 117:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 118:
		{
			yyVAL.stmt = yyS[yypt-1].stmt
			yyVAL.stmt.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 119:
		{
			yyVAL.stmt = &ast.DbgStmt{Expr: yyS[yypt-0].expr}
		}
	case 120:
		{
			yyVAL.stmt = &ast.DbgStmt{TypeData: yyS[yypt-0].type_data}
		}
	case 121:
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 122:
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 123:
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 124:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 125:
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyS[yypt-1].exprs, TypeData: yyS[yypt-3].type_data}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 126:
		{
			yyVAL.exprs = yyS[yypt-1].exprs
		}
	case 127:
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 128:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 129:
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 130:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 131:
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 132:
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 133:
		{
			yyVAL.expr = yyS[yypt-0].expr
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 134:
		{
			yyVAL.expr = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 135:
		{
			yyVAL.expr = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
		}
	case 136:
		{
			yyVAL.expr = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
		}
	case 142:
		{
			yyVAL.expr = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 143:
		{
			typeData := yyS[yypt-0].type_data
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: typeData}
		}
	case 144:
		{
			typeData := yyS[yypt-0].type_data
			typeData.Mutable = true
			yyVAL.expr_typed_ident = struct {
				Name     string
				TypeData *ast.TypeStruct
			}{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, TypeData: typeData}
		}
	case 145:
		{
			yyVAL.opt_ident = nil
		}
	case 146:
		{
			yyVAL.opt_ident = &yyS[yypt-0].tok
		}
	case 147:
		{
			yyVAL.expr = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 150:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-1].expr.(*ast.IdentExpr).Lit, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 151:
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyS[yypt-1].expr, Callable: &ast.Callable{SubExprs: yyS[yypt-0].expr_call_helper.Exprs, VarArg: yyS[yypt-0].expr_call_helper.VarArg}}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 152:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-2].exprs, VarArg: true}
		}
	case 153:
		{
			yyVAL.expr_call_helper = struct {
				Exprs  []ast.Expr
				VarArg bool
			}{Exprs: yyS[yypt-1].exprs}
		}
	case 154:
		{
			yyVAL.str = "-"
		}
	case 155:
		{
			yyVAL.str = "!"
		}
	case 156:
		{
			yyVAL.str = "^"
		}
	case 157:
		{
			yyVAL.str = "*"
		}
	case 158:
		{
			yyVAL.str = "&"
		}
	case 159:
		{
			if yyS[yypt-1].str == "&" {
				if el, ok := yyS[yypt-0].expr.(*ast.IdentExpr); ok {
					yyVAL.expr = &ast.AddrExpr{Expr: el}
				} else if el, ok := yyS[yypt-0].expr.(*ast.MemberExpr); ok {
					yyVAL.expr = el
				}
			} else if yyS[yypt-1].str == "*" {
				yyVAL.expr = &ast.DerefExpr{Expr: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.UnaryExpr{Operator: yyS[yypt-1].str, Expr: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 160:
		{
			yyVAL.str = "+"
		}
	case 161:
		{
			yyVAL.str = "-"
		}
	case 162:
		{
			yyVAL.str = "*"
		}
	case 163:
		{
			yyVAL.str = "/"
		}
	case 164:
		{
			yyVAL.str = "**"
		}
	case 165:
		{
			yyVAL.str = "%"
		}
	case 166:
		{
			yyVAL.str = "<<"
		}
	case 167:
		{
			yyVAL.str = ">>"
		}
	case 168:
		{
			yyVAL.str = "|"
		}
	case 169:
		{
			yyVAL.str = "||"
		}
	case 170:
		{
			yyVAL.str = "&"
		}
	case 171:
		{
			yyVAL.str = "&&"
		}
	case 172:
		{
			yyVAL.str = "!="
		}
	case 173:
		{
			yyVAL.str = ">"
		}
	case 174:
		{
			yyVAL.str = ">="
		}
	case 175:
		{
			yyVAL.str = "<"
		}
	case 176:
		{
			yyVAL.str = "<="
		}
	case 177:
		{
			yyVAL.str = "??"
		}
	case 178:
		{
			yyVAL.str = "+="
		}
	case 179:
		{
			yyVAL.str = "-="
		}
	case 180:
		{
			yyVAL.str = "*="
		}
	case 181:
		{
			yyVAL.str = "/="
		}
	case 182:
		{
			yyVAL.str = "&="
		}
	case 183:
		{
			yyVAL.str = "|="
		}
	case 184:
		{
			yyVAL.str = "<-"
		}
	case 185:
		{
			if yyS[yypt-1].str == "??" {
				yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "<-" {
				yyVAL.expr = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			} else if yyS[yypt-1].str == "+=" ||
				yyS[yypt-1].str == "-=" ||
				yyS[yypt-1].str == "*=" ||
				yyS[yypt-1].str == "/=" ||
				yyS[yypt-1].str == "&=" ||
				yyS[yypt-1].str == "|=" {
				yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			} else {
				yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: yyS[yypt-1].str, Rhs: yyS[yypt-0].expr}
			}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 186:
		{
			yyVAL.expr = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 187:
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 189:
		{
			yyVAL.str = "++"
		}
	case 190:
		{
			yyVAL.str = "--"
		}
	case 191:
		{
			yyVAL.expr = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: yyS[yypt-0].str}
			yyVAL.expr.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 192:
		{
			f := &ast.FuncExpr{Params: yyS[yypt-5].func_expr_args.Params, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].stmt, VarArg: yyS[yypt-5].func_expr_args.VarArg}
			if yyS[yypt-5].func_expr_args.TypeData != nil {
				f.Params[len(f.Params)-1].TypeData = yyS[yypt-5].func_expr_args.TypeData
			}
			if yyS[yypt-7].opt_ident != nil {
				f.Name = yyS[yypt-7].opt_ident.Lit
			}
			yyVAL.expr = f
			yyVAL.expr.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 193:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-2].func_expr_idents, VarArg: true, TypeData: yyS[yypt-0].type_data}
		}
	case 194:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-1].func_expr_idents, VarArg: true, TypeData: nil}
		}
	case 195:
		{
			yyVAL.func_expr_args = struct {
				Params   []*ast.ParamExpr
				VarArg   bool
				TypeData *ast.TypeStruct
			}{Params: yyS[yypt-0].func_expr_idents, VarArg: false, TypeData: nil}
		}
	case 196:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 197:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 198:
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 199:
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 201:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 202:
		{
			if yyS[yypt-2].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyS[yypt-2].type_data.Env = append(yyS[yypt-2].type_data.Env, yyS[yypt-2].type_data.Name)
				yyS[yypt-2].type_data.Name = yyS[yypt-0].tok.Lit
			}
		}
	case 203:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 204:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 205:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 206:
		{
			yyVAL.type_data = yyS[yypt-0].type_data
		}
	case 207:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 208:
		{
			yyVAL.type_data = yyS[yypt-1].type_data
		}
	case 209:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 210:
		{
			yyVAL.type_data = yyS[yypt-1].type_data
		}
	case 211:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-0].expr_typed_ident.Name}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].expr_typed_ident.TypeData}}
		}
	case 212:
		{
			if yyS[yypt-2].type_data == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data.StructNames = append(yyVAL.type_data.StructNames, yyS[yypt-0].expr_typed_ident.Name)
			yyVAL.type_data.StructTypes = append(yyVAL.type_data.StructTypes, yyS[yypt-0].expr_typed_ident.TypeData)
		}
	case 213:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 214:
		{
			yyVAL.slice_count = 1
		}
	case 215:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 216:
		{
			yyS[yypt-0].expr_map.TypeData = yyS[yypt-1].type_data
			yyVAL.expr = yyS[yypt-0].expr_map
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_map.Position())
		}
	case 217:
		{
			yyVAL.expr = yyS[yypt-0].expr_map
			yyVAL.expr.SetPosition(yyS[yypt-0].expr_map.Position())
		}
	case 218:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map
		}
	case 219:
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 220:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map
		}
	case 221:
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyS[yypt-0].exprs[0]}, Values: []ast.Expr{yyS[yypt-0].exprs[1]}}
		}
	case 222:
		{
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyS[yypt-0].exprs[0])
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyS[yypt-0].exprs[1])
		}
	case 223:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 224:
		{
			if el, ok := yyS[yypt-1].expr.(*ast.SliceExpr); ok {
				el.Value = yyS[yypt-3].expr
			} else if el, ok := yyS[yypt-1].expr.(*ast.ItemExpr); ok {
				el.Value = yyS[yypt-3].expr
			}
			yyVAL.expr = yyS[yypt-1].expr
			yyVAL.expr.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 225:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-2].expr, End: yyS[yypt-0].expr}
		}
	case 226:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: yyS[yypt-1].expr, End: nil}
		}
	case 227:
		{
			yyVAL.expr = &ast.SliceExpr{Begin: nil, End: yyS[yypt-0].expr}
		}
	case 228:
		{
			yyVAL.expr = &ast.ItemExpr{Index: yyS[yypt-0].expr}
		}
	case 229:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].expr.(*ast.IdentExpr).Lit}
		}
	case 230:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].expr.(*ast.IdentExpr).Lit)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
