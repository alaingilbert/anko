// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         *ast.StmtsStmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_if_helper                ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             *ast.SwitchStmt
	stmt_switch_cases_helper      *ast.SwitchStmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_body              *ast.SelectBodyStmt
	stmt_select_content           *ast.SelectBodyStmt
	stmt_select_cases             *ast.SelectBodyStmt
	stmt_select_cases_helper      *ast.SelectBodyStmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	stmt_module                   ast.Stmt
	stmt_break                    ast.Stmt
	stmt_return                   ast.Stmt
	stmt_continue                 ast.Stmt
	stmt_throw                    ast.Stmt
	stmt_expr                     *ast.ExprStmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_literals                 ast.Expr
	expr_close                    ast.Expr
	expr_delete                   ast.Expr
	expr_in                       ast.Expr
	expr_opchan                   ast.Expr
	expr_new                      ast.Expr
	expr_array                    ast.Expr
	expr_item                     ast.Expr
	expr_paren                    ast.Expr
	expr_nil_coalesce             ast.Expr
	expr_ternary                  ast.Expr
	expr_len                      ast.Expr
	expr_unary                    ast.Expr
	expr_binary                   ast.Expr
	expr_member_or_ident          ast.Expr
	expr_call                     *ast.CallExpr
	expr_anon_call                *ast.AnonCallExpr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	opt_exprs                     []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents2  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	expr_map_content              *ast.MapExpr
	expr_map_content_helper       *ast.MapExpr
	expr_map_key_value            []ast.Expr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault   = 57405
	yyEofCode   = 57344
	ANDAND      = 57364
	ANDEQ       = 57378
	ARRAY       = 57349
	BREAK       = 57380
	CASE        = 57389
	CATCH       = 57372
	CHAN        = 57393
	CLOSE       = 57399
	CONTINUE    = 57381
	DBG         = 57402
	DEFAULT     = 57390
	DEFER       = 57392
	DELETE      = 57398
	DIVEQ       = 57377
	ELSE        = 57356
	EQEQ        = 57359
	FALSE       = 57367
	FINALLY     = 57373
	FOR         = 57357
	FUNC        = 57351
	GE          = 57361
	GO          = 57391
	IDENT       = 57346
	IF          = 57355
	IN          = 57358
	LE          = 57362
	LEN         = 57397
	MAKE        = 57394
	MAP         = 57400
	MINUSEQ     = 57375
	MINUSMINUS  = 57383
	MODULE      = 57370
	MULEQ       = 57376
	NEQ         = 57360
	NEW         = 57365
	NIL         = 57368
	NILCOALESCE = 57369
	NUMBER      = 57347
	OPCHAN      = 57395
	OREQ        = 57379
	OROR        = 57363
	PLUSEQ      = 57374
	PLUSPLUS    = 57382
	POW         = 57384
	RETURN      = 57352
	SELECT      = 57388
	SHIFTLEFT   = 57385
	SHIFTRIGHT  = 57386
	STRING      = 57348
	STRUCT      = 57401
	SWITCH      = 57387
	THROW       = 57354
	TRUE        = 57366
	TRY         = 57371
	TYPE        = 57396
	UNARY       = 57404
	VAR         = 57353
	VARARG      = 57350
	WALRUS      = 57403
	yyErrCode   = 57345

	yyMaxDepth = 200
	yyTabOfs   = -236
)

var (
	yyPrec = map[int]int{
		'=':         0,
		PLUSEQ:      0,
		MINUSEQ:     0,
		MULEQ:       0,
		DIVEQ:       0,
		ANDEQ:       0,
		OREQ:        0,
		':':         1,
		OPCHAN:      2,
		'?':         3,
		NILCOALESCE: 3,
		OROR:        4,
		ANDAND:      5,
		EQEQ:        6,
		NEQ:         6,
		'<':         6,
		LE:          6,
		'>':         6,
		GE:          6,
		'+':         7,
		'-':         7,
		'|':         7,
		'^':         7,
		'*':         8,
		'/':         8,
		'%':         8,
		SHIFTLEFT:   8,
		SHIFTRIGHT:  8,
		'&':         8,
		IN:          9,
		PLUSPLUS:    10,
		MINUSMINUS:  10,
		UNARY:       11,
	}

	yyXLAT = map[int]int{
		91:    0,   // '[' (313x)
		42:    1,   // '*' (310x)
		40:    2,   // '(' (296x)
		125:   3,   // '}' (292x)
		38:    4,   // '&' (282x)
		45:    5,   // '-' (282x)
		123:   6,   // '{' (282x)
		57395: 7,   // OPCHAN (282x)
		10:    8,   // '\n' (257x)
		59:    9,   // ';' (204x)
		57389: 10,  // CASE (202x)
		57390: 11,  // DEFAULT (202x)
		57344: 12,  // $end (179x)
		46:    13,  // '.' (176x)
		57346: 14,  // IDENT (176x)
		58:    15,  // ':' (175x)
		44:    16,  // ',' (164x)
		41:    17,  // ')' (162x)
		57400: 18,  // MAP (160x)
		57358: 19,  // IN (153x)
		37:    20,  // '%' (151x)
		43:    21,  // '+' (151x)
		47:    22,  // '/' (151x)
		60:    23,  // '<' (151x)
		62:    24,  // '>' (151x)
		63:    25,  // '?' (151x)
		124:   26,  // '|' (151x)
		57364: 27,  // ANDAND (151x)
		57378: 28,  // ANDEQ (151x)
		57377: 29,  // DIVEQ (151x)
		57359: 30,  // EQEQ (151x)
		57361: 31,  // GE (151x)
		57362: 32,  // LE (151x)
		57375: 33,  // MINUSEQ (151x)
		57383: 34,  // MINUSMINUS (151x)
		57376: 35,  // MULEQ (151x)
		57360: 36,  // NEQ (151x)
		57369: 37,  // NILCOALESCE (151x)
		57379: 38,  // OREQ (151x)
		57363: 39,  // OROR (151x)
		57374: 40,  // PLUSEQ (151x)
		57382: 41,  // PLUSPLUS (151x)
		57384: 42,  // POW (151x)
		57385: 43,  // SHIFTLEFT (151x)
		57386: 44,  // SHIFTRIGHT (151x)
		93:    45,  // ']' (140x)
		33:    46,  // '!' (131x)
		94:    47,  // '^' (131x)
		57399: 48,  // CLOSE (131x)
		57402: 49,  // DBG (131x)
		57398: 50,  // DELETE (131x)
		57367: 51,  // FALSE (131x)
		57351: 52,  // FUNC (131x)
		57397: 53,  // LEN (131x)
		57394: 54,  // MAKE (131x)
		57365: 55,  // NEW (131x)
		57368: 56,  // NIL (131x)
		57347: 57,  // NUMBER (131x)
		57348: 58,  // STRING (131x)
		57366: 59,  // TRUE (131x)
		57350: 60,  // VARARG (115x)
		61:    61,  // '=' (114x)
		57452: 62,  // slice_count (111x)
		57403: 63,  // WALRUS (111x)
		57408: 64,  // expr (83x)
		57409: 65,  // expr_anon_call (83x)
		57410: 66,  // expr_array (83x)
		57411: 67,  // expr_binary (83x)
		57412: 68,  // expr_call (83x)
		57413: 69,  // expr_close (83x)
		57414: 70,  // expr_dbg (83x)
		57415: 71,  // expr_delete (83x)
		57416: 72,  // expr_func (83x)
		57417: 73,  // expr_ident (83x)
		57419: 74,  // expr_in (83x)
		57420: 75,  // expr_item (83x)
		57421: 76,  // expr_len (83x)
		57422: 77,  // expr_literals (83x)
		57423: 78,  // expr_make (83x)
		57424: 79,  // expr_map (83x)
		57428: 80,  // expr_member_or_ident (83x)
		57429: 81,  // expr_new (83x)
		57430: 82,  // expr_nil_coalesce (83x)
		57431: 83,  // expr_opchan (83x)
		57432: 84,  // expr_paren (83x)
		57433: 85,  // expr_slice (83x)
		57434: 86,  // expr_ternary (83x)
		57435: 87,  // expr_unary (83x)
		57443: 88,  // newline (53x)
		57444: 89,  // newlines (49x)
		57355: 90,  // IF (44x)
		57353: 91,  // VAR (44x)
		57380: 92,  // BREAK (43x)
		57381: 93,  // CONTINUE (43x)
		57392: 94,  // DEFER (43x)
		57357: 95,  // FOR (43x)
		57391: 96,  // GO (43x)
		57370: 97,  // MODULE (43x)
		57352: 98,  // RETURN (43x)
		57388: 99,  // SELECT (43x)
		57387: 100, // SWITCH (43x)
		57354: 101, // THROW (43x)
		57371: 102, // TRY (43x)
		57393: 103, // CHAN (37x)
		57401: 104, // STRUCT (37x)
		57451: 105, // opt_term (33x)
		57484: 106, // term (33x)
		57407: 107, // compstmt (32x)
		57485: 108, // type_data (28x)
		57450: 109, // opt_newlines (20x)
		57406: 110, // comma_newlines (15x)
		57436: 111, // exprs (13x)
		57425: 112, // expr_map_content (8x)
		57446: 113, // opt_exprs (6x)
		57447: 114, // opt_func_return_expr_idents (6x)
		57356: 115, // ELSE (4x)
		57463: 116, // stmt_lets (4x)
		57480: 117, // stmt_typed_lets (4x)
		57481: 118, // stmt_var (4x)
		57482: 119, // stmt_var_or_lets (4x)
		57440: 120, // func_expr_typed_ident (3x)
		57442: 121, // func_expr_untyped_ident (3x)
		57445: 122, // opt_comma_newlines (3x)
		57454: 123, // stmt (3x)
		57455: 124, // stmt_break (3x)
		57456: 125, // stmt_continue (3x)
		57457: 126, // stmt_defer (3x)
		57458: 127, // stmt_expr (3x)
		57459: 128, // stmt_for (3x)
		57460: 129, // stmt_go (3x)
		57461: 130, // stmt_if (3x)
		57462: 131, // stmt_if_helper (3x)
		57464: 132, // stmt_module (3x)
		57465: 133, // stmt_return (3x)
		57466: 134, // stmt_select (3x)
		57473: 135, // stmt_switch (3x)
		57478: 136, // stmt_throw (3x)
		57479: 137, // stmt_try (3x)
		57418: 138, // expr_idents (2x)
		57427: 139, // expr_map_key_value (2x)
		57373: 140, // FINALLY (2x)
		57437: 141, // func_expr_idents (2x)
		57438: 142, // func_expr_idents_last_untyped (2x)
		57439: 143, // func_expr_idents_not_empty (2x)
		57441: 144, // func_expr_typed_idents (2x)
		57468: 145, // stmt_select_case (2x)
		57472: 146, // stmt_select_default (2x)
		57474: 147, // stmt_switch_case (2x)
		57477: 148, // stmt_switch_default (2x)
		57372: 149, // CATCH (1x)
		57426: 150, // expr_map_content_helper (1x)
		57448: 151, // opt_func_return_expr_idents1 (1x)
		57449: 152, // opt_func_return_expr_idents2 (1x)
		57453: 153, // start (1x)
		57467: 154, // stmt_select_body (1x)
		57469: 155, // stmt_select_cases (1x)
		57470: 156, // stmt_select_cases_helper (1x)
		57471: 157, // stmt_select_content (1x)
		57475: 158, // stmt_switch_cases (1x)
		57476: 159, // stmt_switch_cases_helper (1x)
		57483: 160, // stmts (1x)
		57396: 161, // TYPE (1x)
		57486: 162, // type_data_struct (1x)
		57405: 163, // $default (0x)
		57349: 164, // ARRAY (0x)
		57345: 165, // error (0x)
		57404: 166, // UNARY (0x)
	}

	yySymNames = []string{
		"'['",
		"'*'",
		"'('",
		"'}'",
		"'&'",
		"'-'",
		"'{'",
		"OPCHAN",
		"'\\n'",
		"';'",
		"CASE",
		"DEFAULT",
		"$end",
		"'.'",
		"IDENT",
		"':'",
		"','",
		"')'",
		"MAP",
		"IN",
		"'%'",
		"'+'",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"'|'",
		"ANDAND",
		"ANDEQ",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"NILCOALESCE",
		"OREQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"POW",
		"SHIFTLEFT",
		"SHIFTRIGHT",
		"']'",
		"'!'",
		"'^'",
		"CLOSE",
		"DBG",
		"DELETE",
		"FALSE",
		"FUNC",
		"LEN",
		"MAKE",
		"NEW",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"VARARG",
		"'='",
		"slice_count",
		"WALRUS",
		"expr",
		"expr_anon_call",
		"expr_array",
		"expr_binary",
		"expr_call",
		"expr_close",
		"expr_dbg",
		"expr_delete",
		"expr_func",
		"expr_ident",
		"expr_in",
		"expr_item",
		"expr_len",
		"expr_literals",
		"expr_make",
		"expr_map",
		"expr_member_or_ident",
		"expr_new",
		"expr_nil_coalesce",
		"expr_opchan",
		"expr_paren",
		"expr_slice",
		"expr_ternary",
		"expr_unary",
		"newline",
		"newlines",
		"IF",
		"VAR",
		"BREAK",
		"CONTINUE",
		"DEFER",
		"FOR",
		"GO",
		"MODULE",
		"RETURN",
		"SELECT",
		"SWITCH",
		"THROW",
		"TRY",
		"CHAN",
		"STRUCT",
		"opt_term",
		"term",
		"compstmt",
		"type_data",
		"opt_newlines",
		"comma_newlines",
		"exprs",
		"expr_map_content",
		"opt_exprs",
		"opt_func_return_expr_idents",
		"ELSE",
		"stmt_lets",
		"stmt_typed_lets",
		"stmt_var",
		"stmt_var_or_lets",
		"func_expr_typed_ident",
		"func_expr_untyped_ident",
		"opt_comma_newlines",
		"stmt",
		"stmt_break",
		"stmt_continue",
		"stmt_defer",
		"stmt_expr",
		"stmt_for",
		"stmt_go",
		"stmt_if",
		"stmt_if_helper",
		"stmt_module",
		"stmt_return",
		"stmt_select",
		"stmt_switch",
		"stmt_throw",
		"stmt_try",
		"expr_idents",
		"expr_map_key_value",
		"FINALLY",
		"func_expr_idents",
		"func_expr_idents_last_untyped",
		"func_expr_idents_not_empty",
		"func_expr_typed_idents",
		"stmt_select_case",
		"stmt_select_default",
		"stmt_switch_case",
		"stmt_switch_default",
		"CATCH",
		"expr_map_content_helper",
		"opt_func_return_expr_idents1",
		"opt_func_return_expr_idents2",
		"start",
		"stmt_select_body",
		"stmt_select_cases",
		"stmt_select_cases_helper",
		"stmt_select_content",
		"stmt_switch_cases",
		"stmt_switch_cases_helper",
		"stmts",
		"TYPE",
		"type_data_struct",
		"$default",
		"ARRAY",
		"error",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {153, 1},
		2:   {107, 1},
		3:   {107, 3},
		4:   {160, 1},
		5:   {160, 3},
		6:   {123, 1},
		7:   {123, 1},
		8:   {123, 1},
		9:   {123, 1},
		10:  {123, 1},
		11:  {123, 1},
		12:  {123, 1},
		13:  {123, 1},
		14:  {123, 1},
		15:  {123, 1},
		16:  {123, 1},
		17:  {123, 1},
		18:  {123, 1},
		19:  {123, 1},
		20:  {124, 1},
		21:  {125, 1},
		22:  {133, 2},
		23:  {136, 2},
		24:  {132, 5},
		25:  {127, 1},
		26:  {129, 2},
		27:  {129, 2},
		28:  {126, 2},
		29:  {126, 2},
		30:  {137, 13},
		31:  {137, 12},
		32:  {137, 9},
		33:  {137, 8},
		34:  {119, 1},
		35:  {119, 1},
		36:  {119, 1},
		37:  {118, 4},
		38:  {117, 3},
		39:  {117, 3},
		40:  {116, 3},
		41:  {116, 3},
		42:  {130, 1},
		43:  {131, 5},
		44:  {131, 7},
		45:  {131, 5},
		46:  {128, 4},
		47:  {128, 7},
		48:  {128, 5},
		49:  {128, 6},
		50:  {128, 7},
		51:  {128, 7},
		52:  {128, 8},
		53:  {128, 7},
		54:  {128, 8},
		55:  {128, 8},
		56:  {128, 9},
		57:  {134, 4},
		58:  {157, 3},
		59:  {155, 0},
		60:  {155, 1},
		61:  {156, 1},
		62:  {156, 2},
		63:  {156, 2},
		64:  {154, 1},
		65:  {154, 1},
		66:  {145, 4},
		67:  {146, 3},
		68:  {135, 7},
		69:  {158, 0},
		70:  {158, 1},
		71:  {159, 1},
		72:  {159, 1},
		73:  {159, 2},
		74:  {159, 2},
		75:  {147, 4},
		76:  {147, 4},
		77:  {148, 3},
		78:  {114, 0},
		79:  {114, 1},
		80:  {114, 3},
		81:  {151, 0},
		82:  {151, 1},
		83:  {152, 1},
		84:  {152, 3},
		85:  {141, 0},
		86:  {141, 1},
		87:  {143, 1},
		88:  {143, 1},
		89:  {121, 1},
		90:  {120, 2},
		91:  {142, 1},
		92:  {142, 3},
		93:  {144, 1},
		94:  {144, 3},
		95:  {113, 0},
		96:  {113, 1},
		97:  {111, 1},
		98:  {111, 3},
		99:  {111, 3},
		100: {64, 1},
		101: {64, 1},
		102: {64, 1},
		103: {64, 1},
		104: {64, 1},
		105: {64, 1},
		106: {64, 1},
		107: {64, 1},
		108: {64, 1},
		109: {64, 1},
		110: {64, 1},
		111: {64, 1},
		112: {64, 1},
		113: {64, 1},
		114: {64, 1},
		115: {64, 1},
		116: {64, 1},
		117: {64, 1},
		118: {64, 1},
		119: {64, 1},
		120: {64, 1},
		121: {64, 1},
		122: {70, 3},
		123: {70, 4},
		124: {70, 4},
		125: {76, 4},
		126: {75, 4},
		127: {75, 4},
		128: {84, 3},
		129: {66, 2},
		130: {66, 5},
		131: {66, 7},
		132: {82, 3},
		133: {86, 5},
		134: {81, 4},
		135: {83, 3},
		136: {83, 2},
		137: {74, 3},
		138: {71, 4},
		139: {71, 6},
		140: {69, 4},
		141: {77, 1},
		142: {77, 1},
		143: {77, 1},
		144: {77, 1},
		145: {77, 1},
		146: {80, 1},
		147: {80, 3},
		148: {68, 5},
		149: {68, 4},
		150: {65, 5},
		151: {65, 4},
		152: {87, 2},
		153: {87, 2},
		154: {87, 2},
		155: {87, 2},
		156: {87, 4},
		157: {87, 2},
		158: {87, 4},
		159: {67, 3},
		160: {67, 3},
		161: {67, 3},
		162: {67, 3},
		163: {67, 3},
		164: {67, 3},
		165: {67, 3},
		166: {67, 3},
		167: {67, 3},
		168: {67, 3},
		169: {67, 3},
		170: {67, 3},
		171: {67, 3},
		172: {67, 3},
		173: {67, 3},
		174: {67, 3},
		175: {67, 3},
		176: {67, 3},
		177: {67, 3},
		178: {67, 3},
		179: {67, 2},
		180: {67, 2},
		181: {67, 3},
		182: {67, 3},
		183: {67, 3},
		184: {67, 3},
		185: {72, 8},
		186: {72, 9},
		187: {72, 10},
		188: {72, 9},
		189: {72, 10},
		190: {72, 11},
		191: {78, 4},
		192: {78, 6},
		193: {78, 8},
		194: {78, 7},
		195: {108, 1},
		196: {108, 3},
		197: {108, 2},
		198: {108, 2},
		199: {108, 5},
		200: {108, 2},
		201: {108, 6},
		202: {162, 2},
		203: {162, 4},
		204: {62, 2},
		205: {62, 3},
		206: {79, 4},
		207: {79, 8},
		208: {79, 3},
		209: {112, 1},
		210: {112, 3},
		211: {150, 1},
		212: {150, 3},
		213: {139, 3},
		214: {85, 6},
		215: {85, 5},
		216: {85, 5},
		217: {85, 6},
		218: {85, 5},
		219: {85, 5},
		220: {138, 1},
		221: {138, 3},
		222: {73, 1},
		223: {105, 0},
		224: {105, 1},
		225: {106, 1},
		226: {106, 1},
		227: {106, 2},
		228: {109, 0},
		229: {109, 1},
		230: {89, 1},
		231: {89, 2},
		232: {88, 1},
		233: {110, 2},
		234: {122, 1},
		235: {122, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [525][]uint16{
		// 0
		{13, 13, 13, 4: 13, 13, 13, 13, 244, 241, 12: 13, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 238, 153: 237},
		{12: 236},
		{12: 235},
		{308, 324, 307, 234, 323, 320, 328, 311, 234, 10: 234, 234, 234, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 268, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 90: 278, 275, 263, 264, 270, 279, 269, 267, 265, 280, 281, 266, 271, 111: 276, 116: 274, 273, 272, 249, 123: 248, 250, 251, 261, 262, 256, 260, 255, 277, 254, 252, 259, 258, 253, 257, 160: 247},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 10: 12, 12, 12, 14: 12, 18: 12, 46: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 90: 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12},
		// 5
		{11, 11, 11, 11, 11, 11, 11, 11, 244, 10: 11, 11, 11, 14: 11, 18: 11, 46: 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 88: 243, 246, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 244, 10: 10, 10, 10, 14: 10, 18: 10, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 88: 245, 90: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 10: 6, 6, 6, 14: 6, 16: 6, 18: 6, 45: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 90: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 10: 4, 4, 4, 14: 4, 16: 4, 18: 4, 45: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 90: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 10: 5, 5, 5, 14: 5, 16: 5, 18: 5, 45: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 90: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
		// 10
		{9, 9, 9, 9, 9, 9, 9, 9, 244, 10: 9, 9, 9, 14: 9, 18: 9, 46: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 88: 245, 90: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{3: 13, 8: 244, 241, 13, 13, 13, 88: 243, 242, 105: 758, 759},
		{3: 232, 8: 232, 232, 232, 232, 232},
		{3: 230, 8: 230, 230, 230, 230, 230, 15: 230},
		{3: 229, 8: 229, 229, 229, 229, 229, 15: 229},
		// 15
		{3: 228, 8: 228, 228, 228, 228, 228, 15: 228},
		{3: 227, 8: 227, 227, 227, 227, 227, 15: 227},
		{3: 226, 8: 226, 226, 226, 226, 226, 15: 226},
		{3: 225, 8: 225, 225, 225, 225, 225, 15: 225},
		{3: 224, 8: 224, 224, 224, 224, 224, 15: 224},
		// 20
		{3: 223, 8: 223, 223, 223, 223, 223, 15: 223},
		{3: 222, 8: 222, 222, 222, 222, 222, 15: 222},
		{3: 221, 8: 221, 221, 221, 221, 221, 15: 221},
		{3: 220, 8: 220, 220, 220, 220, 220, 15: 220},
		{3: 219, 8: 219, 219, 219, 219, 219, 15: 219},
		// 25
		{3: 218, 8: 218, 218, 218, 218, 218, 15: 218},
		{3: 217, 8: 217, 217, 217, 217, 217, 15: 217},
		{3: 216, 8: 216, 216, 216, 216, 216, 15: 216},
		{3: 215, 8: 215, 215, 215, 215, 215, 15: 215},
		{308, 324, 307, 141, 323, 320, 328, 311, 141, 141, 141, 141, 141, 14: 319, 141, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 401, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 111: 579, 113: 757},
		// 30
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 756, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{14: 752},
		{341, 350, 347, 211, 372, 349, 7: 344, 211, 211, 211, 211, 211, 346, 15: 211, 139, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 61: 701, 63: 700},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 749, 751, 288, 290, 750, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 749, 748, 288, 290, 747, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		// 35
		{6: 728},
		{3: 202, 8: 202, 202, 202, 202, 202, 15: 202},
		{3: 201, 8: 201, 201, 201, 201, 201, 15: 201},
		{3: 200, 8: 200, 200, 200, 200, 200, 15: 200},
		{14: 725, 138: 724},
		// 40
		{16: 337, 61: 721, 63: 720, 110: 404},
		{3: 194, 8: 194, 194, 194, 194, 194, 15: 194, 115: 711},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 707, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 650, 311, 9: 652, 14: 654, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 649, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 91: 275, 111: 276, 116: 274, 273, 272, 653, 138: 651},
		{6: 630},
		// 45
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 609, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 15: 136, 136, 136, 19: 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 60: 136, 136, 63: 136},
		{135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 15: 135, 135, 135, 19: 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 60: 135, 135, 63: 135},
		{134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 15: 134, 134, 134, 19: 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 60: 134, 134, 63: 134},
		{133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 15: 133, 133, 133, 19: 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 60: 133, 133, 63: 133},
		// 50
		{132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 15: 132, 132, 132, 19: 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 60: 132, 132, 63: 132},
		{131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 15: 131, 131, 131, 19: 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 60: 131, 131, 63: 131},
		{130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 15: 130, 130, 130, 19: 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 60: 130, 130, 63: 130},
		{129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 15: 129, 129, 129, 19: 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 60: 129, 129, 63: 129},
		{128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 15: 128, 128, 128, 19: 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 60: 128, 128, 63: 128},
		// 55
		{127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 15: 127, 127, 127, 19: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 60: 127, 127, 63: 127},
		{126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 15: 126, 126, 126, 19: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 60: 126, 126, 63: 126},
		{125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 15: 125, 125, 125, 19: 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 60: 125, 125, 63: 125},
		{124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 15: 124, 124, 124, 19: 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 60: 124, 124, 63: 124},
		{123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 15: 123, 123, 123, 19: 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 60: 123, 123, 63: 123},
		// 60
		{122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 15: 122, 122, 122, 19: 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 60: 122, 122, 63: 122},
		{121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 15: 121, 121, 121, 19: 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 60: 121, 121, 63: 121},
		{120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 15: 120, 120, 120, 19: 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 60: 120, 120, 63: 120},
		{119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 15: 119, 119, 119, 19: 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 60: 119, 119, 63: 119},
		{118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 15: 118, 118, 118, 19: 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 60: 118, 118, 63: 118},
		// 65
		{117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 15: 117, 117, 117, 19: 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 60: 117, 117, 63: 117},
		{116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 15: 116, 116, 116, 19: 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 60: 116, 116, 63: 116},
		{115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 15: 115, 115, 115, 19: 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 60: 115, 115, 63: 115},
		{2: 594},
		{2: 591},
		// 70
		{409, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 15: 90, 90, 90, 19: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 60: 90, 90, 63: 90},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 589, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{8, 8, 8, 4: 8, 8, 8, 8, 244, 14: 8, 16: 8, 18: 8, 45: 584, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 88: 243, 331, 109: 585},
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 576},
		{2: 573},
		// 75
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 572, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{2: 566},
		{2: 563},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 15: 95, 95, 95, 19: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 60: 95, 95, 63: 95},
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 15: 94, 94, 94, 19: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 60: 94, 94, 63: 94},
		// 80
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 15: 93, 93, 93, 19: 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 60: 93, 93, 63: 93},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 15: 92, 92, 92, 19: 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 60: 92, 92, 63: 92},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 15: 91, 91, 91, 19: 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 60: 91, 91, 63: 91},
		{14, 14, 557, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15: 14, 14, 14, 19: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 60: 14, 14, 63: 14},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 556, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		// 85
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 555, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 554, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 551, 292, 288, 290, 291, 301, 296, 302, 287, 550, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 547, 292, 288, 290, 291, 301, 296, 302, 287, 546, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{2: 488, 14: 489},
		// 90
		{2: 474},
		{437, 6: 436},
		{8, 8, 8, 8, 8, 8, 8, 8, 244, 14: 8, 18: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 88: 243, 331, 109: 330, 112: 329},
		{3: 435},
		{308, 324, 307, 27, 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 332, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 139: 334, 150: 333},
		// 95
		{7, 7, 7, 7, 7, 7, 7, 7, 244, 10: 7, 7, 14: 7, 16: 7, 18: 7, 45: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 88: 245, 103: 7, 7},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 15: 374, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{3: 8, 8: 244, 16: 337, 88: 243, 331, 109: 338, 336, 122: 335},
		{3: 25, 8: 25, 16: 25},
		{3: 26},
		// 100
		{308, 324, 307, 2, 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 332, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 139: 340},
		{8, 8, 8, 8, 8, 8, 8, 8, 244, 14: 8, 18: 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 88: 243, 331, 103: 8, 8, 109: 339},
		{3: 1, 45: 1},
		{3, 3, 3, 3, 3, 3, 3, 3, 14: 3, 18: 3, 45: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 103: 3, 3},
		{3: 24, 8: 24, 16: 24},
		// 105
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 427, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 426, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 425, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 422, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 421, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 420, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		// 110
		{14: 419},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 17: 141, 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 401, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 111: 400, 113: 402},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 399, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 398, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 397, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		// 115
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 396, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 395, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 394, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 393, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 392, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		// 120
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 391, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 390, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 389, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 388, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 387, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		// 125
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 386, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 385, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 384, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 383, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 382, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		// 130
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 381, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 380, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 15: 57, 57, 57, 19: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 60: 57, 57, 63: 57},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 15: 56, 56, 56, 19: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 60: 56, 56, 63: 56},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 379, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		// 135
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 378, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 377, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 376, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 375, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{341, 350, 347, 23, 372, 349, 7: 344, 23, 13: 346, 16: 23, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		// 140
		{341, 350, 347, 52, 372, 349, 52, 52, 52, 52, 52, 52, 52, 346, 15: 52, 52, 52, 19: 345, 352, 348, 351, 360, 358, 52, 370, 52, 52, 52, 356, 359, 361, 52, 369, 52, 357, 52, 52, 52, 52, 368, 353, 354, 355, 52, 60: 52, 52, 63: 52},
		{341, 53, 347, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 346, 15: 53, 53, 53, 19: 345, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 369, 53, 53, 53, 53, 53, 53, 368, 353, 53, 53, 53, 60: 53, 53, 63: 53},
		{341, 350, 347, 54, 372, 349, 54, 54, 54, 54, 54, 54, 54, 346, 15: 54, 54, 54, 19: 345, 352, 348, 351, 360, 358, 54, 370, 373, 54, 54, 356, 359, 361, 54, 369, 54, 357, 54, 54, 54, 54, 368, 353, 354, 355, 54, 60: 54, 54, 63: 54},
		{341, 350, 347, 55, 372, 55, 55, 55, 55, 55, 55, 55, 55, 346, 15: 55, 55, 55, 19: 345, 352, 55, 351, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 369, 55, 55, 55, 55, 55, 55, 368, 353, 354, 355, 55, 60: 55, 55, 63: 55},
		{341, 350, 347, 58, 372, 349, 58, 344, 58, 58, 58, 58, 58, 346, 15: 58, 58, 58, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 58, 60: 58, 58, 63: 58},
		// 145
		{341, 350, 347, 59, 372, 349, 59, 344, 59, 59, 59, 59, 59, 346, 15: 59, 59, 59, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 59, 60: 59, 59, 63: 59},
		{341, 350, 347, 60, 372, 349, 60, 344, 60, 60, 60, 60, 60, 346, 15: 60, 60, 60, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 60, 60: 60, 60, 63: 60},
		{341, 350, 347, 61, 372, 349, 61, 344, 61, 61, 61, 61, 61, 346, 15: 61, 61, 61, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 61, 60: 61, 61, 63: 61},
		{341, 350, 347, 62, 372, 349, 62, 344, 62, 62, 62, 62, 62, 346, 15: 62, 62, 62, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 62, 60: 62, 62, 63: 62},
		{341, 350, 347, 63, 372, 349, 63, 344, 63, 63, 63, 63, 63, 346, 15: 63, 63, 63, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 63, 60: 63, 63, 63: 63},
		// 150
		{341, 350, 347, 64, 372, 349, 64, 64, 64, 64, 64, 64, 64, 346, 15: 64, 64, 64, 19: 345, 352, 348, 351, 64, 64, 64, 370, 64, 64, 64, 64, 64, 64, 64, 369, 64, 64, 64, 64, 64, 64, 368, 353, 354, 355, 64, 60: 64, 64, 63: 64},
		{341, 350, 347, 65, 372, 349, 65, 65, 65, 65, 65, 65, 65, 346, 15: 65, 65, 65, 19: 345, 352, 348, 351, 65, 65, 65, 370, 65, 65, 65, 65, 65, 65, 65, 369, 65, 65, 65, 65, 65, 65, 368, 353, 354, 355, 65, 60: 65, 65, 63: 65},
		{341, 350, 347, 66, 372, 349, 66, 66, 66, 66, 66, 66, 66, 346, 15: 66, 66, 66, 19: 345, 352, 348, 351, 66, 66, 66, 370, 66, 66, 66, 66, 66, 66, 66, 369, 66, 66, 66, 66, 66, 66, 368, 353, 354, 355, 66, 60: 66, 66, 63: 66},
		{341, 350, 347, 67, 372, 349, 67, 67, 67, 67, 67, 67, 67, 346, 15: 67, 67, 67, 19: 345, 352, 348, 351, 67, 67, 67, 370, 67, 67, 67, 67, 67, 67, 67, 369, 67, 67, 67, 67, 67, 67, 368, 353, 354, 355, 67, 60: 67, 67, 63: 67},
		{341, 350, 347, 68, 372, 349, 68, 68, 68, 68, 68, 68, 68, 346, 15: 68, 68, 68, 19: 345, 352, 348, 351, 68, 68, 68, 370, 68, 68, 68, 68, 68, 68, 68, 369, 68, 68, 68, 68, 68, 68, 368, 353, 354, 355, 68, 60: 68, 68, 63: 68},
		// 155
		{341, 350, 347, 69, 372, 349, 69, 69, 69, 69, 69, 69, 69, 346, 15: 69, 69, 69, 19: 345, 352, 348, 351, 69, 69, 69, 370, 69, 69, 69, 69, 69, 69, 69, 369, 69, 69, 69, 69, 69, 69, 368, 353, 354, 355, 69, 60: 69, 69, 63: 69},
		{341, 70, 347, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 346, 15: 70, 70, 70, 19: 345, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 369, 70, 70, 70, 70, 70, 70, 368, 353, 70, 70, 70, 60: 70, 70, 63: 70},
		{341, 71, 347, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 346, 15: 71, 71, 71, 19: 345, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 369, 71, 71, 71, 71, 71, 71, 368, 353, 71, 71, 71, 60: 71, 71, 63: 71},
		{341, 350, 347, 72, 372, 349, 72, 344, 72, 72, 72, 72, 72, 346, 15: 72, 72, 72, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 72, 60: 72, 72, 63: 72},
		{341, 73, 347, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 346, 15: 73, 73, 73, 19: 345, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 369, 73, 73, 73, 73, 73, 73, 368, 353, 73, 73, 73, 60: 73, 73, 63: 73},
		// 160
		{341, 74, 347, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 346, 15: 74, 74, 74, 19: 345, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 369, 74, 74, 74, 74, 74, 74, 368, 353, 74, 74, 74, 60: 74, 74, 63: 74},
		{341, 75, 347, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 346, 15: 75, 75, 75, 19: 345, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 369, 75, 75, 75, 75, 75, 75, 368, 353, 75, 75, 75, 60: 75, 75, 63: 75},
		{341, 350, 347, 76, 372, 76, 76, 76, 76, 76, 76, 76, 76, 346, 15: 76, 76, 76, 19: 345, 352, 76, 351, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 369, 76, 76, 76, 76, 76, 76, 368, 353, 354, 355, 76, 60: 76, 76, 63: 76},
		{341, 350, 347, 77, 372, 77, 77, 77, 77, 77, 77, 77, 77, 346, 15: 77, 77, 77, 19: 345, 352, 77, 351, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 369, 77, 77, 77, 77, 77, 77, 368, 353, 354, 355, 77, 60: 77, 77, 63: 77},
		{16: 337, 140, 60: 405, 110: 404},
		// 165
		{341, 350, 347, 139, 372, 349, 7: 344, 139, 139, 139, 139, 139, 346, 15: 139, 139, 139, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 139, 60: 139},
		{17: 403},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 15: 85, 85, 85, 19: 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 60: 85, 85, 63: 85},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 407, 292, 288, 290, 291, 301, 296, 302, 287, 408, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{17: 406},
		// 170
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 15: 86, 86, 86, 19: 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 60: 86, 86, 63: 86},
		{341, 350, 347, 138, 372, 349, 7: 344, 138, 138, 138, 138, 138, 346, 15: 138, 138, 138, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 138, 60: 138, 138, 63: 138},
		{409, 90, 90, 137, 90, 90, 7: 90, 137, 137, 137, 137, 137, 90, 15: 137, 137, 137, 19: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 137, 60: 137, 137, 63: 137},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 411, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 410, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 15: 415, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 414},
		// 175
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 412, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 413},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15: 20, 20, 20, 19: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 60: 20, 20, 63: 20},
		{110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 15: 110, 110, 110, 19: 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 60: 110, 110, 63: 110},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 45: 417, 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 416, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		// 180
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 418},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 15: 21, 21, 21, 19: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 60: 21, 21, 63: 21},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 15: 22, 22, 22, 19: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 60: 22, 22, 63: 22},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 15: 89, 89, 89, 19: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 60: 89, 89, 63: 89},
		{341, 99, 347, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 346, 15: 99, 99, 99, 19: 345, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 369, 99, 99, 99, 99, 99, 99, 368, 353, 99, 99, 99, 60: 99, 99, 63: 99},
		// 185
		{341, 350, 347, 101, 372, 349, 101, 344, 101, 101, 101, 101, 101, 346, 15: 101, 101, 101, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 101, 101, 356, 359, 361, 101, 369, 101, 357, 342, 101, 371, 101, 368, 353, 354, 355, 101, 60: 101, 101, 63: 101},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 15: 423, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 424, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{341, 350, 347, 103, 372, 349, 103, 344, 103, 103, 103, 103, 103, 346, 15: 103, 103, 103, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 103, 103, 356, 359, 361, 103, 369, 103, 357, 342, 103, 371, 103, 368, 353, 354, 355, 103, 60: 103, 103, 63: 103},
		{341, 350, 347, 104, 372, 349, 104, 104, 104, 104, 104, 104, 104, 346, 15: 104, 104, 104, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 104, 104, 356, 359, 361, 104, 369, 104, 357, 342, 104, 371, 104, 368, 353, 354, 355, 104, 60: 104, 104, 63: 104},
		// 190
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 15: 431, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 430},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 428, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 429},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 15: 17, 17, 17, 19: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 60: 17, 17, 63: 17},
		{109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 15: 109, 109, 109, 19: 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 60: 109, 109, 63: 109},
		// 195
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 45: 433, 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 432, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 434},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 15: 18, 18, 18, 19: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 60: 18, 18, 63: 18},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 15: 19, 19, 19, 19: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 60: 19, 19, 63: 19},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 15: 28, 28, 28, 19: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 60: 28, 28, 63: 28},
		// 200
		{8, 8, 8, 8, 8, 8, 8, 8, 244, 14: 8, 18: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 88: 243, 331, 109: 330, 112: 472},
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 439},
		{3: 41, 6: 41, 8: 41, 13: 41, 16: 41, 41, 45: 41},
		{13: 453, 45: 467},
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 466},
		// 205
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 465},
		{461},
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 460},
		{6: 448},
		{45: 446},
		// 210
		{445, 32, 14: 32, 18: 32, 62: 447, 103: 32, 32},
		{31, 31, 14: 31, 18: 31, 103: 31, 31},
		{8: 244, 14: 8, 88: 243, 331, 109: 449},
		{14: 451, 162: 450},
		{3: 8, 8: 244, 16: 337, 88: 243, 331, 109: 455, 456},
		// 215
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 452},
		{3: 34, 8: 34, 13: 453, 16: 34},
		{14: 454},
		{3: 40, 6: 40, 8: 40, 13: 40, 16: 40, 40, 45: 40},
		{3: 459},
		// 220
		{14: 457},
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 458},
		{3: 33, 8: 33, 13: 453, 16: 33},
		{3: 35, 6: 35, 8: 35, 13: 35, 16: 35, 35, 45: 35},
		{3: 36, 6: 36, 8: 36, 13: 453, 16: 36, 36, 45: 36},
		// 225
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 462},
		{13: 453, 45: 463},
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 464},
		{3: 37, 6: 37, 8: 37, 13: 453, 16: 37, 37, 45: 37},
		{3: 38, 6: 38, 8: 38, 13: 453, 16: 38, 38, 45: 38},
		// 230
		{3: 39, 6: 39, 8: 39, 13: 453, 16: 39, 39, 45: 39},
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 468},
		{6: 469, 13: 453},
		{8, 8, 8, 8, 8, 8, 8, 8, 244, 14: 8, 18: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 88: 243, 331, 109: 330, 112: 470},
		{3: 471},
		// 235
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 15: 29, 29, 29, 19: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 60: 29, 29, 63: 29},
		{3: 473},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 15: 30, 30, 30, 19: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 60: 30, 30, 63: 30},
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 475, 161: 476},
		{13: 453, 16: 482, 481},
		// 240
		{14: 477},
		{16: 478},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 479, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 17: 480, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 15: 42, 42, 42, 19: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 60: 42, 42, 63: 42},
		// 245
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 15: 45, 45, 45, 19: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 60: 45, 45, 63: 45},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 483, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 16: 485, 484, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 15: 44, 44, 44, 19: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 60: 44, 44, 63: 44},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 486, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		// 250
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 17: 487, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 15: 43, 43, 43, 19: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 60: 43, 43, 63: 43},
		{14: 494, 17: 151, 120: 496, 495, 141: 528, 527, 491, 493},
		{2: 490},
		{14: 494, 17: 151, 120: 496, 495, 141: 497, 492, 491, 493},
		// 255
		{16: 337, 150, 110: 524},
		{16: 149, 149, 60: 512},
		{16: 148, 148},
		{445, 440, 14: 438, 16: 147, 147, 442, 60: 147, 62: 441, 103: 443, 444, 108: 511},
		{16: 145, 145, 60: 145},
		// 260
		{16: 143, 143},
		{17: 498},
		{445, 440, 500, 6: 158, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 499, 114: 501},
		{6: 157, 13: 453},
		{445, 440, 14: 438, 17: 155, 442, 62: 441, 103: 443, 444, 108: 507, 151: 505, 506},
		// 265
		{6: 502},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 503},
		{3: 504},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 15: 48, 48, 48, 19: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 60: 48, 48, 63: 48},
		{17: 510},
		// 270
		{16: 337, 154, 110: 508},
		{13: 453, 16: 153, 153},
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 509},
		{13: 453, 16: 152, 152},
		{6: 156},
		// 275
		{13: 453, 16: 146, 146},
		{445, 440, 14: 438, 17: 513, 442, 62: 441, 103: 443, 444, 108: 514},
		{445, 440, 500, 6: 158, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 499, 114: 520},
		{13: 453, 17: 515},
		{445, 440, 500, 6: 158, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 499, 114: 516},
		// 280
		{6: 517},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 518},
		{3: 519},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 15: 46, 46, 46, 19: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 60: 46, 46, 63: 46},
		{6: 521},
		// 285
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 522},
		{3: 523},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 15: 47, 47, 47, 19: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 60: 47, 47, 63: 47},
		{14: 494, 120: 526, 525},
		{16: 144, 144, 60: 144},
		// 290
		{16: 142, 142},
		{16: 149, 149, 60: 534},
		{17: 529},
		{445, 440, 500, 6: 158, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 499, 114: 530},
		{6: 531},
		// 295
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 532},
		{3: 533},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 15: 51, 51, 51, 19: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 60: 51, 51, 63: 51},
		{445, 440, 14: 438, 17: 535, 442, 62: 441, 103: 443, 444, 108: 536},
		{445, 440, 500, 6: 158, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 499, 114: 542},
		// 300
		{13: 453, 17: 537},
		{445, 440, 500, 6: 158, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 499, 114: 538},
		{6: 539},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 540},
		{3: 541},
		// 305
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 15: 49, 49, 49, 19: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 60: 49, 49, 63: 49},
		{6: 543},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 544},
		{3: 545},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 15: 50, 50, 50, 19: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 60: 50, 50, 63: 50},
		// 310
		{409, 90, 90, 79, 90, 90, 79, 90, 79, 79, 79, 79, 79, 90, 15: 79, 79, 79, 19: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 79, 60: 79, 79, 63: 79},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 548, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{14: 549},
		{89, 89, 89, 78, 89, 89, 78, 89, 78, 78, 78, 78, 78, 89, 15: 78, 78, 78, 19: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 78, 60: 78, 78, 63: 78},
		{409, 90, 90, 81, 90, 90, 81, 90, 81, 81, 81, 81, 81, 90, 15: 81, 81, 81, 19: 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 81, 60: 81, 81, 63: 81},
		// 315
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 552, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{14: 553},
		{89, 89, 89, 80, 89, 89, 80, 89, 80, 80, 80, 80, 80, 89, 15: 80, 80, 80, 19: 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 80, 60: 80, 80, 63: 80},
		{341, 82, 347, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 346, 15: 82, 82, 82, 19: 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 353, 82, 82, 82, 60: 82, 82, 63: 82},
		{341, 83, 347, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 346, 15: 83, 83, 83, 19: 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 353, 83, 83, 83, 60: 83, 83, 63: 83},
		// 320
		{341, 84, 347, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 346, 15: 84, 84, 84, 19: 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 353, 84, 84, 84, 60: 84, 84, 63: 84},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 17: 141, 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 401, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 111: 558, 113: 559},
		{16: 337, 140, 60: 561, 110: 404},
		{17: 560},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 15: 87, 87, 87, 19: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 60: 87, 87, 63: 87},
		// 325
		{17: 562},
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 15: 88, 88, 88, 19: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 60: 88, 88, 63: 88},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 564, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 17: 565, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 15: 96, 96, 96, 19: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 60: 96, 96, 63: 96},
		// 330
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 567, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 16: 569, 568, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 15: 98, 98, 98, 19: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 60: 98, 98, 63: 98},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 570, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 17: 571, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		// 335
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 15: 97, 97, 97, 19: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 60: 97, 97, 63: 97},
		{341, 350, 347, 100, 372, 349, 100, 344, 100, 100, 100, 100, 100, 346, 15: 100, 100, 100, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 100, 100, 356, 359, 361, 100, 369, 100, 357, 342, 100, 371, 100, 368, 353, 354, 355, 100, 60: 100, 100, 63: 100},
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 574},
		{13: 453, 17: 575},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 15: 102, 102, 102, 19: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 60: 102, 102, 63: 102},
		// 340
		{6: 577, 13: 453},
		{8, 8, 8, 8, 8, 8, 8, 8, 244, 14: 8, 16: 8, 18: 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 88: 243, 331, 109: 578},
		{308, 324, 307, 141, 323, 320, 328, 311, 141, 14: 319, 16: 141, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 401, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 111: 579, 113: 580},
		{3: 140, 8: 140, 140, 140, 140, 140, 15: 140, 337, 45: 140, 110: 404},
		{3: 8, 8: 244, 16: 337, 88: 243, 331, 109: 338, 582, 122: 581},
		// 345
		{3: 583},
		{3: 2, 45: 2},
		{105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 15: 105, 105, 105, 19: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 60: 105, 105, 63: 105},
		{445, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 32, 107, 107, 107, 32, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 60: 107, 107, 447, 107, 103: 32, 32},
		{308, 324, 307, 4: 323, 320, 328, 311, 141, 14: 319, 16: 141, 18: 327, 45: 141, 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 401, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 111: 579, 113: 586},
		// 350
		{8: 244, 16: 337, 45: 8, 88: 243, 331, 109: 338, 582, 122: 587},
		{45: 588},
		{106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 15: 106, 106, 106, 19: 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 60: 106, 106, 63: 106},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 17: 590, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 15: 108, 108, 108, 19: 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 60: 108, 108, 63: 108},
		// 355
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 592, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 17: 593, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 15: 111, 111, 111, 19: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 60: 111, 111, 63: 111},
		{308, 600, 307, 4: 323, 320, 328, 311, 14: 599, 17: 595, 601, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 598, 64: 596, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 103: 443, 444, 108: 597},
		{114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 15: 114, 114, 114, 19: 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 60: 114, 114, 63: 114},
		// 360
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 17: 608, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{13: 453, 17: 607},
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 606},
		{14, 14, 557, 4: 14, 14, 7: 14, 13: 41, 17: 41, 19: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{308, 600, 307, 4: 323, 320, 328, 311, 14: 599, 18: 601, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 598, 64: 547, 292, 288, 290, 291, 301, 296, 302, 287, 546, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 103: 443, 444, 108: 466},
		// 365
		{602, 6: 436},
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 603},
		{13: 453, 45: 604},
		{445, 440, 14: 438, 18: 442, 62: 441, 103: 443, 444, 108: 605},
		{6: 469, 13: 453, 17: 37},
		// 370
		{6: 577, 13: 453, 17: 38},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 15: 112, 112, 112, 19: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 60: 112, 112, 63: 112},
		{113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 15: 113, 113, 113, 19: 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 60: 113, 113, 63: 113},
		{341, 350, 347, 4: 372, 349, 610, 344, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{3: 8, 8: 244, 10: 8, 8, 88: 243, 331, 109: 611},
		// 375
		{3: 167, 8: 167, 10: 616, 617, 147: 615, 614, 158: 612, 613},
		{3: 8, 8: 244, 88: 243, 331, 109: 628},
		{3: 166, 8: 166, 10: 616, 617, 147: 626, 627},
		{3: 165, 8: 165, 10: 165, 165},
		{3: 164, 8: 164, 10: 164, 164},
		// 380
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 141, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 620, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 111: 579, 113: 621},
		{15: 618},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 13, 13, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 619},
		{3: 159, 8: 159, 10: 159, 159},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 15: 624, 139, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		// 385
		{15: 622},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 13, 13, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 623},
		{3: 160, 8: 160, 10: 160, 160},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 13, 13, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 625},
		{3: 161, 8: 161, 10: 161, 161},
		// 390
		{3: 163, 8: 163, 10: 163, 163},
		{3: 162, 8: 162, 10: 162, 162},
		{3: 629},
		{3: 168, 8: 168, 168, 168, 168, 168, 15: 168},
		{3: 8, 8: 244, 10: 8, 8, 88: 243, 331, 109: 632, 157: 631},
		// 395
		{3: 648},
		{3: 177, 8: 177, 10: 638, 639, 145: 637, 636, 154: 635, 633, 634},
		{3: 8, 8: 244, 88: 243, 331, 109: 647},
		{3: 176, 8: 176, 10: 638, 639, 145: 645, 646},
		{3: 175, 8: 175, 10: 175, 175},
		// 400
		{3: 172, 8: 172, 10: 172, 172},
		{3: 171, 8: 171, 10: 171, 171},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 268, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 90: 278, 275, 263, 264, 270, 279, 269, 267, 265, 280, 281, 266, 271, 111: 276, 116: 274, 273, 272, 249, 123: 642, 250, 251, 261, 262, 256, 260, 255, 277, 254, 252, 259, 258, 253, 257},
		{15: 640},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 13, 13, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 641},
		// 405
		{3: 169, 8: 169, 10: 169, 169},
		{15: 643},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 13, 13, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 644},
		{3: 170, 8: 170, 10: 170, 170},
		{3: 174, 8: 174, 10: 174, 174},
		// 410
		{3: 173, 8: 173, 10: 173, 173},
		{3: 178},
		{3: 179, 8: 179, 179, 179, 179, 179, 15: 179},
		{341, 350, 347, 4: 372, 349, 702, 344, 13: 346, 16: 139, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355, 61: 701, 63: 700},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 665, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 698, 109: 330, 112: 329},
		// 415
		{16: 337, 19: 691, 110: 692},
		{308, 324, 307, 4: 323, 320, 328, 311, 9: 674, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 675, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{9: 655},
		{14, 14, 557, 4: 14, 14, 14, 14, 13: 14, 16: 16, 19: 16, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 61: 14, 63: 14},
		{308, 324, 307, 4: 323, 320, 328, 311, 9: 656, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 657, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		// 420
		{308, 324, 307, 4: 323, 320, 667, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 668, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{341, 350, 347, 4: 372, 349, 7: 344, 9: 658, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{308, 324, 307, 4: 323, 320, 659, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 660, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 665, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 664, 109: 330, 112: 329},
		{341, 350, 347, 4: 372, 349, 661, 344, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		// 425
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 662},
		{3: 663},
		{3: 180, 8: 180, 180, 180, 180, 180, 15: 180},
		{3: 666},
		{10, 10, 10, 10, 10, 10, 10, 10, 244, 14: 10, 18: 10, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 88: 245, 90: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		// 430
		{3: 181, 8: 181, 181, 181, 181, 181, 15: 181},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 665, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 672, 109: 330, 112: 329},
		{341, 350, 347, 4: 372, 349, 669, 344, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 670},
		{3: 671},
		// 435
		{3: 182, 8: 182, 182, 182, 182, 182, 15: 182},
		{3: 673},
		{3: 183, 8: 183, 183, 183, 183, 183, 15: 183},
		{308, 324, 307, 4: 323, 320, 684, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 685, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{341, 350, 347, 4: 372, 349, 7: 344, 9: 676, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		// 440
		{308, 324, 307, 4: 323, 320, 677, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 678, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 665, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 682, 109: 330, 112: 329},
		{341, 350, 347, 4: 372, 349, 679, 344, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 680},
		{3: 681},
		// 445
		{3: 184, 8: 184, 184, 184, 184, 184, 15: 184},
		{3: 683},
		{3: 185, 8: 185, 185, 185, 185, 185, 15: 185},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 665, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 689, 109: 330, 112: 329},
		{341, 350, 347, 4: 372, 349, 686, 344, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		// 450
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 687},
		{3: 688},
		{3: 186, 8: 186, 186, 186, 186, 186, 15: 186},
		{3: 690},
		{3: 187, 8: 187, 187, 187, 187, 187, 15: 187},
		// 455
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 694, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{14: 693},
		{16: 15, 19: 15, 61: 15},
		{341, 350, 347, 4: 372, 349, 695, 344, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 696},
		// 460
		{3: 697},
		{3: 189, 8: 189, 189, 189, 189, 189, 15: 189},
		{3: 699},
		{3: 190, 8: 190, 190, 190, 190, 190, 15: 190},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 706, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		// 465
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 705, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 703},
		{3: 704},
		{3: 188, 8: 188, 188, 188, 188, 188, 15: 188},
		{341, 350, 347, 196, 372, 349, 7: 344, 196, 196, 196, 196, 196, 346, 15: 196, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		// 470
		{341, 350, 347, 198, 372, 349, 7: 344, 198, 198, 198, 198, 198, 346, 15: 198, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{341, 350, 347, 4: 372, 349, 708, 344, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 709},
		{3: 710},
		{3: 193, 8: 193, 193, 193, 193, 193, 15: 193, 115: 193},
		// 475
		{6: 713, 90: 712},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 716, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 714},
		{3: 715},
		{3: 191, 8: 191, 191, 191, 191, 191, 15: 191, 115: 191},
		// 480
		{341, 350, 347, 4: 372, 349, 717, 344, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 718},
		{3: 719},
		{3: 192, 8: 192, 192, 192, 192, 192, 15: 192, 115: 192},
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 401, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 111: 723},
		// 485
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 401, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 111: 722},
		{3: 195, 8: 195, 195, 195, 195, 195, 15: 195, 337, 110: 404},
		{3: 197, 8: 197, 197, 197, 197, 197, 15: 197, 337, 110: 404},
		{16: 337, 61: 726, 110: 692},
		{16: 16, 61: 16},
		// 490
		{308, 324, 307, 4: 323, 320, 328, 311, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 401, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 111: 727},
		{3: 199, 8: 199, 199, 199, 199, 199, 15: 199, 337, 110: 404},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 729},
		{3: 730},
		{149: 731},
		// 495
		{6: 733, 14: 732},
		{6: 740},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 734},
		{3: 735},
		{3: 203, 8: 203, 203, 203, 203, 203, 15: 203, 140: 736},
		// 500
		{6: 737},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 738},
		{3: 739},
		{3: 205, 8: 205, 205, 205, 205, 205, 15: 205},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 741},
		// 505
		{3: 742},
		{3: 204, 8: 204, 204, 204, 204, 204, 15: 204, 140: 743},
		{6: 744},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 745},
		{3: 746},
		// 510
		{3: 206, 8: 206, 206, 206, 206, 206, 15: 206},
		{127, 127, 127, 208, 127, 127, 7: 127, 208, 208, 208, 208, 208, 127, 15: 208, 19: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		{126, 126, 126, 207, 126, 126, 7: 126, 207, 207, 207, 207, 207, 126, 15: 207, 19: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		{341, 350, 347, 4: 372, 349, 7: 344, 13: 346, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{127, 127, 127, 210, 127, 127, 7: 127, 210, 210, 210, 210, 210, 127, 15: 210, 19: 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127},
		// 515
		{126, 126, 126, 209, 126, 126, 7: 126, 209, 209, 209, 209, 209, 126, 15: 209, 19: 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126},
		{6: 753},
		{13, 13, 13, 13, 13, 13, 13, 13, 244, 241, 14: 13, 18: 13, 46: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 243, 242, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 105: 239, 240, 754},
		{3: 755},
		{3: 212, 8: 212, 212, 212, 212, 212, 15: 212},
		// 520
		{341, 350, 347, 213, 372, 349, 7: 344, 213, 213, 213, 213, 213, 346, 15: 213, 19: 345, 352, 348, 351, 360, 358, 343, 370, 373, 366, 365, 356, 359, 361, 363, 369, 364, 357, 342, 367, 371, 362, 368, 353, 354, 355},
		{3: 214, 8: 214, 214, 214, 214, 214, 15: 214},
		{3: 233, 8: 233, 10: 233, 233, 233},
		{308, 324, 307, 12, 323, 320, 328, 311, 12, 10: 12, 12, 12, 14: 319, 18: 327, 46: 321, 322, 313, 304, 312, 317, 325, 305, 326, 310, 318, 314, 315, 316, 62: 309, 64: 268, 292, 288, 290, 291, 301, 296, 302, 287, 306, 303, 293, 295, 283, 298, 299, 282, 297, 286, 300, 289, 294, 285, 284, 90: 278, 275, 263, 264, 270, 279, 269, 267, 265, 280, 281, 266, 271, 111: 276, 116: 274, 273, 272, 249, 123: 760, 250, 251, 261, 262, 256, 260, 255, 277, 254, 252, 259, 258, 253, 257},
		{3: 231, 8: 231, 231, 231, 231, 231},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 165

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			yyVAL.compstmt = nil
		}
	case 3:
		{
			yyVAL.compstmt = yyS[yypt-1].stmts
		}
	case 4:
		{
			yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyS[yypt-0].stmt}}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		{
			yyS[yypt-2].stmts.Stmts = append(yyS[yypt-2].stmts.Stmts, yyS[yypt-0].stmt)
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 6:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_var_or_lets
		}
	case 7:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_break
		}
	case 8:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_continue
		}
	case 9:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_return
		}
	case 10:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_throw
		}
	case 11:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_module
		}
	case 12:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 13:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_for
		}
	case 14:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_try
		}
	case 15:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_switch
		}
	case 16:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_select
		}
	case 17:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_go
		}
	case 18:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_defer
		}
	case 19:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_expr
		}
	case 20:
		{
			yyVAL.stmt_break = &ast.BreakStmt{}
			yyVAL.stmt_break.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 21:
		{
			yyVAL.stmt_continue = &ast.ContinueStmt{}
			yyVAL.stmt_continue.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 22:
		{
			yyVAL.stmt_return = &ast.ReturnStmt{Exprs: yyS[yypt-0].opt_exprs}
			yyVAL.stmt_return.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 23:
		{
			yyVAL.stmt_throw = &ast.ThrowStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt_throw.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 24:
		{
			yyVAL.stmt_module = &ast.ModuleStmt{Name: yyS[yypt-3].tok.Lit, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_module.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 25:
		{
			yyVAL.stmt_expr = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
			yyVAL.stmt_expr.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 26:
		{
			callExpr := yyS[yypt-0].expr_call
			callExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: callExpr}
			yyVAL.stmt_go.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 27:
		{
			anonCallExpr := yyS[yypt-0].expr_anon_call
			anonCallExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: anonCallExpr}
			yyVAL.stmt_go.SetPosition(yyS[yypt-1].tok.Position())
		}
	case 28:
		{
			callExpr := yyS[yypt-0].expr_call
			callExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: callExpr}
			yyVAL.stmt_defer.SetPosition(yyS[yypt-0].expr_call.Position())
		}
	case 29:
		{
			anonCallExpr := yyS[yypt-0].expr_anon_call
			anonCallExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: anonCallExpr}
			yyVAL.stmt_defer.SetPosition(yyS[yypt-0].expr_anon_call.Position())
		}
	case 30:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-10].compstmt, Var: yyS[yypt-7].tok.Lit, Catch: yyS[yypt-5].compstmt, Finally: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-12].tok.Position())
		}
	case 31:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-9].compstmt, Catch: yyS[yypt-5].compstmt, Finally: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-11].tok.Position())
		}
	case 32:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-6].compstmt, Var: yyS[yypt-3].tok.Lit, Catch: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 33:
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyS[yypt-5].compstmt, Catch: yyS[yypt-1].compstmt}
			yyVAL.stmt_try.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 34:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_var
		}
	case 35:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_typed_lets
		}
	case 36:
		{
			yyVAL.stmt_var_or_lets = yyS[yypt-0].stmt_lets
		}
	case 37:
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyS[yypt-2].expr_idents, Exprs: yyS[yypt-0].exprs}
			yyVAL.stmt_var.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 38:
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyS[yypt-2].expr}, Operator: "=", Rhss: []ast.Expr{yyS[yypt-0].expr}, Typed: true}
		}
	case 39:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs, Typed: true}
			}
			if len(yyS[yypt-2].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyS[yypt-2].exprs[0].Position())
			}
		}
	case 40:
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyS[yypt-2].expr}, Operator: "=", Rhss: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 41:
		{
			if len(yyS[yypt-2].exprs) == 2 && len(yyS[yypt-0].exprs) == 1 {
				if _, ok := yyS[yypt-0].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyS[yypt-2].exprs, Rhs: yyS[yypt-0].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyS[yypt-2].exprs, Operator: "=", Rhss: yyS[yypt-0].exprs}
			}
			if len(yyS[yypt-2].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyS[yypt-2].exprs[0].Position())
			}
		}
	case 42:
		{
			yyVAL.stmt_if = yyS[yypt-0].stmt_if_helper
			yyVAL.stmt_if.SetPosition(yyS[yypt-0].stmt_if_helper.Position())
		}
	case 43:
		{
			yyVAL.stmt_if_helper = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].compstmt, Else: nil}
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 44:
		{
			yyS[yypt-6].stmt_if_helper.(*ast.IfStmt).ElseIf = append(yyS[yypt-6].stmt_if_helper.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].compstmt})
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-6].stmt_if_helper.Position())
		}
	case 45:
		{
			yyVAL.stmt_if_helper.SetPosition(yyS[yypt-4].stmt_if_helper.Position())
			if yyVAL.stmt_if_helper.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if_helper.(*ast.IfStmt).Else = yyS[yypt-1].compstmt
			}
		}
	case 46:
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 47:
		{
			if len(yyS[yypt-5].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyS[yypt-5].expr_idents, Value: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
				yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
			}
		}
	case 48:
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 49:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 50:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 51:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyS[yypt-4].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 52:
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 53:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-5].stmt_var_or_lets, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 54:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-6].stmt_var_or_lets, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 55:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-6].stmt_var_or_lets, Expr2: yyS[yypt-4].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 56:
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyS[yypt-7].stmt_var_or_lets, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmt: yyS[yypt-1].compstmt}
			yyVAL.stmt_for.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 57:
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyS[yypt-1].stmt_select_content}
			yyVAL.stmt_select.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 58:
		{
			yyVAL.stmt_select_content = yyS[yypt-1].stmt_select_cases
		}
	case 59:
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 60:
		{
			yyVAL.stmt_select_cases = yyS[yypt-0].stmt_select_cases_helper
		}
	case 61:
		{
			yyVAL.stmt_select_cases_helper = yyS[yypt-0].stmt_select_body
		}
	case 62:
		{
			yyVAL.stmt_select_cases_helper.Cases = append(yyVAL.stmt_select_cases_helper.Cases, yyS[yypt-0].stmt_select_case)
		}
	case 63:
		{
			if yyVAL.stmt_select_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyVAL.stmt_select_cases_helper.Default = yyS[yypt-0].stmt_select_default
		}
	case 64:
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Default: yyS[yypt-0].stmt_select_default}
		}
	case 65:
		{
			yyVAL.stmt_select_body = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt_select_case}}
		}
	case 66:
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyS[yypt-2].stmt, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 67:
		{
			yyVAL.stmt_select_default = yyS[yypt-0].compstmt
		}
	case 68:
		{
			yyS[yypt-2].stmt_switch_cases.Expr = yyS[yypt-5].expr
			yyVAL.stmt_switch = yyS[yypt-2].stmt_switch_cases
			yyVAL.stmt_switch.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 69:
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 70:
		{
			yyVAL.stmt_switch_cases = yyS[yypt-0].stmt_switch_cases_helper
		}
	case 71:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Default: yyS[yypt-0].stmt_switch_default}
		}
	case 72:
		{
			yyVAL.stmt_switch_cases_helper = &ast.SwitchStmt{Cases: []ast.Stmt{yyS[yypt-0].stmt_switch_case}}
		}
	case 73:
		{
			yyS[yypt-1].stmt_switch_cases_helper.Cases = append(yyS[yypt-1].stmt_switch_cases_helper.Cases, yyS[yypt-0].stmt_switch_case)
			yyVAL.stmt_switch_cases_helper = yyS[yypt-1].stmt_switch_cases_helper
		}
	case 74:
		{
			if yyS[yypt-1].stmt_switch_cases_helper.Default != nil {
				yylex.Error("multiple default statement")
			}
			yyS[yypt-1].stmt_switch_cases_helper.Default = yyS[yypt-0].stmt_switch_default
		}
	case 75:
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyS[yypt-2].expr}, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 76:
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyS[yypt-2].opt_exprs, Stmt: yyS[yypt-0].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 77:
		{
			yyVAL.stmt_switch_default = yyS[yypt-0].compstmt
		}
	case 78:
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 79:
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 80:
		{
			yyVAL.opt_func_return_expr_idents = yyS[yypt-1].opt_func_return_expr_idents1
		}
	case 81:
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 82:
		{
			yyVAL.opt_func_return_expr_idents1 = yyS[yypt-0].opt_func_return_expr_idents2
		}
	case 83:
		{
			yyVAL.opt_func_return_expr_idents2 = []*ast.FuncReturnValuesExpr{{TypeData: yyS[yypt-0].type_data}}
		}
	case 84:
		{
			yyVAL.opt_func_return_expr_idents2 = append(yyS[yypt-2].opt_func_return_expr_idents2, &ast.FuncReturnValuesExpr{TypeData: yyS[yypt-0].type_data})
		}
	case 85:
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 86:
		{
			yyVAL.func_expr_idents = yyS[yypt-0].func_expr_idents_not_empty
		}
	case 87:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_idents_last_untyped
		}
	case 88:
		{
			yyVAL.func_expr_idents_not_empty = yyS[yypt-0].func_expr_typed_idents
		}
	case 89:
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyS[yypt-0].tok.Lit}
		}
	case 90:
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyS[yypt-1].tok.Lit, TypeData: yyS[yypt-0].type_data}
		}
	case 91:
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyS[yypt-0].func_expr_untyped_ident}
		}
	case 92:
		{
			yyVAL.func_expr_idents_last_untyped = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_untyped_ident)
		}
	case 93:
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyS[yypt-0].func_expr_typed_ident}
		}
	case 94:
		{
			yyVAL.func_expr_typed_idents = append(yyS[yypt-2].func_expr_idents_not_empty, yyS[yypt-0].func_expr_typed_ident)
		}
	case 95:
		{
			yyVAL.opt_exprs = nil
		}
	case 96:
		{
			yyVAL.opt_exprs = yyS[yypt-0].exprs
		}
	case 97:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 98:
		{
			if len(yyS[yypt-2].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr)
		}
	case 99:
		{
			if len(yyS[yypt-2].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyS[yypt-2].exprs, yyS[yypt-0].expr_ident)
		}
	case 100:
		{
			yyVAL.expr = yyS[yypt-0].expr_member_or_ident
		}
	case 101:
		{
			yyVAL.expr = yyS[yypt-0].expr_literals
		}
	case 102:
		{
			yyVAL.expr = yyS[yypt-0].expr_unary
		}
	case 103:
		{
			yyVAL.expr = yyS[yypt-0].expr_ternary
		}
	case 104:
		{
			yyVAL.expr = yyS[yypt-0].expr_nil_coalesce
		}
	case 105:
		{
			yyVAL.expr = yyS[yypt-0].expr_func
		}
	case 106:
		{
			yyVAL.expr = yyS[yypt-0].expr_array
		}
	case 107:
		{
			yyVAL.expr = yyS[yypt-0].expr_paren
		}
	case 108:
		{
			yyVAL.expr = yyS[yypt-0].expr_binary
		}
	case 109:
		{
			yyVAL.expr = yyS[yypt-0].expr_call
		}
	case 110:
		{
			yyVAL.expr = yyS[yypt-0].expr_anon_call
		}
	case 111:
		{
			yyVAL.expr = yyS[yypt-0].expr_item
		}
	case 112:
		{
			yyVAL.expr = yyS[yypt-0].expr_slice
		}
	case 113:
		{
			yyVAL.expr = yyS[yypt-0].expr_len
		}
	case 114:
		{
			yyVAL.expr = yyS[yypt-0].expr_dbg
		}
	case 115:
		{
			yyVAL.expr = yyS[yypt-0].expr_new
		}
	case 116:
		{
			yyVAL.expr = yyS[yypt-0].expr_make
		}
	case 117:
		{
			yyVAL.expr = yyS[yypt-0].expr_map
		}
	case 118:
		{
			yyVAL.expr = yyS[yypt-0].expr_opchan
		}
	case 119:
		{
			yyVAL.expr = yyS[yypt-0].expr_close
		}
	case 120:
		{
			yyVAL.expr = yyS[yypt-0].expr_delete
		}
	case 121:
		{
			yyVAL.expr = yyS[yypt-0].expr_in
		}
	case 122:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-2].tok.Position())
		}
	case 123:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 124:
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr_dbg.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 125:
		{
			yyVAL.expr_len = &ast.LenExpr{Expr: yyS[yypt-1].expr}
			yyVAL.expr_len.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 126:
		{
			yyVAL.expr_item = &ast.ItemExpr{Value: yyS[yypt-3].expr_ident, Index: yyS[yypt-1].expr}
			yyVAL.expr_item.SetPosition(yyS[yypt-3].expr_ident.Position())
		}
	case 127:
		{
			yyVAL.expr_item = &ast.ItemExpr{Value: yyS[yypt-3].expr, Index: yyS[yypt-1].expr}
			yyVAL.expr_item.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 128:
		{
			yyVAL.expr_paren = &ast.ParenExpr{SubExpr: yyS[yypt-1].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_paren.SetPosition(l.pos)
			}
		}
	case 129:
		{
			yyVAL.expr_array = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 130:
		{
			yyVAL.expr_array = &ast.ArrayExpr{Exprs: yyS[yypt-2].opt_exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 131:
		{
			yyVAL.expr_array = &ast.ArrayExpr{Exprs: yyS[yypt-2].opt_exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-5].type_data, Dimensions: yyS[yypt-6].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr_array.SetPosition(l.pos)
			}
		}
	case 132:
		{
			yyVAL.expr_nil_coalesce = &ast.NilCoalescingOpExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_nil_coalesce.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 133:
		{
			yyVAL.expr_ternary = &ast.TernaryOpExpr{Expr: yyS[yypt-4].expr, Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_ternary.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 134:
		{
			if yyS[yypt-1].type_data.Kind == ast.TypeDefault {
				yyS[yypt-1].type_data.Kind = ast.TypePtr
				yyVAL.expr_new = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			} else {
				yyVAL.expr_new = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-1].type_data}}
			}
			yyVAL.expr_new.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 135:
		{
			yyVAL.expr_opchan = &ast.ChanExpr{Lhs: yyS[yypt-2].expr, Rhs: yyS[yypt-0].expr}
			yyVAL.expr_opchan.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 136:
		{
			yyVAL.expr_opchan = &ast.ChanExpr{Rhs: yyS[yypt-0].expr}
			yyVAL.expr_opchan.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 137:
		{
			yyVAL.expr_in = &ast.IncludeExpr{ItemExpr: yyS[yypt-2].expr, ListExpr: &ast.SliceExpr{Value: yyS[yypt-0].expr, Begin: nil, End: nil}}
			yyVAL.expr_in.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 138:
		{
			yyVAL.expr_delete = &ast.DeleteExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr_delete.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 139:
		{
			yyVAL.expr_delete = &ast.DeleteExpr{WhatExpr: yyS[yypt-3].expr, KeyExpr: yyS[yypt-1].expr}
			yyVAL.expr_delete.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 140:
		{
			yyVAL.expr_close = &ast.CloseExpr{WhatExpr: yyS[yypt-1].expr}
			yyVAL.expr_close.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 141:
		{
			yyVAL.expr_literals = &ast.NumberExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 142:
		{
			yyVAL.expr_literals = &ast.StringExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 143:
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 144:
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 145:
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyS[yypt-0].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyS[yypt-0].tok.Position())
		}
	case 146:
		{
			yyVAL.expr_member_or_ident = yyS[yypt-0].expr_ident
		}
	case 147:
		{
			yyVAL.expr_member_or_ident = &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}
			yyVAL.expr_member_or_ident.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 148:
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyS[yypt-4].tok.Lit, SubExprs: yyS[yypt-2].exprs, VarArg: true}
			yyVAL.expr_call.SetPosition(yyS[yypt-4].tok.Position())
		}
	case 149:
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyS[yypt-3].tok.Lit, SubExprs: yyS[yypt-1].opt_exprs}
			yyVAL.expr_call.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 150:
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyS[yypt-4].expr, SubExprs: yyS[yypt-2].exprs, VarArg: true}
			yyVAL.expr_anon_call.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 151:
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].opt_exprs}
			yyVAL.expr_anon_call.SetPosition(yyS[yypt-3].expr.Position())
		}
	case 152:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 153:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 154:
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyS[yypt-0].expr}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr.Position())
		}
	case 155:
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: yyS[yypt-0].expr_ident}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_ident.Position())
		}
	case 156:
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 157:
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyS[yypt-0].expr_ident}
			yyVAL.expr_unary.SetPosition(yyS[yypt-0].expr_ident.Position())
		}
	case 158:
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyS[yypt-2].expr, Name: yyS[yypt-0].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 159:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "+", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 160:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "-", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 161:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "*", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 162:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "/", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 163:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "%", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 164:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "**", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 165:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 166:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">>", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 167:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "==", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 168:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "!=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 169:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 170:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: ">=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 171:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 172:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "<=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 173:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "+=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 174:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "-=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 175:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "*=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 176:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "/=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 177:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "&=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 178:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-2].expr, Operator: "|=", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 179:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "++"}
			yyVAL.expr_binary.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 180:
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyS[yypt-1].expr, Operator: "--"}
			yyVAL.expr_binary.SetPosition(yyS[yypt-1].expr.Position())
		}
	case 181:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "|", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 182:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "||", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 183:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 184:
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyS[yypt-2].expr, Operator: "&&", Rhs: yyS[yypt-0].expr}
			yyVAL.expr_binary.SetPosition(yyS[yypt-2].expr.Position())
		}
	case 185:
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-5].func_expr_idents, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt}
			yyVAL.expr_func.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 186:
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-6].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 187:
		{
			yyS[yypt-7].func_expr_idents_last_untyped[len(yyS[yypt-7].func_expr_idents_last_untyped)-1].TypeData = yyS[yypt-5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyS[yypt-7].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 188:
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-7].tok.Lit, Params: yyS[yypt-5].func_expr_idents, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt}
			yyVAL.expr_func.SetPosition(yyS[yypt-8].tok.Position())
		}
	case 189:
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-8].tok.Lit, Params: yyS[yypt-6].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-9].tok.Position())
		}
	case 190:
		{
			yyS[yypt-7].func_expr_idents_last_untyped[len(yyS[yypt-7].func_expr_idents_last_untyped)-1].TypeData = yyS[yypt-5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyS[yypt-9].tok.Lit, Params: yyS[yypt-7].func_expr_idents_last_untyped, Returns: yyS[yypt-3].opt_func_return_expr_idents, Stmt: yyS[yypt-1].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyS[yypt-10].tok.Position())
		}
	case 191:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-1].type_data}
			yyVAL.expr_make.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 192:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-3].type_data, LenExpr: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-5].tok.Position())
		}
	case 193:
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyS[yypt-5].type_data, LenExpr: yyS[yypt-3].expr, CapExpr: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 194:
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyS[yypt-3].tok.Lit, Type: yyS[yypt-1].expr}
			yyVAL.expr_make.SetPosition(yyS[yypt-6].tok.Position())
		}
	case 195:
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyS[yypt-0].tok.Lit}
		}
	case 196:
		{
			if yyS[yypt-2].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyS[yypt-2].type_data.Env = append(yyS[yypt-2].type_data.Env, yyS[yypt-2].type_data.Name)
				yyS[yypt-2].type_data.Name = yyS[yypt-0].tok.Lit
			}
		}
	case 197:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyS[yypt-0].type_data}
			}
		}
	case 198:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeSlice
				yyS[yypt-0].type_data.Dimensions = yyS[yypt-1].slice_count
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyS[yypt-0].type_data, Dimensions: yyS[yypt-1].slice_count}
			}
		}
	case 199:
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-2].type_data, SubType: yyS[yypt-0].type_data}
		}
	case 200:
		{
			if yyS[yypt-0].type_data.Kind == ast.TypeDefault {
				yyS[yypt-0].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyS[yypt-0].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyS[yypt-0].type_data}
			}
		}
	case 201:
		{
			yyVAL.type_data = yyS[yypt-2].type_data_struct
		}
	case 202:
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyS[yypt-1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyS[yypt-0].type_data}}
		}
	case 203:
		{
			if yyS[yypt-3].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyS[yypt-1].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyS[yypt-0].type_data)
		}
	case 204:
		{
			yyVAL.slice_count = 1
		}
	case 205:
		{
			yyVAL.slice_count = yyS[yypt-0].slice_count + 1
		}
	case 206:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-3].tok.Position())
		}
	case 207:
		{
			yyS[yypt-1].expr_map_content.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyS[yypt-5].type_data, SubType: yyS[yypt-3].type_data}
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-7].tok.Position())
		}
	case 208:
		{
			yyVAL.expr_map = yyS[yypt-1].expr_map_content
			yyVAL.expr_map.SetPosition(yyS[yypt-1].expr_map_content.Position())
		}
	case 209:
		{
			yyVAL.expr_map_content = &ast.MapExpr{}
		}
	case 210:
		{
			yyVAL.expr_map_content = yyS[yypt-1].expr_map_content_helper
		}
	case 211:
		{
			yyVAL.expr_map_content_helper = &ast.MapExpr{Keys: []ast.Expr{yyS[yypt-0].expr_map_key_value[0]}, Values: []ast.Expr{yyS[yypt-0].expr_map_key_value[1]}}
		}
	case 212:
		{
			if yyS[yypt-2].expr_map_content_helper.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map_content_helper.Keys = append(yyVAL.expr_map_content_helper.Keys, yyS[yypt-0].expr_map_key_value[0])
			yyVAL.expr_map_content_helper.Values = append(yyVAL.expr_map_content_helper.Values, yyS[yypt-0].expr_map_key_value[1])
		}
	case 213:
		{
			yyVAL.expr_map_key_value = []ast.Expr{yyS[yypt-2].expr, yyS[yypt-0].expr}
		}
	case 214:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-5].expr_ident, Begin: yyS[yypt-3].expr, End: yyS[yypt-1].expr}
			yyVAL.expr_slice.SetPosition(yyS[yypt-5].expr_ident.Position())
		}
	case 215:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-4].expr_ident, Begin: yyS[yypt-2].expr, End: nil}
			yyVAL.expr_slice.SetPosition(yyS[yypt-4].expr_ident.Position())
		}
	case 216:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-4].expr_ident, Begin: nil, End: yyS[yypt-1].expr}
			yyVAL.expr_slice.SetPosition(yyS[yypt-4].expr_ident.Position())
		}
	case 217:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-5].expr, Begin: yyS[yypt-3].expr, End: yyS[yypt-1].expr}
			yyVAL.expr_slice.SetPosition(yyS[yypt-5].expr.Position())
		}
	case 218:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-4].expr, Begin: yyS[yypt-2].expr, End: nil}
			yyVAL.expr_slice.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 219:
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyS[yypt-4].expr, Begin: nil, End: yyS[yypt-1].expr}
			yyVAL.expr_slice.SetPosition(yyS[yypt-4].expr.Position())
		}
	case 220:
		{
			yyVAL.expr_idents = []string{yyS[yypt-0].tok.Lit}
		}
	case 221:
		{
			yyVAL.expr_idents = append(yyS[yypt-2].expr_idents, yyS[yypt-0].tok.Lit)
		}
	case 222:
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyS[yypt-0].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyS[yypt-0].tok.Position())
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
