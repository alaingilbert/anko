// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/alaingilbert/anko/pkg/ast"
)

//line parser.go.y:58
type yySymType struct {
	yys                           int
	compstmt                      ast.Stmt
	stmts                         ast.Stmt
	stmt_var_or_lets              ast.Stmt
	stmt_var                      ast.Stmt
	stmt_lets                     ast.Stmt
	stmt_typed_lets               ast.Stmt
	stmt_try                      ast.Stmt
	stmt_defer                    ast.Stmt
	stmt_go                       ast.Stmt
	stmt_if                       ast.Stmt
	stmt_for                      ast.Stmt
	stmt_switch                   ast.Stmt
	stmt_switch_cases             ast.Stmt
	stmt_switch_case              ast.Stmt
	stmt_switch_default           ast.Stmt
	stmt_select                   ast.Stmt
	stmt_select_cases             *ast.SelectBodyStmt
	stmt_select_case              ast.Stmt
	stmt_select_default           ast.Stmt
	stmt                          ast.Stmt
	expr                          ast.Expr
	expr_dbg                      ast.Expr
	expr_literals                 ast.Expr
	expr_unary                    ast.Expr
	expr_binary                   ast.Expr
	expr_member_or_ident          ast.Expr
	expr_call                     *ast.CallExpr
	expr_anon_call                *ast.AnonCallExpr
	expr_func                     ast.Expr
	expr_make                     ast.Expr
	exprs                         []ast.Expr
	opt_exprs                     []ast.Expr
	expr_idents                   []string
	func_expr_idents              []*ast.ParamExpr
	func_expr_idents_not_empty    []*ast.ParamExpr
	func_expr_untyped_ident       *ast.ParamExpr
	func_expr_typed_ident         *ast.ParamExpr
	func_expr_idents_last_untyped []*ast.ParamExpr
	func_expr_typed_idents        []*ast.ParamExpr
	opt_func_return_expr_idents   []*ast.FuncReturnValuesExpr
	opt_func_return_expr_idents1  []*ast.FuncReturnValuesExpr
	expr_map                      *ast.MapExpr
	type_data                     *ast.TypeStruct
	type_data_struct              *ast.TypeStruct
	slice_count                   int
	tok                           ast.Token
	expr_slice                    ast.Expr
	expr_ident                    ast.Expr
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const POW = 57384
const SHIFTLEFT = 57385
const SHIFTRIGHT = 57386
const SWITCH = 57387
const SELECT = 57388
const CASE = 57389
const DEFAULT = 57390
const GO = 57391
const DEFER = 57392
const CHAN = 57393
const MAKE = 57394
const OPCHAN = 57395
const TYPE = 57396
const LEN = 57397
const DELETE = 57398
const CLOSE = 57399
const MAP = 57400
const STRUCT = 57401
const DBG = 57402
const WALRUS = 57403
const UNARY = 57404

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"POW",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"SELECT",
	"CASE",
	"DEFAULT",
	"GO",
	"DEFER",
	"CHAN",
	"MAKE",
	"OPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"STRUCT",
	"DBG",
	"WALRUS",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"';'",
	"','",
	"'('",
	"')'",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1183

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 3,
	78, 6,
	-2, 2,
	-1, 24,
	79, 88,
	-2, 20,
	-1, 118,
	79, 203,
	-2, 198,
	-1, 123,
	16, 68,
	79, 68,
	-2, 197,
	-1, 127,
	1, 21,
	47, 21,
	48, 21,
	63, 21,
	77, 21,
	78, 21,
	86, 21,
	-2, 102,
	-1, 128,
	1, 22,
	47, 22,
	48, 22,
	63, 22,
	77, 22,
	78, 22,
	86, 22,
	-2, 103,
	-1, 130,
	1, 23,
	47, 23,
	48, 23,
	63, 23,
	77, 23,
	78, 23,
	86, 23,
	-2, 102,
	-1, 131,
	1, 24,
	47, 24,
	48, 24,
	63, 24,
	77, 24,
	78, 24,
	86, 24,
	-2, 103,
	-1, 132,
	4, 186,
	51, 186,
	58, 186,
	59, 186,
	-2, 97,
	-1, 161,
	1, 137,
	8, 137,
	47, 137,
	48, 137,
	61, 137,
	62, 137,
	63, 137,
	76, 137,
	77, 137,
	78, 137,
	79, 137,
	81, 137,
	83, 137,
	86, 137,
	-2, 128,
	-1, 163,
	1, 139,
	8, 139,
	47, 139,
	48, 139,
	61, 139,
	62, 139,
	63, 139,
	76, 139,
	77, 139,
	78, 139,
	79, 139,
	81, 139,
	83, 139,
	86, 139,
	-2, 128,
	-1, 211,
	79, 204,
	-2, 201,
	-1, 263,
	81, 177,
	84, 177,
	-2, 197,
	-1, 281,
	79, 203,
	-2, 198,
	-1, 308,
	77, 211,
	-2, 203,
	-1, 315,
	1, 90,
	8, 90,
	47, 90,
	48, 90,
	61, 90,
	62, 90,
	63, 90,
	77, 90,
	78, 90,
	79, 90,
	81, 90,
	83, 90,
	86, 90,
	-2, 128,
	-1, 316,
	1, 138,
	8, 138,
	47, 138,
	48, 138,
	61, 138,
	62, 138,
	63, 138,
	76, 138,
	77, 138,
	78, 138,
	79, 138,
	81, 138,
	83, 138,
	86, 138,
	-2, 129,
	-1, 317,
	1, 140,
	8, 140,
	47, 140,
	48, 140,
	61, 140,
	62, 140,
	63, 140,
	76, 140,
	77, 140,
	78, 140,
	79, 140,
	81, 140,
	83, 140,
	86, 140,
	-2, 129,
	-1, 347,
	79, 203,
	-2, 198,
	-1, 349,
	79, 203,
	-2, 198,
	-1, 376,
	77, 209,
	-2, 204,
	-1, 400,
	79, 203,
	-2, 198,
}

const yyPrivate = 57344

const yyLast = 4045

var yyAct = [...]int16{
	2, 293, 379, 57, 238, 254, 251, 289, 290, 10,
	308, 354, 249, 6, 355, 248, 132, 9, 77, 9,
	9, 9, 224, 45, 416, 357, 356, 292, 291, 88,
	294, 9, 8, 96, 88, 420, 331, 9, 330, 465,
	75, 224, 224, 224, 433, 224, 363, 78, 230, 136,
	460, 24, 459, 111, 112, 96, 97, 98, 111, 112,
	96, 223, 427, 79, 9, 224, 9, 366, 224, 224,
	144, 90, 147, 86, 76, 89, 117, 120, 329, 125,
	142, 129, 129, 170, 93, 94, 95, 115, 227, 143,
	161, 163, 387, 90, 183, 86, 140, 89, 90, 166,
	86, 150, 89, 139, 141, 327, 385, 75, 224, 306,
	224, 158, 159, 160, 162, 164, 137, 304, 147, 210,
	224, 24, 340, 136, 148, 218, 431, 142, 325, 318,
	174, 175, 176, 177, 178, 180, 181, 77, 275, 185,
	186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
	196, 197, 198, 199, 200, 201, 202, 203, 204, 243,
	244, 205, 206, 207, 208, 184, 167, 75, 255, 216,
	140, 256, 267, 266, 269, 165, 169, 139, 141, 242,
	324, 274, 212, 263, 58, 59, 168, 152, 68, 151,
	137, 146, 232, 234, 155, 156, 213, 239, 145, 240,
	241, 142, 49, 60, 61, 62, 390, 157, 222, 320,
	276, 510, 157, 217, 509, 280, 259, 507, 503, 502,
	268, 501, 496, 136, 494, 40, 489, 273, 488, 480,
	140, 71, 53, 474, 47, 55, 54, 262, 141, 70,
	307, 305, 257, 402, 75, 213, 313, 63, 471, 65,
	264, 157, 157, 66, 470, 52, 172, 469, 454, 41,
	278, 39, 453, 282, 64, 285, 138, 136, 323, 315,
	140, 322, 448, 442, 440, 439, 438, 139, 141, 437,
	419, 302, 345, 410, 239, 394, 374, 344, 163, 341,
	137, 335, 333, 314, 286, 277, 360, 359, 505, 381,
	77, 142, 362, 500, 498, 485, 483, 372, 463, 461,
	446, 423, 164, 229, 140, 403, 171, 126, 336, 173,
	337, 139, 141, 124, 451, 412, 499, 407, 75, 361,
	119, 348, 350, 149, 137, 391, 357, 356, 292, 291,
	24, 490, 352, 393, 382, 142, 81, 395, 396, 369,
	398, 386, 11, 319, 5, 477, 253, 377, 221, 73,
	378, 77, 411, 138, 138, 406, 138, 413, 405, 380,
	3, 365, 138, 133, 138, 72, 7, 44, 368, 389,
	43, 136, 122, 74, 343, 426, 332, 153, 430, 317,
	429, 428, 316, 297, 261, 138, 182, 75, 441, 401,
	443, 444, 154, 80, 447, 408, 1, 46, 449, 75,
	135, 128, 131, 452, 127, 130, 134, 367, 424, 252,
	250, 42, 37, 421, 458, 36, 48, 50, 140, 134,
	462, 38, 409, 35, 464, 139, 141, 288, 436, 21,
	353, 20, 18, 17, 22, 23, 472, 473, 137, 19,
	26, 475, 476, 138, 27, 25, 221, 4, 0, 142,
	220, 478, 482, 0, 484, 0, 0, 0, 486, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	492, 236, 0, 467, 495, 0, 497, 138, 0, 0,
	261, 245, 0, 0, 0, 211, 0, 0, 0, 504,
	0, 506, 0, 134, 239, 479, 508, 225, 226, 0,
	228, 0, 0, 0, 0, 0, 235, 0, 237, 0,
	0, 0, 0, 0, 134, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 134, 0, 0, 0, 260, 265,
	0, 0, 0, 0, 138, 138, 0, 279, 0, 0,
	0, 0, 0, 287, 0, 138, 0, 296, 0, 0,
	0, 0, 0, 299, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	134, 0, 138, 0, 138, 0, 134, 298, 0, 295,
	134, 0, 0, 0, 0, 0, 134, 138, 138, 0,
	0, 138, 138, 0, 0, 295, 0, 0, 0, 0,
	0, 0, 358, 321, 0, 0, 0, 0, 0, 0,
	0, 328, 0, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 375, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 384, 0, 0, 138, 211, 138,
	0, 0, 0, 0, 0, 134, 0, 0, 0, 0,
	0, 364, 0, 0, 0, 0, 373, 0, 0, 0,
	0, 0, 295, 0, 0, 376, 0, 404, 0, 383,
	0, 138, 0, 0, 0, 0, 0, 134, 0, 388,
	0, 415, 0, 138, 0, 0, 0, 138, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 211, 0, 211, 0, 0, 0,
	134, 0, 0, 0, 0, 0, 414, 0, 417, 0,
	0, 0, 295, 0, 134, 0, 0, 0, 0, 0,
	455, 425, 0, 0, 456, 0, 432, 0, 0, 0,
	0, 0, 0, 0, 69, 58, 59, 0, 0, 68,
	14, 56, 15, 28, 0, 29, 0, 211, 0, 0,
	0, 0, 0, 49, 60, 61, 62, 0, 16, 30,
	0, 0, 0, 134, 481, 0, 0, 134, 12, 13,
	0, 0, 0, 466, 0, 31, 32, 0, 0, 33,
	34, 0, 71, 53, 0, 47, 55, 54, 51, 0,
	70, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	65, 67, 0, 0, 66, 0, 52, 134, 0, 0,
	41, 0, 39, 0, 0, 64, 0, 491, 0, 0,
	0, 493, 0, 0, 0, 295, 88, 99, 100, 102,
	104, 114, 116, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 105, 106, 107, 108, 109, 110, 0, 0,
	111, 112, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 82, 83, 0, 84, 103, 101, 91, 92, 113,
	0, 93, 94, 95, 115, 0, 214, 0, 0, 0,
	90, 0, 86, 0, 89, 88, 99, 100, 102, 104,
	114, 116, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 105, 106, 107, 108, 109, 110, 0, 0, 111,
	112, 96, 97, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 103, 101, 91, 92, 113, 0,
	93, 94, 95, 115, 0, 0, 0, 0, 435, 90,
	434, 86, 0, 89, 88, 99, 100, 102, 104, 114,
	116, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	105, 106, 107, 108, 109, 110, 0, 0, 111, 112,
	96, 97, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 103, 101, 91, 92, 113, 0, 93,
	94, 95, 115, 0, 0, 0, 0, 312, 90, 311,
	86, 0, 89, 88, 99, 100, 102, 104, 114, 116,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 105,
	106, 107, 108, 109, 110, 0, 0, 111, 112, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	301, 84, 103, 101, 91, 92, 113, 0, 93, 94,
	95, 115, 0, 0, 0, 0, 0, 90, 0, 86,
	300, 89, 88, 99, 100, 102, 104, 114, 116, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 105, 106,
	107, 108, 109, 110, 0, 0, 111, 112, 96, 97,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 272,
	84, 103, 101, 91, 92, 113, 0, 93, 94, 95,
	115, 0, 0, 0, 0, 0, 90, 0, 86, 271,
	89, 88, 99, 100, 102, 104, 114, 116, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 105, 106, 107,
	108, 109, 110, 0, 0, 111, 112, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 82, 83, 0, 84,
	103, 101, 91, 92, 113, 0, 93, 94, 95, 115,
	0, 0, 0, 0, 0, 90, 0, 86, 0, 89,
	88, 99, 100, 102, 104, 114, 116, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 105, 106, 107, 108,
	109, 110, 0, 0, 111, 112, 96, 97, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 103,
	101, 91, 92, 113, 0, 93, 94, 95, 115, 0,
	0, 0, 0, 0, 90, 487, 86, 0, 89, 88,
	99, 100, 102, 104, 114, 116, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 105, 106, 107, 108, 109,
	110, 0, 0, 111, 112, 96, 97, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 103, 101,
	91, 92, 113, 0, 93, 94, 95, 115, 0, 0,
	0, 0, 0, 90, 468, 86, 0, 89, 88, 99,
	100, 102, 104, 114, 116, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 105, 106, 107, 108, 109, 110,
	0, 0, 111, 112, 96, 97, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 457, 84, 103, 101, 91,
	92, 113, 0, 93, 94, 95, 115, 0, 0, 0,
	0, 0, 90, 0, 86, 0, 89, 88, 99, 100,
	102, 104, 114, 116, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 105, 106, 107, 108, 109, 110, 0,
	0, 111, 112, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 450, 84, 103, 101, 91, 92,
	113, 0, 93, 94, 95, 115, 0, 0, 0, 0,
	0, 90, 0, 86, 0, 89, 88, 99, 100, 102,
	104, 114, 116, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 105, 106, 107, 108, 109, 110, 0, 0,
	111, 112, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 103, 101, 91, 92, 113,
	0, 93, 94, 95, 115, 0, 445, 0, 0, 0,
	90, 0, 86, 0, 89, 88, 99, 100, 102, 104,
	114, 116, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 105, 106, 107, 108, 109, 110, 0, 0, 111,
	112, 96, 97, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 103, 101, 91, 92, 113, 0,
	93, 94, 95, 115, 0, 0, 0, 0, 0, 90,
	422, 86, 0, 89, 88, 99, 100, 102, 104, 114,
	116, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	105, 106, 107, 108, 109, 110, 0, 0, 111, 112,
	96, 97, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 103, 101, 91, 92, 113, 0, 93,
	94, 95, 115, 0, 0, 0, 0, 0, 90, 0,
	86, 418, 89, 88, 99, 100, 102, 104, 114, 116,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 105,
	106, 107, 108, 109, 110, 0, 0, 111, 112, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 103, 101, 91, 92, 113, 0, 93, 94,
	95, 115, 0, 399, 0, 0, 0, 90, 0, 86,
	0, 89, 88, 99, 100, 102, 104, 114, 116, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 105, 106,
	107, 108, 109, 110, 0, 0, 111, 112, 96, 97,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	84, 103, 101, 91, 92, 113, 0, 93, 94, 95,
	115, 0, 397, 0, 0, 0, 90, 0, 86, 0,
	89, 88, 99, 100, 102, 104, 114, 116, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 105, 106, 107,
	108, 109, 110, 0, 0, 111, 112, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	103, 101, 91, 92, 113, 0, 93, 94, 95, 115,
	0, 0, 0, 0, 0, 90, 0, 86, 392, 89,
	88, 99, 100, 102, 104, 114, 116, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 105, 106, 107, 108,
	109, 110, 0, 0, 111, 112, 96, 97, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 103,
	101, 91, 92, 113, 0, 93, 94, 95, 115, 0,
	0, 0, 0, 0, 90, 0, 86, 371, 89, 88,
	99, 100, 102, 104, 114, 116, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 105, 106, 107, 108, 109,
	110, 0, 0, 111, 112, 96, 97, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 84, 103, 101,
	91, 92, 113, 0, 93, 94, 95, 115, 0, 0,
	0, 351, 0, 90, 0, 86, 0, 89, 88, 99,
	100, 102, 104, 114, 116, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 105, 106, 107, 108, 109, 110,
	0, 0, 111, 112, 96, 97, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 103, 101, 91,
	92, 113, 0, 93, 94, 95, 115, 0, 346, 0,
	0, 0, 90, 0, 86, 0, 89, 88, 99, 100,
	102, 104, 114, 116, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 105, 106, 107, 108, 109, 110, 0,
	0, 111, 112, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 103, 101, 91, 92,
	113, 0, 93, 94, 95, 115, 0, 342, 0, 0,
	0, 90, 0, 86, 0, 89, 88, 99, 100, 102,
	104, 114, 116, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 105, 106, 107, 108, 109, 110, 0, 0,
	111, 112, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 103, 101, 91, 92, 113,
	0, 93, 94, 95, 115, 0, 0, 0, 0, 0,
	90, 0, 86, 339, 89, 88, 99, 100, 102, 104,
	114, 116, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 105, 106, 107, 108, 109, 110, 0, 0, 111,
	112, 96, 97, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 103, 101, 91, 92, 113, 0,
	93, 94, 95, 115, 0, 334, 0, 0, 0, 90,
	0, 86, 0, 89, 88, 99, 100, 102, 104, 114,
	116, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	105, 106, 107, 108, 109, 110, 0, 0, 111, 112,
	96, 97, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 103, 101, 91, 92, 113, 0, 93,
	94, 95, 115, 0, 0, 0, 0, 0, 90, 326,
	86, 0, 89, 88, 99, 100, 102, 104, 114, 116,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 105,
	106, 107, 108, 109, 110, 0, 0, 111, 112, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 103, 101, 91, 92, 113, 0, 93, 94,
	95, 115, 0, 0, 0, 0, 0, 90, 310, 86,
	0, 89, 88, 99, 100, 102, 104, 114, 116, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 105, 106,
	107, 108, 109, 110, 0, 0, 111, 112, 96, 97,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 309,
	84, 103, 101, 91, 92, 113, 0, 93, 94, 95,
	115, 0, 0, 0, 0, 0, 90, 0, 86, 0,
	89, 88, 99, 100, 102, 104, 114, 116, 0, 0,
	0, 0, 85, 0, 0, 0, 0, 105, 106, 107,
	108, 109, 110, 0, 0, 111, 112, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 84,
	103, 101, 91, 92, 113, 0, 93, 94, 95, 115,
	0, 0, 0, 0, 0, 90, 303, 86, 0, 89,
	88, 99, 100, 102, 104, 114, 116, 0, 0, 0,
	0, 85, 0, 0, 0, 0, 105, 106, 107, 108,
	109, 110, 0, 0, 111, 112, 96, 97, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 84, 103,
	101, 91, 92, 113, 0, 93, 94, 95, 115, 0,
	0, 0, 283, 0, 90, 0, 86, 0, 89, 88,
	99, 100, 102, 104, 114, 116, 0, 0, 0, 0,
	85, 0, 0, 0, 0, 105, 106, 107, 108, 109,
	110, 0, 0, 111, 112, 96, 97, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 270, 84, 103, 101,
	91, 92, 113, 0, 93, 94, 95, 115, 0, 0,
	0, 0, 0, 90, 0, 86, 0, 89, 88, 99,
	100, 102, 104, 114, 116, 0, 0, 0, 0, 85,
	0, 0, 0, 0, 105, 106, 107, 108, 109, 110,
	0, 0, 111, 112, 96, 97, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 84, 103, 101, 91,
	92, 113, 0, 93, 94, 95, 115, 0, 0, 0,
	0, 0, 90, 231, 86, 0, 89, 88, 99, 100,
	102, 104, 114, 116, 0, 0, 0, 0, 85, 0,
	0, 0, 0, 105, 106, 107, 108, 109, 110, 0,
	0, 111, 112, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 84, 103, 101, 91, 92,
	113, 0, 93, 94, 95, 115, 0, 219, 0, 0,
	0, 90, 0, 86, 0, 89, 88, 99, 100, 102,
	104, 114, 116, 0, 0, 0, 0, 85, 0, 0,
	0, 0, 105, 106, 107, 108, 109, 110, 0, 0,
	111, 112, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 84, 103, 101, 91, 92, 113,
	0, 93, 94, 95, 115, 0, 209, 0, 0, 0,
	90, 0, 86, 0, 89, 88, 99, 100, 102, 104,
	114, 116, 0, 0, 0, 0, 85, 0, 0, 0,
	0, 105, 106, 107, 108, 109, 110, 0, 0, 111,
	112, 96, 97, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 84, 103, 101, 91, 92, 113, 0,
	93, 94, 95, 115, 0, 0, 0, 0, 0, 90,
	0, 86, 0, 89, 88, 99, 100, 102, 104, 114,
	116, 0, 0, 0, 0, 85, 0, 0, 0, 0,
	105, 106, 107, 108, 109, 110, 0, 0, 111, 112,
	96, 97, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 84, 103, 101, 91, 92, 113, 0, 93,
	94, 95, 115, 0, 0, 0, 0, 0, 90, 0,
	86, 0, 247, 88, 99, 100, 102, 104, 114, 116,
	0, 0, 0, 0, 85, 0, 0, 0, 0, 105,
	106, 107, 108, 109, 110, 0, 0, 111, 112, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 84, 103, 101, 91, 92, 113, 0, 93, 94,
	95, 115, 0, 0, 0, 0, 0, 90, 0, 86,
	0, 246, 88, 99, 100, 102, 104, 114, 116, 0,
	0, 0, 0, 85, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 111, 112, 96, 97,
	98, 0, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 263, 58, 59, 0, 0, 68, 0, 0,
	84, 103, 101, 91, 92, 113, 0, 93, 94, 95,
	115, 49, 60, 61, 62, 0, 90, 0, 86, 0,
	89, 0, 0, 0, 0, 0, 88, 99, 100, 102,
	104, 114, 116, 0, 0, 0, 0, 85, 0, 140,
	71, 53, 0, 47, 55, 54, 262, 141, 70, 0,
	111, 112, 96, 97, 98, 0, 63, 0, 65, 264,
	0, 0, 66, 0, 52, 0, 0, 0, 41, 258,
	39, 0, 0, 64, 84, 103, 101, 91, 92, 113,
	0, 93, 94, 95, 115, 0, 123, 58, 59, 0,
	90, 68, 86, 56, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 60, 61, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 58, 59, 0, 0, 68,
	0, 0, 0, 0, 71, 53, 0, 47, 55, 54,
	51, 0, 70, 49, 60, 61, 62, 0, 0, 0,
	63, 0, 65, 67, 0, 0, 66, 0, 118, 0,
	121, 0, 41, 0, 39, 0, 0, 64, 0, 0,
	0, 0, 71, 53, 0, 47, 55, 54, 51, 0,
	70, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	65, 67, 0, 0, 66, 0, 52, 0, 0, 0,
	41, 0, 39, 370, 0, 64, 69, 58, 59, 0,
	0, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 60, 61, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 69, 58, 59, 0, 0, 68,
	0, 0, 0, 0, 71, 53, 0, 47, 55, 54,
	51, 0, 70, 49, 60, 61, 62, 0, 0, 0,
	63, 0, 65, 67, 0, 0, 66, 0, 52, 0,
	0, 0, 41, 0, 39, 338, 0, 64, 0, 0,
	0, 0, 71, 53, 0, 47, 55, 54, 51, 0,
	70, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	65, 67, 0, 0, 66, 0, 52, 0, 284, 0,
	41, 0, 39, 0, 0, 64, 69, 58, 59, 0,
	0, 68, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 49, 60, 61, 62, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 69, 58, 59,
	0, 0, 68, 0, 71, 53, 0, 47, 55, 54,
	51, 0, 70, 0, 0, 233, 49, 60, 61, 62,
	63, 0, 65, 67, 0, 0, 66, 0, 52, 0,
	0, 0, 41, 0, 39, 0, 0, 64, 69, 58,
	59, 0, 0, 68, 0, 71, 53, 0, 47, 55,
	54, 51, 0, 70, 0, 0, 0, 49, 60, 61,
	62, 63, 0, 65, 67, 0, 0, 66, 0, 52,
	0, 215, 0, 41, 0, 39, 0, 0, 64, 69,
	58, 59, 0, 0, 68, 0, 71, 53, 0, 47,
	55, 54, 51, 0, 70, 0, 0, 179, 49, 60,
	61, 62, 63, 0, 65, 67, 0, 0, 66, 0,
	52, 0, 0, 0, 41, 0, 39, 0, 0, 64,
	69, 58, 59, 0, 0, 68, 0, 71, 53, 0,
	47, 55, 54, 51, 0, 70, 0, 0, 0, 49,
	60, 61, 62, 63, 0, 65, 67, 0, 0, 66,
	0, 52, 0, 0, 0, 41, 0, 39, 0, 0,
	64, 69, 58, 59, 0, 0, 68, 0, 71, 53,
	0, 47, 55, 54, 51, 0, 70, 0, 0, 0,
	49, 60, 61, 62, 63, 0, 65, 67, 0, 0,
	66, 0, 400, 0, 0, 0, 41, 0, 39, 0,
	0, 64, 69, 58, 59, 0, 0, 68, 0, 71,
	53, 0, 47, 55, 54, 51, 0, 70, 0, 0,
	0, 49, 60, 61, 62, 63, 0, 65, 67, 0,
	0, 66, 0, 349, 0, 0, 0, 41, 0, 39,
	0, 0, 64, 69, 58, 59, 0, 0, 68, 0,
	71, 53, 0, 47, 55, 54, 51, 0, 70, 0,
	0, 0, 49, 60, 61, 62, 63, 0, 65, 67,
	0, 0, 66, 0, 347, 0, 0, 0, 41, 0,
	39, 0, 0, 64, 0, 0, 0, 0, 0, 0,
	0, 71, 53, 0, 47, 55, 54, 51, 0, 70,
	0, 0, 88, 99, 100, 102, 104, 63, 116, 65,
	67, 0, 0, 66, 0, 281, 0, 0, 0, 41,
	0, 39, 0, 0, 64, 0, 111, 112, 96, 97,
	98, 0, 0, 0, 0, 0, 0, 88, 99, 100,
	102, 104, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 103, 101, 91, 92, 113, 88, 93, 94, 95,
	115, 111, 112, 96, 97, 98, 90, 0, 86, 0,
	89, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	111, 112, 96, 97, 98, 0, 103, 101, 91, 92,
	113, 0, 93, 94, 95, 115, 0, 0, 0, 0,
	0, 90, 0, 86, 0, 89, 0, 91, 92, 113,
	0, 93, 94, 95, 115, 0, 0, 0, 0, 0,
	90, 0, 86, 0, 89,
}

var yyPact = [...]int16{
	-65, -1000, -1000, 760, -65, -1000, -66, -66, -1000, -1000,
	-1000, -1000, -1000, -1000, 3695, 3695, 399, 332, -1000, -1000,
	-1000, -1000, -1000, -1000, 1185, -1000, -1000, -1000, 3695, 3332,
	247, 3695, 241, 3695, 3695, -1000, -1000, -1000, -1000, -67,
	377, 3695, -1000, -1000, -1000, -12, -1000, 118, -1000, 111,
	-1000, 42, -66, 3695, 109, 107, 398, 133, -1000, -1000,
	-1000, -1000, -1000, 3695, 3695, 3695, 3695, 3695, 95, 86,
	106, 96, -1000, 760, -66, -1000, -1000, 128, 2979, 2979,
	240, 243, 3695, 3695, 3695, 3695, 3654, 3695, 3695, 392,
	3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695,
	3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695,
	3695, -1000, -1000, 3695, 3695, 3695, 3695, 2910, -65, 166,
	840, 3613, 135, 86, -65, 2841, -66, -1000, -1000, 2979,
	-1000, -1000, -2, 3695, -66, -15, -1000, 377, 377, 6,
	377, 237, -35, 2772, 3572, 3695, 377, -66, 377, 3695,
	3186, 3695, 3695, 117, -1000, 3695, 3695, -66, -9, -9,
	-9, -12, 3117, -12, 3048, 352, 88, 3695, 3238, 119,
	-1000, -65, 3695, -65, 2979, 2979, 2703, 3260, 1116, 3695,
	3186, 18, -1000, 173, 57, 13, 13, 18, 18, 18,
	2979, 18, 18, 3960, 3960, 3960, 3960, 3960, 3960, 2979,
	2979, 2979, 2979, 2979, 2979, 13, 3906, 18, 3941, -65,
	218, -66, 3695, -66, -65, 3859, 2634, 3490, 217, -66,
	291, -1000, -49, -66, 389, -62, -62, 377, -62, -66,
	-2, -1000, 1047, 3695, 2565, 36, 3695, 26, -69, 2496,
	2427, 978, 3695, 128, 128, 3695, 388, 385, 48, 345,
	130, -1000, -1000, 377, -1000, 352, 172, 47, -1000, 2358,
	24, 377, -4, 86, 179, -43, 382, 215, 2289, 214,
	3695, -1000, 3452, 2220, 41, -1000, 212, -1000, 2151, 380,
	210, -65, 2082, 3818, 3777, 2013, 312, 289, -20, -1000,
	-1000, 266, 760, -37, -66, -66, 3695, -1000, -16, 374,
	-1000, 3370, 1944, -1000, -1000, -69, 377, 209, -66, 3695,
	-1000, -1000, 3695, 128, 2979, -12, -1000, -1000, 219, 263,
	-66, -62, 25, 343, 11, -1000, -1000, -1000, -15, 377,
	-1000, 3695, 127, -1000, -65, -1000, 3186, 1875, -1000, -1000,
	-1000, -1000, -65, -1000, -1000, 208, -65, -65, 1806, -65,
	1737, 3736, 239, -22, -1000, -1000, 264, 3695, 206, -1000,
	-1000, -65, 262, -1000, -66, -49, 377, -55, 377, 1668,
	-1000, -1000, 203, -41, -1000, 3695, -66, 2979, 1599, 235,
	-62, 377, 219, -19, 352, 219, 45, -1000, -39, 909,
	3695, 202, -1000, 199, -1000, 198, 197, -65, 196, -65,
	-65, 1530, 234, -65, 195, -1000, -1000, -65, 1461, 261,
	-1000, -1000, -65, 185, -62, 181, -66, -62, -1000, -1000,
	-66, 1392, -1000, -65, -29, -62, 233, 219, -1000, -1000,
	232, 219, -42, 377, -1000, 3695, 1323, -1000, -1000, -1000,
	-1000, 180, -1000, 177, 171, -65, -65, 156, -1000, -1000,
	-65, -65, -1000, -1000, -1000, 351, 3695, 3695, 152, -1000,
	-66, -65, 230, -65, 229, 219, -41, 1254, -1000, -1000,
	-1000, -1000, 151, 149, 310, -1000, -1000, 377, -69, 2979,
	-1000, 377, 147, -65, 145, -65, 228, -1000, -1000, 295,
	227, -62, 144, -62, -1000, 142, -1000, 141, -65, 222,
	-65, -1000, -1000, -1000, 140, -65, 137, -1000, 134, -1000,
	-1000,
}

var yyPgo = [...]int16{
	0, 0, 457, 9, 352, 455, 454, 450, 449, 445,
	444, 443, 442, 441, 440, 14, 11, 439, 437, 8,
	7, 3, 74, 47, 433, 380, 377, 431, 427, 426,
	425, 422, 421, 330, 15, 420, 6, 5, 12, 419,
	2, 418, 369, 417, 225, 4, 407, 23, 406, 370,
	354, 333, 1, 376, 32,
}

var yyR1 = [...]int8{
	0, 48, 1, 1, 2, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 10, 10, 9, 9, 8, 8, 8, 8, 4,
	4, 4, 5, 7, 7, 6, 6, 11, 11, 11,
	12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
	12, 17, 18, 18, 18, 18, 18, 19, 20, 13,
	14, 14, 14, 14, 14, 15, 15, 16, 33, 33,
	40, 40, 40, 41, 41, 41, 34, 34, 35, 35,
	36, 37, 38, 38, 39, 39, 22, 22, 21, 21,
	21, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	29, 29, 29, 30, 30, 30, 30, 30, 24, 24,
	25, 25, 26, 26, 31, 31, 31, 31, 31, 31,
	31, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 27, 27, 27,
	27, 27, 27, 28, 28, 28, 28, 42, 42, 42,
	42, 42, 42, 42, 43, 43, 44, 44, 45, 45,
	45, 46, 46, 46, 46, 46, 46, 47, 49, 49,
	50, 50, 50, 51, 51, 53, 53, 54, 52, 52,
	52, 52,
}

var yyR2 = [...]int8{
	0, 1, 1, 2, 2, 3, 0, 1, 1, 1,
	2, 2, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 2, 2, 2, 13, 12, 9, 8, 1,
	1, 1, 4, 3, 3, 3, 3, 5, 7, 5,
	4, 7, 5, 6, 7, 7, 8, 7, 8, 8,
	9, 6, 0, 1, 1, 2, 2, 4, 3, 7,
	0, 1, 1, 2, 2, 4, 4, 3, 1, 4,
	0, 1, 3, 0, 1, 4, 0, 1, 1, 1,
	1, 2, 1, 4, 1, 4, 0, 1, 1, 4,
	4, 1, 1, 1, 5, 3, 1, 2, 5, 7,
	3, 1, 1, 1, 4, 4, 1, 4, 1, 4,
	1, 6, 10, 5, 3, 2, 4, 4, 6, 3,
	3, 4, 4, 1, 1, 1, 1, 1, 1, 3,
	5, 4, 5, 4, 2, 2, 2, 2, 4, 2,
	4, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 3, 3, 3, 3, 8, 9, 10,
	9, 10, 11, 4, 6, 8, 7, 1, 3, 2,
	2, 5, 2, 6, 2, 5, 2, 3, 0, 3,
	6, 6, 5, 5, 6, 5, 5, 1, 0, 1,
	2, 1, 1, 0, 1, 1, 2, 1, 0, 2,
	1, 1,
}

var yyChk = [...]int16{
	-1000, -48, -1, -49, -2, -50, 78, -53, -54, 86,
	-3, -4, 38, 39, 10, 12, 28, -11, -12, -8,
	-13, -17, -10, -9, -23, -5, -7, -6, 13, 15,
	29, 45, 46, 49, 50, -24, -30, -31, -27, 82,
	-44, 80, -32, -25, -26, -47, -46, 55, -29, 23,
	-28, 58, 76, 53, 57, 56, 11, -21, 5, 6,
	24, 25, 26, 68, 85, 70, 74, 71, 9, 4,
	60, 52, -49, -50, -53, -54, -22, -21, -23, -23,
	4, 14, 61, 62, 64, 27, 82, 53, 16, 84,
	80, 67, 68, 71, 72, 73, 42, 43, 44, 17,
	18, 66, 19, 65, 20, 32, 33, 34, 35, 36,
	37, 40, 41, 69, 21, 74, 22, -23, 76, -33,
	-23, 78, -4, 4, 76, -23, 76, -25, -26, -23,
	-25, -26, 83, -51, -53, -42, 4, 71, -44, 58,
	51, 59, 82, -23, 82, 80, 80, 76, 82, -51,
	-23, 80, 80, -33, 4, 61, 62, 79, -23, -23,
	-23, -47, -23, -47, -23, 80, 4, 80, 80, 80,
	-3, 76, 13, 76, -23, -23, -23, -23, -23, 63,
	-23, -23, 4, -21, -22, -23, -23, -23, -23, -23,
	-23, -23, -23, -23, -23, -23, -23, -23, -23, -23,
	-23, -23, -23, -23, -23, -23, -23, -23, -23, 76,
	-1, -53, 16, 79, 76, 78, -23, 78, -1, 76,
	-51, -44, -22, 76, 84, -42, -42, 82, -42, 76,
	83, 81, -23, 63, -23, -42, -51, -42, -45, -23,
	-23, -23, 62, -21, -21, -51, 84, 84, -34, -38,
	-35, -36, -39, 4, -37, 80, -21, -22, 81, -23,
	-42, -44, 58, 4, 71, -42, 54, -1, -23, -1,
	63, 83, 63, -23, 8, 81, -1, 77, -23, -51,
	-1, 76, -23, 78, 78, -23, 77, -51, -18, -20,
	-19, 48, 47, -52, 79, -53, -51, 4, -42, -51,
	83, 63, -23, 81, 81, -45, 83, -52, 79, 63,
	81, 81, 79, -21, -23, -47, 4, 4, 81, 8,
	79, -42, -34, -38, 8, 81, 81, 81, -42, 82,
	81, 79, 4, 77, 76, 77, -23, -23, 83, 83,
	81, 77, 76, 4, 77, -1, 76, 76, -23, 76,
	-23, 78, 30, -14, -16, -15, 48, 47, -51, -19,
	-20, 63, -3, 83, -53, -22, 83, -43, 4, -23,
	83, 83, -52, -42, 77, -51, -53, -23, -23, -40,
	-42, 80, 81, -42, -51, 81, 8, 81, -42, -23,
	79, -1, 83, -1, 77, -1, -1, 76, -1, 76,
	76, -23, 4, 76, -51, -15, -16, 63, -23, -22,
	77, -1, 63, -52, -42, -51, 79, -42, 83, 77,
	76, -23, 81, 76, -41, -42, -40, 81, -36, -37,
	-40, 81, -42, 83, 81, 79, -23, 77, 77, 77,
	77, -1, 77, -1, -1, 76, 76, -1, 77, -1,
	63, 63, -1, 77, 77, -51, -51, 63, -1, 81,
	79, 76, -40, 76, -40, 81, -42, -23, 81, 77,
	77, 77, -1, -1, 77, -1, -1, 4, -45, -23,
	77, -51, -1, 76, -1, 76, -40, 81, 77, 77,
	31, -42, -52, -42, 77, -1, 77, -1, 76, 31,
	76, 77, 77, 77, -1, 76, -1, 77, -1, 77,
	77,
}

var yyDef = [...]int16{
	198, -2, 1, -2, 198, 199, 202, 201, 205, 207,
	4, 7, 8, 9, 86, 0, 0, 13, 14, 15,
	16, 17, 18, 19, -2, 29, 30, 31, 0, 0,
	0, 0, 0, 0, 0, 91, 92, 93, 96, 203,
	0, 0, 101, 102, 103, 128, 106, 0, 108, 0,
	110, 0, 203, 0, 0, 0, 0, 0, 123, 124,
	125, 126, 127, 0, 0, 0, 0, 0, 0, 197,
	0, 0, 3, 6, 200, 206, 10, 87, 88, 11,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 161, 162, 0, 0, 0, 0, 0, -2, 0,
	88, 0, 0, -2, 198, 0, 203, -2, -2, 0,
	-2, -2, -2, 86, 204, 0, 177, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 203, 0, 188,
	115, 0, 0, 0, 68, 0, 0, 203, 134, 135,
	136, -2, 0, -2, 0, 76, 0, 86, 0, 0,
	5, 198, 0, 198, 33, 35, 0, 95, 0, 0,
	114, 119, 129, 87, 0, 141, 142, 143, 144, 145,
	146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
	156, 157, 158, 159, 160, 163, 164, 165, 166, 198,
	0, -2, 0, 203, 198, 0, 0, 0, 0, 203,
	52, 187, 208, 203, 0, 179, 180, 0, 182, 203,
	186, 100, 0, 0, 0, 0, 188, 0, 208, 0,
	0, 0, 0, 34, 36, 0, 0, 0, 0, 78,
	77, 82, 79, 80, 84, 76, 87, 0, 120, 0,
	0, 0, 0, -2, 0, 0, 0, 0, 0, 0,
	0, 105, 0, 0, 0, 133, 0, 40, 0, 0,
	0, -2, 0, 0, 0, 0, 0, 60, 203, 53,
	54, 0, 6, 0, 211, 210, 86, 178, 0, 0,
	104, 0, 0, 107, 109, 208, 0, 0, -2, 0,
	116, 117, 0, 32, 89, -2, -2, -2, 70, 0,
	203, 81, 0, 78, 0, 131, 121, 122, 180, 0,
	173, 0, 0, 12, 198, 39, 94, 0, 195, 196,
	132, 37, 198, 69, 42, 0, 198, -2, 0, -2,
	0, 0, 0, 203, 61, 62, 0, 86, 0, 55,
	56, 198, 0, 98, 209, 208, 0, 203, 0, 0,
	192, 193, 0, 0, 113, 0, -2, 189, 0, 0,
	71, 73, 70, 0, 0, 70, 0, 130, 0, 0,
	0, 0, 194, 0, 43, 0, 0, 198, 0, 198,
	-2, 0, 0, 198, 0, 63, 64, 198, 88, 0,
	51, 58, 198, 0, 181, 0, 203, 184, 191, 111,
	203, 0, 118, 198, 0, 74, 0, 70, 83, 85,
	0, 70, 0, 0, 174, 0, 0, 38, 41, 44,
	45, 0, 47, 0, 0, 198, 198, 0, 59, 67,
	198, 198, 57, 99, 183, 0, 188, 0, 0, 72,
	203, 198, 0, 198, 0, 70, 181, 0, 176, 46,
	48, 49, 0, 0, 28, 65, 66, 0, 208, 190,
	167, 0, 0, 198, 0, 198, 0, 175, 50, 27,
	0, 185, 0, 75, 168, 0, 170, 0, 198, 0,
	198, 112, 169, 171, 0, 198, 0, 172, 0, 26,
	25,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	86, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 85, 3, 3, 3, 73, 74, 3,
	80, 81, 71, 67, 79, 68, 84, 72, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 63, 78,
	65, 62, 66, 64, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 82, 3, 83, 70, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 76, 69, 77,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	75,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:132
		{
			yyVAL.compstmt = nil
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:136
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:142
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:151
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 6:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:167
		{
			yyVAL.stmt = nil
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:168
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:170
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:175
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:180
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].opt_exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:185
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:190
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:195
		{
			yyVAL.stmt = yyDollar[1].stmt_if
			yyVAL.stmt.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:199
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:200
		{
			yyVAL.stmt = yyDollar[1].stmt_try
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:201
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:202
		{
			yyVAL.stmt = yyDollar[1].stmt_select
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:203
		{
			yyVAL.stmt = yyDollar[1].stmt_go
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:204
		{
			yyVAL.stmt = yyDollar[1].stmt_defer
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 21:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:213
		{
			callExpr := yyDollar[2].expr_call
			callExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: callExpr}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:220
		{
			anonCallExpr := yyDollar[2].expr_anon_call
			anonCallExpr.Go = true
			yyVAL.stmt_go = &ast.GoroutineStmt{Expr: anonCallExpr}
			yyVAL.stmt_go.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:229
		{
			callExpr := yyDollar[2].expr_call
			callExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: callExpr}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr_call.Position())
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:236
		{
			anonCallExpr := yyDollar[2].expr_anon_call
			anonCallExpr.Defer = true
			yyVAL.stmt_defer = &ast.DeferStmt{Expr: anonCallExpr}
			yyVAL.stmt_defer.SetPosition(yyDollar[2].expr_anon_call.Position())
		}
	case 25:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:245
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 26:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:250
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 27:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:255
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 28:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:260
		{
			yyVAL.stmt_try = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt_try.SetPosition(yyDollar[1].tok.Position())
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:266
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:267
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_typed_lets
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:268
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:272
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:279
		{
			yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}, Typed: true}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:283
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_typed_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
				}
			} else {
				yyVAL.stmt_typed_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs, Typed: true}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_typed_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:300
		{
			yyVAL.stmt_lets = &ast.LetsStmt{Lhss: []ast.Expr{yyDollar[1].expr}, Operator: "=", Rhss: []ast.Expr{yyDollar[3].expr}}
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:304
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{Lhss: yyDollar[1].exprs, Rhs: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{Lhss: yyDollar[1].exprs, Operator: "=", Rhss: yyDollar[3].exprs}
			}
			if len(yyDollar[1].exprs) > 0 {
				yyVAL.stmt_lets.SetPosition(yyDollar[1].exprs[0].Position())
			}
		}
	case 37:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:321
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:326
		{
			yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf = append(yyDollar[1].stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:331
		{
			yyVAL.stmt_if.SetPosition(yyDollar[1].stmt_if.Position())
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyDollar[4].compstmt
			}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:341
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:346
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:357
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:362
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:367
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:372
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:377
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:382
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:387
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:392
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 50:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:397
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 51:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:404
		{
			yyVAL.stmt_select = &ast.SelectStmt{Body: yyDollar[4].stmt_select_cases}
			yyVAL.stmt_select.SetPosition(yyDollar[1].tok.Position())
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:411
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{}
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:415
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Default: yyDollar[1].stmt_select_default}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:419
		{
			yyVAL.stmt_select_cases = &ast.SelectBodyStmt{Cases: []ast.Stmt{yyDollar[1].stmt_select_case}}
		}
	case 55:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:423
		{
			body := yyVAL.stmt_select_cases
			body.Cases = append(body.Cases, yyDollar[2].stmt_select_case)
		}
	case 56:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:428
		{
			body := yyVAL.stmt_select_cases
			if body.Default != nil {
				yylex.Error("multiple default statement")
			}
			body.Default = yyDollar[2].stmt_select_default
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:439
		{
			yyVAL.stmt_select_case = &ast.SelectCaseStmt{Expr: yyDollar[2].stmt, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_select_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:446
		{
			yyVAL.stmt_select_default = yyDollar[3].compstmt
		}
	case 59:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:452
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 60:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:461
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:465
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:469
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:473
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:479
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 65:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:490
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:495
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].opt_exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:502
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:508
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:512
		{
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:517
		{
			yyVAL.opt_func_return_expr_idents = nil
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:521
		{
			yyVAL.opt_func_return_expr_idents = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:525
		{
			yyVAL.opt_func_return_expr_idents = yyDollar[2].opt_func_return_expr_idents1
		}
	case 73:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:529
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{}
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:533
		{
			yyVAL.opt_func_return_expr_idents1 = []*ast.FuncReturnValuesExpr{{TypeData: yyDollar[1].type_data}}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:537
		{
			if len(yyDollar[1].opt_func_return_expr_idents1) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.opt_func_return_expr_idents1 = append(yyDollar[1].opt_func_return_expr_idents1, &ast.FuncReturnValuesExpr{TypeData: yyDollar[4].type_data})
		}
	case 76:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:545
		{
			yyVAL.func_expr_idents = []*ast.ParamExpr{}
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:548
		{
			yyVAL.func_expr_idents = yyDollar[1].func_expr_idents_not_empty
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:551
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_idents_last_untyped
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:552
		{
			yyVAL.func_expr_idents_not_empty = yyDollar[1].func_expr_typed_idents
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:556
		{
			yyVAL.func_expr_untyped_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit}
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:562
		{
			yyVAL.func_expr_typed_ident = &ast.ParamExpr{Name: yyDollar[1].tok.Lit, TypeData: yyDollar[2].type_data}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:568
		{
			yyVAL.func_expr_idents_last_untyped = []*ast.ParamExpr{yyDollar[1].func_expr_untyped_ident}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:572
		{
			yyVAL.func_expr_idents_last_untyped = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_untyped_ident)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:578
		{
			yyVAL.func_expr_typed_idents = []*ast.ParamExpr{yyDollar[1].func_expr_typed_ident}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:582
		{
			yyVAL.func_expr_typed_idents = append(yyDollar[1].func_expr_idents_not_empty, yyDollar[4].func_expr_typed_ident)
		}
	case 86:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:587
		{
			yyVAL.opt_exprs = nil
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:590
		{
			yyVAL.opt_exprs = yyDollar[1].exprs
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:594
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 89:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:598
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 90:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:605
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:613
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:614
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:615
		{
			yyVAL.expr = yyDollar[1].expr_unary
		}
	case 94:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:617
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, Lhs: yyDollar[3].expr, Rhs: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:622
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:626
		{
			yyVAL.expr = yyDollar[1].expr_func
		}
	case 97:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:628
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 98:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:633
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].opt_exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 99:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:638
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].opt_exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:643
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:647
		{
			yyVAL.expr = yyDollar[1].expr_binary
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:648
		{
			yyVAL.expr = yyDollar[1].expr_call
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:649
		{
			yyVAL.expr = yyDollar[1].expr_anon_call
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:651
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:656
		{
			yyVAL.expr = &ast.ItemExpr{Value: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:661
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 107:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:666
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:670
		{
			yyVAL.expr = yyDollar[1].expr_dbg
		}
	case 109:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:672
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:681
		{
			yyVAL.expr = yyDollar[1].expr_make
		}
	case 111:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:683
		{
			yyDollar[4].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: &ast.TypeStruct{Name: "interface"}, SubType: &ast.TypeStruct{Name: "interface"}}
			yyVAL.expr = yyDollar[4].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 112:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:689
		{
			yyDollar[8].expr_map.TypeData = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
			yyVAL.expr = yyDollar[8].expr_map
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:695
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 114:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:700
		{
			yyVAL.expr = &ast.ChanExpr{Lhs: yyDollar[1].expr, Rhs: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:705
		{
			yyVAL.expr = &ast.ChanExpr{Rhs: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 116:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:710
		{
			yyVAL.expr = &ast.CloseExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:715
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:720
		{
			yyVAL.expr = &ast.DeleteExpr{WhatExpr: yyDollar[3].expr, KeyExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:725
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: &ast.SliceExpr{Value: yyDollar[3].expr, Begin: nil, End: nil}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:732
		{
			yyVAL.expr_dbg = &ast.DbgExpr{}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 121:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:737
		{
			yyVAL.expr_dbg = &ast.DbgExpr{Expr: yyDollar[3].expr}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 122:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:742
		{
			yyVAL.expr_dbg = &ast.DbgExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_dbg.SetPosition(yyDollar[1].tok.Position())
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:749
		{
			yyVAL.expr_literals = &ast.NumberExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:754
		{
			yyVAL.expr_literals = &ast.StringExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:759
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:764
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:769
		{
			yyVAL.expr_literals = &ast.ConstExpr{Value: yyDollar[1].tok.Lit}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:775
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:777
		{
			yyVAL.expr_member_or_ident = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member_or_ident.SetPosition(yyDollar[1].expr.Position())
		}
	case 130:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:784
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr_call.SetPosition(yyDollar[1].tok.Position())
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:789
		{
			yyVAL.expr_call = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].opt_exprs}
			yyVAL.expr_call.SetPosition(yyDollar[1].tok.Position())
		}
	case 132:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:796
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr_anon_call.SetPosition(yyDollar[1].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:801
		{
			yyVAL.expr_anon_call = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].opt_exprs}
			yyVAL.expr_anon_call.SetPosition(yyDollar[1].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:808
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:813
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:818
		{
			yyVAL.expr_unary = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:823
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 138:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:828
		{
			yyVAL.expr_unary = &ast.AddrExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:833
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: yyDollar[2].expr_ident}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr_ident.Position())
		}
	case 140:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:838
		{
			yyVAL.expr_unary = &ast.DerefExpr{Expr: &ast.MemberExpr{Expr: yyDollar[2].expr, Name: yyDollar[4].tok.Lit}}
			yyVAL.expr_unary.SetPosition(yyDollar[2].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:845
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "+", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:850
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "-", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:855
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "*", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:860
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "/", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:865
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "%", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:870
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "**", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:875
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:880
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">>", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:885
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "==", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:890
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "!=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:895
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:900
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: ">=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:905
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:910
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "<=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:915
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "+=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:920
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "-=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:925
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "*=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:930
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "/=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:935
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "&=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:940
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "|=", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:945
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "++"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:950
		{
			yyVAL.expr_binary = &ast.AssocExpr{Lhs: yyDollar[1].expr, Operator: "--"}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:955
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "|", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:960
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "||", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:965
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:970
		{
			yyVAL.expr_binary = &ast.BinOpExpr{Lhs: yyDollar[1].expr, Operator: "&&", Rhs: yyDollar[3].expr}
			yyVAL.expr_binary.SetPosition(yyDollar[1].expr.Position())
		}
	case 167:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:977
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents, Returns: yyDollar[5].opt_func_return_expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 168:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:982
		{
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 169:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:987
		{
			yyDollar[3].func_expr_idents_last_untyped[len(yyDollar[3].func_expr_idents_last_untyped)-1].TypeData = yyDollar[5].type_data
			yyVAL.expr_func = &ast.FuncExpr{Params: yyDollar[3].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 170:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:993
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents, Returns: yyDollar[6].opt_func_return_expr_idents, Stmt: yyDollar[8].compstmt}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 171:
		yyDollar = yyS[yypt-10 : yypt+1]
//line parser.go.y:998
		{
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[7].opt_func_return_expr_idents, Stmt: yyDollar[9].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 172:
		yyDollar = yyS[yypt-11 : yypt+1]
//line parser.go.y:1003
		{
			yyDollar[4].func_expr_idents_last_untyped[len(yyDollar[4].func_expr_idents_last_untyped)-1].TypeData = yyDollar[6].type_data
			yyVAL.expr_func = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].func_expr_idents_last_untyped, Returns: yyDollar[8].opt_func_return_expr_idents, Stmt: yyDollar[10].compstmt, VarArg: true}
			yyVAL.expr_func.SetPosition(yyDollar[1].tok.Position())
		}
	case 173:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:1011
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 174:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1016
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 175:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:1021
		{
			yyVAL.expr_make = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:1026
		{
			yyVAL.expr_make = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr_make.SetPosition(yyDollar[1].tok.Position())
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1033
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1037
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1046
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1055
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 181:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1065
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 182:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1069
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 183:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1078
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1084
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1088
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:1098
		{
			yyVAL.slice_count = 1
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1102
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 188:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:1109
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 189:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1113
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 190:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1117
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 191:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1127
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1131
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 193:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1135
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 194:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:1139
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 195:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1143
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 196:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:1147
		{
			yyVAL.expr_slice = &ast.SliceExpr{Value: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:1153
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	}
	goto yystack /* stack new state and value */
}
